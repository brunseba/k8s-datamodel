{
  "cluster_info": {
    "version": [
      "unknown"
    ],
    "node_count": 1,
    "nodes": [
      "orbstack"
    ]
  },
  "export_timestamp": "2025-09-07T09:38:26.443753+00:00",
  "namespace_filter": null,
  "crds": [
    {
      "name": "aaqs.aaq.kubevirt.io",
      "group": "aaq.kubevirt.io",
      "version": "v1alpha1",
      "kind": "AAQ",
      "plural": "aaqs",
      "singular": "aaq",
      "scope": "Cluster",
      "creation_timestamp": "2025-09-06T12:58:08+00:00",
      "labels": {},
      "annotations": {
        "controller-gen.kubebuilder.io/version": "v0.14.0",
        "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"apiextensions.k8s.io/v1\",\"kind\":\"CustomResourceDefinition\",\"metadata\":{\"annotations\":{\"controller-gen.kubebuilder.io/version\":\"v0.14.0\"},\"name\":\"aaqs.aaq.kubevirt.io\"},\"spec\":{\"group\":\"aaq.kubevirt.io\",\"names\":{\"kind\":\"AAQ\",\"listKind\":\"AAQList\",\"plural\":\"aaqs\",\"shortNames\":[\"aaq\",\"aaqs\"],\"singular\":\"aaq\"},\"scope\":\"Cluster\",\"versions\":[{\"additionalPrinterColumns\":[{\"jsonPath\":\".metadata.creationTimestamp\",\"name\":\"Age\",\"type\":\"date\"},{\"jsonPath\":\".status.phase\",\"name\":\"Phase\",\"type\":\"string\"}],\"name\":\"v1alpha1\",\"schema\":{\"openAPIV3Schema\":{\"description\":\"AAQ is the AAQ Operator CRD\",\"properties\":{\"apiVersion\":{\"description\":\"APIVersion defines the versioned schema of this representation of an object.\\nServers should convert recognized schemas to the latest internal value, and\\nmay reject unrecognized values.\\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources\",\"type\":\"string\"},\"kind\":{\"description\":\"Kind is a string value representing the REST resource this object represents.\\nServers may infer this from the endpoint the client submits requests to.\\nCannot be updated.\\nIn CamelCase.\\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\",\"type\":\"string\"},\"metadata\":{\"type\":\"object\"},\"spec\":{\"description\":\"AAQSpec defines our specification for the AAQ installation\",\"properties\":{\"certConfig\":{\"description\":\"certificate configuration\",\"properties\":{\"ca\":{\"description\":\"CA configuration\\nCA certs are kept in the CA bundle as long as they are valid\",\"properties\":{\"duration\":{\"description\":\"The requested 'duration' (i.e. lifetime) of the Certificate.\",\"type\":\"string\"},\"renewBefore\":{\"description\":\"The amount of time before the currently issued certificate's `notAfter`\\ntime that we will begin to attempt to renew the certificate.\",\"type\":\"string\"}},\"type\":\"object\"},\"server\":{\"description\":\"Server configuration\\nCerts are rotated and discarded\",\"properties\":{\"duration\":{\"description\":\"The requested 'duration' (i.e. lifetime) of the Certificate.\",\"type\":\"string\"},\"renewBefore\":{\"description\":\"The amount of time before the currently issued certificate's `notAfter`\\ntime that we will begin to attempt to renew the certificate.\",\"type\":\"string\"}},\"type\":\"object\"}},\"type\":\"object\"},\"configuration\":{\"description\":\"holds aaq configurations.\",\"properties\":{\"allowApplicationAwareClusterResourceQuota\":{\"description\":\"AllowApplicationAwareClusterResourceQuota can be set to true to allow creation and management\\nof ApplicationAwareClusterResourceQuota. Defaults to false\",\"type\":\"boolean\"},\"sidecarEvaluators\":{\"description\":\"SidecarEvaluators allow custom quota counting for external operator\",\"items\":{\"description\":\"A single application container that you want to run within a pod.\",\"properties\":{\"args\":{\"description\":\"Arguments to the entrypoint.\\nThe container image's CMD is used if this is not provided.\\nVariable references $(VAR_NAME) are expanded using the container's environment. If a variable\\ncannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced\\nto a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. \\\"$$(VAR_NAME)\\\" will\\nproduce the string literal \\\"$(VAR_NAME)\\\". Escaped references will never be expanded, regardless\\nof whether the variable exists or not. Cannot be updated.\\nMore info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"command\":{\"description\":\"Entrypoint array. Not executed within a shell.\\nThe container image's ENTRYPOINT is used if this is not provided.\\nVariable references $(VAR_NAME) are expanded using the container's environment. If a variable\\ncannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced\\nto a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. \\\"$$(VAR_NAME)\\\" will\\nproduce the string literal \\\"$(VAR_NAME)\\\". Escaped references will never be expanded, regardless\\nof whether the variable exists or not. Cannot be updated.\\nMore info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"env\":{\"description\":\"List of environment variables to set in the container.\\nCannot be updated.\",\"items\":{\"description\":\"EnvVar represents an environment variable present in a Container.\",\"properties\":{\"name\":{\"description\":\"Name of the environment variable. Must be a C_IDENTIFIER.\",\"type\":\"string\"},\"value\":{\"description\":\"Variable references $(VAR_NAME) are expanded\\nusing the previously defined environment variables in the container and\\nany service environment variables. If a variable cannot be resolved,\\nthe reference in the input string will be unchanged. Double $$ are reduced\\nto a single $, which allows for escaping the $(VAR_NAME) syntax: i.e.\\n\\\"$$(VAR_NAME)\\\" will produce the string literal \\\"$(VAR_NAME)\\\".\\nEscaped references will never be expanded, regardless of whether the variable\\nexists or not.\\nDefaults to \\\"\\\".\",\"type\":\"string\"},\"valueFrom\":{\"description\":\"Source for the environment variable's value. Cannot be used if value is not empty.\",\"properties\":{\"configMapKeyRef\":{\"description\":\"Selects a key of a ConfigMap.\",\"properties\":{\"key\":{\"description\":\"The key to select.\",\"type\":\"string\"},\"name\":{\"default\":\"\",\"description\":\"Name of the referent.\\nThis field is effectively required, but due to backwards compatibility is\\nallowed to be empty. Instances of this type with an empty value here are\\nalmost certainly wrong.\\nTODO: Add other useful fields. apiVersion, kind, uid?\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\\nTODO: Drop `kubebuilder:default` when controller-gen doesn't need it https://github.com/kubernetes-sigs/kubebuilder/issues/3896.\",\"type\":\"string\"},\"optional\":{\"description\":\"Specify whether the ConfigMap or its key must be defined\",\"type\":\"boolean\"}},\"required\":[\"key\"],\"type\":\"object\",\"x-kubernetes-map-type\":\"atomic\"},\"fieldRef\":{\"description\":\"Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['\\u003cKEY\\u003e']`, `metadata.annotations['\\u003cKEY\\u003e']`,\\nspec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.\",\"properties\":{\"apiVersion\":{\"description\":\"Version of the schema the FieldPath is written in terms of, defaults to \\\"v1\\\".\",\"type\":\"string\"},\"fieldPath\":{\"description\":\"Path of the field to select in the specified API version.\",\"type\":\"string\"}},\"required\":[\"fieldPath\"],\"type\":\"object\",\"x-kubernetes-map-type\":\"atomic\"},\"resourceFieldRef\":{\"description\":\"Selects a resource of the container: only resources limits and requests\\n(limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.\",\"properties\":{\"containerName\":{\"description\":\"Container name: required for volumes, optional for env vars\",\"type\":\"string\"},\"divisor\":{\"anyOf\":[{\"type\":\"integer\"},{\"type\":\"string\"}],\"description\":\"Specifies the output format of the exposed resources, defaults to \\\"1\\\"\",\"pattern\":\"^(\\\\+|-)?(([0-9]+(\\\\.[0-9]*)?)|(\\\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\\\+|-)?(([0-9]+(\\\\.[0-9]*)?)|(\\\\.[0-9]+))))?$\",\"x-kubernetes-int-or-string\":true},\"resource\":{\"description\":\"Required: resource to select\",\"type\":\"string\"}},\"required\":[\"resource\"],\"type\":\"object\",\"x-kubernetes-map-type\":\"atomic\"},\"secretKeyRef\":{\"description\":\"Selects a key of a secret in the pod's namespace\",\"properties\":{\"key\":{\"description\":\"The key of the secret to select from.  Must be a valid secret key.\",\"type\":\"string\"},\"name\":{\"default\":\"\",\"description\":\"Name of the referent.\\nThis field is effectively required, but due to backwards compatibility is\\nallowed to be empty. Instances of this type with an empty value here are\\nalmost certainly wrong.\\nTODO: Add other useful fields. apiVersion, kind, uid?\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\\nTODO: Drop `kubebuilder:default` when controller-gen doesn't need it https://github.com/kubernetes-sigs/kubebuilder/issues/3896.\",\"type\":\"string\"},\"optional\":{\"description\":\"Specify whether the Secret or its key must be defined\",\"type\":\"boolean\"}},\"required\":[\"key\"],\"type\":\"object\",\"x-kubernetes-map-type\":\"atomic\"}},\"type\":\"object\"}},\"required\":[\"name\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-map-keys\":[\"name\"],\"x-kubernetes-list-type\":\"map\"},\"envFrom\":{\"description\":\"List of sources to populate environment variables in the container.\\nThe keys defined within a source must be a C_IDENTIFIER. All invalid keys\\nwill be reported as an event when the container is starting. When a key exists in multiple\\nsources, the value associated with the last source will take precedence.\\nValues defined by an Env with a duplicate key will take precedence.\\nCannot be updated.\",\"items\":{\"description\":\"EnvFromSource represents the source of a set of ConfigMaps\",\"properties\":{\"configMapRef\":{\"description\":\"The ConfigMap to select from\",\"properties\":{\"name\":{\"default\":\"\",\"description\":\"Name of the referent.\\nThis field is effectively required, but due to backwards compatibility is\\nallowed to be empty. Instances of this type with an empty value here are\\nalmost certainly wrong.\\nTODO: Add other useful fields. apiVersion, kind, uid?\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\\nTODO: Drop `kubebuilder:default` when controller-gen doesn't need it https://github.com/kubernetes-sigs/kubebuilder/issues/3896.\",\"type\":\"string\"},\"optional\":{\"description\":\"Specify whether the ConfigMap must be defined\",\"type\":\"boolean\"}},\"type\":\"object\",\"x-kubernetes-map-type\":\"atomic\"},\"prefix\":{\"description\":\"An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.\",\"type\":\"string\"},\"secretRef\":{\"description\":\"The Secret to select from\",\"properties\":{\"name\":{\"default\":\"\",\"description\":\"Name of the referent.\\nThis field is effectively required, but due to backwards compatibility is\\nallowed to be empty. Instances of this type with an empty value here are\\nalmost certainly wrong.\\nTODO: Add other useful fields. apiVersion, kind, uid?\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\\nTODO: Drop `kubebuilder:default` when controller-gen doesn't need it https://github.com/kubernetes-sigs/kubebuilder/issues/3896.\",\"type\":\"string\"},\"optional\":{\"description\":\"Specify whether the Secret must be defined\",\"type\":\"boolean\"}},\"type\":\"object\",\"x-kubernetes-map-type\":\"atomic\"}},\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"image\":{\"description\":\"Container image name.\\nMore info: https://kubernetes.io/docs/concepts/containers/images\\nThis field is optional to allow higher level config management to default or override\\ncontainer images in workload controllers like Deployments and StatefulSets.\",\"type\":\"string\"},\"imagePullPolicy\":{\"description\":\"Image pull policy.\\nOne of Always, Never, IfNotPresent.\\nDefaults to Always if :latest tag is specified, or IfNotPresent otherwise.\\nCannot be updated.\\nMore info: https://kubernetes.io/docs/concepts/containers/images#updating-images\",\"type\":\"string\"},\"lifecycle\":{\"description\":\"Actions that the management system should take in response to container lifecycle events.\\nCannot be updated.\",\"properties\":{\"postStart\":{\"description\":\"PostStart is called immediately after a container is created. If the handler fails,\\nthe container is terminated and restarted according to its restart policy.\\nOther management of the container blocks until the hook completes.\\nMore info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks\",\"properties\":{\"exec\":{\"description\":\"Exec specifies the action to take.\",\"properties\":{\"command\":{\"description\":\"Command is the command line to execute inside the container, the working directory for the\\ncommand  is root ('/') in the container's filesystem. The command is simply exec'd, it is\\nnot run inside a shell, so traditional shell instructions ('|', etc) won't work. To use\\na shell, you need to explicitly call out to that shell.\\nExit status of 0 is treated as live/healthy and non-zero is unhealthy.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"type\":\"object\"},\"httpGet\":{\"description\":\"HTTPGet specifies the http request to perform.\",\"properties\":{\"host\":{\"description\":\"Host name to connect to, defaults to the pod IP. You probably want to set\\n\\\"Host\\\" in httpHeaders instead.\",\"type\":\"string\"},\"httpHeaders\":{\"description\":\"Custom headers to set in the request. HTTP allows repeated headers.\",\"items\":{\"description\":\"HTTPHeader describes a custom header to be used in HTTP probes\",\"properties\":{\"name\":{\"description\":\"The header field name.\\nThis will be canonicalized upon output, so case-variant names will be understood as the same header.\",\"type\":\"string\"},\"value\":{\"description\":\"The header field value\",\"type\":\"string\"}},\"required\":[\"name\",\"value\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"path\":{\"description\":\"Path to access on the HTTP server.\",\"type\":\"string\"},\"port\":{\"anyOf\":[{\"type\":\"integer\"},{\"type\":\"string\"}],\"description\":\"Name or number of the port to access on the container.\\nNumber must be in the range 1 to 65535.\\nName must be an IANA_SVC_NAME.\",\"x-kubernetes-int-or-string\":true},\"scheme\":{\"description\":\"Scheme to use for connecting to the host.\\nDefaults to HTTP.\",\"type\":\"string\"}},\"required\":[\"port\"],\"type\":\"object\"},\"sleep\":{\"description\":\"Sleep represents the duration that the container should sleep before being terminated.\",\"properties\":{\"seconds\":{\"description\":\"Seconds is the number of seconds to sleep.\",\"format\":\"int64\",\"type\":\"integer\"}},\"required\":[\"seconds\"],\"type\":\"object\"},\"tcpSocket\":{\"description\":\"Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept\\nfor the backward compatibility. There are no validation of this field and\\nlifecycle hooks will fail in runtime when tcp handler is specified.\",\"properties\":{\"host\":{\"description\":\"Optional: Host name to connect to, defaults to the pod IP.\",\"type\":\"string\"},\"port\":{\"anyOf\":[{\"type\":\"integer\"},{\"type\":\"string\"}],\"description\":\"Number or name of the port to access on the container.\\nNumber must be in the range 1 to 65535.\\nName must be an IANA_SVC_NAME.\",\"x-kubernetes-int-or-string\":true}},\"required\":[\"port\"],\"type\":\"object\"}},\"type\":\"object\"},\"preStop\":{\"description\":\"PreStop is called immediately before a container is terminated due to an\\nAPI request or management event such as liveness/startup probe failure,\\npreemption, resource contention, etc. The handler is not called if the\\ncontainer crashes or exits. The Pod's termination grace period countdown begins before the\\nPreStop hook is executed. Regardless of the outcome of the handler, the\\ncontainer will eventually terminate within the Pod's termination grace\\nperiod (unless delayed by finalizers). Other management of the container blocks until the hook completes\\nor until the termination grace period is reached.\\nMore info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks\",\"properties\":{\"exec\":{\"description\":\"Exec specifies the action to take.\",\"properties\":{\"command\":{\"description\":\"Command is the command line to execute inside the container, the working directory for the\\ncommand  is root ('/') in the container's filesystem. The command is simply exec'd, it is\\nnot run inside a shell, so traditional shell instructions ('|', etc) won't work. To use\\na shell, you need to explicitly call out to that shell.\\nExit status of 0 is treated as live/healthy and non-zero is unhealthy.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"type\":\"object\"},\"httpGet\":{\"description\":\"HTTPGet specifies the http request to perform.\",\"properties\":{\"host\":{\"description\":\"Host name to connect to, defaults to the pod IP. You probably want to set\\n\\\"Host\\\" in httpHeaders instead.\",\"type\":\"string\"},\"httpHeaders\":{\"description\":\"Custom headers to set in the request. HTTP allows repeated headers.\",\"items\":{\"description\":\"HTTPHeader describes a custom header to be used in HTTP probes\",\"properties\":{\"name\":{\"description\":\"The header field name.\\nThis will be canonicalized upon output, so case-variant names will be understood as the same header.\",\"type\":\"string\"},\"value\":{\"description\":\"The header field value\",\"type\":\"string\"}},\"required\":[\"name\",\"value\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"path\":{\"description\":\"Path to access on the HTTP server.\",\"type\":\"string\"},\"port\":{\"anyOf\":[{\"type\":\"integer\"},{\"type\":\"string\"}],\"description\":\"Name or number of the port to access on the container.\\nNumber must be in the range 1 to 65535.\\nName must be an IANA_SVC_NAME.\",\"x-kubernetes-int-or-string\":true},\"scheme\":{\"description\":\"Scheme to use for connecting to the host.\\nDefaults to HTTP.\",\"type\":\"string\"}},\"required\":[\"port\"],\"type\":\"object\"},\"sleep\":{\"description\":\"Sleep represents the duration that the container should sleep before being terminated.\",\"properties\":{\"seconds\":{\"description\":\"Seconds is the number of seconds to sleep.\",\"format\":\"int64\",\"type\":\"integer\"}},\"required\":[\"seconds\"],\"type\":\"object\"},\"tcpSocket\":{\"description\":\"Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept\\nfor the backward compatibility. There are no validation of this field and\\nlifecycle hooks will fail in runtime when tcp handler is specified.\",\"properties\":{\"host\":{\"description\":\"Optional: Host name to connect to, defaults to the pod IP.\",\"type\":\"string\"},\"port\":{\"anyOf\":[{\"type\":\"integer\"},{\"type\":\"string\"}],\"description\":\"Number or name of the port to access on the container.\\nNumber must be in the range 1 to 65535.\\nName must be an IANA_SVC_NAME.\",\"x-kubernetes-int-or-string\":true}},\"required\":[\"port\"],\"type\":\"object\"}},\"type\":\"object\"}},\"type\":\"object\"},\"livenessProbe\":{\"description\":\"Periodic probe of container liveness.\\nContainer will be restarted if the probe fails.\\nCannot be updated.\\nMore info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes\",\"properties\":{\"exec\":{\"description\":\"Exec specifies the action to take.\",\"properties\":{\"command\":{\"description\":\"Command is the command line to execute inside the container, the working directory for the\\ncommand  is root ('/') in the container's filesystem. The command is simply exec'd, it is\\nnot run inside a shell, so traditional shell instructions ('|', etc) won't work. To use\\na shell, you need to explicitly call out to that shell.\\nExit status of 0 is treated as live/healthy and non-zero is unhealthy.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"type\":\"object\"},\"failureThreshold\":{\"description\":\"Minimum consecutive failures for the probe to be considered failed after having succeeded.\\nDefaults to 3. Minimum value is 1.\",\"format\":\"int32\",\"type\":\"integer\"},\"grpc\":{\"description\":\"GRPC specifies an action involving a GRPC port.\",\"properties\":{\"port\":{\"description\":\"Port number of the gRPC service. Number must be in the range 1 to 65535.\",\"format\":\"int32\",\"type\":\"integer\"},\"service\":{\"description\":\"Service is the name of the service to place in the gRPC HealthCheckRequest\\n(see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).\\n\\n\\nIf this is not specified, the default behavior is defined by gRPC.\",\"type\":\"string\"}},\"required\":[\"port\"],\"type\":\"object\"},\"httpGet\":{\"description\":\"HTTPGet specifies the http request to perform.\",\"properties\":{\"host\":{\"description\":\"Host name to connect to, defaults to the pod IP. You probably want to set\\n\\\"Host\\\" in httpHeaders instead.\",\"type\":\"string\"},\"httpHeaders\":{\"description\":\"Custom headers to set in the request. HTTP allows repeated headers.\",\"items\":{\"description\":\"HTTPHeader describes a custom header to be used in HTTP probes\",\"properties\":{\"name\":{\"description\":\"The header field name.\\nThis will be canonicalized upon output, so case-variant names will be understood as the same header.\",\"type\":\"string\"},\"value\":{\"description\":\"The header field value\",\"type\":\"string\"}},\"required\":[\"name\",\"value\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"path\":{\"description\":\"Path to access on the HTTP server.\",\"type\":\"string\"},\"port\":{\"anyOf\":[{\"type\":\"integer\"},{\"type\":\"string\"}],\"description\":\"Name or number of the port to access on the container.\\nNumber must be in the range 1 to 65535.\\nName must be an IANA_SVC_NAME.\",\"x-kubernetes-int-or-string\":true},\"scheme\":{\"description\":\"Scheme to use for connecting to the host.\\nDefaults to HTTP.\",\"type\":\"string\"}},\"required\":[\"port\"],\"type\":\"object\"},\"initialDelaySeconds\":{\"description\":\"Number of seconds after the container has started before liveness probes are initiated.\\nMore info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes\",\"format\":\"int32\",\"type\":\"integer\"},\"periodSeconds\":{\"description\":\"How often (in seconds) to perform the probe.\\nDefault to 10 seconds. Minimum value is 1.\",\"format\":\"int32\",\"type\":\"integer\"},\"successThreshold\":{\"description\":\"Minimum consecutive successes for the probe to be considered successful after having failed.\\nDefaults to 1. Must be 1 for liveness and startup. Minimum value is 1.\",\"format\":\"int32\",\"type\":\"integer\"},\"tcpSocket\":{\"description\":\"TCPSocket specifies an action involving a TCP port.\",\"properties\":{\"host\":{\"description\":\"Optional: Host name to connect to, defaults to the pod IP.\",\"type\":\"string\"},\"port\":{\"anyOf\":[{\"type\":\"integer\"},{\"type\":\"string\"}],\"description\":\"Number or name of the port to access on the container.\\nNumber must be in the range 1 to 65535.\\nName must be an IANA_SVC_NAME.\",\"x-kubernetes-int-or-string\":true}},\"required\":[\"port\"],\"type\":\"object\"},\"terminationGracePeriodSeconds\":{\"description\":\"Optional duration in seconds the pod needs to terminate gracefully upon probe failure.\\nThe grace period is the duration in seconds after the processes running in the pod are sent\\na termination signal and the time when the processes are forcibly halted with a kill signal.\\nSet this value longer than the expected cleanup time for your process.\\nIf this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this\\nvalue overrides the value provided by the pod spec.\\nValue must be non-negative integer. The value zero indicates stop immediately via\\nthe kill signal (no opportunity to shut down).\\nThis is a beta field and requires enabling ProbeTerminationGracePeriod feature gate.\\nMinimum value is 1. spec.terminationGracePeriodSeconds is used if unset.\",\"format\":\"int64\",\"type\":\"integer\"},\"timeoutSeconds\":{\"description\":\"Number of seconds after which the probe times out.\\nDefaults to 1 second. Minimum value is 1.\\nMore info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes\",\"format\":\"int32\",\"type\":\"integer\"}},\"type\":\"object\"},\"name\":{\"description\":\"Name of the container specified as a DNS_LABEL.\\nEach container in a pod must have a unique name (DNS_LABEL).\\nCannot be updated.\",\"type\":\"string\"},\"ports\":{\"description\":\"List of ports to expose from the container. Not specifying a port here\\nDOES NOT prevent that port from being exposed. Any port which is\\nlistening on the default \\\"0.0.0.0\\\" address inside a container will be\\naccessible from the network.\\nModifying this array with strategic merge patch may corrupt the data.\\nFor more information See https://github.com/kubernetes/kubernetes/issues/108255.\\nCannot be updated.\",\"items\":{\"description\":\"ContainerPort represents a network port in a single container.\",\"properties\":{\"containerPort\":{\"description\":\"Number of port to expose on the pod's IP address.\\nThis must be a valid port number, 0 \\u003c x \\u003c 65536.\",\"format\":\"int32\",\"type\":\"integer\"},\"hostIP\":{\"description\":\"What host IP to bind the external port to.\",\"type\":\"string\"},\"hostPort\":{\"description\":\"Number of port to expose on the host.\\nIf specified, this must be a valid port number, 0 \\u003c x \\u003c 65536.\\nIf HostNetwork is specified, this must match ContainerPort.\\nMost containers do not need this.\",\"format\":\"int32\",\"type\":\"integer\"},\"name\":{\"description\":\"If specified, this must be an IANA_SVC_NAME and unique within the pod. Each\\nnamed port in a pod must have a unique name. Name for the port that can be\\nreferred to by services.\",\"type\":\"string\"},\"protocol\":{\"default\":\"TCP\",\"description\":\"Protocol for port. Must be UDP, TCP, or SCTP.\\nDefaults to \\\"TCP\\\".\",\"type\":\"string\"}},\"required\":[\"containerPort\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-map-keys\":[\"containerPort\",\"protocol\"],\"x-kubernetes-list-type\":\"map\"},\"readinessProbe\":{\"description\":\"Periodic probe of container service readiness.\\nContainer will be removed from service endpoints if the probe fails.\\nCannot be updated.\\nMore info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes\",\"properties\":{\"exec\":{\"description\":\"Exec specifies the action to take.\",\"properties\":{\"command\":{\"description\":\"Command is the command line to execute inside the container, the working directory for the\\ncommand  is root ('/') in the container's filesystem. The command is simply exec'd, it is\\nnot run inside a shell, so traditional shell instructions ('|', etc) won't work. To use\\na shell, you need to explicitly call out to that shell.\\nExit status of 0 is treated as live/healthy and non-zero is unhealthy.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"type\":\"object\"},\"failureThreshold\":{\"description\":\"Minimum consecutive failures for the probe to be considered failed after having succeeded.\\nDefaults to 3. Minimum value is 1.\",\"format\":\"int32\",\"type\":\"integer\"},\"grpc\":{\"description\":\"GRPC specifies an action involving a GRPC port.\",\"properties\":{\"port\":{\"description\":\"Port number of the gRPC service. Number must be in the range 1 to 65535.\",\"format\":\"int32\",\"type\":\"integer\"},\"service\":{\"description\":\"Service is the name of the service to place in the gRPC HealthCheckRequest\\n(see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).\\n\\n\\nIf this is not specified, the default behavior is defined by gRPC.\",\"type\":\"string\"}},\"required\":[\"port\"],\"type\":\"object\"},\"httpGet\":{\"description\":\"HTTPGet specifies the http request to perform.\",\"properties\":{\"host\":{\"description\":\"Host name to connect to, defaults to the pod IP. You probably want to set\\n\\\"Host\\\" in httpHeaders instead.\",\"type\":\"string\"},\"httpHeaders\":{\"description\":\"Custom headers to set in the request. HTTP allows repeated headers.\",\"items\":{\"description\":\"HTTPHeader describes a custom header to be used in HTTP probes\",\"properties\":{\"name\":{\"description\":\"The header field name.\\nThis will be canonicalized upon output, so case-variant names will be understood as the same header.\",\"type\":\"string\"},\"value\":{\"description\":\"The header field value\",\"type\":\"string\"}},\"required\":[\"name\",\"value\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"path\":{\"description\":\"Path to access on the HTTP server.\",\"type\":\"string\"},\"port\":{\"anyOf\":[{\"type\":\"integer\"},{\"type\":\"string\"}],\"description\":\"Name or number of the port to access on the container.\\nNumber must be in the range 1 to 65535.\\nName must be an IANA_SVC_NAME.\",\"x-kubernetes-int-or-string\":true},\"scheme\":{\"description\":\"Scheme to use for connecting to the host.\\nDefaults to HTTP.\",\"type\":\"string\"}},\"required\":[\"port\"],\"type\":\"object\"},\"initialDelaySeconds\":{\"description\":\"Number of seconds after the container has started before liveness probes are initiated.\\nMore info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes\",\"format\":\"int32\",\"type\":\"integer\"},\"periodSeconds\":{\"description\":\"How often (in seconds) to perform the probe.\\nDefault to 10 seconds. Minimum value is 1.\",\"format\":\"int32\",\"type\":\"integer\"},\"successThreshold\":{\"description\":\"Minimum consecutive successes for the probe to be considered successful after having failed.\\nDefaults to 1. Must be 1 for liveness and startup. Minimum value is 1.\",\"format\":\"int32\",\"type\":\"integer\"},\"tcpSocket\":{\"description\":\"TCPSocket specifies an action involving a TCP port.\",\"properties\":{\"host\":{\"description\":\"Optional: Host name to connect to, defaults to the pod IP.\",\"type\":\"string\"},\"port\":{\"anyOf\":[{\"type\":\"integer\"},{\"type\":\"string\"}],\"description\":\"Number or name of the port to access on the container.\\nNumber must be in the range 1 to 65535.\\nName must be an IANA_SVC_NAME.\",\"x-kubernetes-int-or-string\":true}},\"required\":[\"port\"],\"type\":\"object\"},\"terminationGracePeriodSeconds\":{\"description\":\"Optional duration in seconds the pod needs to terminate gracefully upon probe failure.\\nThe grace period is the duration in seconds after the processes running in the pod are sent\\na termination signal and the time when the processes are forcibly halted with a kill signal.\\nSet this value longer than the expected cleanup time for your process.\\nIf this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this\\nvalue overrides the value provided by the pod spec.\\nValue must be non-negative integer. The value zero indicates stop immediately via\\nthe kill signal (no opportunity to shut down).\\nThis is a beta field and requires enabling ProbeTerminationGracePeriod feature gate.\\nMinimum value is 1. spec.terminationGracePeriodSeconds is used if unset.\",\"format\":\"int64\",\"type\":\"integer\"},\"timeoutSeconds\":{\"description\":\"Number of seconds after which the probe times out.\\nDefaults to 1 second. Minimum value is 1.\\nMore info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes\",\"format\":\"int32\",\"type\":\"integer\"}},\"type\":\"object\"},\"resizePolicy\":{\"description\":\"Resources resize policy for the container.\",\"items\":{\"description\":\"ContainerResizePolicy represents resource resize policy for the container.\",\"properties\":{\"resourceName\":{\"description\":\"Name of the resource to which this resource resize policy applies.\\nSupported values: cpu, memory.\",\"type\":\"string\"},\"restartPolicy\":{\"description\":\"Restart policy to apply when specified resource is resized.\\nIf not specified, it defaults to NotRequired.\",\"type\":\"string\"}},\"required\":[\"resourceName\",\"restartPolicy\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"resources\":{\"description\":\"Compute Resources required by this container.\\nCannot be updated.\\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/\",\"properties\":{\"claims\":{\"description\":\"Claims lists the names of resources, defined in spec.resourceClaims,\\nthat are used by this container.\\n\\n\\nThis is an alpha field and requires enabling the\\nDynamicResourceAllocation feature gate.\\n\\n\\nThis field is immutable. It can only be set for containers.\",\"items\":{\"description\":\"ResourceClaim references one entry in PodSpec.ResourceClaims.\",\"properties\":{\"name\":{\"description\":\"Name must match the name of one entry in pod.spec.resourceClaims of\\nthe Pod where this field is used. It makes that resource available\\ninside a container.\",\"type\":\"string\"}},\"required\":[\"name\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-map-keys\":[\"name\"],\"x-kubernetes-list-type\":\"map\"},\"limits\":{\"additionalProperties\":{\"anyOf\":[{\"type\":\"integer\"},{\"type\":\"string\"}],\"pattern\":\"^(\\\\+|-)?(([0-9]+(\\\\.[0-9]*)?)|(\\\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\\\+|-)?(([0-9]+(\\\\.[0-9]*)?)|(\\\\.[0-9]+))))?$\",\"x-kubernetes-int-or-string\":true},\"description\":\"Limits describes the maximum amount of compute resources allowed.\\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/\",\"type\":\"object\"},\"requests\":{\"additionalProperties\":{\"anyOf\":[{\"type\":\"integer\"},{\"type\":\"string\"}],\"pattern\":\"^(\\\\+|-)?(([0-9]+(\\\\.[0-9]*)?)|(\\\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\\\+|-)?(([0-9]+(\\\\.[0-9]*)?)|(\\\\.[0-9]+))))?$\",\"x-kubernetes-int-or-string\":true},\"description\":\"Requests describes the minimum amount of compute resources required.\\nIf Requests is omitted for a container, it defaults to Limits if that is explicitly specified,\\notherwise to an implementation-defined value. Requests cannot exceed Limits.\\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/\",\"type\":\"object\"}},\"type\":\"object\"},\"restartPolicy\":{\"description\":\"RestartPolicy defines the restart behavior of individual containers in a pod.\\nThis field may only be set for init containers, and the only allowed value is \\\"Always\\\".\\nFor non-init containers or when this field is not specified,\\nthe restart behavior is defined by the Pod's restart policy and the container type.\\nSetting the RestartPolicy as \\\"Always\\\" for the init container will have the following effect:\\nthis init container will be continually restarted on\\nexit until all regular containers have terminated. Once all regular\\ncontainers have completed, all init containers with restartPolicy \\\"Always\\\"\\nwill be shut down. This lifecycle differs from normal init containers and\\nis often referred to as a \\\"sidecar\\\" container. Although this init\\ncontainer still starts in the init container sequence, it does not wait\\nfor the container to complete before proceeding to the next init\\ncontainer. Instead, the next init container starts immediately after this\\ninit container is started, or after any startupProbe has successfully\\ncompleted.\",\"type\":\"string\"},\"securityContext\":{\"description\":\"SecurityContext defines the security options the container should be run with.\\nIf set, the fields of SecurityContext override the equivalent fields of PodSecurityContext.\\nMore info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/\",\"properties\":{\"allowPrivilegeEscalation\":{\"description\":\"AllowPrivilegeEscalation controls whether a process can gain more\\nprivileges than its parent process. This bool directly controls if\\nthe no_new_privs flag will be set on the container process.\\nAllowPrivilegeEscalation is true always when the container is:\\n1) run as Privileged\\n2) has CAP_SYS_ADMIN\\nNote that this field cannot be set when spec.os.name is windows.\",\"type\":\"boolean\"},\"appArmorProfile\":{\"description\":\"appArmorProfile is the AppArmor options to use by this container. If set, this profile\\noverrides the pod's appArmorProfile.\\nNote that this field cannot be set when spec.os.name is windows.\",\"properties\":{\"localhostProfile\":{\"description\":\"localhostProfile indicates a profile loaded on the node that should be used.\\nThe profile must be preconfigured on the node to work.\\nMust match the loaded name of the profile.\\nMust be set if and only if type is \\\"Localhost\\\".\",\"type\":\"string\"},\"type\":{\"description\":\"type indicates which kind of AppArmor profile will be applied.\\nValid options are:\\n  Localhost - a profile pre-loaded on the node.\\n  RuntimeDefault - the container runtime's default profile.\\n  Unconfined - no AppArmor enforcement.\",\"type\":\"string\"}},\"required\":[\"type\"],\"type\":\"object\"},\"capabilities\":{\"description\":\"The capabilities to add/drop when running containers.\\nDefaults to the default set of capabilities granted by the container runtime.\\nNote that this field cannot be set when spec.os.name is windows.\",\"properties\":{\"add\":{\"description\":\"Added capabilities\",\"items\":{\"description\":\"Capability represent POSIX capabilities type\",\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"drop\":{\"description\":\"Removed capabilities\",\"items\":{\"description\":\"Capability represent POSIX capabilities type\",\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"type\":\"object\"},\"privileged\":{\"description\":\"Run container in privileged mode.\\nProcesses in privileged containers are essentially equivalent to root on the host.\\nDefaults to false.\\nNote that this field cannot be set when spec.os.name is windows.\",\"type\":\"boolean\"},\"procMount\":{\"description\":\"procMount denotes the type of proc mount to use for the containers.\\nThe default is DefaultProcMount which uses the container runtime defaults for\\nreadonly paths and masked paths.\\nThis requires the ProcMountType feature flag to be enabled.\\nNote that this field cannot be set when spec.os.name is windows.\",\"type\":\"string\"},\"readOnlyRootFilesystem\":{\"description\":\"Whether this container has a read-only root filesystem.\\nDefault is false.\\nNote that this field cannot be set when spec.os.name is windows.\",\"type\":\"boolean\"},\"runAsGroup\":{\"description\":\"The GID to run the entrypoint of the container process.\\nUses runtime default if unset.\\nMay also be set in PodSecurityContext.  If set in both SecurityContext and\\nPodSecurityContext, the value specified in SecurityContext takes precedence.\\nNote that this field cannot be set when spec.os.name is windows.\",\"format\":\"int64\",\"type\":\"integer\"},\"runAsNonRoot\":{\"description\":\"Indicates that the container must run as a non-root user.\\nIf true, the Kubelet will validate the image at runtime to ensure that it\\ndoes not run as UID 0 (root) and fail to start the container if it does.\\nIf unset or false, no such validation will be performed.\\nMay also be set in PodSecurityContext.  If set in both SecurityContext and\\nPodSecurityContext, the value specified in SecurityContext takes precedence.\",\"type\":\"boolean\"},\"runAsUser\":{\"description\":\"The UID to run the entrypoint of the container process.\\nDefaults to user specified in image metadata if unspecified.\\nMay also be set in PodSecurityContext.  If set in both SecurityContext and\\nPodSecurityContext, the value specified in SecurityContext takes precedence.\\nNote that this field cannot be set when spec.os.name is windows.\",\"format\":\"int64\",\"type\":\"integer\"},\"seLinuxOptions\":{\"description\":\"The SELinux context to be applied to the container.\\nIf unspecified, the container runtime will allocate a random SELinux context for each\\ncontainer.  May also be set in PodSecurityContext.  If set in both SecurityContext and\\nPodSecurityContext, the value specified in SecurityContext takes precedence.\\nNote that this field cannot be set when spec.os.name is windows.\",\"properties\":{\"level\":{\"description\":\"Level is SELinux level label that applies to the container.\",\"type\":\"string\"},\"role\":{\"description\":\"Role is a SELinux role label that applies to the container.\",\"type\":\"string\"},\"type\":{\"description\":\"Type is a SELinux type label that applies to the container.\",\"type\":\"string\"},\"user\":{\"description\":\"User is a SELinux user label that applies to the container.\",\"type\":\"string\"}},\"type\":\"object\"},\"seccompProfile\":{\"description\":\"The seccomp options to use by this container. If seccomp options are\\nprovided at both the pod \\u0026 container level, the container options\\noverride the pod options.\\nNote that this field cannot be set when spec.os.name is windows.\",\"properties\":{\"localhostProfile\":{\"description\":\"localhostProfile indicates a profile defined in a file on the node should be used.\\nThe profile must be preconfigured on the node to work.\\nMust be a descending path, relative to the kubelet's configured seccomp profile location.\\nMust be set if type is \\\"Localhost\\\". Must NOT be set for any other type.\",\"type\":\"string\"},\"type\":{\"description\":\"type indicates which kind of seccomp profile will be applied.\\nValid options are:\\n\\n\\nLocalhost - a profile defined in a file on the node should be used.\\nRuntimeDefault - the container runtime default profile should be used.\\nUnconfined - no profile should be applied.\",\"type\":\"string\"}},\"required\":[\"type\"],\"type\":\"object\"},\"windowsOptions\":{\"description\":\"The Windows specific settings applied to all containers.\\nIf unspecified, the options from the PodSecurityContext will be used.\\nIf set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.\\nNote that this field cannot be set when spec.os.name is linux.\",\"properties\":{\"gmsaCredentialSpec\":{\"description\":\"GMSACredentialSpec is where the GMSA admission webhook\\n(https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the\\nGMSA credential spec named by the GMSACredentialSpecName field.\",\"type\":\"string\"},\"gmsaCredentialSpecName\":{\"description\":\"GMSACredentialSpecName is the name of the GMSA credential spec to use.\",\"type\":\"string\"},\"hostProcess\":{\"description\":\"HostProcess determines if a container should be run as a 'Host Process' container.\\nAll of a Pod's containers must have the same effective HostProcess value\\n(it is not allowed to have a mix of HostProcess containers and non-HostProcess containers).\\nIn addition, if HostProcess is true then HostNetwork must also be set to true.\",\"type\":\"boolean\"},\"runAsUserName\":{\"description\":\"The UserName in Windows to run the entrypoint of the container process.\\nDefaults to the user specified in image metadata if unspecified.\\nMay also be set in PodSecurityContext. If set in both SecurityContext and\\nPodSecurityContext, the value specified in SecurityContext takes precedence.\",\"type\":\"string\"}},\"type\":\"object\"}},\"type\":\"object\"},\"startupProbe\":{\"description\":\"StartupProbe indicates that the Pod has successfully initialized.\\nIf specified, no other probes are executed until this completes successfully.\\nIf this probe fails, the Pod will be restarted, just as if the livenessProbe failed.\\nThis can be used to provide different probe parameters at the beginning of a Pod's lifecycle,\\nwhen it might take a long time to load data or warm a cache, than during steady-state operation.\\nThis cannot be updated.\\nMore info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes\",\"properties\":{\"exec\":{\"description\":\"Exec specifies the action to take.\",\"properties\":{\"command\":{\"description\":\"Command is the command line to execute inside the container, the working directory for the\\ncommand  is root ('/') in the container's filesystem. The command is simply exec'd, it is\\nnot run inside a shell, so traditional shell instructions ('|', etc) won't work. To use\\na shell, you need to explicitly call out to that shell.\\nExit status of 0 is treated as live/healthy and non-zero is unhealthy.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"type\":\"object\"},\"failureThreshold\":{\"description\":\"Minimum consecutive failures for the probe to be considered failed after having succeeded.\\nDefaults to 3. Minimum value is 1.\",\"format\":\"int32\",\"type\":\"integer\"},\"grpc\":{\"description\":\"GRPC specifies an action involving a GRPC port.\",\"properties\":{\"port\":{\"description\":\"Port number of the gRPC service. Number must be in the range 1 to 65535.\",\"format\":\"int32\",\"type\":\"integer\"},\"service\":{\"description\":\"Service is the name of the service to place in the gRPC HealthCheckRequest\\n(see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).\\n\\n\\nIf this is not specified, the default behavior is defined by gRPC.\",\"type\":\"string\"}},\"required\":[\"port\"],\"type\":\"object\"},\"httpGet\":{\"description\":\"HTTPGet specifies the http request to perform.\",\"properties\":{\"host\":{\"description\":\"Host name to connect to, defaults to the pod IP. You probably want to set\\n\\\"Host\\\" in httpHeaders instead.\",\"type\":\"string\"},\"httpHeaders\":{\"description\":\"Custom headers to set in the request. HTTP allows repeated headers.\",\"items\":{\"description\":\"HTTPHeader describes a custom header to be used in HTTP probes\",\"properties\":{\"name\":{\"description\":\"The header field name.\\nThis will be canonicalized upon output, so case-variant names will be understood as the same header.\",\"type\":\"string\"},\"value\":{\"description\":\"The header field value\",\"type\":\"string\"}},\"required\":[\"name\",\"value\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"path\":{\"description\":\"Path to access on the HTTP server.\",\"type\":\"string\"},\"port\":{\"anyOf\":[{\"type\":\"integer\"},{\"type\":\"string\"}],\"description\":\"Name or number of the port to access on the container.\\nNumber must be in the range 1 to 65535.\\nName must be an IANA_SVC_NAME.\",\"x-kubernetes-int-or-string\":true},\"scheme\":{\"description\":\"Scheme to use for connecting to the host.\\nDefaults to HTTP.\",\"type\":\"string\"}},\"required\":[\"port\"],\"type\":\"object\"},\"initialDelaySeconds\":{\"description\":\"Number of seconds after the container has started before liveness probes are initiated.\\nMore info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes\",\"format\":\"int32\",\"type\":\"integer\"},\"periodSeconds\":{\"description\":\"How often (in seconds) to perform the probe.\\nDefault to 10 seconds. Minimum value is 1.\",\"format\":\"int32\",\"type\":\"integer\"},\"successThreshold\":{\"description\":\"Minimum consecutive successes for the probe to be considered successful after having failed.\\nDefaults to 1. Must be 1 for liveness and startup. Minimum value is 1.\",\"format\":\"int32\",\"type\":\"integer\"},\"tcpSocket\":{\"description\":\"TCPSocket specifies an action involving a TCP port.\",\"properties\":{\"host\":{\"description\":\"Optional: Host name to connect to, defaults to the pod IP.\",\"type\":\"string\"},\"port\":{\"anyOf\":[{\"type\":\"integer\"},{\"type\":\"string\"}],\"description\":\"Number or name of the port to access on the container.\\nNumber must be in the range 1 to 65535.\\nName must be an IANA_SVC_NAME.\",\"x-kubernetes-int-or-string\":true}},\"required\":[\"port\"],\"type\":\"object\"},\"terminationGracePeriodSeconds\":{\"description\":\"Optional duration in seconds the pod needs to terminate gracefully upon probe failure.\\nThe grace period is the duration in seconds after the processes running in the pod are sent\\na termination signal and the time when the processes are forcibly halted with a kill signal.\\nSet this value longer than the expected cleanup time for your process.\\nIf this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this\\nvalue overrides the value provided by the pod spec.\\nValue must be non-negative integer. The value zero indicates stop immediately via\\nthe kill signal (no opportunity to shut down).\\nThis is a beta field and requires enabling ProbeTerminationGracePeriod feature gate.\\nMinimum value is 1. spec.terminationGracePeriodSeconds is used if unset.\",\"format\":\"int64\",\"type\":\"integer\"},\"timeoutSeconds\":{\"description\":\"Number of seconds after which the probe times out.\\nDefaults to 1 second. Minimum value is 1.\\nMore info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes\",\"format\":\"int32\",\"type\":\"integer\"}},\"type\":\"object\"},\"stdin\":{\"description\":\"Whether this container should allocate a buffer for stdin in the container runtime. If this\\nis not set, reads from stdin in the container will always result in EOF.\\nDefault is false.\",\"type\":\"boolean\"},\"stdinOnce\":{\"description\":\"Whether the container runtime should close the stdin channel after it has been opened by\\na single attach. When stdin is true the stdin stream will remain open across multiple attach\\nsessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the\\nfirst client attaches to stdin, and then remains open and accepts data until the client disconnects,\\nat which time stdin is closed and remains closed until the container is restarted. If this\\nflag is false, a container processes that reads from stdin will never receive an EOF.\\nDefault is false\",\"type\":\"boolean\"},\"terminationMessagePath\":{\"description\":\"Optional: Path at which the file to which the container's termination message\\nwill be written is mounted into the container's filesystem.\\nMessage written is intended to be brief final status, such as an assertion failure message.\\nWill be truncated by the node if greater than 4096 bytes. The total message length across\\nall containers will be limited to 12kb.\\nDefaults to /dev/termination-log.\\nCannot be updated.\",\"type\":\"string\"},\"terminationMessagePolicy\":{\"description\":\"Indicate how the termination message should be populated. File will use the contents of\\nterminationMessagePath to populate the container status message on both success and failure.\\nFallbackToLogsOnError will use the last chunk of container log output if the termination\\nmessage file is empty and the container exited with an error.\\nThe log output is limited to 2048 bytes or 80 lines, whichever is smaller.\\nDefaults to File.\\nCannot be updated.\",\"type\":\"string\"},\"tty\":{\"description\":\"Whether this container should allocate a TTY for itself, also requires 'stdin' to be true.\\nDefault is false.\",\"type\":\"boolean\"},\"volumeDevices\":{\"description\":\"volumeDevices is the list of block devices to be used by the container.\",\"items\":{\"description\":\"volumeDevice describes a mapping of a raw block device within a container.\",\"properties\":{\"devicePath\":{\"description\":\"devicePath is the path inside of the container that the device will be mapped to.\",\"type\":\"string\"},\"name\":{\"description\":\"name must match the name of a persistentVolumeClaim in the pod\",\"type\":\"string\"}},\"required\":[\"devicePath\",\"name\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-map-keys\":[\"devicePath\"],\"x-kubernetes-list-type\":\"map\"},\"volumeMounts\":{\"description\":\"Pod volumes to mount into the container's filesystem.\\nCannot be updated.\",\"items\":{\"description\":\"VolumeMount describes a mounting of a Volume within a container.\",\"properties\":{\"mountPath\":{\"description\":\"Path within the container at which the volume should be mounted.  Must\\nnot contain ':'.\",\"type\":\"string\"},\"mountPropagation\":{\"description\":\"mountPropagation determines how mounts are propagated from the host\\nto container and the other way around.\\nWhen not set, MountPropagationNone is used.\\nThis field is beta in 1.10.\\nWhen RecursiveReadOnly is set to IfPossible or to Enabled, MountPropagation must be None or unspecified\\n(which defaults to None).\",\"type\":\"string\"},\"name\":{\"description\":\"This must match the Name of a Volume.\",\"type\":\"string\"},\"readOnly\":{\"description\":\"Mounted read-only if true, read-write otherwise (false or unspecified).\\nDefaults to false.\",\"type\":\"boolean\"},\"recursiveReadOnly\":{\"description\":\"RecursiveReadOnly specifies whether read-only mounts should be handled\\nrecursively.\\n\\n\\nIf ReadOnly is false, this field has no meaning and must be unspecified.\\n\\n\\nIf ReadOnly is true, and this field is set to Disabled, the mount is not made\\nrecursively read-only.  If this field is set to IfPossible, the mount is made\\nrecursively read-only, if it is supported by the container runtime.  If this\\nfield is set to Enabled, the mount is made recursively read-only if it is\\nsupported by the container runtime, otherwise the pod will not be started and\\nan error will be generated to indicate the reason.\\n\\n\\nIf this field is set to IfPossible or Enabled, MountPropagation must be set to\\nNone (or be unspecified, which defaults to None).\\n\\n\\nIf this field is not specified, it is treated as an equivalent of Disabled.\",\"type\":\"string\"},\"subPath\":{\"description\":\"Path within the volume from which the container's volume should be mounted.\\nDefaults to \\\"\\\" (volume's root).\",\"type\":\"string\"},\"subPathExpr\":{\"description\":\"Expanded path within the volume from which the container's volume should be mounted.\\nBehaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment.\\nDefaults to \\\"\\\" (volume's root).\\nSubPathExpr and SubPath are mutually exclusive.\",\"type\":\"string\"}},\"required\":[\"mountPath\",\"name\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-map-keys\":[\"mountPath\"],\"x-kubernetes-list-type\":\"map\"},\"workingDir\":{\"description\":\"Container's working directory.\\nIf not specified, the container runtime's default will be used, which\\nmight be configured in the container image.\\nCannot be updated.\",\"type\":\"string\"}},\"required\":[\"name\"],\"type\":\"object\"},\"type\":\"array\"},\"vmiCalculatorConfiguration\":{\"description\":\"VmiCalculatorConfiguration determine how resource allocation will be done with ApplicationAwareResourceQuota\",\"properties\":{\"configName\":{\"default\":\"DedicatedVirtualResources\",\"description\":\"ConfigName determine how resource allocation will be done with ApplicationAwareResourceQuota.\\nallowed values are: VmiPodUsage, VirtualResources, DedicatedVirtualResources or IgnoreVmiCalculator\",\"enum\":[\"VmiPodUsage\",\"VirtualResources\",\"DedicatedVirtualResources\",\"IgnoreVmiCalculator\"],\"type\":\"string\"}},\"type\":\"object\"}},\"type\":\"object\"},\"imagePullPolicy\":{\"description\":\"PullPolicy describes a policy for if/when to pull a container image\",\"enum\":[\"Always\",\"IfNotPresent\",\"Never\"],\"type\":\"string\"},\"infra\":{\"description\":\"Rules on which nodes AAQ infrastructure pods will be scheduled\",\"properties\":{\"affinity\":{\"description\":\"affinity enables pod affinity/anti-affinity placement expanding the types of constraints\\nthat can be expressed with nodeSelector.\\naffinity is going to be applied to the relevant kind of pods in parallel with nodeSelector\\nSee https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#affinity-and-anti-affinity\",\"properties\":{\"nodeAffinity\":{\"description\":\"Describes node affinity scheduling rules for the pod.\",\"properties\":{\"preferredDuringSchedulingIgnoredDuringExecution\":{\"description\":\"The scheduler will prefer to schedule pods to nodes that satisfy\\nthe affinity expressions specified by this field, but it may choose\\na node that violates one or more of the expressions. The node that is\\nmost preferred is the one with the greatest sum of weights, i.e.\\nfor each node that meets all of the scheduling requirements (resource\\nrequest, requiredDuringScheduling affinity expressions, etc.),\\ncompute a sum by iterating through the elements of this field and adding\\n\\\"weight\\\" to the sum if the node matches the corresponding matchExpressions; the\\nnode(s) with the highest sum are the most preferred.\",\"items\":{\"description\":\"An empty preferred scheduling term matches all objects with implicit weight 0\\n(i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).\",\"properties\":{\"preference\":{\"description\":\"A node selector term, associated with the corresponding weight.\",\"properties\":{\"matchExpressions\":{\"description\":\"A list of node selector requirements by node's labels.\",\"items\":{\"description\":\"A node selector requirement is a selector that contains values, a key, and an operator\\nthat relates the key and values.\",\"properties\":{\"key\":{\"description\":\"The label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"Represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.\",\"type\":\"string\"},\"values\":{\"description\":\"An array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. If the operator is Gt or Lt, the values\\narray must have a single element, which will be interpreted as an integer.\\nThis array is replaced during a strategic merge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"matchFields\":{\"description\":\"A list of node selector requirements by node's fields.\",\"items\":{\"description\":\"A node selector requirement is a selector that contains values, a key, and an operator\\nthat relates the key and values.\",\"properties\":{\"key\":{\"description\":\"The label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"Represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.\",\"type\":\"string\"},\"values\":{\"description\":\"An array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. If the operator is Gt or Lt, the values\\narray must have a single element, which will be interpreted as an integer.\\nThis array is replaced during a strategic merge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"type\":\"object\",\"x-kubernetes-map-type\":\"atomic\"},\"weight\":{\"description\":\"Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.\",\"format\":\"int32\",\"type\":\"integer\"}},\"required\":[\"preference\",\"weight\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"requiredDuringSchedulingIgnoredDuringExecution\":{\"description\":\"If the affinity requirements specified by this field are not met at\\nscheduling time, the pod will not be scheduled onto the node.\\nIf the affinity requirements specified by this field cease to be met\\nat some point during pod execution (e.g. due to an update), the system\\nmay or may not try to eventually evict the pod from its node.\",\"properties\":{\"nodeSelectorTerms\":{\"description\":\"Required. A list of node selector terms. The terms are ORed.\",\"items\":{\"description\":\"A null or empty node selector term matches no objects. The requirements of\\nthem are ANDed.\\nThe TopologySelectorTerm type implements a subset of the NodeSelectorTerm.\",\"properties\":{\"matchExpressions\":{\"description\":\"A list of node selector requirements by node's labels.\",\"items\":{\"description\":\"A node selector requirement is a selector that contains values, a key, and an operator\\nthat relates the key and values.\",\"properties\":{\"key\":{\"description\":\"The label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"Represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.\",\"type\":\"string\"},\"values\":{\"description\":\"An array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. If the operator is Gt or Lt, the values\\narray must have a single element, which will be interpreted as an integer.\\nThis array is replaced during a strategic merge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"matchFields\":{\"description\":\"A list of node selector requirements by node's fields.\",\"items\":{\"description\":\"A node selector requirement is a selector that contains values, a key, and an operator\\nthat relates the key and values.\",\"properties\":{\"key\":{\"description\":\"The label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"Represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.\",\"type\":\"string\"},\"values\":{\"description\":\"An array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. If the operator is Gt or Lt, the values\\narray must have a single element, which will be interpreted as an integer.\\nThis array is replaced during a strategic merge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"type\":\"object\",\"x-kubernetes-map-type\":\"atomic\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"nodeSelectorTerms\"],\"type\":\"object\",\"x-kubernetes-map-type\":\"atomic\"}},\"type\":\"object\"},\"podAffinity\":{\"description\":\"Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).\",\"properties\":{\"preferredDuringSchedulingIgnoredDuringExecution\":{\"description\":\"The scheduler will prefer to schedule pods to nodes that satisfy\\nthe affinity expressions specified by this field, but it may choose\\na node that violates one or more of the expressions. The node that is\\nmost preferred is the one with the greatest sum of weights, i.e.\\nfor each node that meets all of the scheduling requirements (resource\\nrequest, requiredDuringScheduling affinity expressions, etc.),\\ncompute a sum by iterating through the elements of this field and adding\\n\\\"weight\\\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the\\nnode(s) with the highest sum are the most preferred.\",\"items\":{\"description\":\"The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)\",\"properties\":{\"podAffinityTerm\":{\"description\":\"Required. A pod affinity term, associated with the corresponding weight.\",\"properties\":{\"labelSelector\":{\"description\":\"A label query over a set of resources, in this case pods.\\nIf it's null, this PodAffinityTerm matches with no Pods.\",\"properties\":{\"matchExpressions\":{\"description\":\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\",\"items\":{\"description\":\"A label selector requirement is a selector that contains values, a key, and an operator that\\nrelates the key and values.\",\"properties\":{\"key\":{\"description\":\"key is the label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"operator represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists and DoesNotExist.\",\"type\":\"string\"},\"values\":{\"description\":\"values is an array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. This array is replaced during a strategic\\nmerge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"matchLabels\":{\"additionalProperties\":{\"type\":\"string\"},\"description\":\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\\nmap is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the\\noperator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\",\"type\":\"object\"}},\"type\":\"object\",\"x-kubernetes-map-type\":\"atomic\"},\"matchLabelKeys\":{\"description\":\"MatchLabelKeys is a set of pod label keys to select which pods will\\nbe taken into consideration. The keys are used to lookup values from the\\nincoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`\\nto select the group of existing pods which pods will be taken into consideration\\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\\npod labels will be ignored. The default value is empty.\\nThe same key is forbidden to exist in both matchLabelKeys and labelSelector.\\nAlso, matchLabelKeys cannot be set when labelSelector isn't set.\\nThis is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"mismatchLabelKeys\":{\"description\":\"MismatchLabelKeys is a set of pod label keys to select which pods will\\nbe taken into consideration. The keys are used to lookup values from the\\nincoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`\\nto select the group of existing pods which pods will be taken into consideration\\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\\npod labels will be ignored. The default value is empty.\\nThe same key is forbidden to exist in both mismatchLabelKeys and labelSelector.\\nAlso, mismatchLabelKeys cannot be set when labelSelector isn't set.\\nThis is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"namespaceSelector\":{\"description\":\"A label query over the set of namespaces that the term applies to.\\nThe term is applied to the union of the namespaces selected by this field\\nand the ones listed in the namespaces field.\\nnull selector and null or empty namespaces list means \\\"this pod's namespace\\\".\\nAn empty selector ({}) matches all namespaces.\",\"properties\":{\"matchExpressions\":{\"description\":\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\",\"items\":{\"description\":\"A label selector requirement is a selector that contains values, a key, and an operator that\\nrelates the key and values.\",\"properties\":{\"key\":{\"description\":\"key is the label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"operator represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists and DoesNotExist.\",\"type\":\"string\"},\"values\":{\"description\":\"values is an array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. This array is replaced during a strategic\\nmerge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"matchLabels\":{\"additionalProperties\":{\"type\":\"string\"},\"description\":\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\\nmap is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the\\noperator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\",\"type\":\"object\"}},\"type\":\"object\",\"x-kubernetes-map-type\":\"atomic\"},\"namespaces\":{\"description\":\"namespaces specifies a static list of namespace names that the term applies to.\\nThe term is applied to the union of the namespaces listed in this field\\nand the ones selected by namespaceSelector.\\nnull or empty namespaces list and null namespaceSelector means \\\"this pod's namespace\\\".\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"topologyKey\":{\"description\":\"This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching\\nthe labelSelector in the specified namespaces, where co-located is defined as running on a node\\nwhose value of the label with key topologyKey matches that of any node on which any of the\\nselected pods is running.\\nEmpty topologyKey is not allowed.\",\"type\":\"string\"}},\"required\":[\"topologyKey\"],\"type\":\"object\"},\"weight\":{\"description\":\"weight associated with matching the corresponding podAffinityTerm,\\nin the range 1-100.\",\"format\":\"int32\",\"type\":\"integer\"}},\"required\":[\"podAffinityTerm\",\"weight\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"requiredDuringSchedulingIgnoredDuringExecution\":{\"description\":\"If the affinity requirements specified by this field are not met at\\nscheduling time, the pod will not be scheduled onto the node.\\nIf the affinity requirements specified by this field cease to be met\\nat some point during pod execution (e.g. due to a pod label update), the\\nsystem may or may not try to eventually evict the pod from its node.\\nWhen there are multiple elements, the lists of nodes corresponding to each\\npodAffinityTerm are intersected, i.e. all terms must be satisfied.\",\"items\":{\"description\":\"Defines a set of pods (namely those matching the labelSelector\\nrelative to the given namespace(s)) that this pod should be\\nco-located (affinity) or not co-located (anti-affinity) with,\\nwhere co-located is defined as running on a node whose value of\\nthe label with key \\u003ctopologyKey\\u003e matches that of any node on which\\na pod of the set of pods is running\",\"properties\":{\"labelSelector\":{\"description\":\"A label query over a set of resources, in this case pods.\\nIf it's null, this PodAffinityTerm matches with no Pods.\",\"properties\":{\"matchExpressions\":{\"description\":\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\",\"items\":{\"description\":\"A label selector requirement is a selector that contains values, a key, and an operator that\\nrelates the key and values.\",\"properties\":{\"key\":{\"description\":\"key is the label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"operator represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists and DoesNotExist.\",\"type\":\"string\"},\"values\":{\"description\":\"values is an array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. This array is replaced during a strategic\\nmerge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"matchLabels\":{\"additionalProperties\":{\"type\":\"string\"},\"description\":\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\\nmap is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the\\noperator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\",\"type\":\"object\"}},\"type\":\"object\",\"x-kubernetes-map-type\":\"atomic\"},\"matchLabelKeys\":{\"description\":\"MatchLabelKeys is a set of pod label keys to select which pods will\\nbe taken into consideration. The keys are used to lookup values from the\\nincoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`\\nto select the group of existing pods which pods will be taken into consideration\\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\\npod labels will be ignored. The default value is empty.\\nThe same key is forbidden to exist in both matchLabelKeys and labelSelector.\\nAlso, matchLabelKeys cannot be set when labelSelector isn't set.\\nThis is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"mismatchLabelKeys\":{\"description\":\"MismatchLabelKeys is a set of pod label keys to select which pods will\\nbe taken into consideration. The keys are used to lookup values from the\\nincoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`\\nto select the group of existing pods which pods will be taken into consideration\\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\\npod labels will be ignored. The default value is empty.\\nThe same key is forbidden to exist in both mismatchLabelKeys and labelSelector.\\nAlso, mismatchLabelKeys cannot be set when labelSelector isn't set.\\nThis is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"namespaceSelector\":{\"description\":\"A label query over the set of namespaces that the term applies to.\\nThe term is applied to the union of the namespaces selected by this field\\nand the ones listed in the namespaces field.\\nnull selector and null or empty namespaces list means \\\"this pod's namespace\\\".\\nAn empty selector ({}) matches all namespaces.\",\"properties\":{\"matchExpressions\":{\"description\":\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\",\"items\":{\"description\":\"A label selector requirement is a selector that contains values, a key, and an operator that\\nrelates the key and values.\",\"properties\":{\"key\":{\"description\":\"key is the label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"operator represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists and DoesNotExist.\",\"type\":\"string\"},\"values\":{\"description\":\"values is an array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. This array is replaced during a strategic\\nmerge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"matchLabels\":{\"additionalProperties\":{\"type\":\"string\"},\"description\":\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\\nmap is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the\\noperator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\",\"type\":\"object\"}},\"type\":\"object\",\"x-kubernetes-map-type\":\"atomic\"},\"namespaces\":{\"description\":\"namespaces specifies a static list of namespace names that the term applies to.\\nThe term is applied to the union of the namespaces listed in this field\\nand the ones selected by namespaceSelector.\\nnull or empty namespaces list and null namespaceSelector means \\\"this pod's namespace\\\".\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"topologyKey\":{\"description\":\"This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching\\nthe labelSelector in the specified namespaces, where co-located is defined as running on a node\\nwhose value of the label with key topologyKey matches that of any node on which any of the\\nselected pods is running.\\nEmpty topologyKey is not allowed.\",\"type\":\"string\"}},\"required\":[\"topologyKey\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"type\":\"object\"},\"podAntiAffinity\":{\"description\":\"Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).\",\"properties\":{\"preferredDuringSchedulingIgnoredDuringExecution\":{\"description\":\"The scheduler will prefer to schedule pods to nodes that satisfy\\nthe anti-affinity expressions specified by this field, but it may choose\\na node that violates one or more of the expressions. The node that is\\nmost preferred is the one with the greatest sum of weights, i.e.\\nfor each node that meets all of the scheduling requirements (resource\\nrequest, requiredDuringScheduling anti-affinity expressions, etc.),\\ncompute a sum by iterating through the elements of this field and adding\\n\\\"weight\\\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the\\nnode(s) with the highest sum are the most preferred.\",\"items\":{\"description\":\"The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)\",\"properties\":{\"podAffinityTerm\":{\"description\":\"Required. A pod affinity term, associated with the corresponding weight.\",\"properties\":{\"labelSelector\":{\"description\":\"A label query over a set of resources, in this case pods.\\nIf it's null, this PodAffinityTerm matches with no Pods.\",\"properties\":{\"matchExpressions\":{\"description\":\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\",\"items\":{\"description\":\"A label selector requirement is a selector that contains values, a key, and an operator that\\nrelates the key and values.\",\"properties\":{\"key\":{\"description\":\"key is the label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"operator represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists and DoesNotExist.\",\"type\":\"string\"},\"values\":{\"description\":\"values is an array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. This array is replaced during a strategic\\nmerge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"matchLabels\":{\"additionalProperties\":{\"type\":\"string\"},\"description\":\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\\nmap is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the\\noperator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\",\"type\":\"object\"}},\"type\":\"object\",\"x-kubernetes-map-type\":\"atomic\"},\"matchLabelKeys\":{\"description\":\"MatchLabelKeys is a set of pod label keys to select which pods will\\nbe taken into consideration. The keys are used to lookup values from the\\nincoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`\\nto select the group of existing pods which pods will be taken into consideration\\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\\npod labels will be ignored. The default value is empty.\\nThe same key is forbidden to exist in both matchLabelKeys and labelSelector.\\nAlso, matchLabelKeys cannot be set when labelSelector isn't set.\\nThis is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"mismatchLabelKeys\":{\"description\":\"MismatchLabelKeys is a set of pod label keys to select which pods will\\nbe taken into consideration. The keys are used to lookup values from the\\nincoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`\\nto select the group of existing pods which pods will be taken into consideration\\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\\npod labels will be ignored. The default value is empty.\\nThe same key is forbidden to exist in both mismatchLabelKeys and labelSelector.\\nAlso, mismatchLabelKeys cannot be set when labelSelector isn't set.\\nThis is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"namespaceSelector\":{\"description\":\"A label query over the set of namespaces that the term applies to.\\nThe term is applied to the union of the namespaces selected by this field\\nand the ones listed in the namespaces field.\\nnull selector and null or empty namespaces list means \\\"this pod's namespace\\\".\\nAn empty selector ({}) matches all namespaces.\",\"properties\":{\"matchExpressions\":{\"description\":\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\",\"items\":{\"description\":\"A label selector requirement is a selector that contains values, a key, and an operator that\\nrelates the key and values.\",\"properties\":{\"key\":{\"description\":\"key is the label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"operator represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists and DoesNotExist.\",\"type\":\"string\"},\"values\":{\"description\":\"values is an array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. This array is replaced during a strategic\\nmerge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"matchLabels\":{\"additionalProperties\":{\"type\":\"string\"},\"description\":\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\\nmap is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the\\noperator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\",\"type\":\"object\"}},\"type\":\"object\",\"x-kubernetes-map-type\":\"atomic\"},\"namespaces\":{\"description\":\"namespaces specifies a static list of namespace names that the term applies to.\\nThe term is applied to the union of the namespaces listed in this field\\nand the ones selected by namespaceSelector.\\nnull or empty namespaces list and null namespaceSelector means \\\"this pod's namespace\\\".\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"topologyKey\":{\"description\":\"This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching\\nthe labelSelector in the specified namespaces, where co-located is defined as running on a node\\nwhose value of the label with key topologyKey matches that of any node on which any of the\\nselected pods is running.\\nEmpty topologyKey is not allowed.\",\"type\":\"string\"}},\"required\":[\"topologyKey\"],\"type\":\"object\"},\"weight\":{\"description\":\"weight associated with matching the corresponding podAffinityTerm,\\nin the range 1-100.\",\"format\":\"int32\",\"type\":\"integer\"}},\"required\":[\"podAffinityTerm\",\"weight\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"requiredDuringSchedulingIgnoredDuringExecution\":{\"description\":\"If the anti-affinity requirements specified by this field are not met at\\nscheduling time, the pod will not be scheduled onto the node.\\nIf the anti-affinity requirements specified by this field cease to be met\\nat some point during pod execution (e.g. due to a pod label update), the\\nsystem may or may not try to eventually evict the pod from its node.\\nWhen there are multiple elements, the lists of nodes corresponding to each\\npodAffinityTerm are intersected, i.e. all terms must be satisfied.\",\"items\":{\"description\":\"Defines a set of pods (namely those matching the labelSelector\\nrelative to the given namespace(s)) that this pod should be\\nco-located (affinity) or not co-located (anti-affinity) with,\\nwhere co-located is defined as running on a node whose value of\\nthe label with key \\u003ctopologyKey\\u003e matches that of any node on which\\na pod of the set of pods is running\",\"properties\":{\"labelSelector\":{\"description\":\"A label query over a set of resources, in this case pods.\\nIf it's null, this PodAffinityTerm matches with no Pods.\",\"properties\":{\"matchExpressions\":{\"description\":\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\",\"items\":{\"description\":\"A label selector requirement is a selector that contains values, a key, and an operator that\\nrelates the key and values.\",\"properties\":{\"key\":{\"description\":\"key is the label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"operator represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists and DoesNotExist.\",\"type\":\"string\"},\"values\":{\"description\":\"values is an array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. This array is replaced during a strategic\\nmerge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"matchLabels\":{\"additionalProperties\":{\"type\":\"string\"},\"description\":\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\\nmap is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the\\noperator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\",\"type\":\"object\"}},\"type\":\"object\",\"x-kubernetes-map-type\":\"atomic\"},\"matchLabelKeys\":{\"description\":\"MatchLabelKeys is a set of pod label keys to select which pods will\\nbe taken into consideration. The keys are used to lookup values from the\\nincoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`\\nto select the group of existing pods which pods will be taken into consideration\\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\\npod labels will be ignored. The default value is empty.\\nThe same key is forbidden to exist in both matchLabelKeys and labelSelector.\\nAlso, matchLabelKeys cannot be set when labelSelector isn't set.\\nThis is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"mismatchLabelKeys\":{\"description\":\"MismatchLabelKeys is a set of pod label keys to select which pods will\\nbe taken into consideration. The keys are used to lookup values from the\\nincoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`\\nto select the group of existing pods which pods will be taken into consideration\\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\\npod labels will be ignored. The default value is empty.\\nThe same key is forbidden to exist in both mismatchLabelKeys and labelSelector.\\nAlso, mismatchLabelKeys cannot be set when labelSelector isn't set.\\nThis is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"namespaceSelector\":{\"description\":\"A label query over the set of namespaces that the term applies to.\\nThe term is applied to the union of the namespaces selected by this field\\nand the ones listed in the namespaces field.\\nnull selector and null or empty namespaces list means \\\"this pod's namespace\\\".\\nAn empty selector ({}) matches all namespaces.\",\"properties\":{\"matchExpressions\":{\"description\":\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\",\"items\":{\"description\":\"A label selector requirement is a selector that contains values, a key, and an operator that\\nrelates the key and values.\",\"properties\":{\"key\":{\"description\":\"key is the label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"operator represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists and DoesNotExist.\",\"type\":\"string\"},\"values\":{\"description\":\"values is an array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. This array is replaced during a strategic\\nmerge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"matchLabels\":{\"additionalProperties\":{\"type\":\"string\"},\"description\":\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\\nmap is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the\\noperator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\",\"type\":\"object\"}},\"type\":\"object\",\"x-kubernetes-map-type\":\"atomic\"},\"namespaces\":{\"description\":\"namespaces specifies a static list of namespace names that the term applies to.\\nThe term is applied to the union of the namespaces listed in this field\\nand the ones selected by namespaceSelector.\\nnull or empty namespaces list and null namespaceSelector means \\\"this pod's namespace\\\".\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"topologyKey\":{\"description\":\"This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching\\nthe labelSelector in the specified namespaces, where co-located is defined as running on a node\\nwhose value of the label with key topologyKey matches that of any node on which any of the\\nselected pods is running.\\nEmpty topologyKey is not allowed.\",\"type\":\"string\"}},\"required\":[\"topologyKey\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"type\":\"object\"}},\"type\":\"object\"},\"nodeSelector\":{\"additionalProperties\":{\"type\":\"string\"},\"description\":\"nodeSelector is the node selector applied to the relevant kind of pods\\nIt specifies a map of key-value pairs: for the pod to be eligible to run on a node,\\nthe node must have each of the indicated key-value pairs as labels\\n(it can have additional labels as well).\\nSee https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#nodeselector\",\"type\":\"object\"},\"tolerations\":{\"description\":\"tolerations is a list of tolerations applied to the relevant kind of pods\\nSee https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/ for more info.\\nThese are additional tolerations other than default ones.\",\"items\":{\"description\":\"The pod this Toleration is attached to tolerates any taint that matches\\nthe triple \\u003ckey,value,effect\\u003e using the matching operator \\u003coperator\\u003e.\",\"properties\":{\"effect\":{\"description\":\"Effect indicates the taint effect to match. Empty means match all taint effects.\\nWhen specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.\",\"type\":\"string\"},\"key\":{\"description\":\"Key is the taint key that the toleration applies to. Empty means match all taint keys.\\nIf the key is empty, operator must be Exists; this combination means to match all values and all keys.\",\"type\":\"string\"},\"operator\":{\"description\":\"Operator represents a key's relationship to the value.\\nValid operators are Exists and Equal. Defaults to Equal.\\nExists is equivalent to wildcard for value, so that a pod can\\ntolerate all taints of a particular category.\",\"type\":\"string\"},\"tolerationSeconds\":{\"description\":\"TolerationSeconds represents the period of time the toleration (which must be\\nof effect NoExecute, otherwise this field is ignored) tolerates the taint. By default,\\nit is not set, which means tolerate the taint forever (do not evict). Zero and\\nnegative values will be treated as 0 (evict immediately) by the system.\",\"format\":\"int64\",\"type\":\"integer\"},\"value\":{\"description\":\"Value is the taint value the toleration matches to.\\nIf the operator is Exists, the value should be empty, otherwise just a regular string.\",\"type\":\"string\"}},\"type\":\"object\"},\"type\":\"array\"}},\"type\":\"object\"},\"namespaceSelector\":{\"description\":\"namespaces where pods should be gated before scheduling\\nDefaults to targeting namespaces with an \\\"application-aware-quota/enable-gating\\\" label key.\",\"properties\":{\"matchExpressions\":{\"description\":\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\",\"items\":{\"description\":\"A label selector requirement is a selector that contains values, a key, and an operator that\\nrelates the key and values.\",\"properties\":{\"key\":{\"description\":\"key is the label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"operator represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists and DoesNotExist.\",\"type\":\"string\"},\"values\":{\"description\":\"values is an array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. This array is replaced during a strategic\\nmerge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"matchLabels\":{\"additionalProperties\":{\"type\":\"string\"},\"description\":\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\\nmap is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the\\noperator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\",\"type\":\"object\"}},\"type\":\"object\",\"x-kubernetes-map-type\":\"atomic\"},\"priorityClass\":{\"description\":\"PriorityClass of the AAQ control plane\",\"type\":\"string\"},\"workload\":{\"description\":\"Restrict on which nodes AAQ workload pods will be scheduled\",\"properties\":{\"affinity\":{\"description\":\"affinity enables pod affinity/anti-affinity placement expanding the types of constraints\\nthat can be expressed with nodeSelector.\\naffinity is going to be applied to the relevant kind of pods in parallel with nodeSelector\\nSee https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#affinity-and-anti-affinity\",\"properties\":{\"nodeAffinity\":{\"description\":\"Describes node affinity scheduling rules for the pod.\",\"properties\":{\"preferredDuringSchedulingIgnoredDuringExecution\":{\"description\":\"The scheduler will prefer to schedule pods to nodes that satisfy\\nthe affinity expressions specified by this field, but it may choose\\na node that violates one or more of the expressions. The node that is\\nmost preferred is the one with the greatest sum of weights, i.e.\\nfor each node that meets all of the scheduling requirements (resource\\nrequest, requiredDuringScheduling affinity expressions, etc.),\\ncompute a sum by iterating through the elements of this field and adding\\n\\\"weight\\\" to the sum if the node matches the corresponding matchExpressions; the\\nnode(s) with the highest sum are the most preferred.\",\"items\":{\"description\":\"An empty preferred scheduling term matches all objects with implicit weight 0\\n(i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).\",\"properties\":{\"preference\":{\"description\":\"A node selector term, associated with the corresponding weight.\",\"properties\":{\"matchExpressions\":{\"description\":\"A list of node selector requirements by node's labels.\",\"items\":{\"description\":\"A node selector requirement is a selector that contains values, a key, and an operator\\nthat relates the key and values.\",\"properties\":{\"key\":{\"description\":\"The label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"Represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.\",\"type\":\"string\"},\"values\":{\"description\":\"An array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. If the operator is Gt or Lt, the values\\narray must have a single element, which will be interpreted as an integer.\\nThis array is replaced during a strategic merge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"matchFields\":{\"description\":\"A list of node selector requirements by node's fields.\",\"items\":{\"description\":\"A node selector requirement is a selector that contains values, a key, and an operator\\nthat relates the key and values.\",\"properties\":{\"key\":{\"description\":\"The label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"Represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.\",\"type\":\"string\"},\"values\":{\"description\":\"An array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. If the operator is Gt or Lt, the values\\narray must have a single element, which will be interpreted as an integer.\\nThis array is replaced during a strategic merge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"type\":\"object\",\"x-kubernetes-map-type\":\"atomic\"},\"weight\":{\"description\":\"Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.\",\"format\":\"int32\",\"type\":\"integer\"}},\"required\":[\"preference\",\"weight\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"requiredDuringSchedulingIgnoredDuringExecution\":{\"description\":\"If the affinity requirements specified by this field are not met at\\nscheduling time, the pod will not be scheduled onto the node.\\nIf the affinity requirements specified by this field cease to be met\\nat some point during pod execution (e.g. due to an update), the system\\nmay or may not try to eventually evict the pod from its node.\",\"properties\":{\"nodeSelectorTerms\":{\"description\":\"Required. A list of node selector terms. The terms are ORed.\",\"items\":{\"description\":\"A null or empty node selector term matches no objects. The requirements of\\nthem are ANDed.\\nThe TopologySelectorTerm type implements a subset of the NodeSelectorTerm.\",\"properties\":{\"matchExpressions\":{\"description\":\"A list of node selector requirements by node's labels.\",\"items\":{\"description\":\"A node selector requirement is a selector that contains values, a key, and an operator\\nthat relates the key and values.\",\"properties\":{\"key\":{\"description\":\"The label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"Represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.\",\"type\":\"string\"},\"values\":{\"description\":\"An array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. If the operator is Gt or Lt, the values\\narray must have a single element, which will be interpreted as an integer.\\nThis array is replaced during a strategic merge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"matchFields\":{\"description\":\"A list of node selector requirements by node's fields.\",\"items\":{\"description\":\"A node selector requirement is a selector that contains values, a key, and an operator\\nthat relates the key and values.\",\"properties\":{\"key\":{\"description\":\"The label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"Represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.\",\"type\":\"string\"},\"values\":{\"description\":\"An array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. If the operator is Gt or Lt, the values\\narray must have a single element, which will be interpreted as an integer.\\nThis array is replaced during a strategic merge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"type\":\"object\",\"x-kubernetes-map-type\":\"atomic\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"nodeSelectorTerms\"],\"type\":\"object\",\"x-kubernetes-map-type\":\"atomic\"}},\"type\":\"object\"},\"podAffinity\":{\"description\":\"Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).\",\"properties\":{\"preferredDuringSchedulingIgnoredDuringExecution\":{\"description\":\"The scheduler will prefer to schedule pods to nodes that satisfy\\nthe affinity expressions specified by this field, but it may choose\\na node that violates one or more of the expressions. The node that is\\nmost preferred is the one with the greatest sum of weights, i.e.\\nfor each node that meets all of the scheduling requirements (resource\\nrequest, requiredDuringScheduling affinity expressions, etc.),\\ncompute a sum by iterating through the elements of this field and adding\\n\\\"weight\\\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the\\nnode(s) with the highest sum are the most preferred.\",\"items\":{\"description\":\"The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)\",\"properties\":{\"podAffinityTerm\":{\"description\":\"Required. A pod affinity term, associated with the corresponding weight.\",\"properties\":{\"labelSelector\":{\"description\":\"A label query over a set of resources, in this case pods.\\nIf it's null, this PodAffinityTerm matches with no Pods.\",\"properties\":{\"matchExpressions\":{\"description\":\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\",\"items\":{\"description\":\"A label selector requirement is a selector that contains values, a key, and an operator that\\nrelates the key and values.\",\"properties\":{\"key\":{\"description\":\"key is the label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"operator represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists and DoesNotExist.\",\"type\":\"string\"},\"values\":{\"description\":\"values is an array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. This array is replaced during a strategic\\nmerge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"matchLabels\":{\"additionalProperties\":{\"type\":\"string\"},\"description\":\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\\nmap is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the\\noperator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\",\"type\":\"object\"}},\"type\":\"object\",\"x-kubernetes-map-type\":\"atomic\"},\"matchLabelKeys\":{\"description\":\"MatchLabelKeys is a set of pod label keys to select which pods will\\nbe taken into consideration. The keys are used to lookup values from the\\nincoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`\\nto select the group of existing pods which pods will be taken into consideration\\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\\npod labels will be ignored. The default value is empty.\\nThe same key is forbidden to exist in both matchLabelKeys and labelSelector.\\nAlso, matchLabelKeys cannot be set when labelSelector isn't set.\\nThis is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"mismatchLabelKeys\":{\"description\":\"MismatchLabelKeys is a set of pod label keys to select which pods will\\nbe taken into consideration. The keys are used to lookup values from the\\nincoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`\\nto select the group of existing pods which pods will be taken into consideration\\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\\npod labels will be ignored. The default value is empty.\\nThe same key is forbidden to exist in both mismatchLabelKeys and labelSelector.\\nAlso, mismatchLabelKeys cannot be set when labelSelector isn't set.\\nThis is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"namespaceSelector\":{\"description\":\"A label query over the set of namespaces that the term applies to.\\nThe term is applied to the union of the namespaces selected by this field\\nand the ones listed in the namespaces field.\\nnull selector and null or empty namespaces list means \\\"this pod's namespace\\\".\\nAn empty selector ({}) matches all namespaces.\",\"properties\":{\"matchExpressions\":{\"description\":\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\",\"items\":{\"description\":\"A label selector requirement is a selector that contains values, a key, and an operator that\\nrelates the key and values.\",\"properties\":{\"key\":{\"description\":\"key is the label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"operator represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists and DoesNotExist.\",\"type\":\"string\"},\"values\":{\"description\":\"values is an array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. This array is replaced during a strategic\\nmerge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"matchLabels\":{\"additionalProperties\":{\"type\":\"string\"},\"description\":\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\\nmap is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the\\noperator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\",\"type\":\"object\"}},\"type\":\"object\",\"x-kubernetes-map-type\":\"atomic\"},\"namespaces\":{\"description\":\"namespaces specifies a static list of namespace names that the term applies to.\\nThe term is applied to the union of the namespaces listed in this field\\nand the ones selected by namespaceSelector.\\nnull or empty namespaces list and null namespaceSelector means \\\"this pod's namespace\\\".\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"topologyKey\":{\"description\":\"This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching\\nthe labelSelector in the specified namespaces, where co-located is defined as running on a node\\nwhose value of the label with key topologyKey matches that of any node on which any of the\\nselected pods is running.\\nEmpty topologyKey is not allowed.\",\"type\":\"string\"}},\"required\":[\"topologyKey\"],\"type\":\"object\"},\"weight\":{\"description\":\"weight associated with matching the corresponding podAffinityTerm,\\nin the range 1-100.\",\"format\":\"int32\",\"type\":\"integer\"}},\"required\":[\"podAffinityTerm\",\"weight\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"requiredDuringSchedulingIgnoredDuringExecution\":{\"description\":\"If the affinity requirements specified by this field are not met at\\nscheduling time, the pod will not be scheduled onto the node.\\nIf the affinity requirements specified by this field cease to be met\\nat some point during pod execution (e.g. due to a pod label update), the\\nsystem may or may not try to eventually evict the pod from its node.\\nWhen there are multiple elements, the lists of nodes corresponding to each\\npodAffinityTerm are intersected, i.e. all terms must be satisfied.\",\"items\":{\"description\":\"Defines a set of pods (namely those matching the labelSelector\\nrelative to the given namespace(s)) that this pod should be\\nco-located (affinity) or not co-located (anti-affinity) with,\\nwhere co-located is defined as running on a node whose value of\\nthe label with key \\u003ctopologyKey\\u003e matches that of any node on which\\na pod of the set of pods is running\",\"properties\":{\"labelSelector\":{\"description\":\"A label query over a set of resources, in this case pods.\\nIf it's null, this PodAffinityTerm matches with no Pods.\",\"properties\":{\"matchExpressions\":{\"description\":\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\",\"items\":{\"description\":\"A label selector requirement is a selector that contains values, a key, and an operator that\\nrelates the key and values.\",\"properties\":{\"key\":{\"description\":\"key is the label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"operator represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists and DoesNotExist.\",\"type\":\"string\"},\"values\":{\"description\":\"values is an array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. This array is replaced during a strategic\\nmerge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"matchLabels\":{\"additionalProperties\":{\"type\":\"string\"},\"description\":\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\\nmap is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the\\noperator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\",\"type\":\"object\"}},\"type\":\"object\",\"x-kubernetes-map-type\":\"atomic\"},\"matchLabelKeys\":{\"description\":\"MatchLabelKeys is a set of pod label keys to select which pods will\\nbe taken into consideration. The keys are used to lookup values from the\\nincoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`\\nto select the group of existing pods which pods will be taken into consideration\\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\\npod labels will be ignored. The default value is empty.\\nThe same key is forbidden to exist in both matchLabelKeys and labelSelector.\\nAlso, matchLabelKeys cannot be set when labelSelector isn't set.\\nThis is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"mismatchLabelKeys\":{\"description\":\"MismatchLabelKeys is a set of pod label keys to select which pods will\\nbe taken into consideration. The keys are used to lookup values from the\\nincoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`\\nto select the group of existing pods which pods will be taken into consideration\\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\\npod labels will be ignored. The default value is empty.\\nThe same key is forbidden to exist in both mismatchLabelKeys and labelSelector.\\nAlso, mismatchLabelKeys cannot be set when labelSelector isn't set.\\nThis is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"namespaceSelector\":{\"description\":\"A label query over the set of namespaces that the term applies to.\\nThe term is applied to the union of the namespaces selected by this field\\nand the ones listed in the namespaces field.\\nnull selector and null or empty namespaces list means \\\"this pod's namespace\\\".\\nAn empty selector ({}) matches all namespaces.\",\"properties\":{\"matchExpressions\":{\"description\":\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\",\"items\":{\"description\":\"A label selector requirement is a selector that contains values, a key, and an operator that\\nrelates the key and values.\",\"properties\":{\"key\":{\"description\":\"key is the label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"operator represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists and DoesNotExist.\",\"type\":\"string\"},\"values\":{\"description\":\"values is an array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. This array is replaced during a strategic\\nmerge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"matchLabels\":{\"additionalProperties\":{\"type\":\"string\"},\"description\":\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\\nmap is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the\\noperator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\",\"type\":\"object\"}},\"type\":\"object\",\"x-kubernetes-map-type\":\"atomic\"},\"namespaces\":{\"description\":\"namespaces specifies a static list of namespace names that the term applies to.\\nThe term is applied to the union of the namespaces listed in this field\\nand the ones selected by namespaceSelector.\\nnull or empty namespaces list and null namespaceSelector means \\\"this pod's namespace\\\".\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"topologyKey\":{\"description\":\"This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching\\nthe labelSelector in the specified namespaces, where co-located is defined as running on a node\\nwhose value of the label with key topologyKey matches that of any node on which any of the\\nselected pods is running.\\nEmpty topologyKey is not allowed.\",\"type\":\"string\"}},\"required\":[\"topologyKey\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"type\":\"object\"},\"podAntiAffinity\":{\"description\":\"Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).\",\"properties\":{\"preferredDuringSchedulingIgnoredDuringExecution\":{\"description\":\"The scheduler will prefer to schedule pods to nodes that satisfy\\nthe anti-affinity expressions specified by this field, but it may choose\\na node that violates one or more of the expressions. The node that is\\nmost preferred is the one with the greatest sum of weights, i.e.\\nfor each node that meets all of the scheduling requirements (resource\\nrequest, requiredDuringScheduling anti-affinity expressions, etc.),\\ncompute a sum by iterating through the elements of this field and adding\\n\\\"weight\\\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the\\nnode(s) with the highest sum are the most preferred.\",\"items\":{\"description\":\"The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)\",\"properties\":{\"podAffinityTerm\":{\"description\":\"Required. A pod affinity term, associated with the corresponding weight.\",\"properties\":{\"labelSelector\":{\"description\":\"A label query over a set of resources, in this case pods.\\nIf it's null, this PodAffinityTerm matches with no Pods.\",\"properties\":{\"matchExpressions\":{\"description\":\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\",\"items\":{\"description\":\"A label selector requirement is a selector that contains values, a key, and an operator that\\nrelates the key and values.\",\"properties\":{\"key\":{\"description\":\"key is the label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"operator represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists and DoesNotExist.\",\"type\":\"string\"},\"values\":{\"description\":\"values is an array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. This array is replaced during a strategic\\nmerge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"matchLabels\":{\"additionalProperties\":{\"type\":\"string\"},\"description\":\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\\nmap is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the\\noperator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\",\"type\":\"object\"}},\"type\":\"object\",\"x-kubernetes-map-type\":\"atomic\"},\"matchLabelKeys\":{\"description\":\"MatchLabelKeys is a set of pod label keys to select which pods will\\nbe taken into consideration. The keys are used to lookup values from the\\nincoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`\\nto select the group of existing pods which pods will be taken into consideration\\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\\npod labels will be ignored. The default value is empty.\\nThe same key is forbidden to exist in both matchLabelKeys and labelSelector.\\nAlso, matchLabelKeys cannot be set when labelSelector isn't set.\\nThis is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"mismatchLabelKeys\":{\"description\":\"MismatchLabelKeys is a set of pod label keys to select which pods will\\nbe taken into consideration. The keys are used to lookup values from the\\nincoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`\\nto select the group of existing pods which pods will be taken into consideration\\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\\npod labels will be ignored. The default value is empty.\\nThe same key is forbidden to exist in both mismatchLabelKeys and labelSelector.\\nAlso, mismatchLabelKeys cannot be set when labelSelector isn't set.\\nThis is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"namespaceSelector\":{\"description\":\"A label query over the set of namespaces that the term applies to.\\nThe term is applied to the union of the namespaces selected by this field\\nand the ones listed in the namespaces field.\\nnull selector and null or empty namespaces list means \\\"this pod's namespace\\\".\\nAn empty selector ({}) matches all namespaces.\",\"properties\":{\"matchExpressions\":{\"description\":\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\",\"items\":{\"description\":\"A label selector requirement is a selector that contains values, a key, and an operator that\\nrelates the key and values.\",\"properties\":{\"key\":{\"description\":\"key is the label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"operator represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists and DoesNotExist.\",\"type\":\"string\"},\"values\":{\"description\":\"values is an array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. This array is replaced during a strategic\\nmerge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"matchLabels\":{\"additionalProperties\":{\"type\":\"string\"},\"description\":\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\\nmap is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the\\noperator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\",\"type\":\"object\"}},\"type\":\"object\",\"x-kubernetes-map-type\":\"atomic\"},\"namespaces\":{\"description\":\"namespaces specifies a static list of namespace names that the term applies to.\\nThe term is applied to the union of the namespaces listed in this field\\nand the ones selected by namespaceSelector.\\nnull or empty namespaces list and null namespaceSelector means \\\"this pod's namespace\\\".\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"topologyKey\":{\"description\":\"This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching\\nthe labelSelector in the specified namespaces, where co-located is defined as running on a node\\nwhose value of the label with key topologyKey matches that of any node on which any of the\\nselected pods is running.\\nEmpty topologyKey is not allowed.\",\"type\":\"string\"}},\"required\":[\"topologyKey\"],\"type\":\"object\"},\"weight\":{\"description\":\"weight associated with matching the corresponding podAffinityTerm,\\nin the range 1-100.\",\"format\":\"int32\",\"type\":\"integer\"}},\"required\":[\"podAffinityTerm\",\"weight\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"requiredDuringSchedulingIgnoredDuringExecution\":{\"description\":\"If the anti-affinity requirements specified by this field are not met at\\nscheduling time, the pod will not be scheduled onto the node.\\nIf the anti-affinity requirements specified by this field cease to be met\\nat some point during pod execution (e.g. due to a pod label update), the\\nsystem may or may not try to eventually evict the pod from its node.\\nWhen there are multiple elements, the lists of nodes corresponding to each\\npodAffinityTerm are intersected, i.e. all terms must be satisfied.\",\"items\":{\"description\":\"Defines a set of pods (namely those matching the labelSelector\\nrelative to the given namespace(s)) that this pod should be\\nco-located (affinity) or not co-located (anti-affinity) with,\\nwhere co-located is defined as running on a node whose value of\\nthe label with key \\u003ctopologyKey\\u003e matches that of any node on which\\na pod of the set of pods is running\",\"properties\":{\"labelSelector\":{\"description\":\"A label query over a set of resources, in this case pods.\\nIf it's null, this PodAffinityTerm matches with no Pods.\",\"properties\":{\"matchExpressions\":{\"description\":\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\",\"items\":{\"description\":\"A label selector requirement is a selector that contains values, a key, and an operator that\\nrelates the key and values.\",\"properties\":{\"key\":{\"description\":\"key is the label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"operator represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists and DoesNotExist.\",\"type\":\"string\"},\"values\":{\"description\":\"values is an array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. This array is replaced during a strategic\\nmerge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"matchLabels\":{\"additionalProperties\":{\"type\":\"string\"},\"description\":\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\\nmap is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the\\noperator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\",\"type\":\"object\"}},\"type\":\"object\",\"x-kubernetes-map-type\":\"atomic\"},\"matchLabelKeys\":{\"description\":\"MatchLabelKeys is a set of pod label keys to select which pods will\\nbe taken into consideration. The keys are used to lookup values from the\\nincoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`\\nto select the group of existing pods which pods will be taken into consideration\\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\\npod labels will be ignored. The default value is empty.\\nThe same key is forbidden to exist in both matchLabelKeys and labelSelector.\\nAlso, matchLabelKeys cannot be set when labelSelector isn't set.\\nThis is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"mismatchLabelKeys\":{\"description\":\"MismatchLabelKeys is a set of pod label keys to select which pods will\\nbe taken into consideration. The keys are used to lookup values from the\\nincoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`\\nto select the group of existing pods which pods will be taken into consideration\\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\\npod labels will be ignored. The default value is empty.\\nThe same key is forbidden to exist in both mismatchLabelKeys and labelSelector.\\nAlso, mismatchLabelKeys cannot be set when labelSelector isn't set.\\nThis is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"namespaceSelector\":{\"description\":\"A label query over the set of namespaces that the term applies to.\\nThe term is applied to the union of the namespaces selected by this field\\nand the ones listed in the namespaces field.\\nnull selector and null or empty namespaces list means \\\"this pod's namespace\\\".\\nAn empty selector ({}) matches all namespaces.\",\"properties\":{\"matchExpressions\":{\"description\":\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\",\"items\":{\"description\":\"A label selector requirement is a selector that contains values, a key, and an operator that\\nrelates the key and values.\",\"properties\":{\"key\":{\"description\":\"key is the label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"operator represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists and DoesNotExist.\",\"type\":\"string\"},\"values\":{\"description\":\"values is an array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. This array is replaced during a strategic\\nmerge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"matchLabels\":{\"additionalProperties\":{\"type\":\"string\"},\"description\":\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\\nmap is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the\\noperator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\",\"type\":\"object\"}},\"type\":\"object\",\"x-kubernetes-map-type\":\"atomic\"},\"namespaces\":{\"description\":\"namespaces specifies a static list of namespace names that the term applies to.\\nThe term is applied to the union of the namespaces listed in this field\\nand the ones selected by namespaceSelector.\\nnull or empty namespaces list and null namespaceSelector means \\\"this pod's namespace\\\".\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"topologyKey\":{\"description\":\"This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching\\nthe labelSelector in the specified namespaces, where co-located is defined as running on a node\\nwhose value of the label with key topologyKey matches that of any node on which any of the\\nselected pods is running.\\nEmpty topologyKey is not allowed.\",\"type\":\"string\"}},\"required\":[\"topologyKey\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"type\":\"object\"}},\"type\":\"object\"},\"nodeSelector\":{\"additionalProperties\":{\"type\":\"string\"},\"description\":\"nodeSelector is the node selector applied to the relevant kind of pods\\nIt specifies a map of key-value pairs: for the pod to be eligible to run on a node,\\nthe node must have each of the indicated key-value pairs as labels\\n(it can have additional labels as well).\\nSee https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#nodeselector\",\"type\":\"object\"},\"tolerations\":{\"description\":\"tolerations is a list of tolerations applied to the relevant kind of pods\\nSee https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/ for more info.\\nThese are additional tolerations other than default ones.\",\"items\":{\"description\":\"The pod this Toleration is attached to tolerates any taint that matches\\nthe triple \\u003ckey,value,effect\\u003e using the matching operator \\u003coperator\\u003e.\",\"properties\":{\"effect\":{\"description\":\"Effect indicates the taint effect to match. Empty means match all taint effects.\\nWhen specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.\",\"type\":\"string\"},\"key\":{\"description\":\"Key is the taint key that the toleration applies to. Empty means match all taint keys.\\nIf the key is empty, operator must be Exists; this combination means to match all values and all keys.\",\"type\":\"string\"},\"operator\":{\"description\":\"Operator represents a key's relationship to the value.\\nValid operators are Exists and Equal. Defaults to Equal.\\nExists is equivalent to wildcard for value, so that a pod can\\ntolerate all taints of a particular category.\",\"type\":\"string\"},\"tolerationSeconds\":{\"description\":\"TolerationSeconds represents the period of time the toleration (which must be\\nof effect NoExecute, otherwise this field is ignored) tolerates the taint. By default,\\nit is not set, which means tolerate the taint forever (do not evict). Zero and\\nnegative values will be treated as 0 (evict immediately) by the system.\",\"format\":\"int64\",\"type\":\"integer\"},\"value\":{\"description\":\"Value is the taint value the toleration matches to.\\nIf the operator is Exists, the value should be empty, otherwise just a regular string.\",\"type\":\"string\"}},\"type\":\"object\"},\"type\":\"array\"}},\"type\":\"object\"}},\"type\":\"object\"},\"status\":{\"description\":\"AAQStatus defines the status of the installation\",\"properties\":{\"conditions\":{\"description\":\"A list of current conditions of the resource\",\"items\":{\"description\":\"Condition represents the state of the operator's\\nreconciliation functionality.\",\"properties\":{\"lastHeartbeatTime\":{\"format\":\"date-time\",\"type\":\"string\"},\"lastTransitionTime\":{\"format\":\"date-time\",\"type\":\"string\"},\"message\":{\"type\":\"string\"},\"reason\":{\"type\":\"string\"},\"status\":{\"type\":\"string\"},\"type\":{\"description\":\"ConditionType is the state of the operator's reconciliation functionality.\",\"type\":\"string\"}},\"required\":[\"status\",\"type\"],\"type\":\"object\"},\"type\":\"array\"},\"observedVersion\":{\"description\":\"The observed version of the resource\",\"type\":\"string\"},\"operatorVersion\":{\"description\":\"The version of the resource as defined by the operator\",\"type\":\"string\"},\"phase\":{\"description\":\"Phase is the current phase of the deployment\",\"type\":\"string\"},\"targetVersion\":{\"description\":\"The desired version of the resource\",\"type\":\"string\"}},\"type\":\"object\"}},\"required\":[\"spec\"],\"type\":\"object\"}},\"served\":true,\"storage\":true,\"subresources\":{\"status\":{}}}]}}\n"
      },
      "served_versions": [
        "v1alpha1"
      ],
      "stored_version": "v1alpha1",
      "categories": [],
      "short_names": [
        "aaq",
        "aaqs"
      ],
      "description": null,
      "instance_count": 0
    },
    {
      "name": "accesscontrolpolicies.hub.traefik.io",
      "group": "hub.traefik.io",
      "version": "v1alpha1",
      "kind": "AccessControlPolicy",
      "plural": "accesscontrolpolicies",
      "singular": "accesscontrolpolicy",
      "scope": "Cluster",
      "creation_timestamp": "2025-06-26T15:37:15+00:00",
      "labels": {},
      "annotations": {
        "controller-gen.kubebuilder.io/version": "v0.17.1"
      },
      "served_versions": [
        "v1alpha1"
      ],
      "stored_version": "v1alpha1",
      "categories": [],
      "short_names": [],
      "description": null,
      "instance_count": 0
    },
    {
      "name": "addons.addons.kubestash.com",
      "group": "addons.kubestash.com",
      "version": "v1alpha1",
      "kind": "Addon",
      "plural": "addons",
      "singular": "addon",
      "scope": "Cluster",
      "creation_timestamp": "2025-09-06T13:33:51+00:00",
      "labels": {
        "app.kubernetes.io/name": "kubestash"
      },
      "annotations": {
        "config.kubernetes.io/local-config": "true"
      },
      "served_versions": [
        "v1alpha1"
      ],
      "stored_version": "v1alpha1",
      "categories": [
        "kubestash",
        "appscode",
        "all"
      ],
      "short_names": [],
      "description": null,
      "instance_count": 0
    },
    {
      "name": "addons.k3s.cattle.io",
      "group": "k3s.cattle.io",
      "version": "v1",
      "kind": "Addon",
      "plural": "addons",
      "singular": "addon",
      "scope": "Namespaced",
      "creation_timestamp": "2025-06-26T15:33:35+00:00",
      "labels": {
        "objectset.rio.cattle.io/hash": "76092cd54ba63fc73cd7b8728426e6e5e7033ede"
      },
      "annotations": {
        "objectset.rio.cattle.io/applied": "H4sIAAAAAAAA/4xSQY8TPQz9K598zjcsnd22jMRhVYSEkFYVC72gPbiJ22abSaI40wVV89+Rp50pFFo4+tl+frbfHjDaBSW2wUMlAX3L5CXkYjvlwoZXu9egYGu9gQpmDedQfyIOTdL0jlbW2yy9CmrKaDAjVHtA70NGSbCEYflMOjPlItlQaMzZkTBboQR1MR9ePKX/17vtZWnqv4/Wm7dXdF0n91iTsBvT0ZZ8qvinXo6ohQBaBTpRt/NnWxNnrCNUvnFOgcMluauX2CBvoILJ+ObNSJu72yWOy5WelNpMltPJaHo7GtOY7mhyU5ZkSKZdU94q4EhaJq5TaCJUcL5aJ14Kjp+9Fx5QEF2T0A3EoICtXzcOU48Je0zElHb0xW99ePHvLTnDUK3QMSlgHaJoe+gPZEDB7uAyhurrXoi6/6CbJ+szpVlwTX1MPnPwc8xykELWKA5fhWHnxz7O37s5nJP1a2jVH3r1hvSWm/rUPTshZ/1PQ03nedYbqjs/h0j+fv5hUT4OUEwhUsr2cMT+2r+iw+xqD+IEXDqCKqeGfpcOxyX/XtoOyMFNF5DuP6bn4BwSro+U7ZPkM+amk4laU8xkHs4s8bMbOn8Hf/ga98YWVjKL4bOCtu2PAAAA//+gOtjyVQQAAA",
        "objectset.rio.cattle.io/id": "",
        "objectset.rio.cattle.io/owner-gvk": "apiextensions.k8s.io/v1, Kind=CustomResourceDefinition",
        "objectset.rio.cattle.io/owner-name": "addons.k3s.cattle.io",
        "objectset.rio.cattle.io/owner-namespace": ""
      },
      "served_versions": [
        "v1"
      ],
      "stored_version": "v1",
      "categories": [],
      "short_names": [],
      "description": null,
      "instance_count": 5
    },
    {
      "name": "aiservices.hub.traefik.io",
      "group": "hub.traefik.io",
      "version": "v1alpha1",
      "kind": "AIService",
      "plural": "aiservices",
      "singular": "aiservice",
      "scope": "Namespaced",
      "creation_timestamp": "2025-06-26T15:37:15+00:00",
      "labels": {},
      "annotations": {
        "controller-gen.kubebuilder.io/version": "v0.17.1"
      },
      "served_versions": [
        "v1alpha1"
      ],
      "stored_version": "v1alpha1",
      "categories": [],
      "short_names": [],
      "description": null,
      "instance_count": 0
    },
    {
      "name": "apibundles.hub.traefik.io",
      "group": "hub.traefik.io",
      "version": "v1alpha1",
      "kind": "APIBundle",
      "plural": "apibundles",
      "singular": "apibundle",
      "scope": "Namespaced",
      "creation_timestamp": "2025-06-26T15:37:15+00:00",
      "labels": {},
      "annotations": {
        "controller-gen.kubebuilder.io/version": "v0.17.1"
      },
      "served_versions": [
        "v1alpha1"
      ],
      "stored_version": "v1alpha1",
      "categories": [],
      "short_names": [],
      "description": null,
      "instance_count": 0
    },
    {
      "name": "apicatalogitems.hub.traefik.io",
      "group": "hub.traefik.io",
      "version": "v1alpha1",
      "kind": "APICatalogItem",
      "plural": "apicatalogitems",
      "singular": "apicatalogitem",
      "scope": "Namespaced",
      "creation_timestamp": "2025-06-26T15:37:15+00:00",
      "labels": {},
      "annotations": {
        "controller-gen.kubebuilder.io/version": "v0.17.1"
      },
      "served_versions": [
        "v1alpha1"
      ],
      "stored_version": "v1alpha1",
      "categories": [],
      "short_names": [],
      "description": null,
      "instance_count": 0
    },
    {
      "name": "apiplans.hub.traefik.io",
      "group": "hub.traefik.io",
      "version": "v1alpha1",
      "kind": "APIPlan",
      "plural": "apiplans",
      "singular": "apiplan",
      "scope": "Namespaced",
      "creation_timestamp": "2025-06-26T15:37:15+00:00",
      "labels": {},
      "annotations": {
        "controller-gen.kubebuilder.io/version": "v0.17.1"
      },
      "served_versions": [
        "v1alpha1"
      ],
      "stored_version": "v1alpha1",
      "categories": [],
      "short_names": [],
      "description": null,
      "instance_count": 0
    },
    {
      "name": "apiportals.hub.traefik.io",
      "group": "hub.traefik.io",
      "version": "v1alpha1",
      "kind": "APIPortal",
      "plural": "apiportals",
      "singular": "apiportal",
      "scope": "Namespaced",
      "creation_timestamp": "2025-06-26T15:37:15+00:00",
      "labels": {},
      "annotations": {
        "controller-gen.kubebuilder.io/version": "v0.17.1"
      },
      "served_versions": [
        "v1alpha1"
      ],
      "stored_version": "v1alpha1",
      "categories": [],
      "short_names": [],
      "description": null,
      "instance_count": 0
    },
    {
      "name": "apiratelimits.hub.traefik.io",
      "group": "hub.traefik.io",
      "version": "v1alpha1",
      "kind": "APIRateLimit",
      "plural": "apiratelimits",
      "singular": "apiratelimit",
      "scope": "Namespaced",
      "creation_timestamp": "2025-06-26T15:37:15+00:00",
      "labels": {},
      "annotations": {
        "controller-gen.kubebuilder.io/version": "v0.17.1"
      },
      "served_versions": [
        "v1alpha1"
      ],
      "stored_version": "v1alpha1",
      "categories": [],
      "short_names": [],
      "description": null,
      "instance_count": 0
    },
    {
      "name": "apis.hub.traefik.io",
      "group": "hub.traefik.io",
      "version": "v1alpha1",
      "kind": "API",
      "plural": "apis",
      "singular": "api",
      "scope": "Namespaced",
      "creation_timestamp": "2025-06-26T15:37:15+00:00",
      "labels": {},
      "annotations": {
        "controller-gen.kubebuilder.io/version": "v0.17.1"
      },
      "served_versions": [
        "v1alpha1"
      ],
      "stored_version": "v1alpha1",
      "categories": [],
      "short_names": [],
      "description": null,
      "instance_count": 0
    },
    {
      "name": "apiversions.hub.traefik.io",
      "group": "hub.traefik.io",
      "version": "v1alpha1",
      "kind": "APIVersion",
      "plural": "apiversions",
      "singular": "apiversion",
      "scope": "Namespaced",
      "creation_timestamp": "2025-06-26T15:37:15+00:00",
      "labels": {},
      "annotations": {
        "controller-gen.kubebuilder.io/version": "v0.17.1"
      },
      "served_versions": [
        "v1alpha1"
      ],
      "stored_version": "v1alpha1",
      "categories": [],
      "short_names": [],
      "description": null,
      "instance_count": 0
    },
    {
      "name": "appbindings.appcatalog.appscode.com",
      "group": "appcatalog.appscode.com",
      "version": "v1alpha1",
      "kind": "AppBinding",
      "plural": "appbindings",
      "singular": "appbinding",
      "scope": "Namespaced",
      "creation_timestamp": "2025-09-06T13:34:25+00:00",
      "labels": {
        "app.kubernetes.io/name": "catalog"
      },
      "annotations": {},
      "served_versions": [
        "v1alpha1"
      ],
      "stored_version": "v1alpha1",
      "categories": [
        "catalog",
        "appscode",
        "all"
      ],
      "short_names": [],
      "description": null,
      "instance_count": 0
    },
    {
      "name": "applications.argoproj.io",
      "group": "argoproj.io",
      "version": "v1alpha1",
      "kind": "Application",
      "plural": "applications",
      "singular": "application",
      "scope": "Namespaced",
      "creation_timestamp": "2025-09-06T10:23:40+00:00",
      "labels": {
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/name": "applications.argoproj.io",
        "app.kubernetes.io/part-of": "argocd"
      },
      "annotations": {
        "helm.sh/resource-policy": "keep",
        "meta.helm.sh/release-name": "argocd",
        "meta.helm.sh/release-namespace": "krateo-system"
      },
      "served_versions": [
        "v1alpha1"
      ],
      "stored_version": "v1alpha1",
      "categories": [],
      "short_names": [
        "app",
        "apps"
      ],
      "description": null,
      "instance_count": 0
    },
    {
      "name": "applicationsets.argoproj.io",
      "group": "argoproj.io",
      "version": "v1alpha1",
      "kind": "ApplicationSet",
      "plural": "applicationsets",
      "singular": "applicationset",
      "scope": "Namespaced",
      "creation_timestamp": "2025-09-06T10:23:40+00:00",
      "labels": {
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/name": "applicationsets.argoproj.io",
        "app.kubernetes.io/part-of": "argocd"
      },
      "annotations": {
        "helm.sh/resource-policy": "keep",
        "meta.helm.sh/release-name": "argocd",
        "meta.helm.sh/release-namespace": "krateo-system"
      },
      "served_versions": [
        "v1alpha1"
      ],
      "stored_version": "v1alpha1",
      "categories": [],
      "short_names": [
        "appset",
        "appsets"
      ],
      "description": null,
      "instance_count": 0
    },
    {
      "name": "appprojects.argoproj.io",
      "group": "argoproj.io",
      "version": "v1alpha1",
      "kind": "AppProject",
      "plural": "appprojects",
      "singular": "appproject",
      "scope": "Namespaced",
      "creation_timestamp": "2025-09-06T10:23:40+00:00",
      "labels": {
        "app.kubernetes.io/managed-by": "Helm",
        "app.kubernetes.io/name": "appprojects.argoproj.io",
        "app.kubernetes.io/part-of": "argocd"
      },
      "annotations": {
        "helm.sh/resource-policy": "keep",
        "meta.helm.sh/release-name": "argocd",
        "meta.helm.sh/release-namespace": "krateo-system"
      },
      "served_versions": [
        "v1alpha1"
      ],
      "stored_version": "v1alpha1",
      "categories": [],
      "short_names": [
        "appproj",
        "appprojs"
      ],
      "description": null,
      "instance_count": 0
    },
    {
      "name": "autonomouscontainerdatabases.database.oracle.com",
      "group": "database.oracle.com",
      "version": "v4",
      "kind": "AutonomousContainerDatabase",
      "plural": "autonomouscontainerdatabases",
      "singular": "autonomouscontainerdatabase",
      "scope": "Namespaced",
      "creation_timestamp": "2025-09-06T17:41:21+00:00",
      "labels": {
        "olm.managed": "true",
        "operators.coreos.com/oracle-database-operator.operators": ""
      },
      "annotations": {
        "cert-manager.io/inject-ca-from": "oracle-database-operator-system/oracle-database-operator-serving-cert",
        "controller-gen.kubebuilder.io/version": "v0.16.5",
        "operatorframework.io/installed-alongside-f8529ccd93ced1d5": "operators/oracle-database-operator.v1.2.0"
      },
      "served_versions": [
        "v1alpha1",
        "v4"
      ],
      "stored_version": "v4",
      "categories": [],
      "short_names": [
        "acd",
        "acds"
      ],
      "description": null,
      "instance_count": 0
    },
    {
      "name": "autonomousdatabasebackups.database.oracle.com",
      "group": "database.oracle.com",
      "version": "v4",
      "kind": "AutonomousDatabaseBackup",
      "plural": "autonomousdatabasebackups",
      "singular": "autonomousdatabasebackup",
      "scope": "Namespaced",
      "creation_timestamp": "2025-09-06T17:41:21+00:00",
      "labels": {
        "olm.managed": "true",
        "operators.coreos.com/oracle-database-operator.operators": ""
      },
      "annotations": {
        "cert-manager.io/inject-ca-from": "oracle-database-operator-system/oracle-database-operator-serving-cert",
        "controller-gen.kubebuilder.io/version": "v0.16.5",
        "operatorframework.io/installed-alongside-f8529ccd93ced1d5": "operators/oracle-database-operator.v1.2.0"
      },
      "served_versions": [
        "v1alpha1",
        "v4"
      ],
      "stored_version": "v4",
      "categories": [],
      "short_names": [
        "adbbu",
        "adbbus"
      ],
      "description": null,
      "instance_count": 0
    },
    {
      "name": "autonomousdatabaserestores.database.oracle.com",
      "group": "database.oracle.com",
      "version": "v4",
      "kind": "AutonomousDatabaseRestore",
      "plural": "autonomousdatabaserestores",
      "singular": "autonomousdatabaserestore",
      "scope": "Namespaced",
      "creation_timestamp": "2025-09-06T17:41:21+00:00",
      "labels": {
        "olm.managed": "true",
        "operators.coreos.com/oracle-database-operator.operators": ""
      },
      "annotations": {
        "cert-manager.io/inject-ca-from": "oracle-database-operator-system/oracle-database-operator-serving-cert",
        "controller-gen.kubebuilder.io/version": "v0.16.5",
        "operatorframework.io/installed-alongside-f8529ccd93ced1d5": "operators/oracle-database-operator.v1.2.0"
      },
      "served_versions": [
        "v1alpha1",
        "v4"
      ],
      "stored_version": "v4",
      "categories": [],
      "short_names": [
        "adbr",
        "adbrs"
      ],
      "description": null,
      "instance_count": 0
    },
    {
      "name": "autonomousdatabases.database.oracle.com",
      "group": "database.oracle.com",
      "version": "v4",
      "kind": "AutonomousDatabase",
      "plural": "autonomousdatabases",
      "singular": "autonomousdatabase",
      "scope": "Namespaced",
      "creation_timestamp": "2025-09-06T17:41:21+00:00",
      "labels": {
        "olm.managed": "true",
        "operators.coreos.com/oracle-database-operator.operators": ""
      },
      "annotations": {
        "cert-manager.io/inject-ca-from": "oracle-database-operator-system/oracle-database-operator-serving-cert",
        "controller-gen.kubebuilder.io/version": "v0.16.5",
        "operatorframework.io/installed-alongside-f8529ccd93ced1d5": "operators/oracle-database-operator.v1.2.0"
      },
      "served_versions": [
        "v1alpha1",
        "v4"
      ],
      "stored_version": "v4",
      "categories": [],
      "short_names": [
        "adb",
        "adbs"
      ],
      "description": null,
      "instance_count": 0
    },
    {
      "name": "backups.k8s.mariadb.com",
      "group": "k8s.mariadb.com",
      "version": "v1alpha1",
      "kind": "Backup",
      "plural": "backups",
      "singular": "backup",
      "scope": "Namespaced",
      "creation_timestamp": "2025-09-07T09:15:52+00:00",
      "labels": {
        "olm.managed": "true",
        "operators.coreos.com/mariadb-operator.operators": ""
      },
      "annotations": {
        "controller-gen.kubebuilder.io/version": "v0.18.0",
        "operatorframework.io/installed-alongside-6fd75c749733b588": "operators/mariadb-operator.v25.8.3"
      },
      "served_versions": [
        "v1alpha1"
      ],
      "stored_version": "v1alpha1",
      "categories": [],
      "short_names": [
        "bmdb"
      ],
      "description": null,
      "instance_count": 0
    },
    {
      "name": "backups.postgresql.cnpg.io",
      "group": "postgresql.cnpg.io",
      "version": "v1",
      "kind": "Backup",
      "plural": "backups",
      "singular": "backup",
      "scope": "Namespaced",
      "creation_timestamp": "2025-09-07T09:12:53+00:00",
      "labels": {
        "olm.managed": "true",
        "operators.coreos.com/cloudnative-pg.operators": ""
      },
      "annotations": {
        "controller-gen.kubebuilder.io/version": "v0.18.0",
        "operatorframework.io/installed-alongside-26b2108901275579": "operators/cloudnative-pg.v1.27.0"
      },
      "served_versions": [
        "v1"
      ],
      "stored_version": "v1",
      "categories": [],
      "short_names": [],
      "description": null,
      "instance_count": 0
    },
    {
      "name": "barcharts.widgets.templates.krateo.io",
      "group": "widgets.templates.krateo.io",
      "version": "v1beta1",
      "kind": "BarChart",
      "plural": "barcharts",
      "singular": "barchart",
      "scope": "Namespaced",
      "creation_timestamp": "2025-09-06T09:46:48+00:00",
      "labels": {},
      "annotations": {
        "controller-gen.kubebuilder.io/version": "v0.16.1"
      },
      "served_versions": [
        "v1beta1"
      ],
      "stored_version": "v1beta1",
      "categories": [
        "widgets",
        "krateo"
      ],
      "short_names": [],
      "description": null,
      "instance_count": 0
    },
    {
      "name": "bearerauths.github.kog.krateo.io",
      "group": "github.kog.krateo.io",
      "version": "v1alpha1",
      "kind": "BearerAuth",
      "plural": "bearerauths",
      "singular": "bearerauth",
      "scope": "Namespaced",
      "creation_timestamp": "2025-09-06T10:23:17+00:00",
      "labels": {},
      "annotations": {
        "controller-gen.kubebuilder.io/version": "v0.16.1"
      },
      "served_versions": [
        "v1alpha1"
      ],
      "stored_version": "v1alpha1",
      "categories": [
        "runnergroup",
        "restauths",
        "ra"
      ],
      "short_names": [],
      "description": null,
      "instance_count": 0
    },
    {
      "name": "buttons.widgets.templates.krateo.io",
      "group": "widgets.templates.krateo.io",
      "version": "v1beta1",
      "kind": "Button",
      "plural": "buttons",
      "singular": "button",
      "scope": "Namespaced",
      "creation_timestamp": "2025-09-06T09:46:48+00:00",
      "labels": {},
      "annotations": {
        "controller-gen.kubebuilder.io/version": "v0.16.1"
      },
      "served_versions": [
        "v1beta1"
      ],
      "stored_version": "v1beta1",
      "categories": [
        "widgets",
        "krateo"
      ],
      "short_names": [],
      "description": null,
      "instance_count": 0
    },
    {
      "name": "cassandraversions.catalog.kubedb.com",
      "group": "catalog.kubedb.com",
      "version": "v1alpha1",
      "kind": "CassandraVersion",
      "plural": "cassandraversions",
      "singular": "cassandraversion",
      "scope": "Cluster",
      "creation_timestamp": "2025-09-06T13:33:51+00:00",
      "labels": {
        "app.kubernetes.io/name": "kubedb"
      },
      "annotations": {},
      "served_versions": [
        "v1alpha1"
      ],
      "stored_version": "v1alpha1",
      "categories": [
        "catalog",
        "kubedb",
        "appscode"
      ],
      "short_names": [
        "casversion"
      ],
      "description": null,
      "instance_count": 0
    },
    {
      "name": "catalogsources.operators.coreos.com",
      "group": "operators.coreos.com",
      "version": "v1alpha1",
      "kind": "CatalogSource",
      "plural": "catalogsources",
      "singular": "catalogsource",
      "scope": "Namespaced",
      "creation_timestamp": "2025-09-06T12:34:50+00:00",
      "labels": {},
      "annotations": {
        "controller-gen.kubebuilder.io/version": "v0.14.0"
      },
      "served_versions": [
        "v1alpha1"
      ],
      "stored_version": "v1alpha1",
      "categories": [
        "olm"
      ],
      "short_names": [
        "catsrc"
      ],
      "description": null,
      "instance_count": 0
    },
    {
      "name": "cdbs.database.oracle.com",
      "group": "database.oracle.com",
      "version": "v4",
      "kind": "CDB",
      "plural": "cdbs",
      "singular": "cdb",
      "scope": "Namespaced",
      "creation_timestamp": "2025-09-06T17:41:21+00:00",
      "labels": {
        "olm.managed": "true",
        "operators.coreos.com/oracle-database-operator.operators": ""
      },
      "annotations": {
        "cert-manager.io/inject-ca-from": "oracle-database-operator-system/oracle-database-operator-serving-cert",
        "controller-gen.kubebuilder.io/version": "v0.16.5",
        "operatorframework.io/installed-alongside-f8529ccd93ced1d5": "operators/oracle-database-operator.v1.2.0"
      },
      "served_versions": [
        "v1alpha1",
        "v4"
      ],
      "stored_version": "v4",
      "categories": [],
      "short_names": [],
      "description": null,
      "instance_count": 0
    },
    {
      "name": "cdiconfigs.cdi.kubevirt.io",
      "group": "cdi.kubevirt.io",
      "version": "v1beta1",
      "kind": "CDIConfig",
      "plural": "cdiconfigs",
      "singular": "cdiconfig",
      "scope": "Cluster",
      "creation_timestamp": "2025-09-06T13:01:11+00:00",
      "labels": {
        "app.kubernetes.io/part-of": "hyperconverged-cluster",
        "app.kubernetes.io/version": "1.17.0",
        "operator.cdi.kubevirt.io/createVersion": "v1.63.0"
      },
      "annotations": {
        "controller-gen.kubebuilder.io/version": "v0.14.0",
        "operator.cdi.kubevirt.io/lastAppliedConfiguration": "{\"kind\":\"CustomResourceDefinition\",\"apiVersion\":\"apiextensions.k8s.io/v1\",\"metadata\":{\"name\":\"cdiconfigs.cdi.kubevirt.io\",\"creationTimestamp\":null,\"annotations\":{\"controller-gen.kubebuilder.io/version\":\"v0.14.0\"}},\"spec\":{\"group\":\"cdi.kubevirt.io\",\"names\":{\"plural\":\"cdiconfigs\",\"singular\":\"cdiconfig\",\"kind\":\"CDIConfig\",\"listKind\":\"CDIConfigList\"},\"scope\":\"Cluster\",\"versions\":[{\"name\":\"v1beta1\",\"served\":true,\"storage\":true,\"schema\":{\"openAPIV3Schema\":{\"description\":\"CDIConfig provides a user configuration for CDI\",\"type\":\"object\",\"required\":[\"spec\"],\"properties\":{\"apiVersion\":{\"description\":\"APIVersion defines the versioned schema of this representation of an object.\\nServers should convert recognized schemas to the latest internal value, and\\nmay reject unrecognized values.\\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources\",\"type\":\"string\"},\"kind\":{\"description\":\"Kind is a string value representing the REST resource this object represents.\\nServers may infer this from the endpoint the client submits requests to.\\nCannot be updated.\\nIn CamelCase.\\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\",\"type\":\"string\"},\"metadata\":{\"type\":\"object\"},\"spec\":{\"description\":\"CDIConfigSpec defines specification for user configuration\",\"type\":\"object\",\"properties\":{\"dataVolumeTTLSeconds\":{\"description\":\"DataVolumeTTLSeconds is the time in seconds after DataVolume completion it can be garbage collected. Disabled by default.\\nDeprecated: Removed in v1.62.\",\"type\":\"integer\",\"format\":\"int32\"},\"featureGates\":{\"description\":\"FeatureGates are a list of specific enabled feature gates\",\"type\":\"array\",\"items\":{\"type\":\"string\"}},\"filesystemOverhead\":{\"description\":\"FilesystemOverhead describes the space reserved for overhead when using Filesystem volumes. A value is between 0 and 1, if not defined it is 0.06 (6% overhead)\",\"type\":\"object\",\"properties\":{\"global\":{\"description\":\"Global is how much space of a Filesystem volume should be reserved for overhead. This value is used unless overridden by a more specific value (per storageClass)\",\"type\":\"string\",\"pattern\":\"^(0(?:\\\\.\\\\d{1,3})?|1)$\"},\"storageClass\":{\"description\":\"StorageClass specifies how much space of a Filesystem volume should be reserved for safety. The keys are the storageClass and the values are the overhead. This value overrides the global value\",\"type\":\"object\",\"additionalProperties\":{\"description\":\"Percent is a string that can only be a value between [0,1)\\n(Note: we actually rely on reconcile to reject invalid values)\",\"type\":\"string\",\"pattern\":\"^(0(?:\\\\.\\\\d{1,3})?|1)$\"}}}},\"imagePullSecrets\":{\"description\":\"The imagePullSecrets used to pull the container images\",\"type\":\"array\",\"items\":{\"description\":\"LocalObjectReference contains enough information to let you locate the\\nreferenced object inside the same namespace.\",\"type\":\"object\",\"properties\":{\"name\":{\"description\":\"Name of the referent.\\nThis field is effectively required, but due to backwards compatibility is\\nallowed to be empty. Instances of this type with an empty value here are\\nalmost certainly wrong.\\nTODO: Add other useful fields. apiVersion, kind, uid?\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\\nTODO: Drop `kubebuilder:default` when controller-gen doesn't need it https://github.com/kubernetes-sigs/kubebuilder/issues/3896.\",\"type\":\"string\",\"default\":\"\"}},\"x-kubernetes-map-type\":\"atomic\"}},\"importProxy\":{\"description\":\"ImportProxy contains importer pod proxy configuration.\",\"type\":\"object\",\"properties\":{\"HTTPProxy\":{\"description\":\"HTTPProxy is the URL http://\\u003cusername\\u003e:\\u003cpswd\\u003e@\\u003cip\\u003e:\\u003cport\\u003e of the import proxy for HTTP requests.  Empty means unset and will not result in the import pod env var.\",\"type\":\"string\"},\"HTTPSProxy\":{\"description\":\"HTTPSProxy is the URL https://\\u003cusername\\u003e:\\u003cpswd\\u003e@\\u003cip\\u003e:\\u003cport\\u003e of the import proxy for HTTPS requests.  Empty means unset and will not result in the import pod env var.\",\"type\":\"string\"},\"noProxy\":{\"description\":\"NoProxy is a comma-separated list of hostnames and/or CIDRs for which the proxy should not be used. Empty means unset and will not result in the import pod env var.\",\"type\":\"string\"},\"trustedCAProxy\":{\"description\":\"TrustedCAProxy is the name of a ConfigMap in the cdi namespace that contains a user-provided trusted certificate authority (CA) bundle.\\nThe TrustedCAProxy ConfigMap is consumed by the DataImportCron controller for creating cronjobs, and by the import controller referring a copy of the ConfigMap in the import namespace.\\nHere is an example of the ConfigMap (in yaml):\\n\\n\\napiVersion: v1\\nkind: ConfigMap\\nmetadata:\\n  name: my-ca-proxy-cm\\n  namespace: cdi\\ndata:\\n  ca.pem: |\\n    -----BEGIN CERTIFICATE-----\\n\\t   ... \\u003cbase64 encoded cert\\u003e ...\\n\\t   -----END CERTIFICATE-----\",\"type\":\"string\"}}},\"insecureRegistries\":{\"description\":\"InsecureRegistries is a list of TLS disabled registries\",\"type\":\"array\",\"items\":{\"type\":\"string\"}},\"logVerbosity\":{\"description\":\"LogVerbosity overrides the default verbosity level used to initialize loggers\",\"type\":\"integer\",\"format\":\"int32\"},\"podResourceRequirements\":{\"description\":\"ResourceRequirements describes the compute resource requirements.\",\"type\":\"object\",\"properties\":{\"claims\":{\"description\":\"Claims lists the names of resources, defined in spec.resourceClaims,\\nthat are used by this container.\\n\\n\\nThis is an alpha field and requires enabling the\\nDynamicResourceAllocation feature gate.\\n\\n\\nThis field is immutable. It can only be set for containers.\",\"type\":\"array\",\"items\":{\"description\":\"ResourceClaim references one entry in PodSpec.ResourceClaims.\",\"type\":\"object\",\"required\":[\"name\"],\"properties\":{\"name\":{\"description\":\"Name must match the name of one entry in pod.spec.resourceClaims of\\nthe Pod where this field is used. It makes that resource available\\ninside a container.\",\"type\":\"string\"}}},\"x-kubernetes-list-map-keys\":[\"name\"],\"x-kubernetes-list-type\":\"map\"},\"limits\":{\"description\":\"Limits describes the maximum amount of compute resources allowed.\\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/\",\"type\":\"object\",\"additionalProperties\":{\"pattern\":\"^(\\\\+|-)?(([0-9]+(\\\\.[0-9]*)?)|(\\\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\\\+|-)?(([0-9]+(\\\\.[0-9]*)?)|(\\\\.[0-9]+))))?$\",\"anyOf\":[{\"type\":\"integer\"},{\"type\":\"string\"}],\"x-kubernetes-int-or-string\":true}},\"requests\":{\"description\":\"Requests describes the minimum amount of compute resources required.\\nIf Requests is omitted for a container, it defaults to Limits if that is explicitly specified,\\notherwise to an implementation-defined value. Requests cannot exceed Limits.\\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/\",\"type\":\"object\",\"additionalProperties\":{\"pattern\":\"^(\\\\+|-)?(([0-9]+(\\\\.[0-9]*)?)|(\\\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\\\+|-)?(([0-9]+(\\\\.[0-9]*)?)|(\\\\.[0-9]+))))?$\",\"anyOf\":[{\"type\":\"integer\"},{\"type\":\"string\"}],\"x-kubernetes-int-or-string\":true}}}},\"preallocation\":{\"description\":\"Preallocation controls whether storage for DataVolumes should be allocated in advance.\",\"type\":\"boolean\"},\"scratchSpaceStorageClass\":{\"description\":\"Override the storage class to used for scratch space during transfer operations. The scratch space storage class is determined in the following order: 1. value of scratchSpaceStorageClass, if that doesn't exist, use the default storage class, if there is no default storage class, use the storage class of the DataVolume, if no storage class specified, use no storage class for scratch space\",\"type\":\"string\"},\"tlsSecurityProfile\":{\"description\":\"TLSSecurityProfile is used by operators to apply cluster-wide TLS security settings to operands.\",\"type\":\"object\",\"properties\":{\"custom\":{\"description\":\"custom is a user-defined TLS security profile. Be extremely careful using a custom\\nprofile as invalid configurations can be catastrophic. An example custom profile\\nlooks like this:\\n\\n\\n  ciphers:\\n    - ECDHE-ECDSA-CHACHA20-POLY1305\\n    - ECDHE-RSA-CHACHA20-POLY1305\\n    - ECDHE-RSA-AES128-GCM-SHA256\\n    - ECDHE-ECDSA-AES128-GCM-SHA256\\n  minTLSVersion: VersionTLS11\",\"type\":\"object\",\"required\":[\"ciphers\",\"minTLSVersion\"],\"properties\":{\"ciphers\":{\"description\":\"ciphers is used to specify the cipher algorithms that are negotiated\\nduring the TLS handshake.  Operators may remove entries their operands\\ndo not support.  For example, to use DES-CBC3-SHA  (yaml):\\n\\n\\n  ciphers:\\n    - DES-CBC3-SHA\",\"type\":\"array\",\"items\":{\"type\":\"string\"}},\"minTLSVersion\":{\"description\":\"minTLSVersion is used to specify the minimal version of the TLS protocol\\nthat is negotiated during the TLS handshake. For example, to use TLS\\nversions 1.1, 1.2 and 1.3 (yaml):\\n\\n\\n  minTLSVersion: VersionTLS11\\n\\n\\nNOTE: currently the highest minTLSVersion allowed is VersionTLS12\",\"type\":\"string\",\"enum\":[\"VersionTLS10\",\"VersionTLS11\",\"VersionTLS12\",\"VersionTLS13\"]}},\"nullable\":true},\"intermediate\":{\"description\":\"intermediate is a TLS security profile based on:\\n\\n\\nhttps://wiki.mozilla.org/Security/Server_Side_TLS#Intermediate_compatibility_.28recommended.29\\n\\n\\nand looks like this (yaml):\\n\\n\\n  ciphers:\\n    - TLS_AES_128_GCM_SHA256\\n    - TLS_AES_256_GCM_SHA384\\n    - TLS_CHACHA20_POLY1305_SHA256\\n    - ECDHE-ECDSA-AES128-GCM-SHA256\\n    - ECDHE-RSA-AES128-GCM-SHA256\\n    - ECDHE-ECDSA-AES256-GCM-SHA384\\n    - ECDHE-RSA-AES256-GCM-SHA384\\n    - ECDHE-ECDSA-CHACHA20-POLY1305\\n    - ECDHE-RSA-CHACHA20-POLY1305\\n    - DHE-RSA-AES128-GCM-SHA256\\n    - DHE-RSA-AES256-GCM-SHA384\\n  minTLSVersion: VersionTLS12\",\"type\":\"object\",\"nullable\":true},\"modern\":{\"description\":\"modern is a TLS security profile based on:\\n\\n\\nhttps://wiki.mozilla.org/Security/Server_Side_TLS#Modern_compatibility\\n\\n\\nand looks like this (yaml):\\n\\n\\n  ciphers:\\n    - TLS_AES_128_GCM_SHA256\\n    - TLS_AES_256_GCM_SHA384\\n    - TLS_CHACHA20_POLY1305_SHA256\\n  minTLSVersion: VersionTLS13\\n\\n\\nNOTE: Currently unsupported.\",\"type\":\"object\",\"nullable\":true},\"old\":{\"description\":\"old is a TLS security profile based on:\\n\\n\\nhttps://wiki.mozilla.org/Security/Server_Side_TLS#Old_backward_compatibility\\n\\n\\nand looks like this (yaml):\\n\\n\\n  ciphers:\\n    - TLS_AES_128_GCM_SHA256\\n    - TLS_AES_256_GCM_SHA384\\n    - TLS_CHACHA20_POLY1305_SHA256\\n    - ECDHE-ECDSA-AES128-GCM-SHA256\\n    - ECDHE-RSA-AES128-GCM-SHA256\\n    - ECDHE-ECDSA-AES256-GCM-SHA384\\n    - ECDHE-RSA-AES256-GCM-SHA384\\n    - ECDHE-ECDSA-CHACHA20-POLY1305\\n    - ECDHE-RSA-CHACHA20-POLY1305\\n    - DHE-RSA-AES128-GCM-SHA256\\n    - DHE-RSA-AES256-GCM-SHA384\\n    - DHE-RSA-CHACHA20-POLY1305\\n    - ECDHE-ECDSA-AES128-SHA256\\n    - ECDHE-RSA-AES128-SHA256\\n    - ECDHE-ECDSA-AES128-SHA\\n    - ECDHE-RSA-AES128-SHA\\n    - ECDHE-ECDSA-AES256-SHA384\\n    - ECDHE-RSA-AES256-SHA384\\n    - ECDHE-ECDSA-AES256-SHA\\n    - ECDHE-RSA-AES256-SHA\\n    - DHE-RSA-AES128-SHA256\\n    - DHE-RSA-AES256-SHA256\\n    - AES128-GCM-SHA256\\n    - AES256-GCM-SHA384\\n    - AES128-SHA256\\n    - AES256-SHA256\\n    - AES128-SHA\\n    - AES256-SHA\\n    - DES-CBC3-SHA\\n  minTLSVersion: VersionTLS10\",\"type\":\"object\",\"nullable\":true},\"type\":{\"description\":\"type is one of Old, Intermediate, Modern or Custom. Custom provides\\nthe ability to specify individual TLS security profile parameters.\\nOld, Intermediate and Modern are TLS security profiles based on:\\n\\n\\nhttps://wiki.mozilla.org/Security/Server_Side_TLS#Recommended_configurations\\n\\n\\nThe profiles are intent based, so they may change over time as new ciphers are developed and existing ciphers\\nare found to be insecure.  Depending on precisely which ciphers are available to a process, the list may be\\nreduced.\\n\\n\\nNote that the Modern profile is currently not supported because it is not\\nyet well adopted by common software libraries.\",\"type\":\"string\",\"enum\":[\"Old\",\"Intermediate\",\"Modern\",\"Custom\"]}}},\"uploadProxyURLOverride\":{\"description\":\"Override the URL used when uploading to a DataVolume\",\"type\":\"string\"}}},\"status\":{\"description\":\"CDIConfigStatus provides the most recently observed status of the CDI Config resource\",\"type\":\"object\",\"properties\":{\"defaultPodResourceRequirements\":{\"description\":\"ResourceRequirements describes the compute resource requirements.\",\"type\":\"object\",\"properties\":{\"claims\":{\"description\":\"Claims lists the names of resources, defined in spec.resourceClaims,\\nthat are used by this container.\\n\\n\\nThis is an alpha field and requires enabling the\\nDynamicResourceAllocation feature gate.\\n\\n\\nThis field is immutable. It can only be set for containers.\",\"type\":\"array\",\"items\":{\"description\":\"ResourceClaim references one entry in PodSpec.ResourceClaims.\",\"type\":\"object\",\"required\":[\"name\"],\"properties\":{\"name\":{\"description\":\"Name must match the name of one entry in pod.spec.resourceClaims of\\nthe Pod where this field is used. It makes that resource available\\ninside a container.\",\"type\":\"string\"}}},\"x-kubernetes-list-map-keys\":[\"name\"],\"x-kubernetes-list-type\":\"map\"},\"limits\":{\"description\":\"Limits describes the maximum amount of compute resources allowed.\\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/\",\"type\":\"object\",\"additionalProperties\":{\"pattern\":\"^(\\\\+|-)?(([0-9]+(\\\\.[0-9]*)?)|(\\\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\\\+|-)?(([0-9]+(\\\\.[0-9]*)?)|(\\\\.[0-9]+))))?$\",\"anyOf\":[{\"type\":\"integer\"},{\"type\":\"string\"}],\"x-kubernetes-int-or-string\":true}},\"requests\":{\"description\":\"Requests describes the minimum amount of compute resources required.\\nIf Requests is omitted for a container, it defaults to Limits if that is explicitly specified,\\notherwise to an implementation-defined value. Requests cannot exceed Limits.\\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/\",\"type\":\"object\",\"additionalProperties\":{\"pattern\":\"^(\\\\+|-)?(([0-9]+(\\\\.[0-9]*)?)|(\\\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\\\+|-)?(([0-9]+(\\\\.[0-9]*)?)|(\\\\.[0-9]+))))?$\",\"anyOf\":[{\"type\":\"integer\"},{\"type\":\"string\"}],\"x-kubernetes-int-or-string\":true}}}},\"filesystemOverhead\":{\"description\":\"FilesystemOverhead describes the space reserved for overhead when using Filesystem volumes. A percentage value is between 0 and 1\",\"type\":\"object\",\"properties\":{\"global\":{\"description\":\"Global is how much space of a Filesystem volume should be reserved for overhead. This value is used unless overridden by a more specific value (per storageClass)\",\"type\":\"string\",\"pattern\":\"^(0(?:\\\\.\\\\d{1,3})?|1)$\"},\"storageClass\":{\"description\":\"StorageClass specifies how much space of a Filesystem volume should be reserved for safety. The keys are the storageClass and the values are the overhead. This value overrides the global value\",\"type\":\"object\",\"additionalProperties\":{\"description\":\"Percent is a string that can only be a value between [0,1)\\n(Note: we actually rely on reconcile to reject invalid values)\",\"type\":\"string\",\"pattern\":\"^(0(?:\\\\.\\\\d{1,3})?|1)$\"}}}},\"imagePullSecrets\":{\"description\":\"The imagePullSecrets used to pull the container images\",\"type\":\"array\",\"items\":{\"description\":\"LocalObjectReference contains enough information to let you locate the\\nreferenced object inside the same namespace.\",\"type\":\"object\",\"properties\":{\"name\":{\"description\":\"Name of the referent.\\nThis field is effectively required, but due to backwards compatibility is\\nallowed to be empty. Instances of this type with an empty value here are\\nalmost certainly wrong.\\nTODO: Add other useful fields. apiVersion, kind, uid?\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\\nTODO: Drop `kubebuilder:default` when controller-gen doesn't need it https://github.com/kubernetes-sigs/kubebuilder/issues/3896.\",\"type\":\"string\",\"default\":\"\"}},\"x-kubernetes-map-type\":\"atomic\"}},\"importProxy\":{\"description\":\"ImportProxy contains importer pod proxy configuration.\",\"type\":\"object\",\"properties\":{\"HTTPProxy\":{\"description\":\"HTTPProxy is the URL http://\\u003cusername\\u003e:\\u003cpswd\\u003e@\\u003cip\\u003e:\\u003cport\\u003e of the import proxy for HTTP requests.  Empty means unset and will not result in the import pod env var.\",\"type\":\"string\"},\"HTTPSProxy\":{\"description\":\"HTTPSProxy is the URL https://\\u003cusername\\u003e:\\u003cpswd\\u003e@\\u003cip\\u003e:\\u003cport\\u003e of the import proxy for HTTPS requests.  Empty means unset and will not result in the import pod env var.\",\"type\":\"string\"},\"noProxy\":{\"description\":\"NoProxy is a comma-separated list of hostnames and/or CIDRs for which the proxy should not be used. Empty means unset and will not result in the import pod env var.\",\"type\":\"string\"},\"trustedCAProxy\":{\"description\":\"TrustedCAProxy is the name of a ConfigMap in the cdi namespace that contains a user-provided trusted certificate authority (CA) bundle.\\nThe TrustedCAProxy ConfigMap is consumed by the DataImportCron controller for creating cronjobs, and by the import controller referring a copy of the ConfigMap in the import namespace.\\nHere is an example of the ConfigMap (in yaml):\\n\\n\\napiVersion: v1\\nkind: ConfigMap\\nmetadata:\\n  name: my-ca-proxy-cm\\n  namespace: cdi\\ndata:\\n  ca.pem: |\\n    -----BEGIN CERTIFICATE-----\\n\\t   ... \\u003cbase64 encoded cert\\u003e ...\\n\\t   -----END CERTIFICATE-----\",\"type\":\"string\"}}},\"preallocation\":{\"description\":\"Preallocation controls whether storage for DataVolumes should be allocated in advance.\",\"type\":\"boolean\"},\"scratchSpaceStorageClass\":{\"description\":\"The calculated storage class to be used for scratch space\",\"type\":\"string\"},\"uploadProxyCA\":{\"description\":\"UploadProxyCA is the certificate authority of the upload proxy\",\"type\":\"string\"},\"uploadProxyURL\":{\"description\":\"The calculated upload proxy URL\",\"type\":\"string\"}}}}}}}]},\"status\":{\"conditions\":null,\"acceptedNames\":{\"plural\":\"\",\"kind\":\"\"},\"storedVersions\":null}}"
      },
      "served_versions": [
        "v1beta1"
      ],
      "stored_version": "v1beta1",
      "categories": [],
      "short_names": [],
      "description": null,
      "instance_count": 0
    },
    {
      "name": "cdis.cdi.kubevirt.io",
      "group": "cdi.kubevirt.io",
      "version": "v1beta1",
      "kind": "CDI",
      "plural": "cdis",
      "singular": "cdi",
      "scope": "Cluster",
      "creation_timestamp": "2025-09-06T12:58:07+00:00",
      "labels": {},
      "annotations": {
        "controller-gen.kubebuilder.io/version": "v0.14.0",
        "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"apiextensions.k8s.io/v1\",\"kind\":\"CustomResourceDefinition\",\"metadata\":{\"annotations\":{\"controller-gen.kubebuilder.io/version\":\"v0.14.0\"},\"name\":\"cdis.cdi.kubevirt.io\"},\"spec\":{\"group\":\"cdi.kubevirt.io\",\"names\":{\"kind\":\"CDI\",\"listKind\":\"CDIList\",\"plural\":\"cdis\",\"shortNames\":[\"cdi\",\"cdis\"],\"singular\":\"cdi\"},\"scope\":\"Cluster\",\"versions\":[{\"additionalPrinterColumns\":[{\"jsonPath\":\".metadata.creationTimestamp\",\"name\":\"Age\",\"type\":\"date\"},{\"jsonPath\":\".status.phase\",\"name\":\"Phase\",\"type\":\"string\"}],\"name\":\"v1alpha1\",\"schema\":{\"openAPIV3Schema\":{\"description\":\"CDI is the CDI Operator CRD\",\"properties\":{\"apiVersion\":{\"description\":\"APIVersion defines the versioned schema of this representation of an object.\\nServers should convert recognized schemas to the latest internal value, and\\nmay reject unrecognized values.\\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources\",\"type\":\"string\"},\"kind\":{\"description\":\"Kind is a string value representing the REST resource this object represents.\\nServers may infer this from the endpoint the client submits requests to.\\nCannot be updated.\\nIn CamelCase.\\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\",\"type\":\"string\"},\"metadata\":{\"type\":\"object\"},\"spec\":{\"description\":\"CDISpec defines our specification for the CDI installation\",\"properties\":{\"certConfig\":{\"description\":\"certificate configuration\",\"properties\":{\"ca\":{\"description\":\"CA configuration\\nCA certs are kept in the CA bundle as long as they are valid\",\"properties\":{\"duration\":{\"description\":\"The requested 'duration' (i.e. lifetime) of the Certificate.\",\"type\":\"string\"},\"renewBefore\":{\"description\":\"The amount of time before the currently issued certificate's `notAfter`\\ntime that we will begin to attempt to renew the certificate.\",\"type\":\"string\"}},\"type\":\"object\"},\"client\":{\"description\":\"Client configuration\\nCerts are rotated and discarded\",\"properties\":{\"duration\":{\"description\":\"The requested 'duration' (i.e. lifetime) of the Certificate.\",\"type\":\"string\"},\"renewBefore\":{\"description\":\"The amount of time before the currently issued certificate's `notAfter`\\ntime that we will begin to attempt to renew the certificate.\",\"type\":\"string\"}},\"type\":\"object\"},\"server\":{\"description\":\"Server configuration\\nCerts are rotated and discarded\",\"properties\":{\"duration\":{\"description\":\"The requested 'duration' (i.e. lifetime) of the Certificate.\",\"type\":\"string\"},\"renewBefore\":{\"description\":\"The amount of time before the currently issued certificate's `notAfter`\\ntime that we will begin to attempt to renew the certificate.\",\"type\":\"string\"}},\"type\":\"object\"}},\"type\":\"object\"},\"cloneStrategyOverride\":{\"description\":\"Clone strategy override: should we use a host-assisted copy even if snapshots are available?\",\"enum\":[\"copy\",\"snapshot\",\"csi-clone\"],\"type\":\"string\"},\"config\":{\"description\":\"CDIConfig at CDI level\",\"properties\":{\"dataVolumeTTLSeconds\":{\"description\":\"DataVolumeTTLSeconds is the time in seconds after DataVolume completion it can be garbage collected. Disabled by default.\\nDeprecated: Removed in v1.62.\",\"format\":\"int32\",\"type\":\"integer\"},\"featureGates\":{\"description\":\"FeatureGates are a list of specific enabled feature gates\",\"items\":{\"type\":\"string\"},\"type\":\"array\"},\"filesystemOverhead\":{\"description\":\"FilesystemOverhead describes the space reserved for overhead when using Filesystem volumes. A value is between 0 and 1, if not defined it is 0.06 (6% overhead)\",\"properties\":{\"global\":{\"description\":\"Global is how much space of a Filesystem volume should be reserved for overhead. This value is used unless overridden by a more specific value (per storageClass)\",\"pattern\":\"^(0(?:\\\\.\\\\d{1,3})?|1)$\",\"type\":\"string\"},\"storageClass\":{\"additionalProperties\":{\"description\":\"Percent is a string that can only be a value between [0,1)\\n(Note: we actually rely on reconcile to reject invalid values)\",\"pattern\":\"^(0(?:\\\\.\\\\d{1,3})?|1)$\",\"type\":\"string\"},\"description\":\"StorageClass specifies how much space of a Filesystem volume should be reserved for safety. The keys are the storageClass and the values are the overhead. This value overrides the global value\",\"type\":\"object\"}},\"type\":\"object\"},\"imagePullSecrets\":{\"description\":\"The imagePullSecrets used to pull the container images\",\"items\":{\"description\":\"LocalObjectReference contains enough information to let you locate the\\nreferenced object inside the same namespace.\",\"properties\":{\"name\":{\"default\":\"\",\"description\":\"Name of the referent.\\nThis field is effectively required, but due to backwards compatibility is\\nallowed to be empty. Instances of this type with an empty value here are\\nalmost certainly wrong.\\nTODO: Add other useful fields. apiVersion, kind, uid?\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\\nTODO: Drop `kubebuilder:default` when controller-gen doesn't need it https://github.com/kubernetes-sigs/kubebuilder/issues/3896.\",\"type\":\"string\"}},\"type\":\"object\",\"x-kubernetes-map-type\":\"atomic\"},\"type\":\"array\"},\"importProxy\":{\"description\":\"ImportProxy contains importer pod proxy configuration.\",\"properties\":{\"HTTPProxy\":{\"description\":\"HTTPProxy is the URL http://\\u003cusername\\u003e:\\u003cpswd\\u003e@\\u003cip\\u003e:\\u003cport\\u003e of the import proxy for HTTP requests.  Empty means unset and will not result in the import pod env var.\",\"type\":\"string\"},\"HTTPSProxy\":{\"description\":\"HTTPSProxy is the URL https://\\u003cusername\\u003e:\\u003cpswd\\u003e@\\u003cip\\u003e:\\u003cport\\u003e of the import proxy for HTTPS requests.  Empty means unset and will not result in the import pod env var.\",\"type\":\"string\"},\"noProxy\":{\"description\":\"NoProxy is a comma-separated list of hostnames and/or CIDRs for which the proxy should not be used. Empty means unset and will not result in the import pod env var.\",\"type\":\"string\"},\"trustedCAProxy\":{\"description\":\"TrustedCAProxy is the name of a ConfigMap in the cdi namespace that contains a user-provided trusted certificate authority (CA) bundle.\\nThe TrustedCAProxy ConfigMap is consumed by the DataImportCron controller for creating cronjobs, and by the import controller referring a copy of the ConfigMap in the import namespace.\\nHere is an example of the ConfigMap (in yaml):\\n\\n\\napiVersion: v1\\nkind: ConfigMap\\nmetadata:\\n  name: my-ca-proxy-cm\\n  namespace: cdi\\ndata:\\n  ca.pem: |\\n    -----BEGIN CERTIFICATE-----\\n\\t   ... \\u003cbase64 encoded cert\\u003e ...\\n\\t   -----END CERTIFICATE-----\",\"type\":\"string\"}},\"type\":\"object\"},\"insecureRegistries\":{\"description\":\"InsecureRegistries is a list of TLS disabled registries\",\"items\":{\"type\":\"string\"},\"type\":\"array\"},\"logVerbosity\":{\"description\":\"LogVerbosity overrides the default verbosity level used to initialize loggers\",\"format\":\"int32\",\"type\":\"integer\"},\"podResourceRequirements\":{\"description\":\"ResourceRequirements describes the compute resource requirements.\",\"properties\":{\"claims\":{\"description\":\"Claims lists the names of resources, defined in spec.resourceClaims,\\nthat are used by this container.\\n\\n\\nThis is an alpha field and requires enabling the\\nDynamicResourceAllocation feature gate.\\n\\n\\nThis field is immutable. It can only be set for containers.\",\"items\":{\"description\":\"ResourceClaim references one entry in PodSpec.ResourceClaims.\",\"properties\":{\"name\":{\"description\":\"Name must match the name of one entry in pod.spec.resourceClaims of\\nthe Pod where this field is used. It makes that resource available\\ninside a container.\",\"type\":\"string\"}},\"required\":[\"name\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-map-keys\":[\"name\"],\"x-kubernetes-list-type\":\"map\"},\"limits\":{\"additionalProperties\":{\"anyOf\":[{\"type\":\"integer\"},{\"type\":\"string\"}],\"pattern\":\"^(\\\\+|-)?(([0-9]+(\\\\.[0-9]*)?)|(\\\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\\\+|-)?(([0-9]+(\\\\.[0-9]*)?)|(\\\\.[0-9]+))))?$\",\"x-kubernetes-int-or-string\":true},\"description\":\"Limits describes the maximum amount of compute resources allowed.\\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/\",\"type\":\"object\"},\"requests\":{\"additionalProperties\":{\"anyOf\":[{\"type\":\"integer\"},{\"type\":\"string\"}],\"pattern\":\"^(\\\\+|-)?(([0-9]+(\\\\.[0-9]*)?)|(\\\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\\\+|-)?(([0-9]+(\\\\.[0-9]*)?)|(\\\\.[0-9]+))))?$\",\"x-kubernetes-int-or-string\":true},\"description\":\"Requests describes the minimum amount of compute resources required.\\nIf Requests is omitted for a container, it defaults to Limits if that is explicitly specified,\\notherwise to an implementation-defined value. Requests cannot exceed Limits.\\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/\",\"type\":\"object\"}},\"type\":\"object\"},\"preallocation\":{\"description\":\"Preallocation controls whether storage for DataVolumes should be allocated in advance.\",\"type\":\"boolean\"},\"scratchSpaceStorageClass\":{\"description\":\"Override the storage class to used for scratch space during transfer operations. The scratch space storage class is determined in the following order: 1. value of scratchSpaceStorageClass, if that doesn't exist, use the default storage class, if there is no default storage class, use the storage class of the DataVolume, if no storage class specified, use no storage class for scratch space\",\"type\":\"string\"},\"tlsSecurityProfile\":{\"description\":\"TLSSecurityProfile is used by operators to apply cluster-wide TLS security settings to operands.\",\"properties\":{\"custom\":{\"description\":\"custom is a user-defined TLS security profile. Be extremely careful using a custom\\nprofile as invalid configurations can be catastrophic. An example custom profile\\nlooks like this:\\n\\n\\n  ciphers:\\n    - ECDHE-ECDSA-CHACHA20-POLY1305\\n    - ECDHE-RSA-CHACHA20-POLY1305\\n    - ECDHE-RSA-AES128-GCM-SHA256\\n    - ECDHE-ECDSA-AES128-GCM-SHA256\\n  minTLSVersion: VersionTLS11\",\"nullable\":true,\"properties\":{\"ciphers\":{\"description\":\"ciphers is used to specify the cipher algorithms that are negotiated\\nduring the TLS handshake.  Operators may remove entries their operands\\ndo not support.  For example, to use DES-CBC3-SHA  (yaml):\\n\\n\\n  ciphers:\\n    - DES-CBC3-SHA\",\"items\":{\"type\":\"string\"},\"type\":\"array\"},\"minTLSVersion\":{\"description\":\"minTLSVersion is used to specify the minimal version of the TLS protocol\\nthat is negotiated during the TLS handshake. For example, to use TLS\\nversions 1.1, 1.2 and 1.3 (yaml):\\n\\n\\n  minTLSVersion: VersionTLS11\\n\\n\\nNOTE: currently the highest minTLSVersion allowed is VersionTLS12\",\"enum\":[\"VersionTLS10\",\"VersionTLS11\",\"VersionTLS12\",\"VersionTLS13\"],\"type\":\"string\"}},\"required\":[\"ciphers\",\"minTLSVersion\"],\"type\":\"object\"},\"intermediate\":{\"description\":\"intermediate is a TLS security profile based on:\\n\\n\\nhttps://wiki.mozilla.org/Security/Server_Side_TLS#Intermediate_compatibility_.28recommended.29\\n\\n\\nand looks like this (yaml):\\n\\n\\n  ciphers:\\n    - TLS_AES_128_GCM_SHA256\\n    - TLS_AES_256_GCM_SHA384\\n    - TLS_CHACHA20_POLY1305_SHA256\\n    - ECDHE-ECDSA-AES128-GCM-SHA256\\n    - ECDHE-RSA-AES128-GCM-SHA256\\n    - ECDHE-ECDSA-AES256-GCM-SHA384\\n    - ECDHE-RSA-AES256-GCM-SHA384\\n    - ECDHE-ECDSA-CHACHA20-POLY1305\\n    - ECDHE-RSA-CHACHA20-POLY1305\\n    - DHE-RSA-AES128-GCM-SHA256\\n    - DHE-RSA-AES256-GCM-SHA384\\n  minTLSVersion: VersionTLS12\",\"nullable\":true,\"type\":\"object\"},\"modern\":{\"description\":\"modern is a TLS security profile based on:\\n\\n\\nhttps://wiki.mozilla.org/Security/Server_Side_TLS#Modern_compatibility\\n\\n\\nand looks like this (yaml):\\n\\n\\n  ciphers:\\n    - TLS_AES_128_GCM_SHA256\\n    - TLS_AES_256_GCM_SHA384\\n    - TLS_CHACHA20_POLY1305_SHA256\\n  minTLSVersion: VersionTLS13\\n\\n\\nNOTE: Currently unsupported.\",\"nullable\":true,\"type\":\"object\"},\"old\":{\"description\":\"old is a TLS security profile based on:\\n\\n\\nhttps://wiki.mozilla.org/Security/Server_Side_TLS#Old_backward_compatibility\\n\\n\\nand looks like this (yaml):\\n\\n\\n  ciphers:\\n    - TLS_AES_128_GCM_SHA256\\n    - TLS_AES_256_GCM_SHA384\\n    - TLS_CHACHA20_POLY1305_SHA256\\n    - ECDHE-ECDSA-AES128-GCM-SHA256\\n    - ECDHE-RSA-AES128-GCM-SHA256\\n    - ECDHE-ECDSA-AES256-GCM-SHA384\\n    - ECDHE-RSA-AES256-GCM-SHA384\\n    - ECDHE-ECDSA-CHACHA20-POLY1305\\n    - ECDHE-RSA-CHACHA20-POLY1305\\n    - DHE-RSA-AES128-GCM-SHA256\\n    - DHE-RSA-AES256-GCM-SHA384\\n    - DHE-RSA-CHACHA20-POLY1305\\n    - ECDHE-ECDSA-AES128-SHA256\\n    - ECDHE-RSA-AES128-SHA256\\n    - ECDHE-ECDSA-AES128-SHA\\n    - ECDHE-RSA-AES128-SHA\\n    - ECDHE-ECDSA-AES256-SHA384\\n    - ECDHE-RSA-AES256-SHA384\\n    - ECDHE-ECDSA-AES256-SHA\\n    - ECDHE-RSA-AES256-SHA\\n    - DHE-RSA-AES128-SHA256\\n    - DHE-RSA-AES256-SHA256\\n    - AES128-GCM-SHA256\\n    - AES256-GCM-SHA384\\n    - AES128-SHA256\\n    - AES256-SHA256\\n    - AES128-SHA\\n    - AES256-SHA\\n    - DES-CBC3-SHA\\n  minTLSVersion: VersionTLS10\",\"nullable\":true,\"type\":\"object\"},\"type\":{\"description\":\"type is one of Old, Intermediate, Modern or Custom. Custom provides\\nthe ability to specify individual TLS security profile parameters.\\nOld, Intermediate and Modern are TLS security profiles based on:\\n\\n\\nhttps://wiki.mozilla.org/Security/Server_Side_TLS#Recommended_configurations\\n\\n\\nThe profiles are intent based, so they may change over time as new ciphers are developed and existing ciphers\\nare found to be insecure.  Depending on precisely which ciphers are available to a process, the list may be\\nreduced.\\n\\n\\nNote that the Modern profile is currently not supported because it is not\\nyet well adopted by common software libraries.\",\"enum\":[\"Old\",\"Intermediate\",\"Modern\",\"Custom\"],\"type\":\"string\"}},\"type\":\"object\"},\"uploadProxyURLOverride\":{\"description\":\"Override the URL used when uploading to a DataVolume\",\"type\":\"string\"}},\"type\":\"object\"},\"customizeComponents\":{\"description\":\"CustomizeComponents defines patches for components deployed by the CDI operator.\",\"properties\":{\"flags\":{\"description\":\"Configure the value used for deployment and daemonset resources\",\"properties\":{\"api\":{\"additionalProperties\":{\"type\":\"string\"},\"type\":\"object\"},\"controller\":{\"additionalProperties\":{\"type\":\"string\"},\"type\":\"object\"},\"uploadProxy\":{\"additionalProperties\":{\"type\":\"string\"},\"type\":\"object\"}},\"type\":\"object\"},\"patches\":{\"items\":{\"description\":\"CustomizeComponentsPatch defines a patch for some resource.\",\"properties\":{\"patch\":{\"type\":\"string\"},\"resourceName\":{\"minLength\":1,\"type\":\"string\"},\"resourceType\":{\"minLength\":1,\"type\":\"string\"},\"type\":{\"description\":\"PatchType defines the patch type.\",\"type\":\"string\"}},\"required\":[\"patch\",\"resourceName\",\"resourceType\",\"type\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"type\":\"object\"},\"imagePullPolicy\":{\"description\":\"PullPolicy describes a policy for if/when to pull a container image\",\"enum\":[\"Always\",\"IfNotPresent\",\"Never\"],\"type\":\"string\"},\"infra\":{\"description\":\"Selectors and tolerations that should apply to cdi infrastructure components\",\"properties\":{\"affinity\":{\"description\":\"affinity enables pod affinity/anti-affinity placement expanding the types of constraints\\nthat can be expressed with nodeSelector.\\naffinity is going to be applied to the relevant kind of pods in parallel with nodeSelector\\nSee https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#affinity-and-anti-affinity\",\"properties\":{\"nodeAffinity\":{\"description\":\"Describes node affinity scheduling rules for the pod.\",\"properties\":{\"preferredDuringSchedulingIgnoredDuringExecution\":{\"description\":\"The scheduler will prefer to schedule pods to nodes that satisfy\\nthe affinity expressions specified by this field, but it may choose\\na node that violates one or more of the expressions. The node that is\\nmost preferred is the one with the greatest sum of weights, i.e.\\nfor each node that meets all of the scheduling requirements (resource\\nrequest, requiredDuringScheduling affinity expressions, etc.),\\ncompute a sum by iterating through the elements of this field and adding\\n\\\"weight\\\" to the sum if the node matches the corresponding matchExpressions; the\\nnode(s) with the highest sum are the most preferred.\",\"items\":{\"description\":\"An empty preferred scheduling term matches all objects with implicit weight 0\\n(i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).\",\"properties\":{\"preference\":{\"description\":\"A node selector term, associated with the corresponding weight.\",\"properties\":{\"matchExpressions\":{\"description\":\"A list of node selector requirements by node's labels.\",\"items\":{\"description\":\"A node selector requirement is a selector that contains values, a key, and an operator\\nthat relates the key and values.\",\"properties\":{\"key\":{\"description\":\"The label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"Represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.\",\"type\":\"string\"},\"values\":{\"description\":\"An array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. If the operator is Gt or Lt, the values\\narray must have a single element, which will be interpreted as an integer.\\nThis array is replaced during a strategic merge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"matchFields\":{\"description\":\"A list of node selector requirements by node's fields.\",\"items\":{\"description\":\"A node selector requirement is a selector that contains values, a key, and an operator\\nthat relates the key and values.\",\"properties\":{\"key\":{\"description\":\"The label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"Represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.\",\"type\":\"string\"},\"values\":{\"description\":\"An array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. If the operator is Gt or Lt, the values\\narray must have a single element, which will be interpreted as an integer.\\nThis array is replaced during a strategic merge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"type\":\"object\",\"x-kubernetes-map-type\":\"atomic\"},\"weight\":{\"description\":\"Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.\",\"format\":\"int32\",\"type\":\"integer\"}},\"required\":[\"preference\",\"weight\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"requiredDuringSchedulingIgnoredDuringExecution\":{\"description\":\"If the affinity requirements specified by this field are not met at\\nscheduling time, the pod will not be scheduled onto the node.\\nIf the affinity requirements specified by this field cease to be met\\nat some point during pod execution (e.g. due to an update), the system\\nmay or may not try to eventually evict the pod from its node.\",\"properties\":{\"nodeSelectorTerms\":{\"description\":\"Required. A list of node selector terms. The terms are ORed.\",\"items\":{\"description\":\"A null or empty node selector term matches no objects. The requirements of\\nthem are ANDed.\\nThe TopologySelectorTerm type implements a subset of the NodeSelectorTerm.\",\"properties\":{\"matchExpressions\":{\"description\":\"A list of node selector requirements by node's labels.\",\"items\":{\"description\":\"A node selector requirement is a selector that contains values, a key, and an operator\\nthat relates the key and values.\",\"properties\":{\"key\":{\"description\":\"The label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"Represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.\",\"type\":\"string\"},\"values\":{\"description\":\"An array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. If the operator is Gt or Lt, the values\\narray must have a single element, which will be interpreted as an integer.\\nThis array is replaced during a strategic merge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"matchFields\":{\"description\":\"A list of node selector requirements by node's fields.\",\"items\":{\"description\":\"A node selector requirement is a selector that contains values, a key, and an operator\\nthat relates the key and values.\",\"properties\":{\"key\":{\"description\":\"The label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"Represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.\",\"type\":\"string\"},\"values\":{\"description\":\"An array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. If the operator is Gt or Lt, the values\\narray must have a single element, which will be interpreted as an integer.\\nThis array is replaced during a strategic merge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"type\":\"object\",\"x-kubernetes-map-type\":\"atomic\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"nodeSelectorTerms\"],\"type\":\"object\",\"x-kubernetes-map-type\":\"atomic\"}},\"type\":\"object\"},\"podAffinity\":{\"description\":\"Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).\",\"properties\":{\"preferredDuringSchedulingIgnoredDuringExecution\":{\"description\":\"The scheduler will prefer to schedule pods to nodes that satisfy\\nthe affinity expressions specified by this field, but it may choose\\na node that violates one or more of the expressions. The node that is\\nmost preferred is the one with the greatest sum of weights, i.e.\\nfor each node that meets all of the scheduling requirements (resource\\nrequest, requiredDuringScheduling affinity expressions, etc.),\\ncompute a sum by iterating through the elements of this field and adding\\n\\\"weight\\\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the\\nnode(s) with the highest sum are the most preferred.\",\"items\":{\"description\":\"The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)\",\"properties\":{\"podAffinityTerm\":{\"description\":\"Required. A pod affinity term, associated with the corresponding weight.\",\"properties\":{\"labelSelector\":{\"description\":\"A label query over a set of resources, in this case pods.\\nIf it's null, this PodAffinityTerm matches with no Pods.\",\"properties\":{\"matchExpressions\":{\"description\":\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\",\"items\":{\"description\":\"A label selector requirement is a selector that contains values, a key, and an operator that\\nrelates the key and values.\",\"properties\":{\"key\":{\"description\":\"key is the label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"operator represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists and DoesNotExist.\",\"type\":\"string\"},\"values\":{\"description\":\"values is an array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. This array is replaced during a strategic\\nmerge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"matchLabels\":{\"additionalProperties\":{\"type\":\"string\"},\"description\":\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\\nmap is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the\\noperator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\",\"type\":\"object\"}},\"type\":\"object\",\"x-kubernetes-map-type\":\"atomic\"},\"matchLabelKeys\":{\"description\":\"MatchLabelKeys is a set of pod label keys to select which pods will\\nbe taken into consideration. The keys are used to lookup values from the\\nincoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`\\nto select the group of existing pods which pods will be taken into consideration\\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\\npod labels will be ignored. The default value is empty.\\nThe same key is forbidden to exist in both matchLabelKeys and labelSelector.\\nAlso, matchLabelKeys cannot be set when labelSelector isn't set.\\nThis is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"mismatchLabelKeys\":{\"description\":\"MismatchLabelKeys is a set of pod label keys to select which pods will\\nbe taken into consideration. The keys are used to lookup values from the\\nincoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`\\nto select the group of existing pods which pods will be taken into consideration\\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\\npod labels will be ignored. The default value is empty.\\nThe same key is forbidden to exist in both mismatchLabelKeys and labelSelector.\\nAlso, mismatchLabelKeys cannot be set when labelSelector isn't set.\\nThis is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"namespaceSelector\":{\"description\":\"A label query over the set of namespaces that the term applies to.\\nThe term is applied to the union of the namespaces selected by this field\\nand the ones listed in the namespaces field.\\nnull selector and null or empty namespaces list means \\\"this pod's namespace\\\".\\nAn empty selector ({}) matches all namespaces.\",\"properties\":{\"matchExpressions\":{\"description\":\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\",\"items\":{\"description\":\"A label selector requirement is a selector that contains values, a key, and an operator that\\nrelates the key and values.\",\"properties\":{\"key\":{\"description\":\"key is the label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"operator represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists and DoesNotExist.\",\"type\":\"string\"},\"values\":{\"description\":\"values is an array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. This array is replaced during a strategic\\nmerge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"matchLabels\":{\"additionalProperties\":{\"type\":\"string\"},\"description\":\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\\nmap is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the\\noperator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\",\"type\":\"object\"}},\"type\":\"object\",\"x-kubernetes-map-type\":\"atomic\"},\"namespaces\":{\"description\":\"namespaces specifies a static list of namespace names that the term applies to.\\nThe term is applied to the union of the namespaces listed in this field\\nand the ones selected by namespaceSelector.\\nnull or empty namespaces list and null namespaceSelector means \\\"this pod's namespace\\\".\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"topologyKey\":{\"description\":\"This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching\\nthe labelSelector in the specified namespaces, where co-located is defined as running on a node\\nwhose value of the label with key topologyKey matches that of any node on which any of the\\nselected pods is running.\\nEmpty topologyKey is not allowed.\",\"type\":\"string\"}},\"required\":[\"topologyKey\"],\"type\":\"object\"},\"weight\":{\"description\":\"weight associated with matching the corresponding podAffinityTerm,\\nin the range 1-100.\",\"format\":\"int32\",\"type\":\"integer\"}},\"required\":[\"podAffinityTerm\",\"weight\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"requiredDuringSchedulingIgnoredDuringExecution\":{\"description\":\"If the affinity requirements specified by this field are not met at\\nscheduling time, the pod will not be scheduled onto the node.\\nIf the affinity requirements specified by this field cease to be met\\nat some point during pod execution (e.g. due to a pod label update), the\\nsystem may or may not try to eventually evict the pod from its node.\\nWhen there are multiple elements, the lists of nodes corresponding to each\\npodAffinityTerm are intersected, i.e. all terms must be satisfied.\",\"items\":{\"description\":\"Defines a set of pods (namely those matching the labelSelector\\nrelative to the given namespace(s)) that this pod should be\\nco-located (affinity) or not co-located (anti-affinity) with,\\nwhere co-located is defined as running on a node whose value of\\nthe label with key \\u003ctopologyKey\\u003e matches that of any node on which\\na pod of the set of pods is running\",\"properties\":{\"labelSelector\":{\"description\":\"A label query over a set of resources, in this case pods.\\nIf it's null, this PodAffinityTerm matches with no Pods.\",\"properties\":{\"matchExpressions\":{\"description\":\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\",\"items\":{\"description\":\"A label selector requirement is a selector that contains values, a key, and an operator that\\nrelates the key and values.\",\"properties\":{\"key\":{\"description\":\"key is the label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"operator represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists and DoesNotExist.\",\"type\":\"string\"},\"values\":{\"description\":\"values is an array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. This array is replaced during a strategic\\nmerge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"matchLabels\":{\"additionalProperties\":{\"type\":\"string\"},\"description\":\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\\nmap is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the\\noperator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\",\"type\":\"object\"}},\"type\":\"object\",\"x-kubernetes-map-type\":\"atomic\"},\"matchLabelKeys\":{\"description\":\"MatchLabelKeys is a set of pod label keys to select which pods will\\nbe taken into consideration. The keys are used to lookup values from the\\nincoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`\\nto select the group of existing pods which pods will be taken into consideration\\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\\npod labels will be ignored. The default value is empty.\\nThe same key is forbidden to exist in both matchLabelKeys and labelSelector.\\nAlso, matchLabelKeys cannot be set when labelSelector isn't set.\\nThis is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"mismatchLabelKeys\":{\"description\":\"MismatchLabelKeys is a set of pod label keys to select which pods will\\nbe taken into consideration. The keys are used to lookup values from the\\nincoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`\\nto select the group of existing pods which pods will be taken into consideration\\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\\npod labels will be ignored. The default value is empty.\\nThe same key is forbidden to exist in both mismatchLabelKeys and labelSelector.\\nAlso, mismatchLabelKeys cannot be set when labelSelector isn't set.\\nThis is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"namespaceSelector\":{\"description\":\"A label query over the set of namespaces that the term applies to.\\nThe term is applied to the union of the namespaces selected by this field\\nand the ones listed in the namespaces field.\\nnull selector and null or empty namespaces list means \\\"this pod's namespace\\\".\\nAn empty selector ({}) matches all namespaces.\",\"properties\":{\"matchExpressions\":{\"description\":\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\",\"items\":{\"description\":\"A label selector requirement is a selector that contains values, a key, and an operator that\\nrelates the key and values.\",\"properties\":{\"key\":{\"description\":\"key is the label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"operator represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists and DoesNotExist.\",\"type\":\"string\"},\"values\":{\"description\":\"values is an array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. This array is replaced during a strategic\\nmerge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"matchLabels\":{\"additionalProperties\":{\"type\":\"string\"},\"description\":\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\\nmap is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the\\noperator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\",\"type\":\"object\"}},\"type\":\"object\",\"x-kubernetes-map-type\":\"atomic\"},\"namespaces\":{\"description\":\"namespaces specifies a static list of namespace names that the term applies to.\\nThe term is applied to the union of the namespaces listed in this field\\nand the ones selected by namespaceSelector.\\nnull or empty namespaces list and null namespaceSelector means \\\"this pod's namespace\\\".\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"topologyKey\":{\"description\":\"This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching\\nthe labelSelector in the specified namespaces, where co-located is defined as running on a node\\nwhose value of the label with key topologyKey matches that of any node on which any of the\\nselected pods is running.\\nEmpty topologyKey is not allowed.\",\"type\":\"string\"}},\"required\":[\"topologyKey\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"type\":\"object\"},\"podAntiAffinity\":{\"description\":\"Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).\",\"properties\":{\"preferredDuringSchedulingIgnoredDuringExecution\":{\"description\":\"The scheduler will prefer to schedule pods to nodes that satisfy\\nthe anti-affinity expressions specified by this field, but it may choose\\na node that violates one or more of the expressions. The node that is\\nmost preferred is the one with the greatest sum of weights, i.e.\\nfor each node that meets all of the scheduling requirements (resource\\nrequest, requiredDuringScheduling anti-affinity expressions, etc.),\\ncompute a sum by iterating through the elements of this field and adding\\n\\\"weight\\\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the\\nnode(s) with the highest sum are the most preferred.\",\"items\":{\"description\":\"The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)\",\"properties\":{\"podAffinityTerm\":{\"description\":\"Required. A pod affinity term, associated with the corresponding weight.\",\"properties\":{\"labelSelector\":{\"description\":\"A label query over a set of resources, in this case pods.\\nIf it's null, this PodAffinityTerm matches with no Pods.\",\"properties\":{\"matchExpressions\":{\"description\":\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\",\"items\":{\"description\":\"A label selector requirement is a selector that contains values, a key, and an operator that\\nrelates the key and values.\",\"properties\":{\"key\":{\"description\":\"key is the label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"operator represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists and DoesNotExist.\",\"type\":\"string\"},\"values\":{\"description\":\"values is an array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. This array is replaced during a strategic\\nmerge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"matchLabels\":{\"additionalProperties\":{\"type\":\"string\"},\"description\":\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\\nmap is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the\\noperator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\",\"type\":\"object\"}},\"type\":\"object\",\"x-kubernetes-map-type\":\"atomic\"},\"matchLabelKeys\":{\"description\":\"MatchLabelKeys is a set of pod label keys to select which pods will\\nbe taken into consideration. The keys are used to lookup values from the\\nincoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`\\nto select the group of existing pods which pods will be taken into consideration\\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\\npod labels will be ignored. The default value is empty.\\nThe same key is forbidden to exist in both matchLabelKeys and labelSelector.\\nAlso, matchLabelKeys cannot be set when labelSelector isn't set.\\nThis is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"mismatchLabelKeys\":{\"description\":\"MismatchLabelKeys is a set of pod label keys to select which pods will\\nbe taken into consideration. The keys are used to lookup values from the\\nincoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`\\nto select the group of existing pods which pods will be taken into consideration\\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\\npod labels will be ignored. The default value is empty.\\nThe same key is forbidden to exist in both mismatchLabelKeys and labelSelector.\\nAlso, mismatchLabelKeys cannot be set when labelSelector isn't set.\\nThis is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"namespaceSelector\":{\"description\":\"A label query over the set of namespaces that the term applies to.\\nThe term is applied to the union of the namespaces selected by this field\\nand the ones listed in the namespaces field.\\nnull selector and null or empty namespaces list means \\\"this pod's namespace\\\".\\nAn empty selector ({}) matches all namespaces.\",\"properties\":{\"matchExpressions\":{\"description\":\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\",\"items\":{\"description\":\"A label selector requirement is a selector that contains values, a key, and an operator that\\nrelates the key and values.\",\"properties\":{\"key\":{\"description\":\"key is the label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"operator represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists and DoesNotExist.\",\"type\":\"string\"},\"values\":{\"description\":\"values is an array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. This array is replaced during a strategic\\nmerge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"matchLabels\":{\"additionalProperties\":{\"type\":\"string\"},\"description\":\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\\nmap is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the\\noperator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\",\"type\":\"object\"}},\"type\":\"object\",\"x-kubernetes-map-type\":\"atomic\"},\"namespaces\":{\"description\":\"namespaces specifies a static list of namespace names that the term applies to.\\nThe term is applied to the union of the namespaces listed in this field\\nand the ones selected by namespaceSelector.\\nnull or empty namespaces list and null namespaceSelector means \\\"this pod's namespace\\\".\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"topologyKey\":{\"description\":\"This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching\\nthe labelSelector in the specified namespaces, where co-located is defined as running on a node\\nwhose value of the label with key topologyKey matches that of any node on which any of the\\nselected pods is running.\\nEmpty topologyKey is not allowed.\",\"type\":\"string\"}},\"required\":[\"topologyKey\"],\"type\":\"object\"},\"weight\":{\"description\":\"weight associated with matching the corresponding podAffinityTerm,\\nin the range 1-100.\",\"format\":\"int32\",\"type\":\"integer\"}},\"required\":[\"podAffinityTerm\",\"weight\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"requiredDuringSchedulingIgnoredDuringExecution\":{\"description\":\"If the anti-affinity requirements specified by this field are not met at\\nscheduling time, the pod will not be scheduled onto the node.\\nIf the anti-affinity requirements specified by this field cease to be met\\nat some point during pod execution (e.g. due to a pod label update), the\\nsystem may or may not try to eventually evict the pod from its node.\\nWhen there are multiple elements, the lists of nodes corresponding to each\\npodAffinityTerm are intersected, i.e. all terms must be satisfied.\",\"items\":{\"description\":\"Defines a set of pods (namely those matching the labelSelector\\nrelative to the given namespace(s)) that this pod should be\\nco-located (affinity) or not co-located (anti-affinity) with,\\nwhere co-located is defined as running on a node whose value of\\nthe label with key \\u003ctopologyKey\\u003e matches that of any node on which\\na pod of the set of pods is running\",\"properties\":{\"labelSelector\":{\"description\":\"A label query over a set of resources, in this case pods.\\nIf it's null, this PodAffinityTerm matches with no Pods.\",\"properties\":{\"matchExpressions\":{\"description\":\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\",\"items\":{\"description\":\"A label selector requirement is a selector that contains values, a key, and an operator that\\nrelates the key and values.\",\"properties\":{\"key\":{\"description\":\"key is the label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"operator represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists and DoesNotExist.\",\"type\":\"string\"},\"values\":{\"description\":\"values is an array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. This array is replaced during a strategic\\nmerge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"matchLabels\":{\"additionalProperties\":{\"type\":\"string\"},\"description\":\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\\nmap is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the\\noperator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\",\"type\":\"object\"}},\"type\":\"object\",\"x-kubernetes-map-type\":\"atomic\"},\"matchLabelKeys\":{\"description\":\"MatchLabelKeys is a set of pod label keys to select which pods will\\nbe taken into consideration. The keys are used to lookup values from the\\nincoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`\\nto select the group of existing pods which pods will be taken into consideration\\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\\npod labels will be ignored. The default value is empty.\\nThe same key is forbidden to exist in both matchLabelKeys and labelSelector.\\nAlso, matchLabelKeys cannot be set when labelSelector isn't set.\\nThis is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"mismatchLabelKeys\":{\"description\":\"MismatchLabelKeys is a set of pod label keys to select which pods will\\nbe taken into consideration. The keys are used to lookup values from the\\nincoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`\\nto select the group of existing pods which pods will be taken into consideration\\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\\npod labels will be ignored. The default value is empty.\\nThe same key is forbidden to exist in both mismatchLabelKeys and labelSelector.\\nAlso, mismatchLabelKeys cannot be set when labelSelector isn't set.\\nThis is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"namespaceSelector\":{\"description\":\"A label query over the set of namespaces that the term applies to.\\nThe term is applied to the union of the namespaces selected by this field\\nand the ones listed in the namespaces field.\\nnull selector and null or empty namespaces list means \\\"this pod's namespace\\\".\\nAn empty selector ({}) matches all namespaces.\",\"properties\":{\"matchExpressions\":{\"description\":\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\",\"items\":{\"description\":\"A label selector requirement is a selector that contains values, a key, and an operator that\\nrelates the key and values.\",\"properties\":{\"key\":{\"description\":\"key is the label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"operator represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists and DoesNotExist.\",\"type\":\"string\"},\"values\":{\"description\":\"values is an array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. This array is replaced during a strategic\\nmerge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"matchLabels\":{\"additionalProperties\":{\"type\":\"string\"},\"description\":\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\\nmap is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the\\noperator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\",\"type\":\"object\"}},\"type\":\"object\",\"x-kubernetes-map-type\":\"atomic\"},\"namespaces\":{\"description\":\"namespaces specifies a static list of namespace names that the term applies to.\\nThe term is applied to the union of the namespaces listed in this field\\nand the ones selected by namespaceSelector.\\nnull or empty namespaces list and null namespaceSelector means \\\"this pod's namespace\\\".\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"topologyKey\":{\"description\":\"This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching\\nthe labelSelector in the specified namespaces, where co-located is defined as running on a node\\nwhose value of the label with key topologyKey matches that of any node on which any of the\\nselected pods is running.\\nEmpty topologyKey is not allowed.\",\"type\":\"string\"}},\"required\":[\"topologyKey\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"type\":\"object\"}},\"type\":\"object\"},\"apiServerReplicas\":{\"description\":\"ApiserverReplicas set Replicas for cdi-apiserver\",\"format\":\"int32\",\"type\":\"integer\"},\"deploymentReplicas\":{\"description\":\"DeploymentReplicas set Replicas for cdi-deployment\",\"format\":\"int32\",\"type\":\"integer\"},\"nodeSelector\":{\"additionalProperties\":{\"type\":\"string\"},\"description\":\"nodeSelector is the node selector applied to the relevant kind of pods\\nIt specifies a map of key-value pairs: for the pod to be eligible to run on a node,\\nthe node must have each of the indicated key-value pairs as labels\\n(it can have additional labels as well).\\nSee https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#nodeselector\",\"type\":\"object\"},\"tolerations\":{\"description\":\"tolerations is a list of tolerations applied to the relevant kind of pods\\nSee https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/ for more info.\\nThese are additional tolerations other than default ones.\",\"items\":{\"description\":\"The pod this Toleration is attached to tolerates any taint that matches\\nthe triple \\u003ckey,value,effect\\u003e using the matching operator \\u003coperator\\u003e.\",\"properties\":{\"effect\":{\"description\":\"Effect indicates the taint effect to match. Empty means match all taint effects.\\nWhen specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.\",\"type\":\"string\"},\"key\":{\"description\":\"Key is the taint key that the toleration applies to. Empty means match all taint keys.\\nIf the key is empty, operator must be Exists; this combination means to match all values and all keys.\",\"type\":\"string\"},\"operator\":{\"description\":\"Operator represents a key's relationship to the value.\\nValid operators are Exists and Equal. Defaults to Equal.\\nExists is equivalent to wildcard for value, so that a pod can\\ntolerate all taints of a particular category.\",\"type\":\"string\"},\"tolerationSeconds\":{\"description\":\"TolerationSeconds represents the period of time the toleration (which must be\\nof effect NoExecute, otherwise this field is ignored) tolerates the taint. By default,\\nit is not set, which means tolerate the taint forever (do not evict). Zero and\\nnegative values will be treated as 0 (evict immediately) by the system.\",\"format\":\"int64\",\"type\":\"integer\"},\"value\":{\"description\":\"Value is the taint value the toleration matches to.\\nIf the operator is Exists, the value should be empty, otherwise just a regular string.\",\"type\":\"string\"}},\"type\":\"object\"},\"type\":\"array\"},\"uploadProxyReplicas\":{\"description\":\"UploadproxyReplicas set Replicas for cdi-uploadproxy\",\"format\":\"int32\",\"type\":\"integer\"}},\"type\":\"object\"},\"priorityClass\":{\"description\":\"PriorityClass of the CDI control plane\",\"type\":\"string\"},\"uninstallStrategy\":{\"description\":\"CDIUninstallStrategy defines the state to leave CDI on uninstall\",\"enum\":[\"RemoveWorkloads\",\"BlockUninstallIfWorkloadsExist\"],\"type\":\"string\"},\"workload\":{\"description\":\"Restrict on which nodes CDI workload pods will be scheduled\",\"properties\":{\"affinity\":{\"description\":\"affinity enables pod affinity/anti-affinity placement expanding the types of constraints\\nthat can be expressed with nodeSelector.\\naffinity is going to be applied to the relevant kind of pods in parallel with nodeSelector\\nSee https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#affinity-and-anti-affinity\",\"properties\":{\"nodeAffinity\":{\"description\":\"Describes node affinity scheduling rules for the pod.\",\"properties\":{\"preferredDuringSchedulingIgnoredDuringExecution\":{\"description\":\"The scheduler will prefer to schedule pods to nodes that satisfy\\nthe affinity expressions specified by this field, but it may choose\\na node that violates one or more of the expressions. The node that is\\nmost preferred is the one with the greatest sum of weights, i.e.\\nfor each node that meets all of the scheduling requirements (resource\\nrequest, requiredDuringScheduling affinity expressions, etc.),\\ncompute a sum by iterating through the elements of this field and adding\\n\\\"weight\\\" to the sum if the node matches the corresponding matchExpressions; the\\nnode(s) with the highest sum are the most preferred.\",\"items\":{\"description\":\"An empty preferred scheduling term matches all objects with implicit weight 0\\n(i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).\",\"properties\":{\"preference\":{\"description\":\"A node selector term, associated with the corresponding weight.\",\"properties\":{\"matchExpressions\":{\"description\":\"A list of node selector requirements by node's labels.\",\"items\":{\"description\":\"A node selector requirement is a selector that contains values, a key, and an operator\\nthat relates the key and values.\",\"properties\":{\"key\":{\"description\":\"The label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"Represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.\",\"type\":\"string\"},\"values\":{\"description\":\"An array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. If the operator is Gt or Lt, the values\\narray must have a single element, which will be interpreted as an integer.\\nThis array is replaced during a strategic merge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"matchFields\":{\"description\":\"A list of node selector requirements by node's fields.\",\"items\":{\"description\":\"A node selector requirement is a selector that contains values, a key, and an operator\\nthat relates the key and values.\",\"properties\":{\"key\":{\"description\":\"The label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"Represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.\",\"type\":\"string\"},\"values\":{\"description\":\"An array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. If the operator is Gt or Lt, the values\\narray must have a single element, which will be interpreted as an integer.\\nThis array is replaced during a strategic merge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"type\":\"object\",\"x-kubernetes-map-type\":\"atomic\"},\"weight\":{\"description\":\"Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.\",\"format\":\"int32\",\"type\":\"integer\"}},\"required\":[\"preference\",\"weight\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"requiredDuringSchedulingIgnoredDuringExecution\":{\"description\":\"If the affinity requirements specified by this field are not met at\\nscheduling time, the pod will not be scheduled onto the node.\\nIf the affinity requirements specified by this field cease to be met\\nat some point during pod execution (e.g. due to an update), the system\\nmay or may not try to eventually evict the pod from its node.\",\"properties\":{\"nodeSelectorTerms\":{\"description\":\"Required. A list of node selector terms. The terms are ORed.\",\"items\":{\"description\":\"A null or empty node selector term matches no objects. The requirements of\\nthem are ANDed.\\nThe TopologySelectorTerm type implements a subset of the NodeSelectorTerm.\",\"properties\":{\"matchExpressions\":{\"description\":\"A list of node selector requirements by node's labels.\",\"items\":{\"description\":\"A node selector requirement is a selector that contains values, a key, and an operator\\nthat relates the key and values.\",\"properties\":{\"key\":{\"description\":\"The label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"Represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.\",\"type\":\"string\"},\"values\":{\"description\":\"An array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. If the operator is Gt or Lt, the values\\narray must have a single element, which will be interpreted as an integer.\\nThis array is replaced during a strategic merge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"matchFields\":{\"description\":\"A list of node selector requirements by node's fields.\",\"items\":{\"description\":\"A node selector requirement is a selector that contains values, a key, and an operator\\nthat relates the key and values.\",\"properties\":{\"key\":{\"description\":\"The label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"Represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.\",\"type\":\"string\"},\"values\":{\"description\":\"An array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. If the operator is Gt or Lt, the values\\narray must have a single element, which will be interpreted as an integer.\\nThis array is replaced during a strategic merge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"type\":\"object\",\"x-kubernetes-map-type\":\"atomic\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"nodeSelectorTerms\"],\"type\":\"object\",\"x-kubernetes-map-type\":\"atomic\"}},\"type\":\"object\"},\"podAffinity\":{\"description\":\"Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).\",\"properties\":{\"preferredDuringSchedulingIgnoredDuringExecution\":{\"description\":\"The scheduler will prefer to schedule pods to nodes that satisfy\\nthe affinity expressions specified by this field, but it may choose\\na node that violates one or more of the expressions. The node that is\\nmost preferred is the one with the greatest sum of weights, i.e.\\nfor each node that meets all of the scheduling requirements (resource\\nrequest, requiredDuringScheduling affinity expressions, etc.),\\ncompute a sum by iterating through the elements of this field and adding\\n\\\"weight\\\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the\\nnode(s) with the highest sum are the most preferred.\",\"items\":{\"description\":\"The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)\",\"properties\":{\"podAffinityTerm\":{\"description\":\"Required. A pod affinity term, associated with the corresponding weight.\",\"properties\":{\"labelSelector\":{\"description\":\"A label query over a set of resources, in this case pods.\\nIf it's null, this PodAffinityTerm matches with no Pods.\",\"properties\":{\"matchExpressions\":{\"description\":\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\",\"items\":{\"description\":\"A label selector requirement is a selector that contains values, a key, and an operator that\\nrelates the key and values.\",\"properties\":{\"key\":{\"description\":\"key is the label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"operator represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists and DoesNotExist.\",\"type\":\"string\"},\"values\":{\"description\":\"values is an array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. This array is replaced during a strategic\\nmerge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"matchLabels\":{\"additionalProperties\":{\"type\":\"string\"},\"description\":\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\\nmap is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the\\noperator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\",\"type\":\"object\"}},\"type\":\"object\",\"x-kubernetes-map-type\":\"atomic\"},\"matchLabelKeys\":{\"description\":\"MatchLabelKeys is a set of pod label keys to select which pods will\\nbe taken into consideration. The keys are used to lookup values from the\\nincoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`\\nto select the group of existing pods which pods will be taken into consideration\\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\\npod labels will be ignored. The default value is empty.\\nThe same key is forbidden to exist in both matchLabelKeys and labelSelector.\\nAlso, matchLabelKeys cannot be set when labelSelector isn't set.\\nThis is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"mismatchLabelKeys\":{\"description\":\"MismatchLabelKeys is a set of pod label keys to select which pods will\\nbe taken into consideration. The keys are used to lookup values from the\\nincoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`\\nto select the group of existing pods which pods will be taken into consideration\\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\\npod labels will be ignored. The default value is empty.\\nThe same key is forbidden to exist in both mismatchLabelKeys and labelSelector.\\nAlso, mismatchLabelKeys cannot be set when labelSelector isn't set.\\nThis is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"namespaceSelector\":{\"description\":\"A label query over the set of namespaces that the term applies to.\\nThe term is applied to the union of the namespaces selected by this field\\nand the ones listed in the namespaces field.\\nnull selector and null or empty namespaces list means \\\"this pod's namespace\\\".\\nAn empty selector ({}) matches all namespaces.\",\"properties\":{\"matchExpressions\":{\"description\":\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\",\"items\":{\"description\":\"A label selector requirement is a selector that contains values, a key, and an operator that\\nrelates the key and values.\",\"properties\":{\"key\":{\"description\":\"key is the label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"operator represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists and DoesNotExist.\",\"type\":\"string\"},\"values\":{\"description\":\"values is an array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. This array is replaced during a strategic\\nmerge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"matchLabels\":{\"additionalProperties\":{\"type\":\"string\"},\"description\":\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\\nmap is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the\\noperator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\",\"type\":\"object\"}},\"type\":\"object\",\"x-kubernetes-map-type\":\"atomic\"},\"namespaces\":{\"description\":\"namespaces specifies a static list of namespace names that the term applies to.\\nThe term is applied to the union of the namespaces listed in this field\\nand the ones selected by namespaceSelector.\\nnull or empty namespaces list and null namespaceSelector means \\\"this pod's namespace\\\".\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"topologyKey\":{\"description\":\"This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching\\nthe labelSelector in the specified namespaces, where co-located is defined as running on a node\\nwhose value of the label with key topologyKey matches that of any node on which any of the\\nselected pods is running.\\nEmpty topologyKey is not allowed.\",\"type\":\"string\"}},\"required\":[\"topologyKey\"],\"type\":\"object\"},\"weight\":{\"description\":\"weight associated with matching the corresponding podAffinityTerm,\\nin the range 1-100.\",\"format\":\"int32\",\"type\":\"integer\"}},\"required\":[\"podAffinityTerm\",\"weight\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"requiredDuringSchedulingIgnoredDuringExecution\":{\"description\":\"If the affinity requirements specified by this field are not met at\\nscheduling time, the pod will not be scheduled onto the node.\\nIf the affinity requirements specified by this field cease to be met\\nat some point during pod execution (e.g. due to a pod label update), the\\nsystem may or may not try to eventually evict the pod from its node.\\nWhen there are multiple elements, the lists of nodes corresponding to each\\npodAffinityTerm are intersected, i.e. all terms must be satisfied.\",\"items\":{\"description\":\"Defines a set of pods (namely those matching the labelSelector\\nrelative to the given namespace(s)) that this pod should be\\nco-located (affinity) or not co-located (anti-affinity) with,\\nwhere co-located is defined as running on a node whose value of\\nthe label with key \\u003ctopologyKey\\u003e matches that of any node on which\\na pod of the set of pods is running\",\"properties\":{\"labelSelector\":{\"description\":\"A label query over a set of resources, in this case pods.\\nIf it's null, this PodAffinityTerm matches with no Pods.\",\"properties\":{\"matchExpressions\":{\"description\":\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\",\"items\":{\"description\":\"A label selector requirement is a selector that contains values, a key, and an operator that\\nrelates the key and values.\",\"properties\":{\"key\":{\"description\":\"key is the label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"operator represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists and DoesNotExist.\",\"type\":\"string\"},\"values\":{\"description\":\"values is an array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. This array is replaced during a strategic\\nmerge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"matchLabels\":{\"additionalProperties\":{\"type\":\"string\"},\"description\":\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\\nmap is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the\\noperator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\",\"type\":\"object\"}},\"type\":\"object\",\"x-kubernetes-map-type\":\"atomic\"},\"matchLabelKeys\":{\"description\":\"MatchLabelKeys is a set of pod label keys to select which pods will\\nbe taken into consideration. The keys are used to lookup values from the\\nincoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`\\nto select the group of existing pods which pods will be taken into consideration\\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\\npod labels will be ignored. The default value is empty.\\nThe same key is forbidden to exist in both matchLabelKeys and labelSelector.\\nAlso, matchLabelKeys cannot be set when labelSelector isn't set.\\nThis is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"mismatchLabelKeys\":{\"description\":\"MismatchLabelKeys is a set of pod label keys to select which pods will\\nbe taken into consideration. The keys are used to lookup values from the\\nincoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`\\nto select the group of existing pods which pods will be taken into consideration\\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\\npod labels will be ignored. The default value is empty.\\nThe same key is forbidden to exist in both mismatchLabelKeys and labelSelector.\\nAlso, mismatchLabelKeys cannot be set when labelSelector isn't set.\\nThis is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"namespaceSelector\":{\"description\":\"A label query over the set of namespaces that the term applies to.\\nThe term is applied to the union of the namespaces selected by this field\\nand the ones listed in the namespaces field.\\nnull selector and null or empty namespaces list means \\\"this pod's namespace\\\".\\nAn empty selector ({}) matches all namespaces.\",\"properties\":{\"matchExpressions\":{\"description\":\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\",\"items\":{\"description\":\"A label selector requirement is a selector that contains values, a key, and an operator that\\nrelates the key and values.\",\"properties\":{\"key\":{\"description\":\"key is the label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"operator represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists and DoesNotExist.\",\"type\":\"string\"},\"values\":{\"description\":\"values is an array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. This array is replaced during a strategic\\nmerge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"matchLabels\":{\"additionalProperties\":{\"type\":\"string\"},\"description\":\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\\nmap is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the\\noperator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\",\"type\":\"object\"}},\"type\":\"object\",\"x-kubernetes-map-type\":\"atomic\"},\"namespaces\":{\"description\":\"namespaces specifies a static list of namespace names that the term applies to.\\nThe term is applied to the union of the namespaces listed in this field\\nand the ones selected by namespaceSelector.\\nnull or empty namespaces list and null namespaceSelector means \\\"this pod's namespace\\\".\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"topologyKey\":{\"description\":\"This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching\\nthe labelSelector in the specified namespaces, where co-located is defined as running on a node\\nwhose value of the label with key topologyKey matches that of any node on which any of the\\nselected pods is running.\\nEmpty topologyKey is not allowed.\",\"type\":\"string\"}},\"required\":[\"topologyKey\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"type\":\"object\"},\"podAntiAffinity\":{\"description\":\"Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).\",\"properties\":{\"preferredDuringSchedulingIgnoredDuringExecution\":{\"description\":\"The scheduler will prefer to schedule pods to nodes that satisfy\\nthe anti-affinity expressions specified by this field, but it may choose\\na node that violates one or more of the expressions. The node that is\\nmost preferred is the one with the greatest sum of weights, i.e.\\nfor each node that meets all of the scheduling requirements (resource\\nrequest, requiredDuringScheduling anti-affinity expressions, etc.),\\ncompute a sum by iterating through the elements of this field and adding\\n\\\"weight\\\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the\\nnode(s) with the highest sum are the most preferred.\",\"items\":{\"description\":\"The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)\",\"properties\":{\"podAffinityTerm\":{\"description\":\"Required. A pod affinity term, associated with the corresponding weight.\",\"properties\":{\"labelSelector\":{\"description\":\"A label query over a set of resources, in this case pods.\\nIf it's null, this PodAffinityTerm matches with no Pods.\",\"properties\":{\"matchExpressions\":{\"description\":\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\",\"items\":{\"description\":\"A label selector requirement is a selector that contains values, a key, and an operator that\\nrelates the key and values.\",\"properties\":{\"key\":{\"description\":\"key is the label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"operator represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists and DoesNotExist.\",\"type\":\"string\"},\"values\":{\"description\":\"values is an array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. This array is replaced during a strategic\\nmerge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"matchLabels\":{\"additionalProperties\":{\"type\":\"string\"},\"description\":\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\\nmap is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the\\noperator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\",\"type\":\"object\"}},\"type\":\"object\",\"x-kubernetes-map-type\":\"atomic\"},\"matchLabelKeys\":{\"description\":\"MatchLabelKeys is a set of pod label keys to select which pods will\\nbe taken into consideration. The keys are used to lookup values from the\\nincoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`\\nto select the group of existing pods which pods will be taken into consideration\\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\\npod labels will be ignored. The default value is empty.\\nThe same key is forbidden to exist in both matchLabelKeys and labelSelector.\\nAlso, matchLabelKeys cannot be set when labelSelector isn't set.\\nThis is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"mismatchLabelKeys\":{\"description\":\"MismatchLabelKeys is a set of pod label keys to select which pods will\\nbe taken into consideration. The keys are used to lookup values from the\\nincoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`\\nto select the group of existing pods which pods will be taken into consideration\\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\\npod labels will be ignored. The default value is empty.\\nThe same key is forbidden to exist in both mismatchLabelKeys and labelSelector.\\nAlso, mismatchLabelKeys cannot be set when labelSelector isn't set.\\nThis is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"namespaceSelector\":{\"description\":\"A label query over the set of namespaces that the term applies to.\\nThe term is applied to the union of the namespaces selected by this field\\nand the ones listed in the namespaces field.\\nnull selector and null or empty namespaces list means \\\"this pod's namespace\\\".\\nAn empty selector ({}) matches all namespaces.\",\"properties\":{\"matchExpressions\":{\"description\":\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\",\"items\":{\"description\":\"A label selector requirement is a selector that contains values, a key, and an operator that\\nrelates the key and values.\",\"properties\":{\"key\":{\"description\":\"key is the label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"operator represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists and DoesNotExist.\",\"type\":\"string\"},\"values\":{\"description\":\"values is an array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. This array is replaced during a strategic\\nmerge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"matchLabels\":{\"additionalProperties\":{\"type\":\"string\"},\"description\":\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\\nmap is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the\\noperator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\",\"type\":\"object\"}},\"type\":\"object\",\"x-kubernetes-map-type\":\"atomic\"},\"namespaces\":{\"description\":\"namespaces specifies a static list of namespace names that the term applies to.\\nThe term is applied to the union of the namespaces listed in this field\\nand the ones selected by namespaceSelector.\\nnull or empty namespaces list and null namespaceSelector means \\\"this pod's namespace\\\".\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"topologyKey\":{\"description\":\"This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching\\nthe labelSelector in the specified namespaces, where co-located is defined as running on a node\\nwhose value of the label with key topologyKey matches that of any node on which any of the\\nselected pods is running.\\nEmpty topologyKey is not allowed.\",\"type\":\"string\"}},\"required\":[\"topologyKey\"],\"type\":\"object\"},\"weight\":{\"description\":\"weight associated with matching the corresponding podAffinityTerm,\\nin the range 1-100.\",\"format\":\"int32\",\"type\":\"integer\"}},\"required\":[\"podAffinityTerm\",\"weight\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"requiredDuringSchedulingIgnoredDuringExecution\":{\"description\":\"If the anti-affinity requirements specified by this field are not met at\\nscheduling time, the pod will not be scheduled onto the node.\\nIf the anti-affinity requirements specified by this field cease to be met\\nat some point during pod execution (e.g. due to a pod label update), the\\nsystem may or may not try to eventually evict the pod from its node.\\nWhen there are multiple elements, the lists of nodes corresponding to each\\npodAffinityTerm are intersected, i.e. all terms must be satisfied.\",\"items\":{\"description\":\"Defines a set of pods (namely those matching the labelSelector\\nrelative to the given namespace(s)) that this pod should be\\nco-located (affinity) or not co-located (anti-affinity) with,\\nwhere co-located is defined as running on a node whose value of\\nthe label with key \\u003ctopologyKey\\u003e matches that of any node on which\\na pod of the set of pods is running\",\"properties\":{\"labelSelector\":{\"description\":\"A label query over a set of resources, in this case pods.\\nIf it's null, this PodAffinityTerm matches with no Pods.\",\"properties\":{\"matchExpressions\":{\"description\":\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\",\"items\":{\"description\":\"A label selector requirement is a selector that contains values, a key, and an operator that\\nrelates the key and values.\",\"properties\":{\"key\":{\"description\":\"key is the label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"operator represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists and DoesNotExist.\",\"type\":\"string\"},\"values\":{\"description\":\"values is an array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. This array is replaced during a strategic\\nmerge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"matchLabels\":{\"additionalProperties\":{\"type\":\"string\"},\"description\":\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\\nmap is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the\\noperator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\",\"type\":\"object\"}},\"type\":\"object\",\"x-kubernetes-map-type\":\"atomic\"},\"matchLabelKeys\":{\"description\":\"MatchLabelKeys is a set of pod label keys to select which pods will\\nbe taken into consideration. The keys are used to lookup values from the\\nincoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`\\nto select the group of existing pods which pods will be taken into consideration\\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\\npod labels will be ignored. The default value is empty.\\nThe same key is forbidden to exist in both matchLabelKeys and labelSelector.\\nAlso, matchLabelKeys cannot be set when labelSelector isn't set.\\nThis is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"mismatchLabelKeys\":{\"description\":\"MismatchLabelKeys is a set of pod label keys to select which pods will\\nbe taken into consideration. The keys are used to lookup values from the\\nincoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`\\nto select the group of existing pods which pods will be taken into consideration\\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\\npod labels will be ignored. The default value is empty.\\nThe same key is forbidden to exist in both mismatchLabelKeys and labelSelector.\\nAlso, mismatchLabelKeys cannot be set when labelSelector isn't set.\\nThis is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"namespaceSelector\":{\"description\":\"A label query over the set of namespaces that the term applies to.\\nThe term is applied to the union of the namespaces selected by this field\\nand the ones listed in the namespaces field.\\nnull selector and null or empty namespaces list means \\\"this pod's namespace\\\".\\nAn empty selector ({}) matches all namespaces.\",\"properties\":{\"matchExpressions\":{\"description\":\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\",\"items\":{\"description\":\"A label selector requirement is a selector that contains values, a key, and an operator that\\nrelates the key and values.\",\"properties\":{\"key\":{\"description\":\"key is the label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"operator represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists and DoesNotExist.\",\"type\":\"string\"},\"values\":{\"description\":\"values is an array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. This array is replaced during a strategic\\nmerge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"matchLabels\":{\"additionalProperties\":{\"type\":\"string\"},\"description\":\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\\nmap is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the\\noperator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\",\"type\":\"object\"}},\"type\":\"object\",\"x-kubernetes-map-type\":\"atomic\"},\"namespaces\":{\"description\":\"namespaces specifies a static list of namespace names that the term applies to.\\nThe term is applied to the union of the namespaces listed in this field\\nand the ones selected by namespaceSelector.\\nnull or empty namespaces list and null namespaceSelector means \\\"this pod's namespace\\\".\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"topologyKey\":{\"description\":\"This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching\\nthe labelSelector in the specified namespaces, where co-located is defined as running on a node\\nwhose value of the label with key topologyKey matches that of any node on which any of the\\nselected pods is running.\\nEmpty topologyKey is not allowed.\",\"type\":\"string\"}},\"required\":[\"topologyKey\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"type\":\"object\"}},\"type\":\"object\"},\"nodeSelector\":{\"additionalProperties\":{\"type\":\"string\"},\"description\":\"nodeSelector is the node selector applied to the relevant kind of pods\\nIt specifies a map of key-value pairs: for the pod to be eligible to run on a node,\\nthe node must have each of the indicated key-value pairs as labels\\n(it can have additional labels as well).\\nSee https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#nodeselector\",\"type\":\"object\"},\"tolerations\":{\"description\":\"tolerations is a list of tolerations applied to the relevant kind of pods\\nSee https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/ for more info.\\nThese are additional tolerations other than default ones.\",\"items\":{\"description\":\"The pod this Toleration is attached to tolerates any taint that matches\\nthe triple \\u003ckey,value,effect\\u003e using the matching operator \\u003coperator\\u003e.\",\"properties\":{\"effect\":{\"description\":\"Effect indicates the taint effect to match. Empty means match all taint effects.\\nWhen specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.\",\"type\":\"string\"},\"key\":{\"description\":\"Key is the taint key that the toleration applies to. Empty means match all taint keys.\\nIf the key is empty, operator must be Exists; this combination means to match all values and all keys.\",\"type\":\"string\"},\"operator\":{\"description\":\"Operator represents a key's relationship to the value.\\nValid operators are Exists and Equal. Defaults to Equal.\\nExists is equivalent to wildcard for value, so that a pod can\\ntolerate all taints of a particular category.\",\"type\":\"string\"},\"tolerationSeconds\":{\"description\":\"TolerationSeconds represents the period of time the toleration (which must be\\nof effect NoExecute, otherwise this field is ignored) tolerates the taint. By default,\\nit is not set, which means tolerate the taint forever (do not evict). Zero and\\nnegative values will be treated as 0 (evict immediately) by the system.\",\"format\":\"int64\",\"type\":\"integer\"},\"value\":{\"description\":\"Value is the taint value the toleration matches to.\\nIf the operator is Exists, the value should be empty, otherwise just a regular string.\",\"type\":\"string\"}},\"type\":\"object\"},\"type\":\"array\"}},\"type\":\"object\"}},\"type\":\"object\"},\"status\":{\"description\":\"CDIStatus defines the status of the installation\",\"properties\":{\"conditions\":{\"description\":\"A list of current conditions of the resource\",\"items\":{\"description\":\"Condition represents the state of the operator's\\nreconciliation functionality.\",\"properties\":{\"lastHeartbeatTime\":{\"format\":\"date-time\",\"type\":\"string\"},\"lastTransitionTime\":{\"format\":\"date-time\",\"type\":\"string\"},\"message\":{\"type\":\"string\"},\"reason\":{\"type\":\"string\"},\"status\":{\"type\":\"string\"},\"type\":{\"description\":\"ConditionType is the state of the operator's reconciliation functionality.\",\"type\":\"string\"}},\"required\":[\"status\",\"type\"],\"type\":\"object\"},\"type\":\"array\"},\"observedVersion\":{\"description\":\"The observed version of the resource\",\"type\":\"string\"},\"operatorVersion\":{\"description\":\"The version of the resource as defined by the operator\",\"type\":\"string\"},\"phase\":{\"description\":\"Phase is the current phase of the deployment\",\"type\":\"string\"},\"targetVersion\":{\"description\":\"The desired version of the resource\",\"type\":\"string\"}},\"type\":\"object\"}},\"required\":[\"spec\"],\"type\":\"object\"}},\"served\":true,\"storage\":false,\"subresources\":{}},{\"additionalPrinterColumns\":[{\"jsonPath\":\".metadata.creationTimestamp\",\"name\":\"Age\",\"type\":\"date\"},{\"jsonPath\":\".status.phase\",\"name\":\"Phase\",\"type\":\"string\"}],\"name\":\"v1beta1\",\"schema\":{\"openAPIV3Schema\":{\"description\":\"CDI is the CDI Operator CRD\",\"properties\":{\"apiVersion\":{\"description\":\"APIVersion defines the versioned schema of this representation of an object.\\nServers should convert recognized schemas to the latest internal value, and\\nmay reject unrecognized values.\\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources\",\"type\":\"string\"},\"kind\":{\"description\":\"Kind is a string value representing the REST resource this object represents.\\nServers may infer this from the endpoint the client submits requests to.\\nCannot be updated.\\nIn CamelCase.\\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\",\"type\":\"string\"},\"metadata\":{\"type\":\"object\"},\"spec\":{\"description\":\"CDISpec defines our specification for the CDI installation\",\"properties\":{\"certConfig\":{\"description\":\"certificate configuration\",\"properties\":{\"ca\":{\"description\":\"CA configuration\\nCA certs are kept in the CA bundle as long as they are valid\",\"properties\":{\"duration\":{\"description\":\"The requested 'duration' (i.e. lifetime) of the Certificate.\",\"type\":\"string\"},\"renewBefore\":{\"description\":\"The amount of time before the currently issued certificate's `notAfter`\\ntime that we will begin to attempt to renew the certificate.\",\"type\":\"string\"}},\"type\":\"object\"},\"client\":{\"description\":\"Client configuration\\nCerts are rotated and discarded\",\"properties\":{\"duration\":{\"description\":\"The requested 'duration' (i.e. lifetime) of the Certificate.\",\"type\":\"string\"},\"renewBefore\":{\"description\":\"The amount of time before the currently issued certificate's `notAfter`\\ntime that we will begin to attempt to renew the certificate.\",\"type\":\"string\"}},\"type\":\"object\"},\"server\":{\"description\":\"Server configuration\\nCerts are rotated and discarded\",\"properties\":{\"duration\":{\"description\":\"The requested 'duration' (i.e. lifetime) of the Certificate.\",\"type\":\"string\"},\"renewBefore\":{\"description\":\"The amount of time before the currently issued certificate's `notAfter`\\ntime that we will begin to attempt to renew the certificate.\",\"type\":\"string\"}},\"type\":\"object\"}},\"type\":\"object\"},\"cloneStrategyOverride\":{\"description\":\"Clone strategy override: should we use a host-assisted copy even if snapshots are available?\",\"enum\":[\"copy\",\"snapshot\",\"csi-clone\"],\"type\":\"string\"},\"config\":{\"description\":\"CDIConfig at CDI level\",\"properties\":{\"dataVolumeTTLSeconds\":{\"description\":\"DataVolumeTTLSeconds is the time in seconds after DataVolume completion it can be garbage collected. Disabled by default.\\nDeprecated: Removed in v1.62.\",\"format\":\"int32\",\"type\":\"integer\"},\"featureGates\":{\"description\":\"FeatureGates are a list of specific enabled feature gates\",\"items\":{\"type\":\"string\"},\"type\":\"array\"},\"filesystemOverhead\":{\"description\":\"FilesystemOverhead describes the space reserved for overhead when using Filesystem volumes. A value is between 0 and 1, if not defined it is 0.06 (6% overhead)\",\"properties\":{\"global\":{\"description\":\"Global is how much space of a Filesystem volume should be reserved for overhead. This value is used unless overridden by a more specific value (per storageClass)\",\"pattern\":\"^(0(?:\\\\.\\\\d{1,3})?|1)$\",\"type\":\"string\"},\"storageClass\":{\"additionalProperties\":{\"description\":\"Percent is a string that can only be a value between [0,1)\\n(Note: we actually rely on reconcile to reject invalid values)\",\"pattern\":\"^(0(?:\\\\.\\\\d{1,3})?|1)$\",\"type\":\"string\"},\"description\":\"StorageClass specifies how much space of a Filesystem volume should be reserved for safety. The keys are the storageClass and the values are the overhead. This value overrides the global value\",\"type\":\"object\"}},\"type\":\"object\"},\"imagePullSecrets\":{\"description\":\"The imagePullSecrets used to pull the container images\",\"items\":{\"description\":\"LocalObjectReference contains enough information to let you locate the\\nreferenced object inside the same namespace.\",\"properties\":{\"name\":{\"default\":\"\",\"description\":\"Name of the referent.\\nThis field is effectively required, but due to backwards compatibility is\\nallowed to be empty. Instances of this type with an empty value here are\\nalmost certainly wrong.\\nTODO: Add other useful fields. apiVersion, kind, uid?\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\\nTODO: Drop `kubebuilder:default` when controller-gen doesn't need it https://github.com/kubernetes-sigs/kubebuilder/issues/3896.\",\"type\":\"string\"}},\"type\":\"object\",\"x-kubernetes-map-type\":\"atomic\"},\"type\":\"array\"},\"importProxy\":{\"description\":\"ImportProxy contains importer pod proxy configuration.\",\"properties\":{\"HTTPProxy\":{\"description\":\"HTTPProxy is the URL http://\\u003cusername\\u003e:\\u003cpswd\\u003e@\\u003cip\\u003e:\\u003cport\\u003e of the import proxy for HTTP requests.  Empty means unset and will not result in the import pod env var.\",\"type\":\"string\"},\"HTTPSProxy\":{\"description\":\"HTTPSProxy is the URL https://\\u003cusername\\u003e:\\u003cpswd\\u003e@\\u003cip\\u003e:\\u003cport\\u003e of the import proxy for HTTPS requests.  Empty means unset and will not result in the import pod env var.\",\"type\":\"string\"},\"noProxy\":{\"description\":\"NoProxy is a comma-separated list of hostnames and/or CIDRs for which the proxy should not be used. Empty means unset and will not result in the import pod env var.\",\"type\":\"string\"},\"trustedCAProxy\":{\"description\":\"TrustedCAProxy is the name of a ConfigMap in the cdi namespace that contains a user-provided trusted certificate authority (CA) bundle.\\nThe TrustedCAProxy ConfigMap is consumed by the DataImportCron controller for creating cronjobs, and by the import controller referring a copy of the ConfigMap in the import namespace.\\nHere is an example of the ConfigMap (in yaml):\\n\\n\\napiVersion: v1\\nkind: ConfigMap\\nmetadata:\\n  name: my-ca-proxy-cm\\n  namespace: cdi\\ndata:\\n  ca.pem: |\\n    -----BEGIN CERTIFICATE-----\\n\\t   ... \\u003cbase64 encoded cert\\u003e ...\\n\\t   -----END CERTIFICATE-----\",\"type\":\"string\"}},\"type\":\"object\"},\"insecureRegistries\":{\"description\":\"InsecureRegistries is a list of TLS disabled registries\",\"items\":{\"type\":\"string\"},\"type\":\"array\"},\"logVerbosity\":{\"description\":\"LogVerbosity overrides the default verbosity level used to initialize loggers\",\"format\":\"int32\",\"type\":\"integer\"},\"podResourceRequirements\":{\"description\":\"ResourceRequirements describes the compute resource requirements.\",\"properties\":{\"claims\":{\"description\":\"Claims lists the names of resources, defined in spec.resourceClaims,\\nthat are used by this container.\\n\\n\\nThis is an alpha field and requires enabling the\\nDynamicResourceAllocation feature gate.\\n\\n\\nThis field is immutable. It can only be set for containers.\",\"items\":{\"description\":\"ResourceClaim references one entry in PodSpec.ResourceClaims.\",\"properties\":{\"name\":{\"description\":\"Name must match the name of one entry in pod.spec.resourceClaims of\\nthe Pod where this field is used. It makes that resource available\\ninside a container.\",\"type\":\"string\"}},\"required\":[\"name\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-map-keys\":[\"name\"],\"x-kubernetes-list-type\":\"map\"},\"limits\":{\"additionalProperties\":{\"anyOf\":[{\"type\":\"integer\"},{\"type\":\"string\"}],\"pattern\":\"^(\\\\+|-)?(([0-9]+(\\\\.[0-9]*)?)|(\\\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\\\+|-)?(([0-9]+(\\\\.[0-9]*)?)|(\\\\.[0-9]+))))?$\",\"x-kubernetes-int-or-string\":true},\"description\":\"Limits describes the maximum amount of compute resources allowed.\\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/\",\"type\":\"object\"},\"requests\":{\"additionalProperties\":{\"anyOf\":[{\"type\":\"integer\"},{\"type\":\"string\"}],\"pattern\":\"^(\\\\+|-)?(([0-9]+(\\\\.[0-9]*)?)|(\\\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\\\+|-)?(([0-9]+(\\\\.[0-9]*)?)|(\\\\.[0-9]+))))?$\",\"x-kubernetes-int-or-string\":true},\"description\":\"Requests describes the minimum amount of compute resources required.\\nIf Requests is omitted for a container, it defaults to Limits if that is explicitly specified,\\notherwise to an implementation-defined value. Requests cannot exceed Limits.\\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/\",\"type\":\"object\"}},\"type\":\"object\"},\"preallocation\":{\"description\":\"Preallocation controls whether storage for DataVolumes should be allocated in advance.\",\"type\":\"boolean\"},\"scratchSpaceStorageClass\":{\"description\":\"Override the storage class to used for scratch space during transfer operations. The scratch space storage class is determined in the following order: 1. value of scratchSpaceStorageClass, if that doesn't exist, use the default storage class, if there is no default storage class, use the storage class of the DataVolume, if no storage class specified, use no storage class for scratch space\",\"type\":\"string\"},\"tlsSecurityProfile\":{\"description\":\"TLSSecurityProfile is used by operators to apply cluster-wide TLS security settings to operands.\",\"properties\":{\"custom\":{\"description\":\"custom is a user-defined TLS security profile. Be extremely careful using a custom\\nprofile as invalid configurations can be catastrophic. An example custom profile\\nlooks like this:\\n\\n\\n  ciphers:\\n    - ECDHE-ECDSA-CHACHA20-POLY1305\\n    - ECDHE-RSA-CHACHA20-POLY1305\\n    - ECDHE-RSA-AES128-GCM-SHA256\\n    - ECDHE-ECDSA-AES128-GCM-SHA256\\n  minTLSVersion: VersionTLS11\",\"nullable\":true,\"properties\":{\"ciphers\":{\"description\":\"ciphers is used to specify the cipher algorithms that are negotiated\\nduring the TLS handshake.  Operators may remove entries their operands\\ndo not support.  For example, to use DES-CBC3-SHA  (yaml):\\n\\n\\n  ciphers:\\n    - DES-CBC3-SHA\",\"items\":{\"type\":\"string\"},\"type\":\"array\"},\"minTLSVersion\":{\"description\":\"minTLSVersion is used to specify the minimal version of the TLS protocol\\nthat is negotiated during the TLS handshake. For example, to use TLS\\nversions 1.1, 1.2 and 1.3 (yaml):\\n\\n\\n  minTLSVersion: VersionTLS11\\n\\n\\nNOTE: currently the highest minTLSVersion allowed is VersionTLS12\",\"enum\":[\"VersionTLS10\",\"VersionTLS11\",\"VersionTLS12\",\"VersionTLS13\"],\"type\":\"string\"}},\"required\":[\"ciphers\",\"minTLSVersion\"],\"type\":\"object\"},\"intermediate\":{\"description\":\"intermediate is a TLS security profile based on:\\n\\n\\nhttps://wiki.mozilla.org/Security/Server_Side_TLS#Intermediate_compatibility_.28recommended.29\\n\\n\\nand looks like this (yaml):\\n\\n\\n  ciphers:\\n    - TLS_AES_128_GCM_SHA256\\n    - TLS_AES_256_GCM_SHA384\\n    - TLS_CHACHA20_POLY1305_SHA256\\n    - ECDHE-ECDSA-AES128-GCM-SHA256\\n    - ECDHE-RSA-AES128-GCM-SHA256\\n    - ECDHE-ECDSA-AES256-GCM-SHA384\\n    - ECDHE-RSA-AES256-GCM-SHA384\\n    - ECDHE-ECDSA-CHACHA20-POLY1305\\n    - ECDHE-RSA-CHACHA20-POLY1305\\n    - DHE-RSA-AES128-GCM-SHA256\\n    - DHE-RSA-AES256-GCM-SHA384\\n  minTLSVersion: VersionTLS12\",\"nullable\":true,\"type\":\"object\"},\"modern\":{\"description\":\"modern is a TLS security profile based on:\\n\\n\\nhttps://wiki.mozilla.org/Security/Server_Side_TLS#Modern_compatibility\\n\\n\\nand looks like this (yaml):\\n\\n\\n  ciphers:\\n    - TLS_AES_128_GCM_SHA256\\n    - TLS_AES_256_GCM_SHA384\\n    - TLS_CHACHA20_POLY1305_SHA256\\n  minTLSVersion: VersionTLS13\\n\\n\\nNOTE: Currently unsupported.\",\"nullable\":true,\"type\":\"object\"},\"old\":{\"description\":\"old is a TLS security profile based on:\\n\\n\\nhttps://wiki.mozilla.org/Security/Server_Side_TLS#Old_backward_compatibility\\n\\n\\nand looks like this (yaml):\\n\\n\\n  ciphers:\\n    - TLS_AES_128_GCM_SHA256\\n    - TLS_AES_256_GCM_SHA384\\n    - TLS_CHACHA20_POLY1305_SHA256\\n    - ECDHE-ECDSA-AES128-GCM-SHA256\\n    - ECDHE-RSA-AES128-GCM-SHA256\\n    - ECDHE-ECDSA-AES256-GCM-SHA384\\n    - ECDHE-RSA-AES256-GCM-SHA384\\n    - ECDHE-ECDSA-CHACHA20-POLY1305\\n    - ECDHE-RSA-CHACHA20-POLY1305\\n    - DHE-RSA-AES128-GCM-SHA256\\n    - DHE-RSA-AES256-GCM-SHA384\\n    - DHE-RSA-CHACHA20-POLY1305\\n    - ECDHE-ECDSA-AES128-SHA256\\n    - ECDHE-RSA-AES128-SHA256\\n    - ECDHE-ECDSA-AES128-SHA\\n    - ECDHE-RSA-AES128-SHA\\n    - ECDHE-ECDSA-AES256-SHA384\\n    - ECDHE-RSA-AES256-SHA384\\n    - ECDHE-ECDSA-AES256-SHA\\n    - ECDHE-RSA-AES256-SHA\\n    - DHE-RSA-AES128-SHA256\\n    - DHE-RSA-AES256-SHA256\\n    - AES128-GCM-SHA256\\n    - AES256-GCM-SHA384\\n    - AES128-SHA256\\n    - AES256-SHA256\\n    - AES128-SHA\\n    - AES256-SHA\\n    - DES-CBC3-SHA\\n  minTLSVersion: VersionTLS10\",\"nullable\":true,\"type\":\"object\"},\"type\":{\"description\":\"type is one of Old, Intermediate, Modern or Custom. Custom provides\\nthe ability to specify individual TLS security profile parameters.\\nOld, Intermediate and Modern are TLS security profiles based on:\\n\\n\\nhttps://wiki.mozilla.org/Security/Server_Side_TLS#Recommended_configurations\\n\\n\\nThe profiles are intent based, so they may change over time as new ciphers are developed and existing ciphers\\nare found to be insecure.  Depending on precisely which ciphers are available to a process, the list may be\\nreduced.\\n\\n\\nNote that the Modern profile is currently not supported because it is not\\nyet well adopted by common software libraries.\",\"enum\":[\"Old\",\"Intermediate\",\"Modern\",\"Custom\"],\"type\":\"string\"}},\"type\":\"object\"},\"uploadProxyURLOverride\":{\"description\":\"Override the URL used when uploading to a DataVolume\",\"type\":\"string\"}},\"type\":\"object\"},\"customizeComponents\":{\"description\":\"CustomizeComponents defines patches for components deployed by the CDI operator.\",\"properties\":{\"flags\":{\"description\":\"Configure the value used for deployment and daemonset resources\",\"properties\":{\"api\":{\"additionalProperties\":{\"type\":\"string\"},\"type\":\"object\"},\"controller\":{\"additionalProperties\":{\"type\":\"string\"},\"type\":\"object\"},\"uploadProxy\":{\"additionalProperties\":{\"type\":\"string\"},\"type\":\"object\"}},\"type\":\"object\"},\"patches\":{\"items\":{\"description\":\"CustomizeComponentsPatch defines a patch for some resource.\",\"properties\":{\"patch\":{\"type\":\"string\"},\"resourceName\":{\"minLength\":1,\"type\":\"string\"},\"resourceType\":{\"minLength\":1,\"type\":\"string\"},\"type\":{\"description\":\"PatchType defines the patch type.\",\"type\":\"string\"}},\"required\":[\"patch\",\"resourceName\",\"resourceType\",\"type\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"type\":\"object\"},\"imagePullPolicy\":{\"description\":\"PullPolicy describes a policy for if/when to pull a container image\",\"enum\":[\"Always\",\"IfNotPresent\",\"Never\"],\"type\":\"string\"},\"infra\":{\"description\":\"Selectors and tolerations that should apply to cdi infrastructure components\",\"properties\":{\"affinity\":{\"description\":\"affinity enables pod affinity/anti-affinity placement expanding the types of constraints\\nthat can be expressed with nodeSelector.\\naffinity is going to be applied to the relevant kind of pods in parallel with nodeSelector\\nSee https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#affinity-and-anti-affinity\",\"properties\":{\"nodeAffinity\":{\"description\":\"Describes node affinity scheduling rules for the pod.\",\"properties\":{\"preferredDuringSchedulingIgnoredDuringExecution\":{\"description\":\"The scheduler will prefer to schedule pods to nodes that satisfy\\nthe affinity expressions specified by this field, but it may choose\\na node that violates one or more of the expressions. The node that is\\nmost preferred is the one with the greatest sum of weights, i.e.\\nfor each node that meets all of the scheduling requirements (resource\\nrequest, requiredDuringScheduling affinity expressions, etc.),\\ncompute a sum by iterating through the elements of this field and adding\\n\\\"weight\\\" to the sum if the node matches the corresponding matchExpressions; the\\nnode(s) with the highest sum are the most preferred.\",\"items\":{\"description\":\"An empty preferred scheduling term matches all objects with implicit weight 0\\n(i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).\",\"properties\":{\"preference\":{\"description\":\"A node selector term, associated with the corresponding weight.\",\"properties\":{\"matchExpressions\":{\"description\":\"A list of node selector requirements by node's labels.\",\"items\":{\"description\":\"A node selector requirement is a selector that contains values, a key, and an operator\\nthat relates the key and values.\",\"properties\":{\"key\":{\"description\":\"The label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"Represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.\",\"type\":\"string\"},\"values\":{\"description\":\"An array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. If the operator is Gt or Lt, the values\\narray must have a single element, which will be interpreted as an integer.\\nThis array is replaced during a strategic merge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"matchFields\":{\"description\":\"A list of node selector requirements by node's fields.\",\"items\":{\"description\":\"A node selector requirement is a selector that contains values, a key, and an operator\\nthat relates the key and values.\",\"properties\":{\"key\":{\"description\":\"The label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"Represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.\",\"type\":\"string\"},\"values\":{\"description\":\"An array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. If the operator is Gt or Lt, the values\\narray must have a single element, which will be interpreted as an integer.\\nThis array is replaced during a strategic merge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"type\":\"object\",\"x-kubernetes-map-type\":\"atomic\"},\"weight\":{\"description\":\"Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.\",\"format\":\"int32\",\"type\":\"integer\"}},\"required\":[\"preference\",\"weight\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"requiredDuringSchedulingIgnoredDuringExecution\":{\"description\":\"If the affinity requirements specified by this field are not met at\\nscheduling time, the pod will not be scheduled onto the node.\\nIf the affinity requirements specified by this field cease to be met\\nat some point during pod execution (e.g. due to an update), the system\\nmay or may not try to eventually evict the pod from its node.\",\"properties\":{\"nodeSelectorTerms\":{\"description\":\"Required. A list of node selector terms. The terms are ORed.\",\"items\":{\"description\":\"A null or empty node selector term matches no objects. The requirements of\\nthem are ANDed.\\nThe TopologySelectorTerm type implements a subset of the NodeSelectorTerm.\",\"properties\":{\"matchExpressions\":{\"description\":\"A list of node selector requirements by node's labels.\",\"items\":{\"description\":\"A node selector requirement is a selector that contains values, a key, and an operator\\nthat relates the key and values.\",\"properties\":{\"key\":{\"description\":\"The label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"Represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.\",\"type\":\"string\"},\"values\":{\"description\":\"An array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. If the operator is Gt or Lt, the values\\narray must have a single element, which will be interpreted as an integer.\\nThis array is replaced during a strategic merge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"matchFields\":{\"description\":\"A list of node selector requirements by node's fields.\",\"items\":{\"description\":\"A node selector requirement is a selector that contains values, a key, and an operator\\nthat relates the key and values.\",\"properties\":{\"key\":{\"description\":\"The label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"Represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.\",\"type\":\"string\"},\"values\":{\"description\":\"An array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. If the operator is Gt or Lt, the values\\narray must have a single element, which will be interpreted as an integer.\\nThis array is replaced during a strategic merge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"type\":\"object\",\"x-kubernetes-map-type\":\"atomic\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"nodeSelectorTerms\"],\"type\":\"object\",\"x-kubernetes-map-type\":\"atomic\"}},\"type\":\"object\"},\"podAffinity\":{\"description\":\"Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).\",\"properties\":{\"preferredDuringSchedulingIgnoredDuringExecution\":{\"description\":\"The scheduler will prefer to schedule pods to nodes that satisfy\\nthe affinity expressions specified by this field, but it may choose\\na node that violates one or more of the expressions. The node that is\\nmost preferred is the one with the greatest sum of weights, i.e.\\nfor each node that meets all of the scheduling requirements (resource\\nrequest, requiredDuringScheduling affinity expressions, etc.),\\ncompute a sum by iterating through the elements of this field and adding\\n\\\"weight\\\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the\\nnode(s) with the highest sum are the most preferred.\",\"items\":{\"description\":\"The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)\",\"properties\":{\"podAffinityTerm\":{\"description\":\"Required. A pod affinity term, associated with the corresponding weight.\",\"properties\":{\"labelSelector\":{\"description\":\"A label query over a set of resources, in this case pods.\\nIf it's null, this PodAffinityTerm matches with no Pods.\",\"properties\":{\"matchExpressions\":{\"description\":\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\",\"items\":{\"description\":\"A label selector requirement is a selector that contains values, a key, and an operator that\\nrelates the key and values.\",\"properties\":{\"key\":{\"description\":\"key is the label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"operator represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists and DoesNotExist.\",\"type\":\"string\"},\"values\":{\"description\":\"values is an array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. This array is replaced during a strategic\\nmerge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"matchLabels\":{\"additionalProperties\":{\"type\":\"string\"},\"description\":\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\\nmap is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the\\noperator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\",\"type\":\"object\"}},\"type\":\"object\",\"x-kubernetes-map-type\":\"atomic\"},\"matchLabelKeys\":{\"description\":\"MatchLabelKeys is a set of pod label keys to select which pods will\\nbe taken into consideration. The keys are used to lookup values from the\\nincoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`\\nto select the group of existing pods which pods will be taken into consideration\\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\\npod labels will be ignored. The default value is empty.\\nThe same key is forbidden to exist in both matchLabelKeys and labelSelector.\\nAlso, matchLabelKeys cannot be set when labelSelector isn't set.\\nThis is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"mismatchLabelKeys\":{\"description\":\"MismatchLabelKeys is a set of pod label keys to select which pods will\\nbe taken into consideration. The keys are used to lookup values from the\\nincoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`\\nto select the group of existing pods which pods will be taken into consideration\\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\\npod labels will be ignored. The default value is empty.\\nThe same key is forbidden to exist in both mismatchLabelKeys and labelSelector.\\nAlso, mismatchLabelKeys cannot be set when labelSelector isn't set.\\nThis is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"namespaceSelector\":{\"description\":\"A label query over the set of namespaces that the term applies to.\\nThe term is applied to the union of the namespaces selected by this field\\nand the ones listed in the namespaces field.\\nnull selector and null or empty namespaces list means \\\"this pod's namespace\\\".\\nAn empty selector ({}) matches all namespaces.\",\"properties\":{\"matchExpressions\":{\"description\":\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\",\"items\":{\"description\":\"A label selector requirement is a selector that contains values, a key, and an operator that\\nrelates the key and values.\",\"properties\":{\"key\":{\"description\":\"key is the label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"operator represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists and DoesNotExist.\",\"type\":\"string\"},\"values\":{\"description\":\"values is an array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. This array is replaced during a strategic\\nmerge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"matchLabels\":{\"additionalProperties\":{\"type\":\"string\"},\"description\":\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\\nmap is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the\\noperator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\",\"type\":\"object\"}},\"type\":\"object\",\"x-kubernetes-map-type\":\"atomic\"},\"namespaces\":{\"description\":\"namespaces specifies a static list of namespace names that the term applies to.\\nThe term is applied to the union of the namespaces listed in this field\\nand the ones selected by namespaceSelector.\\nnull or empty namespaces list and null namespaceSelector means \\\"this pod's namespace\\\".\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"topologyKey\":{\"description\":\"This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching\\nthe labelSelector in the specified namespaces, where co-located is defined as running on a node\\nwhose value of the label with key topologyKey matches that of any node on which any of the\\nselected pods is running.\\nEmpty topologyKey is not allowed.\",\"type\":\"string\"}},\"required\":[\"topologyKey\"],\"type\":\"object\"},\"weight\":{\"description\":\"weight associated with matching the corresponding podAffinityTerm,\\nin the range 1-100.\",\"format\":\"int32\",\"type\":\"integer\"}},\"required\":[\"podAffinityTerm\",\"weight\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"requiredDuringSchedulingIgnoredDuringExecution\":{\"description\":\"If the affinity requirements specified by this field are not met at\\nscheduling time, the pod will not be scheduled onto the node.\\nIf the affinity requirements specified by this field cease to be met\\nat some point during pod execution (e.g. due to a pod label update), the\\nsystem may or may not try to eventually evict the pod from its node.\\nWhen there are multiple elements, the lists of nodes corresponding to each\\npodAffinityTerm are intersected, i.e. all terms must be satisfied.\",\"items\":{\"description\":\"Defines a set of pods (namely those matching the labelSelector\\nrelative to the given namespace(s)) that this pod should be\\nco-located (affinity) or not co-located (anti-affinity) with,\\nwhere co-located is defined as running on a node whose value of\\nthe label with key \\u003ctopologyKey\\u003e matches that of any node on which\\na pod of the set of pods is running\",\"properties\":{\"labelSelector\":{\"description\":\"A label query over a set of resources, in this case pods.\\nIf it's null, this PodAffinityTerm matches with no Pods.\",\"properties\":{\"matchExpressions\":{\"description\":\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\",\"items\":{\"description\":\"A label selector requirement is a selector that contains values, a key, and an operator that\\nrelates the key and values.\",\"properties\":{\"key\":{\"description\":\"key is the label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"operator represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists and DoesNotExist.\",\"type\":\"string\"},\"values\":{\"description\":\"values is an array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. This array is replaced during a strategic\\nmerge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"matchLabels\":{\"additionalProperties\":{\"type\":\"string\"},\"description\":\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\\nmap is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the\\noperator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\",\"type\":\"object\"}},\"type\":\"object\",\"x-kubernetes-map-type\":\"atomic\"},\"matchLabelKeys\":{\"description\":\"MatchLabelKeys is a set of pod label keys to select which pods will\\nbe taken into consideration. The keys are used to lookup values from the\\nincoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`\\nto select the group of existing pods which pods will be taken into consideration\\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\\npod labels will be ignored. The default value is empty.\\nThe same key is forbidden to exist in both matchLabelKeys and labelSelector.\\nAlso, matchLabelKeys cannot be set when labelSelector isn't set.\\nThis is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"mismatchLabelKeys\":{\"description\":\"MismatchLabelKeys is a set of pod label keys to select which pods will\\nbe taken into consideration. The keys are used to lookup values from the\\nincoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`\\nto select the group of existing pods which pods will be taken into consideration\\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\\npod labels will be ignored. The default value is empty.\\nThe same key is forbidden to exist in both mismatchLabelKeys and labelSelector.\\nAlso, mismatchLabelKeys cannot be set when labelSelector isn't set.\\nThis is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"namespaceSelector\":{\"description\":\"A label query over the set of namespaces that the term applies to.\\nThe term is applied to the union of the namespaces selected by this field\\nand the ones listed in the namespaces field.\\nnull selector and null or empty namespaces list means \\\"this pod's namespace\\\".\\nAn empty selector ({}) matches all namespaces.\",\"properties\":{\"matchExpressions\":{\"description\":\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\",\"items\":{\"description\":\"A label selector requirement is a selector that contains values, a key, and an operator that\\nrelates the key and values.\",\"properties\":{\"key\":{\"description\":\"key is the label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"operator represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists and DoesNotExist.\",\"type\":\"string\"},\"values\":{\"description\":\"values is an array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. This array is replaced during a strategic\\nmerge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"matchLabels\":{\"additionalProperties\":{\"type\":\"string\"},\"description\":\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\\nmap is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the\\noperator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\",\"type\":\"object\"}},\"type\":\"object\",\"x-kubernetes-map-type\":\"atomic\"},\"namespaces\":{\"description\":\"namespaces specifies a static list of namespace names that the term applies to.\\nThe term is applied to the union of the namespaces listed in this field\\nand the ones selected by namespaceSelector.\\nnull or empty namespaces list and null namespaceSelector means \\\"this pod's namespace\\\".\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"topologyKey\":{\"description\":\"This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching\\nthe labelSelector in the specified namespaces, where co-located is defined as running on a node\\nwhose value of the label with key topologyKey matches that of any node on which any of the\\nselected pods is running.\\nEmpty topologyKey is not allowed.\",\"type\":\"string\"}},\"required\":[\"topologyKey\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"type\":\"object\"},\"podAntiAffinity\":{\"description\":\"Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).\",\"properties\":{\"preferredDuringSchedulingIgnoredDuringExecution\":{\"description\":\"The scheduler will prefer to schedule pods to nodes that satisfy\\nthe anti-affinity expressions specified by this field, but it may choose\\na node that violates one or more of the expressions. The node that is\\nmost preferred is the one with the greatest sum of weights, i.e.\\nfor each node that meets all of the scheduling requirements (resource\\nrequest, requiredDuringScheduling anti-affinity expressions, etc.),\\ncompute a sum by iterating through the elements of this field and adding\\n\\\"weight\\\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the\\nnode(s) with the highest sum are the most preferred.\",\"items\":{\"description\":\"The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)\",\"properties\":{\"podAffinityTerm\":{\"description\":\"Required. A pod affinity term, associated with the corresponding weight.\",\"properties\":{\"labelSelector\":{\"description\":\"A label query over a set of resources, in this case pods.\\nIf it's null, this PodAffinityTerm matches with no Pods.\",\"properties\":{\"matchExpressions\":{\"description\":\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\",\"items\":{\"description\":\"A label selector requirement is a selector that contains values, a key, and an operator that\\nrelates the key and values.\",\"properties\":{\"key\":{\"description\":\"key is the label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"operator represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists and DoesNotExist.\",\"type\":\"string\"},\"values\":{\"description\":\"values is an array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. This array is replaced during a strategic\\nmerge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"matchLabels\":{\"additionalProperties\":{\"type\":\"string\"},\"description\":\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\\nmap is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the\\noperator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\",\"type\":\"object\"}},\"type\":\"object\",\"x-kubernetes-map-type\":\"atomic\"},\"matchLabelKeys\":{\"description\":\"MatchLabelKeys is a set of pod label keys to select which pods will\\nbe taken into consideration. The keys are used to lookup values from the\\nincoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`\\nto select the group of existing pods which pods will be taken into consideration\\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\\npod labels will be ignored. The default value is empty.\\nThe same key is forbidden to exist in both matchLabelKeys and labelSelector.\\nAlso, matchLabelKeys cannot be set when labelSelector isn't set.\\nThis is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"mismatchLabelKeys\":{\"description\":\"MismatchLabelKeys is a set of pod label keys to select which pods will\\nbe taken into consideration. The keys are used to lookup values from the\\nincoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`\\nto select the group of existing pods which pods will be taken into consideration\\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\\npod labels will be ignored. The default value is empty.\\nThe same key is forbidden to exist in both mismatchLabelKeys and labelSelector.\\nAlso, mismatchLabelKeys cannot be set when labelSelector isn't set.\\nThis is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"namespaceSelector\":{\"description\":\"A label query over the set of namespaces that the term applies to.\\nThe term is applied to the union of the namespaces selected by this field\\nand the ones listed in the namespaces field.\\nnull selector and null or empty namespaces list means \\\"this pod's namespace\\\".\\nAn empty selector ({}) matches all namespaces.\",\"properties\":{\"matchExpressions\":{\"description\":\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\",\"items\":{\"description\":\"A label selector requirement is a selector that contains values, a key, and an operator that\\nrelates the key and values.\",\"properties\":{\"key\":{\"description\":\"key is the label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"operator represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists and DoesNotExist.\",\"type\":\"string\"},\"values\":{\"description\":\"values is an array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. This array is replaced during a strategic\\nmerge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"matchLabels\":{\"additionalProperties\":{\"type\":\"string\"},\"description\":\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\\nmap is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the\\noperator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\",\"type\":\"object\"}},\"type\":\"object\",\"x-kubernetes-map-type\":\"atomic\"},\"namespaces\":{\"description\":\"namespaces specifies a static list of namespace names that the term applies to.\\nThe term is applied to the union of the namespaces listed in this field\\nand the ones selected by namespaceSelector.\\nnull or empty namespaces list and null namespaceSelector means \\\"this pod's namespace\\\".\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"topologyKey\":{\"description\":\"This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching\\nthe labelSelector in the specified namespaces, where co-located is defined as running on a node\\nwhose value of the label with key topologyKey matches that of any node on which any of the\\nselected pods is running.\\nEmpty topologyKey is not allowed.\",\"type\":\"string\"}},\"required\":[\"topologyKey\"],\"type\":\"object\"},\"weight\":{\"description\":\"weight associated with matching the corresponding podAffinityTerm,\\nin the range 1-100.\",\"format\":\"int32\",\"type\":\"integer\"}},\"required\":[\"podAffinityTerm\",\"weight\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"requiredDuringSchedulingIgnoredDuringExecution\":{\"description\":\"If the anti-affinity requirements specified by this field are not met at\\nscheduling time, the pod will not be scheduled onto the node.\\nIf the anti-affinity requirements specified by this field cease to be met\\nat some point during pod execution (e.g. due to a pod label update), the\\nsystem may or may not try to eventually evict the pod from its node.\\nWhen there are multiple elements, the lists of nodes corresponding to each\\npodAffinityTerm are intersected, i.e. all terms must be satisfied.\",\"items\":{\"description\":\"Defines a set of pods (namely those matching the labelSelector\\nrelative to the given namespace(s)) that this pod should be\\nco-located (affinity) or not co-located (anti-affinity) with,\\nwhere co-located is defined as running on a node whose value of\\nthe label with key \\u003ctopologyKey\\u003e matches that of any node on which\\na pod of the set of pods is running\",\"properties\":{\"labelSelector\":{\"description\":\"A label query over a set of resources, in this case pods.\\nIf it's null, this PodAffinityTerm matches with no Pods.\",\"properties\":{\"matchExpressions\":{\"description\":\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\",\"items\":{\"description\":\"A label selector requirement is a selector that contains values, a key, and an operator that\\nrelates the key and values.\",\"properties\":{\"key\":{\"description\":\"key is the label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"operator represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists and DoesNotExist.\",\"type\":\"string\"},\"values\":{\"description\":\"values is an array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. This array is replaced during a strategic\\nmerge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"matchLabels\":{\"additionalProperties\":{\"type\":\"string\"},\"description\":\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\\nmap is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the\\noperator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\",\"type\":\"object\"}},\"type\":\"object\",\"x-kubernetes-map-type\":\"atomic\"},\"matchLabelKeys\":{\"description\":\"MatchLabelKeys is a set of pod label keys to select which pods will\\nbe taken into consideration. The keys are used to lookup values from the\\nincoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`\\nto select the group of existing pods which pods will be taken into consideration\\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\\npod labels will be ignored. The default value is empty.\\nThe same key is forbidden to exist in both matchLabelKeys and labelSelector.\\nAlso, matchLabelKeys cannot be set when labelSelector isn't set.\\nThis is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"mismatchLabelKeys\":{\"description\":\"MismatchLabelKeys is a set of pod label keys to select which pods will\\nbe taken into consideration. The keys are used to lookup values from the\\nincoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`\\nto select the group of existing pods which pods will be taken into consideration\\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\\npod labels will be ignored. The default value is empty.\\nThe same key is forbidden to exist in both mismatchLabelKeys and labelSelector.\\nAlso, mismatchLabelKeys cannot be set when labelSelector isn't set.\\nThis is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"namespaceSelector\":{\"description\":\"A label query over the set of namespaces that the term applies to.\\nThe term is applied to the union of the namespaces selected by this field\\nand the ones listed in the namespaces field.\\nnull selector and null or empty namespaces list means \\\"this pod's namespace\\\".\\nAn empty selector ({}) matches all namespaces.\",\"properties\":{\"matchExpressions\":{\"description\":\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\",\"items\":{\"description\":\"A label selector requirement is a selector that contains values, a key, and an operator that\\nrelates the key and values.\",\"properties\":{\"key\":{\"description\":\"key is the label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"operator represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists and DoesNotExist.\",\"type\":\"string\"},\"values\":{\"description\":\"values is an array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. This array is replaced during a strategic\\nmerge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"matchLabels\":{\"additionalProperties\":{\"type\":\"string\"},\"description\":\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\\nmap is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the\\noperator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\",\"type\":\"object\"}},\"type\":\"object\",\"x-kubernetes-map-type\":\"atomic\"},\"namespaces\":{\"description\":\"namespaces specifies a static list of namespace names that the term applies to.\\nThe term is applied to the union of the namespaces listed in this field\\nand the ones selected by namespaceSelector.\\nnull or empty namespaces list and null namespaceSelector means \\\"this pod's namespace\\\".\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"topologyKey\":{\"description\":\"This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching\\nthe labelSelector in the specified namespaces, where co-located is defined as running on a node\\nwhose value of the label with key topologyKey matches that of any node on which any of the\\nselected pods is running.\\nEmpty topologyKey is not allowed.\",\"type\":\"string\"}},\"required\":[\"topologyKey\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"type\":\"object\"}},\"type\":\"object\"},\"apiServerReplicas\":{\"description\":\"ApiserverReplicas set Replicas for cdi-apiserver\",\"format\":\"int32\",\"type\":\"integer\"},\"deploymentReplicas\":{\"description\":\"DeploymentReplicas set Replicas for cdi-deployment\",\"format\":\"int32\",\"type\":\"integer\"},\"nodeSelector\":{\"additionalProperties\":{\"type\":\"string\"},\"description\":\"nodeSelector is the node selector applied to the relevant kind of pods\\nIt specifies a map of key-value pairs: for the pod to be eligible to run on a node,\\nthe node must have each of the indicated key-value pairs as labels\\n(it can have additional labels as well).\\nSee https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#nodeselector\",\"type\":\"object\"},\"tolerations\":{\"description\":\"tolerations is a list of tolerations applied to the relevant kind of pods\\nSee https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/ for more info.\\nThese are additional tolerations other than default ones.\",\"items\":{\"description\":\"The pod this Toleration is attached to tolerates any taint that matches\\nthe triple \\u003ckey,value,effect\\u003e using the matching operator \\u003coperator\\u003e.\",\"properties\":{\"effect\":{\"description\":\"Effect indicates the taint effect to match. Empty means match all taint effects.\\nWhen specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.\",\"type\":\"string\"},\"key\":{\"description\":\"Key is the taint key that the toleration applies to. Empty means match all taint keys.\\nIf the key is empty, operator must be Exists; this combination means to match all values and all keys.\",\"type\":\"string\"},\"operator\":{\"description\":\"Operator represents a key's relationship to the value.\\nValid operators are Exists and Equal. Defaults to Equal.\\nExists is equivalent to wildcard for value, so that a pod can\\ntolerate all taints of a particular category.\",\"type\":\"string\"},\"tolerationSeconds\":{\"description\":\"TolerationSeconds represents the period of time the toleration (which must be\\nof effect NoExecute, otherwise this field is ignored) tolerates the taint. By default,\\nit is not set, which means tolerate the taint forever (do not evict). Zero and\\nnegative values will be treated as 0 (evict immediately) by the system.\",\"format\":\"int64\",\"type\":\"integer\"},\"value\":{\"description\":\"Value is the taint value the toleration matches to.\\nIf the operator is Exists, the value should be empty, otherwise just a regular string.\",\"type\":\"string\"}},\"type\":\"object\"},\"type\":\"array\"},\"uploadProxyReplicas\":{\"description\":\"UploadproxyReplicas set Replicas for cdi-uploadproxy\",\"format\":\"int32\",\"type\":\"integer\"}},\"type\":\"object\"},\"priorityClass\":{\"description\":\"PriorityClass of the CDI control plane\",\"type\":\"string\"},\"uninstallStrategy\":{\"description\":\"CDIUninstallStrategy defines the state to leave CDI on uninstall\",\"enum\":[\"RemoveWorkloads\",\"BlockUninstallIfWorkloadsExist\"],\"type\":\"string\"},\"workload\":{\"description\":\"Restrict on which nodes CDI workload pods will be scheduled\",\"properties\":{\"affinity\":{\"description\":\"affinity enables pod affinity/anti-affinity placement expanding the types of constraints\\nthat can be expressed with nodeSelector.\\naffinity is going to be applied to the relevant kind of pods in parallel with nodeSelector\\nSee https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#affinity-and-anti-affinity\",\"properties\":{\"nodeAffinity\":{\"description\":\"Describes node affinity scheduling rules for the pod.\",\"properties\":{\"preferredDuringSchedulingIgnoredDuringExecution\":{\"description\":\"The scheduler will prefer to schedule pods to nodes that satisfy\\nthe affinity expressions specified by this field, but it may choose\\na node that violates one or more of the expressions. The node that is\\nmost preferred is the one with the greatest sum of weights, i.e.\\nfor each node that meets all of the scheduling requirements (resource\\nrequest, requiredDuringScheduling affinity expressions, etc.),\\ncompute a sum by iterating through the elements of this field and adding\\n\\\"weight\\\" to the sum if the node matches the corresponding matchExpressions; the\\nnode(s) with the highest sum are the most preferred.\",\"items\":{\"description\":\"An empty preferred scheduling term matches all objects with implicit weight 0\\n(i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).\",\"properties\":{\"preference\":{\"description\":\"A node selector term, associated with the corresponding weight.\",\"properties\":{\"matchExpressions\":{\"description\":\"A list of node selector requirements by node's labels.\",\"items\":{\"description\":\"A node selector requirement is a selector that contains values, a key, and an operator\\nthat relates the key and values.\",\"properties\":{\"key\":{\"description\":\"The label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"Represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.\",\"type\":\"string\"},\"values\":{\"description\":\"An array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. If the operator is Gt or Lt, the values\\narray must have a single element, which will be interpreted as an integer.\\nThis array is replaced during a strategic merge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"matchFields\":{\"description\":\"A list of node selector requirements by node's fields.\",\"items\":{\"description\":\"A node selector requirement is a selector that contains values, a key, and an operator\\nthat relates the key and values.\",\"properties\":{\"key\":{\"description\":\"The label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"Represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.\",\"type\":\"string\"},\"values\":{\"description\":\"An array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. If the operator is Gt or Lt, the values\\narray must have a single element, which will be interpreted as an integer.\\nThis array is replaced during a strategic merge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"type\":\"object\",\"x-kubernetes-map-type\":\"atomic\"},\"weight\":{\"description\":\"Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.\",\"format\":\"int32\",\"type\":\"integer\"}},\"required\":[\"preference\",\"weight\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"requiredDuringSchedulingIgnoredDuringExecution\":{\"description\":\"If the affinity requirements specified by this field are not met at\\nscheduling time, the pod will not be scheduled onto the node.\\nIf the affinity requirements specified by this field cease to be met\\nat some point during pod execution (e.g. due to an update), the system\\nmay or may not try to eventually evict the pod from its node.\",\"properties\":{\"nodeSelectorTerms\":{\"description\":\"Required. A list of node selector terms. The terms are ORed.\",\"items\":{\"description\":\"A null or empty node selector term matches no objects. The requirements of\\nthem are ANDed.\\nThe TopologySelectorTerm type implements a subset of the NodeSelectorTerm.\",\"properties\":{\"matchExpressions\":{\"description\":\"A list of node selector requirements by node's labels.\",\"items\":{\"description\":\"A node selector requirement is a selector that contains values, a key, and an operator\\nthat relates the key and values.\",\"properties\":{\"key\":{\"description\":\"The label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"Represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.\",\"type\":\"string\"},\"values\":{\"description\":\"An array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. If the operator is Gt or Lt, the values\\narray must have a single element, which will be interpreted as an integer.\\nThis array is replaced during a strategic merge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"matchFields\":{\"description\":\"A list of node selector requirements by node's fields.\",\"items\":{\"description\":\"A node selector requirement is a selector that contains values, a key, and an operator\\nthat relates the key and values.\",\"properties\":{\"key\":{\"description\":\"The label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"Represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.\",\"type\":\"string\"},\"values\":{\"description\":\"An array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. If the operator is Gt or Lt, the values\\narray must have a single element, which will be interpreted as an integer.\\nThis array is replaced during a strategic merge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"type\":\"object\",\"x-kubernetes-map-type\":\"atomic\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"nodeSelectorTerms\"],\"type\":\"object\",\"x-kubernetes-map-type\":\"atomic\"}},\"type\":\"object\"},\"podAffinity\":{\"description\":\"Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).\",\"properties\":{\"preferredDuringSchedulingIgnoredDuringExecution\":{\"description\":\"The scheduler will prefer to schedule pods to nodes that satisfy\\nthe affinity expressions specified by this field, but it may choose\\na node that violates one or more of the expressions. The node that is\\nmost preferred is the one with the greatest sum of weights, i.e.\\nfor each node that meets all of the scheduling requirements (resource\\nrequest, requiredDuringScheduling affinity expressions, etc.),\\ncompute a sum by iterating through the elements of this field and adding\\n\\\"weight\\\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the\\nnode(s) with the highest sum are the most preferred.\",\"items\":{\"description\":\"The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)\",\"properties\":{\"podAffinityTerm\":{\"description\":\"Required. A pod affinity term, associated with the corresponding weight.\",\"properties\":{\"labelSelector\":{\"description\":\"A label query over a set of resources, in this case pods.\\nIf it's null, this PodAffinityTerm matches with no Pods.\",\"properties\":{\"matchExpressions\":{\"description\":\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\",\"items\":{\"description\":\"A label selector requirement is a selector that contains values, a key, and an operator that\\nrelates the key and values.\",\"properties\":{\"key\":{\"description\":\"key is the label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"operator represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists and DoesNotExist.\",\"type\":\"string\"},\"values\":{\"description\":\"values is an array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. This array is replaced during a strategic\\nmerge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"matchLabels\":{\"additionalProperties\":{\"type\":\"string\"},\"description\":\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\\nmap is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the\\noperator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\",\"type\":\"object\"}},\"type\":\"object\",\"x-kubernetes-map-type\":\"atomic\"},\"matchLabelKeys\":{\"description\":\"MatchLabelKeys is a set of pod label keys to select which pods will\\nbe taken into consideration. The keys are used to lookup values from the\\nincoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`\\nto select the group of existing pods which pods will be taken into consideration\\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\\npod labels will be ignored. The default value is empty.\\nThe same key is forbidden to exist in both matchLabelKeys and labelSelector.\\nAlso, matchLabelKeys cannot be set when labelSelector isn't set.\\nThis is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"mismatchLabelKeys\":{\"description\":\"MismatchLabelKeys is a set of pod label keys to select which pods will\\nbe taken into consideration. The keys are used to lookup values from the\\nincoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`\\nto select the group of existing pods which pods will be taken into consideration\\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\\npod labels will be ignored. The default value is empty.\\nThe same key is forbidden to exist in both mismatchLabelKeys and labelSelector.\\nAlso, mismatchLabelKeys cannot be set when labelSelector isn't set.\\nThis is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"namespaceSelector\":{\"description\":\"A label query over the set of namespaces that the term applies to.\\nThe term is applied to the union of the namespaces selected by this field\\nand the ones listed in the namespaces field.\\nnull selector and null or empty namespaces list means \\\"this pod's namespace\\\".\\nAn empty selector ({}) matches all namespaces.\",\"properties\":{\"matchExpressions\":{\"description\":\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\",\"items\":{\"description\":\"A label selector requirement is a selector that contains values, a key, and an operator that\\nrelates the key and values.\",\"properties\":{\"key\":{\"description\":\"key is the label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"operator represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists and DoesNotExist.\",\"type\":\"string\"},\"values\":{\"description\":\"values is an array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. This array is replaced during a strategic\\nmerge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"matchLabels\":{\"additionalProperties\":{\"type\":\"string\"},\"description\":\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\\nmap is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the\\noperator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\",\"type\":\"object\"}},\"type\":\"object\",\"x-kubernetes-map-type\":\"atomic\"},\"namespaces\":{\"description\":\"namespaces specifies a static list of namespace names that the term applies to.\\nThe term is applied to the union of the namespaces listed in this field\\nand the ones selected by namespaceSelector.\\nnull or empty namespaces list and null namespaceSelector means \\\"this pod's namespace\\\".\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"topologyKey\":{\"description\":\"This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching\\nthe labelSelector in the specified namespaces, where co-located is defined as running on a node\\nwhose value of the label with key topologyKey matches that of any node on which any of the\\nselected pods is running.\\nEmpty topologyKey is not allowed.\",\"type\":\"string\"}},\"required\":[\"topologyKey\"],\"type\":\"object\"},\"weight\":{\"description\":\"weight associated with matching the corresponding podAffinityTerm,\\nin the range 1-100.\",\"format\":\"int32\",\"type\":\"integer\"}},\"required\":[\"podAffinityTerm\",\"weight\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"requiredDuringSchedulingIgnoredDuringExecution\":{\"description\":\"If the affinity requirements specified by this field are not met at\\nscheduling time, the pod will not be scheduled onto the node.\\nIf the affinity requirements specified by this field cease to be met\\nat some point during pod execution (e.g. due to a pod label update), the\\nsystem may or may not try to eventually evict the pod from its node.\\nWhen there are multiple elements, the lists of nodes corresponding to each\\npodAffinityTerm are intersected, i.e. all terms must be satisfied.\",\"items\":{\"description\":\"Defines a set of pods (namely those matching the labelSelector\\nrelative to the given namespace(s)) that this pod should be\\nco-located (affinity) or not co-located (anti-affinity) with,\\nwhere co-located is defined as running on a node whose value of\\nthe label with key \\u003ctopologyKey\\u003e matches that of any node on which\\na pod of the set of pods is running\",\"properties\":{\"labelSelector\":{\"description\":\"A label query over a set of resources, in this case pods.\\nIf it's null, this PodAffinityTerm matches with no Pods.\",\"properties\":{\"matchExpressions\":{\"description\":\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\",\"items\":{\"description\":\"A label selector requirement is a selector that contains values, a key, and an operator that\\nrelates the key and values.\",\"properties\":{\"key\":{\"description\":\"key is the label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"operator represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists and DoesNotExist.\",\"type\":\"string\"},\"values\":{\"description\":\"values is an array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. This array is replaced during a strategic\\nmerge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"matchLabels\":{\"additionalProperties\":{\"type\":\"string\"},\"description\":\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\\nmap is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the\\noperator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\",\"type\":\"object\"}},\"type\":\"object\",\"x-kubernetes-map-type\":\"atomic\"},\"matchLabelKeys\":{\"description\":\"MatchLabelKeys is a set of pod label keys to select which pods will\\nbe taken into consideration. The keys are used to lookup values from the\\nincoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`\\nto select the group of existing pods which pods will be taken into consideration\\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\\npod labels will be ignored. The default value is empty.\\nThe same key is forbidden to exist in both matchLabelKeys and labelSelector.\\nAlso, matchLabelKeys cannot be set when labelSelector isn't set.\\nThis is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"mismatchLabelKeys\":{\"description\":\"MismatchLabelKeys is a set of pod label keys to select which pods will\\nbe taken into consideration. The keys are used to lookup values from the\\nincoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`\\nto select the group of existing pods which pods will be taken into consideration\\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\\npod labels will be ignored. The default value is empty.\\nThe same key is forbidden to exist in both mismatchLabelKeys and labelSelector.\\nAlso, mismatchLabelKeys cannot be set when labelSelector isn't set.\\nThis is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"namespaceSelector\":{\"description\":\"A label query over the set of namespaces that the term applies to.\\nThe term is applied to the union of the namespaces selected by this field\\nand the ones listed in the namespaces field.\\nnull selector and null or empty namespaces list means \\\"this pod's namespace\\\".\\nAn empty selector ({}) matches all namespaces.\",\"properties\":{\"matchExpressions\":{\"description\":\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\",\"items\":{\"description\":\"A label selector requirement is a selector that contains values, a key, and an operator that\\nrelates the key and values.\",\"properties\":{\"key\":{\"description\":\"key is the label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"operator represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists and DoesNotExist.\",\"type\":\"string\"},\"values\":{\"description\":\"values is an array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. This array is replaced during a strategic\\nmerge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"matchLabels\":{\"additionalProperties\":{\"type\":\"string\"},\"description\":\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\\nmap is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the\\noperator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\",\"type\":\"object\"}},\"type\":\"object\",\"x-kubernetes-map-type\":\"atomic\"},\"namespaces\":{\"description\":\"namespaces specifies a static list of namespace names that the term applies to.\\nThe term is applied to the union of the namespaces listed in this field\\nand the ones selected by namespaceSelector.\\nnull or empty namespaces list and null namespaceSelector means \\\"this pod's namespace\\\".\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"topologyKey\":{\"description\":\"This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching\\nthe labelSelector in the specified namespaces, where co-located is defined as running on a node\\nwhose value of the label with key topologyKey matches that of any node on which any of the\\nselected pods is running.\\nEmpty topologyKey is not allowed.\",\"type\":\"string\"}},\"required\":[\"topologyKey\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"type\":\"object\"},\"podAntiAffinity\":{\"description\":\"Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).\",\"properties\":{\"preferredDuringSchedulingIgnoredDuringExecution\":{\"description\":\"The scheduler will prefer to schedule pods to nodes that satisfy\\nthe anti-affinity expressions specified by this field, but it may choose\\na node that violates one or more of the expressions. The node that is\\nmost preferred is the one with the greatest sum of weights, i.e.\\nfor each node that meets all of the scheduling requirements (resource\\nrequest, requiredDuringScheduling anti-affinity expressions, etc.),\\ncompute a sum by iterating through the elements of this field and adding\\n\\\"weight\\\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the\\nnode(s) with the highest sum are the most preferred.\",\"items\":{\"description\":\"The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)\",\"properties\":{\"podAffinityTerm\":{\"description\":\"Required. A pod affinity term, associated with the corresponding weight.\",\"properties\":{\"labelSelector\":{\"description\":\"A label query over a set of resources, in this case pods.\\nIf it's null, this PodAffinityTerm matches with no Pods.\",\"properties\":{\"matchExpressions\":{\"description\":\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\",\"items\":{\"description\":\"A label selector requirement is a selector that contains values, a key, and an operator that\\nrelates the key and values.\",\"properties\":{\"key\":{\"description\":\"key is the label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"operator represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists and DoesNotExist.\",\"type\":\"string\"},\"values\":{\"description\":\"values is an array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. This array is replaced during a strategic\\nmerge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"matchLabels\":{\"additionalProperties\":{\"type\":\"string\"},\"description\":\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\\nmap is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the\\noperator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\",\"type\":\"object\"}},\"type\":\"object\",\"x-kubernetes-map-type\":\"atomic\"},\"matchLabelKeys\":{\"description\":\"MatchLabelKeys is a set of pod label keys to select which pods will\\nbe taken into consideration. The keys are used to lookup values from the\\nincoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`\\nto select the group of existing pods which pods will be taken into consideration\\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\\npod labels will be ignored. The default value is empty.\\nThe same key is forbidden to exist in both matchLabelKeys and labelSelector.\\nAlso, matchLabelKeys cannot be set when labelSelector isn't set.\\nThis is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"mismatchLabelKeys\":{\"description\":\"MismatchLabelKeys is a set of pod label keys to select which pods will\\nbe taken into consideration. The keys are used to lookup values from the\\nincoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`\\nto select the group of existing pods which pods will be taken into consideration\\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\\npod labels will be ignored. The default value is empty.\\nThe same key is forbidden to exist in both mismatchLabelKeys and labelSelector.\\nAlso, mismatchLabelKeys cannot be set when labelSelector isn't set.\\nThis is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"namespaceSelector\":{\"description\":\"A label query over the set of namespaces that the term applies to.\\nThe term is applied to the union of the namespaces selected by this field\\nand the ones listed in the namespaces field.\\nnull selector and null or empty namespaces list means \\\"this pod's namespace\\\".\\nAn empty selector ({}) matches all namespaces.\",\"properties\":{\"matchExpressions\":{\"description\":\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\",\"items\":{\"description\":\"A label selector requirement is a selector that contains values, a key, and an operator that\\nrelates the key and values.\",\"properties\":{\"key\":{\"description\":\"key is the label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"operator represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists and DoesNotExist.\",\"type\":\"string\"},\"values\":{\"description\":\"values is an array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. This array is replaced during a strategic\\nmerge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"matchLabels\":{\"additionalProperties\":{\"type\":\"string\"},\"description\":\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\\nmap is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the\\noperator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\",\"type\":\"object\"}},\"type\":\"object\",\"x-kubernetes-map-type\":\"atomic\"},\"namespaces\":{\"description\":\"namespaces specifies a static list of namespace names that the term applies to.\\nThe term is applied to the union of the namespaces listed in this field\\nand the ones selected by namespaceSelector.\\nnull or empty namespaces list and null namespaceSelector means \\\"this pod's namespace\\\".\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"topologyKey\":{\"description\":\"This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching\\nthe labelSelector in the specified namespaces, where co-located is defined as running on a node\\nwhose value of the label with key topologyKey matches that of any node on which any of the\\nselected pods is running.\\nEmpty topologyKey is not allowed.\",\"type\":\"string\"}},\"required\":[\"topologyKey\"],\"type\":\"object\"},\"weight\":{\"description\":\"weight associated with matching the corresponding podAffinityTerm,\\nin the range 1-100.\",\"format\":\"int32\",\"type\":\"integer\"}},\"required\":[\"podAffinityTerm\",\"weight\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"requiredDuringSchedulingIgnoredDuringExecution\":{\"description\":\"If the anti-affinity requirements specified by this field are not met at\\nscheduling time, the pod will not be scheduled onto the node.\\nIf the anti-affinity requirements specified by this field cease to be met\\nat some point during pod execution (e.g. due to a pod label update), the\\nsystem may or may not try to eventually evict the pod from its node.\\nWhen there are multiple elements, the lists of nodes corresponding to each\\npodAffinityTerm are intersected, i.e. all terms must be satisfied.\",\"items\":{\"description\":\"Defines a set of pods (namely those matching the labelSelector\\nrelative to the given namespace(s)) that this pod should be\\nco-located (affinity) or not co-located (anti-affinity) with,\\nwhere co-located is defined as running on a node whose value of\\nthe label with key \\u003ctopologyKey\\u003e matches that of any node on which\\na pod of the set of pods is running\",\"properties\":{\"labelSelector\":{\"description\":\"A label query over a set of resources, in this case pods.\\nIf it's null, this PodAffinityTerm matches with no Pods.\",\"properties\":{\"matchExpressions\":{\"description\":\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\",\"items\":{\"description\":\"A label selector requirement is a selector that contains values, a key, and an operator that\\nrelates the key and values.\",\"properties\":{\"key\":{\"description\":\"key is the label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"operator represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists and DoesNotExist.\",\"type\":\"string\"},\"values\":{\"description\":\"values is an array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. This array is replaced during a strategic\\nmerge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"matchLabels\":{\"additionalProperties\":{\"type\":\"string\"},\"description\":\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\\nmap is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the\\noperator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\",\"type\":\"object\"}},\"type\":\"object\",\"x-kubernetes-map-type\":\"atomic\"},\"matchLabelKeys\":{\"description\":\"MatchLabelKeys is a set of pod label keys to select which pods will\\nbe taken into consideration. The keys are used to lookup values from the\\nincoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`\\nto select the group of existing pods which pods will be taken into consideration\\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\\npod labels will be ignored. The default value is empty.\\nThe same key is forbidden to exist in both matchLabelKeys and labelSelector.\\nAlso, matchLabelKeys cannot be set when labelSelector isn't set.\\nThis is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"mismatchLabelKeys\":{\"description\":\"MismatchLabelKeys is a set of pod label keys to select which pods will\\nbe taken into consideration. The keys are used to lookup values from the\\nincoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`\\nto select the group of existing pods which pods will be taken into consideration\\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\\npod labels will be ignored. The default value is empty.\\nThe same key is forbidden to exist in both mismatchLabelKeys and labelSelector.\\nAlso, mismatchLabelKeys cannot be set when labelSelector isn't set.\\nThis is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"namespaceSelector\":{\"description\":\"A label query over the set of namespaces that the term applies to.\\nThe term is applied to the union of the namespaces selected by this field\\nand the ones listed in the namespaces field.\\nnull selector and null or empty namespaces list means \\\"this pod's namespace\\\".\\nAn empty selector ({}) matches all namespaces.\",\"properties\":{\"matchExpressions\":{\"description\":\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\",\"items\":{\"description\":\"A label selector requirement is a selector that contains values, a key, and an operator that\\nrelates the key and values.\",\"properties\":{\"key\":{\"description\":\"key is the label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"operator represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists and DoesNotExist.\",\"type\":\"string\"},\"values\":{\"description\":\"values is an array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. This array is replaced during a strategic\\nmerge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"matchLabels\":{\"additionalProperties\":{\"type\":\"string\"},\"description\":\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\\nmap is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the\\noperator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\",\"type\":\"object\"}},\"type\":\"object\",\"x-kubernetes-map-type\":\"atomic\"},\"namespaces\":{\"description\":\"namespaces specifies a static list of namespace names that the term applies to.\\nThe term is applied to the union of the namespaces listed in this field\\nand the ones selected by namespaceSelector.\\nnull or empty namespaces list and null namespaceSelector means \\\"this pod's namespace\\\".\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"topologyKey\":{\"description\":\"This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching\\nthe labelSelector in the specified namespaces, where co-located is defined as running on a node\\nwhose value of the label with key topologyKey matches that of any node on which any of the\\nselected pods is running.\\nEmpty topologyKey is not allowed.\",\"type\":\"string\"}},\"required\":[\"topologyKey\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"type\":\"object\"}},\"type\":\"object\"},\"nodeSelector\":{\"additionalProperties\":{\"type\":\"string\"},\"description\":\"nodeSelector is the node selector applied to the relevant kind of pods\\nIt specifies a map of key-value pairs: for the pod to be eligible to run on a node,\\nthe node must have each of the indicated key-value pairs as labels\\n(it can have additional labels as well).\\nSee https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#nodeselector\",\"type\":\"object\"},\"tolerations\":{\"description\":\"tolerations is a list of tolerations applied to the relevant kind of pods\\nSee https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/ for more info.\\nThese are additional tolerations other than default ones.\",\"items\":{\"description\":\"The pod this Toleration is attached to tolerates any taint that matches\\nthe triple \\u003ckey,value,effect\\u003e using the matching operator \\u003coperator\\u003e.\",\"properties\":{\"effect\":{\"description\":\"Effect indicates the taint effect to match. Empty means match all taint effects.\\nWhen specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.\",\"type\":\"string\"},\"key\":{\"description\":\"Key is the taint key that the toleration applies to. Empty means match all taint keys.\\nIf the key is empty, operator must be Exists; this combination means to match all values and all keys.\",\"type\":\"string\"},\"operator\":{\"description\":\"Operator represents a key's relationship to the value.\\nValid operators are Exists and Equal. Defaults to Equal.\\nExists is equivalent to wildcard for value, so that a pod can\\ntolerate all taints of a particular category.\",\"type\":\"string\"},\"tolerationSeconds\":{\"description\":\"TolerationSeconds represents the period of time the toleration (which must be\\nof effect NoExecute, otherwise this field is ignored) tolerates the taint. By default,\\nit is not set, which means tolerate the taint forever (do not evict). Zero and\\nnegative values will be treated as 0 (evict immediately) by the system.\",\"format\":\"int64\",\"type\":\"integer\"},\"value\":{\"description\":\"Value is the taint value the toleration matches to.\\nIf the operator is Exists, the value should be empty, otherwise just a regular string.\",\"type\":\"string\"}},\"type\":\"object\"},\"type\":\"array\"}},\"type\":\"object\"}},\"type\":\"object\"},\"status\":{\"description\":\"CDIStatus defines the status of the installation\",\"properties\":{\"conditions\":{\"description\":\"A list of current conditions of the resource\",\"items\":{\"description\":\"Condition represents the state of the operator's\\nreconciliation functionality.\",\"properties\":{\"lastHeartbeatTime\":{\"format\":\"date-time\",\"type\":\"string\"},\"lastTransitionTime\":{\"format\":\"date-time\",\"type\":\"string\"},\"message\":{\"type\":\"string\"},\"reason\":{\"type\":\"string\"},\"status\":{\"type\":\"string\"},\"type\":{\"description\":\"ConditionType is the state of the operator's reconciliation functionality.\",\"type\":\"string\"}},\"required\":[\"status\",\"type\"],\"type\":\"object\"},\"type\":\"array\"},\"observedVersion\":{\"description\":\"The observed version of the resource\",\"type\":\"string\"},\"operatorVersion\":{\"description\":\"The version of the resource as defined by the operator\",\"type\":\"string\"},\"phase\":{\"description\":\"Phase is the current phase of the deployment\",\"type\":\"string\"},\"targetVersion\":{\"description\":\"The desired version of the resource\",\"type\":\"string\"}},\"type\":\"object\"}},\"required\":[\"spec\"],\"type\":\"object\"}},\"served\":true,\"storage\":true,\"subresources\":{}}]}}\n"
      },
      "served_versions": [
        "v1beta1"
      ],
      "stored_version": "v1beta1",
      "categories": [],
      "short_names": [
        "cdi",
        "cdis"
      ],
      "description": null,
      "instance_count": 0
    },
    {
      "name": "certificaterequests.cert-manager.io",
      "group": "cert-manager.io",
      "version": "v1",
      "kind": "CertificateRequest",
      "plural": "certificaterequests",
      "singular": "certificaterequest",
      "scope": "Namespaced",
      "creation_timestamp": "2025-09-06T12:52:41+00:00",
      "labels": {
        "app": "cert-manager",
        "app.kubernetes.io/instance": "cert-manager",
        "app.kubernetes.io/name": "cert-manager",
        "app.kubernetes.io/version": "v1.15.3"
      },
      "annotations": {
        "helm.sh/resource-policy": "keep",
        "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"apiextensions.k8s.io/v1\",\"kind\":\"CustomResourceDefinition\",\"metadata\":{\"annotations\":{\"helm.sh/resource-policy\":\"keep\"},\"labels\":{\"app\":\"cert-manager\",\"app.kubernetes.io/instance\":\"cert-manager\",\"app.kubernetes.io/name\":\"cert-manager\",\"app.kubernetes.io/version\":\"v1.15.3\"},\"name\":\"certificaterequests.cert-manager.io\"},\"spec\":{\"group\":\"cert-manager.io\",\"names\":{\"categories\":[\"cert-manager\"],\"kind\":\"CertificateRequest\",\"listKind\":\"CertificateRequestList\",\"plural\":\"certificaterequests\",\"shortNames\":[\"cr\",\"crs\"],\"singular\":\"certificaterequest\"},\"scope\":\"Namespaced\",\"versions\":[{\"additionalPrinterColumns\":[{\"jsonPath\":\".status.conditions[?(@.type==\\\"Approved\\\")].status\",\"name\":\"Approved\",\"type\":\"string\"},{\"jsonPath\":\".status.conditions[?(@.type==\\\"Denied\\\")].status\",\"name\":\"Denied\",\"type\":\"string\"},{\"jsonPath\":\".status.conditions[?(@.type==\\\"Ready\\\")].status\",\"name\":\"Ready\",\"type\":\"string\"},{\"jsonPath\":\".spec.issuerRef.name\",\"name\":\"Issuer\",\"type\":\"string\"},{\"jsonPath\":\".spec.username\",\"name\":\"Requestor\",\"type\":\"string\"},{\"jsonPath\":\".status.conditions[?(@.type==\\\"Ready\\\")].message\",\"name\":\"Status\",\"priority\":1,\"type\":\"string\"},{\"description\":\"CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC.\",\"jsonPath\":\".metadata.creationTimestamp\",\"name\":\"Age\",\"type\":\"date\"}],\"name\":\"v1\",\"schema\":{\"openAPIV3Schema\":{\"description\":\"A CertificateRequest is used to request a signed certificate from one of the\\nconfigured issuers.\\n\\n\\nAll fields within the CertificateRequest's `spec` are immutable after creation.\\nA CertificateRequest will either succeed or fail, as denoted by its `Ready` status\\ncondition and its `status.failureTime` field.\\n\\n\\nA CertificateRequest is a one-shot resource, meaning it represents a single\\npoint in time request for a certificate and cannot be re-used.\",\"properties\":{\"apiVersion\":{\"description\":\"APIVersion defines the versioned schema of this representation of an object.\\nServers should convert recognized schemas to the latest internal value, and\\nmay reject unrecognized values.\\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources\",\"type\":\"string\"},\"kind\":{\"description\":\"Kind is a string value representing the REST resource this object represents.\\nServers may infer this from the endpoint the client submits requests to.\\nCannot be updated.\\nIn CamelCase.\\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\",\"type\":\"string\"},\"metadata\":{\"type\":\"object\"},\"spec\":{\"description\":\"Specification of the desired state of the CertificateRequest resource.\\nhttps://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status\",\"properties\":{\"duration\":{\"description\":\"Requested 'duration' (i.e. lifetime) of the Certificate. Note that the\\nissuer may choose to ignore the requested duration, just like any other\\nrequested attribute.\",\"type\":\"string\"},\"extra\":{\"additionalProperties\":{\"items\":{\"type\":\"string\"},\"type\":\"array\"},\"description\":\"Extra contains extra attributes of the user that created the CertificateRequest.\\nPopulated by the cert-manager webhook on creation and immutable.\",\"type\":\"object\"},\"groups\":{\"description\":\"Groups contains group membership of the user that created the CertificateRequest.\\nPopulated by the cert-manager webhook on creation and immutable.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"isCA\":{\"description\":\"Requested basic constraints isCA value. Note that the issuer may choose\\nto ignore the requested isCA value, just like any other requested attribute.\\n\\n\\nNOTE: If the CSR in the `Request` field has a BasicConstraints extension,\\nit must have the same isCA value as specified here.\\n\\n\\nIf true, this will automatically add the `cert sign` usage to the list\\nof requested `usages`.\",\"type\":\"boolean\"},\"issuerRef\":{\"description\":\"Reference to the issuer responsible for issuing the certificate.\\nIf the issuer is namespace-scoped, it must be in the same namespace\\nas the Certificate. If the issuer is cluster-scoped, it can be used\\nfrom any namespace.\\n\\n\\nThe `name` field of the reference must always be specified.\",\"properties\":{\"group\":{\"description\":\"Group of the resource being referred to.\",\"type\":\"string\"},\"kind\":{\"description\":\"Kind of the resource being referred to.\",\"type\":\"string\"},\"name\":{\"description\":\"Name of the resource being referred to.\",\"type\":\"string\"}},\"required\":[\"name\"],\"type\":\"object\"},\"request\":{\"description\":\"The PEM-encoded X.509 certificate signing request to be submitted to the\\nissuer for signing.\\n\\n\\nIf the CSR has a BasicConstraints extension, its isCA attribute must\\nmatch the `isCA` value of this CertificateRequest.\\nIf the CSR has a KeyUsage extension, its key usages must match the\\nkey usages in the `usages` field of this CertificateRequest.\\nIf the CSR has a ExtKeyUsage extension, its extended key usages\\nmust match the extended key usages in the `usages` field of this\\nCertificateRequest.\",\"format\":\"byte\",\"type\":\"string\"},\"uid\":{\"description\":\"UID contains the uid of the user that created the CertificateRequest.\\nPopulated by the cert-manager webhook on creation and immutable.\",\"type\":\"string\"},\"usages\":{\"description\":\"Requested key usages and extended key usages.\\n\\n\\nNOTE: If the CSR in the `Request` field has uses the KeyUsage or\\nExtKeyUsage extension, these extensions must have the same values\\nas specified here without any additional values.\\n\\n\\nIf unset, defaults to `digital signature` and `key encipherment`.\",\"items\":{\"description\":\"KeyUsage specifies valid usage contexts for keys.\\nSee:\\nhttps://tools.ietf.org/html/rfc5280#section-4.2.1.3\\nhttps://tools.ietf.org/html/rfc5280#section-4.2.1.12\\n\\n\\nValid KeyUsage values are as follows:\\n\\\"signing\\\",\\n\\\"digital signature\\\",\\n\\\"content commitment\\\",\\n\\\"key encipherment\\\",\\n\\\"key agreement\\\",\\n\\\"data encipherment\\\",\\n\\\"cert sign\\\",\\n\\\"crl sign\\\",\\n\\\"encipher only\\\",\\n\\\"decipher only\\\",\\n\\\"any\\\",\\n\\\"server auth\\\",\\n\\\"client auth\\\",\\n\\\"code signing\\\",\\n\\\"email protection\\\",\\n\\\"s/mime\\\",\\n\\\"ipsec end system\\\",\\n\\\"ipsec tunnel\\\",\\n\\\"ipsec user\\\",\\n\\\"timestamping\\\",\\n\\\"ocsp signing\\\",\\n\\\"microsoft sgc\\\",\\n\\\"netscape sgc\\\"\",\"enum\":[\"signing\",\"digital signature\",\"content commitment\",\"key encipherment\",\"key agreement\",\"data encipherment\",\"cert sign\",\"crl sign\",\"encipher only\",\"decipher only\",\"any\",\"server auth\",\"client auth\",\"code signing\",\"email protection\",\"s/mime\",\"ipsec end system\",\"ipsec tunnel\",\"ipsec user\",\"timestamping\",\"ocsp signing\",\"microsoft sgc\",\"netscape sgc\"],\"type\":\"string\"},\"type\":\"array\"},\"username\":{\"description\":\"Username contains the name of the user that created the CertificateRequest.\\nPopulated by the cert-manager webhook on creation and immutable.\",\"type\":\"string\"}},\"required\":[\"issuerRef\",\"request\"],\"type\":\"object\"},\"status\":{\"description\":\"Status of the CertificateRequest.\\nThis is set and managed automatically.\\nRead-only.\\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status\",\"properties\":{\"ca\":{\"description\":\"The PEM encoded X.509 certificate of the signer, also known as the CA\\n(Certificate Authority).\\nThis is set on a best-effort basis by different issuers.\\nIf not set, the CA is assumed to be unknown/not available.\",\"format\":\"byte\",\"type\":\"string\"},\"certificate\":{\"description\":\"The PEM encoded X.509 certificate resulting from the certificate\\nsigning request.\\nIf not set, the CertificateRequest has either not been completed or has\\nfailed. More information on failure can be found by checking the\\n`conditions` field.\",\"format\":\"byte\",\"type\":\"string\"},\"conditions\":{\"description\":\"List of status conditions to indicate the status of a CertificateRequest.\\nKnown condition types are `Ready`, `InvalidRequest`, `Approved` and `Denied`.\",\"items\":{\"description\":\"CertificateRequestCondition contains condition information for a CertificateRequest.\",\"properties\":{\"lastTransitionTime\":{\"description\":\"LastTransitionTime is the timestamp corresponding to the last status\\nchange of this condition.\",\"format\":\"date-time\",\"type\":\"string\"},\"message\":{\"description\":\"Message is a human readable description of the details of the last\\ntransition, complementing reason.\",\"type\":\"string\"},\"reason\":{\"description\":\"Reason is a brief machine readable explanation for the condition's last\\ntransition.\",\"type\":\"string\"},\"status\":{\"description\":\"Status of the condition, one of (`True`, `False`, `Unknown`).\",\"enum\":[\"True\",\"False\",\"Unknown\"],\"type\":\"string\"},\"type\":{\"description\":\"Type of the condition, known values are (`Ready`, `InvalidRequest`,\\n`Approved`, `Denied`).\",\"type\":\"string\"}},\"required\":[\"status\",\"type\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-map-keys\":[\"type\"],\"x-kubernetes-list-type\":\"map\"},\"failureTime\":{\"description\":\"FailureTime stores the time that this CertificateRequest failed. This is\\nused to influence garbage collection and back-off.\",\"format\":\"date-time\",\"type\":\"string\"}},\"type\":\"object\"}},\"type\":\"object\"}},\"served\":true,\"storage\":true,\"subresources\":{\"status\":{}}}]}}\n"
      },
      "served_versions": [
        "v1"
      ],
      "stored_version": "v1",
      "categories": [
        "cert-manager"
      ],
      "short_names": [
        "cr",
        "crs"
      ],
      "description": null,
      "instance_count": 6
    },
    {
      "name": "certificates.cert-manager.io",
      "group": "cert-manager.io",
      "version": "v1",
      "kind": "Certificate",
      "plural": "certificates",
      "singular": "certificate",
      "scope": "Namespaced",
      "creation_timestamp": "2025-09-06T12:52:41+00:00",
      "labels": {
        "app": "cert-manager",
        "app.kubernetes.io/instance": "cert-manager",
        "app.kubernetes.io/name": "cert-manager",
        "app.kubernetes.io/version": "v1.15.3"
      },
      "annotations": {
        "helm.sh/resource-policy": "keep",
        "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"apiextensions.k8s.io/v1\",\"kind\":\"CustomResourceDefinition\",\"metadata\":{\"annotations\":{\"helm.sh/resource-policy\":\"keep\"},\"labels\":{\"app\":\"cert-manager\",\"app.kubernetes.io/instance\":\"cert-manager\",\"app.kubernetes.io/name\":\"cert-manager\",\"app.kubernetes.io/version\":\"v1.15.3\"},\"name\":\"certificates.cert-manager.io\"},\"spec\":{\"group\":\"cert-manager.io\",\"names\":{\"categories\":[\"cert-manager\"],\"kind\":\"Certificate\",\"listKind\":\"CertificateList\",\"plural\":\"certificates\",\"shortNames\":[\"cert\",\"certs\"],\"singular\":\"certificate\"},\"scope\":\"Namespaced\",\"versions\":[{\"additionalPrinterColumns\":[{\"jsonPath\":\".status.conditions[?(@.type==\\\"Ready\\\")].status\",\"name\":\"Ready\",\"type\":\"string\"},{\"jsonPath\":\".spec.secretName\",\"name\":\"Secret\",\"type\":\"string\"},{\"jsonPath\":\".spec.issuerRef.name\",\"name\":\"Issuer\",\"priority\":1,\"type\":\"string\"},{\"jsonPath\":\".status.conditions[?(@.type==\\\"Ready\\\")].message\",\"name\":\"Status\",\"priority\":1,\"type\":\"string\"},{\"description\":\"CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC.\",\"jsonPath\":\".metadata.creationTimestamp\",\"name\":\"Age\",\"type\":\"date\"}],\"name\":\"v1\",\"schema\":{\"openAPIV3Schema\":{\"description\":\"A Certificate resource should be created to ensure an up to date and signed\\nX.509 certificate is stored in the Kubernetes Secret resource named in `spec.secretName`.\\n\\n\\nThe stored certificate will be renewed before it expires (as configured by `spec.renewBefore`).\",\"properties\":{\"apiVersion\":{\"description\":\"APIVersion defines the versioned schema of this representation of an object.\\nServers should convert recognized schemas to the latest internal value, and\\nmay reject unrecognized values.\\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources\",\"type\":\"string\"},\"kind\":{\"description\":\"Kind is a string value representing the REST resource this object represents.\\nServers may infer this from the endpoint the client submits requests to.\\nCannot be updated.\\nIn CamelCase.\\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\",\"type\":\"string\"},\"metadata\":{\"type\":\"object\"},\"spec\":{\"description\":\"Specification of the desired state of the Certificate resource.\\nhttps://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status\",\"properties\":{\"additionalOutputFormats\":{\"description\":\"Defines extra output formats of the private key and signed certificate chain\\nto be written to this Certificate's target Secret.\\n\\n\\nThis is a Beta Feature enabled by default. It can be disabled with the\\n`--feature-gates=AdditionalCertificateOutputFormats=false` option set on both\\nthe controller and webhook components.\",\"items\":{\"description\":\"CertificateAdditionalOutputFormat defines an additional output format of a\\nCertificate resource. These contain supplementary data formats of the signed\\ncertificate chain and paired private key.\",\"properties\":{\"type\":{\"description\":\"Type is the name of the format type that should be written to the\\nCertificate's target Secret.\",\"enum\":[\"DER\",\"CombinedPEM\"],\"type\":\"string\"}},\"required\":[\"type\"],\"type\":\"object\"},\"type\":\"array\"},\"commonName\":{\"description\":\"Requested common name X509 certificate subject attribute.\\nMore info: https://datatracker.ietf.org/doc/html/rfc5280#section-4.1.2.6\\nNOTE: TLS clients will ignore this value when any subject alternative name is\\nset (see https://tools.ietf.org/html/rfc6125#section-6.4.4).\\n\\n\\nShould have a length of 64 characters or fewer to avoid generating invalid CSRs.\\nCannot be set if the `literalSubject` field is set.\",\"type\":\"string\"},\"dnsNames\":{\"description\":\"Requested DNS subject alternative names.\",\"items\":{\"type\":\"string\"},\"type\":\"array\"},\"duration\":{\"description\":\"Requested 'duration' (i.e. lifetime) of the Certificate. Note that the\\nissuer may choose to ignore the requested duration, just like any other\\nrequested attribute.\\n\\n\\nIf unset, this defaults to 90 days.\\nMinimum accepted duration is 1 hour.\\nValue must be in units accepted by Go time.ParseDuration https://golang.org/pkg/time/#ParseDuration.\",\"type\":\"string\"},\"emailAddresses\":{\"description\":\"Requested email subject alternative names.\",\"items\":{\"type\":\"string\"},\"type\":\"array\"},\"encodeUsagesInRequest\":{\"description\":\"Whether the KeyUsage and ExtKeyUsage extensions should be set in the encoded CSR.\\n\\n\\nThis option defaults to true, and should only be disabled if the target\\nissuer does not support CSRs with these X509 KeyUsage/ ExtKeyUsage extensions.\",\"type\":\"boolean\"},\"ipAddresses\":{\"description\":\"Requested IP address subject alternative names.\",\"items\":{\"type\":\"string\"},\"type\":\"array\"},\"isCA\":{\"description\":\"Requested basic constraints isCA value.\\nThe isCA value is used to set the `isCA` field on the created CertificateRequest\\nresources. Note that the issuer may choose to ignore the requested isCA value, just\\nlike any other requested attribute.\\n\\n\\nIf true, this will automatically add the `cert sign` usage to the list\\nof requested `usages`.\",\"type\":\"boolean\"},\"issuerRef\":{\"description\":\"Reference to the issuer responsible for issuing the certificate.\\nIf the issuer is namespace-scoped, it must be in the same namespace\\nas the Certificate. If the issuer is cluster-scoped, it can be used\\nfrom any namespace.\\n\\n\\nThe `name` field of the reference must always be specified.\",\"properties\":{\"group\":{\"description\":\"Group of the resource being referred to.\",\"type\":\"string\"},\"kind\":{\"description\":\"Kind of the resource being referred to.\",\"type\":\"string\"},\"name\":{\"description\":\"Name of the resource being referred to.\",\"type\":\"string\"}},\"required\":[\"name\"],\"type\":\"object\"},\"keystores\":{\"description\":\"Additional keystore output formats to be stored in the Certificate's Secret.\",\"properties\":{\"jks\":{\"description\":\"JKS configures options for storing a JKS keystore in the\\n`spec.secretName` Secret resource.\",\"properties\":{\"alias\":{\"description\":\"Alias specifies the alias of the key in the keystore, required by the JKS format.\\nIf not provided, the default alias `certificate` will be used.\",\"type\":\"string\"},\"create\":{\"description\":\"Create enables JKS keystore creation for the Certificate.\\nIf true, a file named `keystore.jks` will be created in the target\\nSecret resource, encrypted using the password stored in\\n`passwordSecretRef`.\\nThe keystore file will be updated immediately.\\nIf the issuer provided a CA certificate, a file named `truststore.jks`\\nwill also be created in the target Secret resource, encrypted using the\\npassword stored in `passwordSecretRef`\\ncontaining the issuing Certificate Authority\",\"type\":\"boolean\"},\"passwordSecretRef\":{\"description\":\"PasswordSecretRef is a reference to a key in a Secret resource\\ncontaining the password used to encrypt the JKS keystore.\",\"properties\":{\"key\":{\"description\":\"The key of the entry in the Secret resource's `data` field to be used.\\nSome instances of this field may be defaulted, in others it may be\\nrequired.\",\"type\":\"string\"},\"name\":{\"description\":\"Name of the resource being referred to.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\",\"type\":\"string\"}},\"required\":[\"name\"],\"type\":\"object\"}},\"required\":[\"create\",\"passwordSecretRef\"],\"type\":\"object\"},\"pkcs12\":{\"description\":\"PKCS12 configures options for storing a PKCS12 keystore in the\\n`spec.secretName` Secret resource.\",\"properties\":{\"create\":{\"description\":\"Create enables PKCS12 keystore creation for the Certificate.\\nIf true, a file named `keystore.p12` will be created in the target\\nSecret resource, encrypted using the password stored in\\n`passwordSecretRef`.\\nThe keystore file will be updated immediately.\\nIf the issuer provided a CA certificate, a file named `truststore.p12` will\\nalso be created in the target Secret resource, encrypted using the\\npassword stored in `passwordSecretRef` containing the issuing Certificate\\nAuthority\",\"type\":\"boolean\"},\"passwordSecretRef\":{\"description\":\"PasswordSecretRef is a reference to a key in a Secret resource\\ncontaining the password used to encrypt the PKCS12 keystore.\",\"properties\":{\"key\":{\"description\":\"The key of the entry in the Secret resource's `data` field to be used.\\nSome instances of this field may be defaulted, in others it may be\\nrequired.\",\"type\":\"string\"},\"name\":{\"description\":\"Name of the resource being referred to.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\",\"type\":\"string\"}},\"required\":[\"name\"],\"type\":\"object\"},\"profile\":{\"description\":\"Profile specifies the key and certificate encryption algorithms and the HMAC algorithm\\nused to create the PKCS12 keystore. Default value is `LegacyRC2` for backward compatibility.\\n\\n\\nIf provided, allowed values are:\\n`LegacyRC2`: Deprecated. Not supported by default in OpenSSL 3 or Java 20.\\n`LegacyDES`: Less secure algorithm. Use this option for maximal compatibility.\\n`Modern2023`: Secure algorithm. Use this option in case you have to always use secure algorithms\\n(eg. because of company policy). Please note that the security of the algorithm is not that important\\nin reality, because the unencrypted certificate and private key are also stored in the Secret.\",\"enum\":[\"LegacyRC2\",\"LegacyDES\",\"Modern2023\"],\"type\":\"string\"}},\"required\":[\"create\",\"passwordSecretRef\"],\"type\":\"object\"}},\"type\":\"object\"},\"literalSubject\":{\"description\":\"Requested X.509 certificate subject, represented using the LDAP \\\"String\\nRepresentation of a Distinguished Name\\\" [1].\\nImportant: the LDAP string format also specifies the order of the attributes\\nin the subject, this is important when issuing certs for LDAP authentication.\\nExample: `CN=foo,DC=corp,DC=example,DC=com`\\nMore info [1]: https://datatracker.ietf.org/doc/html/rfc4514\\nMore info: https://github.com/cert-manager/cert-manager/issues/3203\\nMore info: https://github.com/cert-manager/cert-manager/issues/4424\\n\\n\\nCannot be set if the `subject` or `commonName` field is set.\",\"type\":\"string\"},\"nameConstraints\":{\"description\":\"x.509 certificate NameConstraint extension which MUST NOT be used in a non-CA certificate.\\nMore Info: https://datatracker.ietf.org/doc/html/rfc5280#section-4.2.1.10\\n\\n\\nThis is an Alpha Feature and is only enabled with the\\n`--feature-gates=NameConstraints=true` option set on both\\nthe controller and webhook components.\",\"properties\":{\"critical\":{\"description\":\"if true then the name constraints are marked critical.\",\"type\":\"boolean\"},\"excluded\":{\"description\":\"Excluded contains the constraints which must be disallowed. Any name matching a\\nrestriction in the excluded field is invalid regardless\\nof information appearing in the permitted\",\"properties\":{\"dnsDomains\":{\"description\":\"DNSDomains is a list of DNS domains that are permitted or excluded.\",\"items\":{\"type\":\"string\"},\"type\":\"array\"},\"emailAddresses\":{\"description\":\"EmailAddresses is a list of Email Addresses that are permitted or excluded.\",\"items\":{\"type\":\"string\"},\"type\":\"array\"},\"ipRanges\":{\"description\":\"IPRanges is a list of IP Ranges that are permitted or excluded.\\nThis should be a valid CIDR notation.\",\"items\":{\"type\":\"string\"},\"type\":\"array\"},\"uriDomains\":{\"description\":\"URIDomains is a list of URI domains that are permitted or excluded.\",\"items\":{\"type\":\"string\"},\"type\":\"array\"}},\"type\":\"object\"},\"permitted\":{\"description\":\"Permitted contains the constraints in which the names must be located.\",\"properties\":{\"dnsDomains\":{\"description\":\"DNSDomains is a list of DNS domains that are permitted or excluded.\",\"items\":{\"type\":\"string\"},\"type\":\"array\"},\"emailAddresses\":{\"description\":\"EmailAddresses is a list of Email Addresses that are permitted or excluded.\",\"items\":{\"type\":\"string\"},\"type\":\"array\"},\"ipRanges\":{\"description\":\"IPRanges is a list of IP Ranges that are permitted or excluded.\\nThis should be a valid CIDR notation.\",\"items\":{\"type\":\"string\"},\"type\":\"array\"},\"uriDomains\":{\"description\":\"URIDomains is a list of URI domains that are permitted or excluded.\",\"items\":{\"type\":\"string\"},\"type\":\"array\"}},\"type\":\"object\"}},\"type\":\"object\"},\"otherNames\":{\"description\":\"`otherNames` is an escape hatch for SAN that allows any type. We currently restrict the support to string like otherNames, cf RFC 5280 p 37\\nAny UTF8 String valued otherName can be passed with by setting the keys oid: x.x.x.x and UTF8Value: somevalue for `otherName`.\\nMost commonly this would be UPN set with oid: 1.3.6.1.4.1.311.20.2.3\\nYou should ensure that any OID passed is valid for the UTF8String type as we do not explicitly validate this.\",\"items\":{\"properties\":{\"oid\":{\"description\":\"OID is the object identifier for the otherName SAN.\\nThe object identifier must be expressed as a dotted string, for\\nexample, \\\"1.2.840.113556.1.4.221\\\".\",\"type\":\"string\"},\"utf8Value\":{\"description\":\"utf8Value is the string value of the otherName SAN.\\nThe utf8Value accepts any valid UTF8 string to set as value for the otherName SAN.\",\"type\":\"string\"}},\"type\":\"object\"},\"type\":\"array\"},\"privateKey\":{\"description\":\"Private key options. These include the key algorithm and size, the used\\nencoding and the rotation policy.\",\"properties\":{\"algorithm\":{\"description\":\"Algorithm is the private key algorithm of the corresponding private key\\nfor this certificate.\\n\\n\\nIf provided, allowed values are either `RSA`, `ECDSA` or `Ed25519`.\\nIf `algorithm` is specified and `size` is not provided,\\nkey size of 2048 will be used for `RSA` key algorithm and\\nkey size of 256 will be used for `ECDSA` key algorithm.\\nkey size is ignored when using the `Ed25519` key algorithm.\",\"enum\":[\"RSA\",\"ECDSA\",\"Ed25519\"],\"type\":\"string\"},\"encoding\":{\"description\":\"The private key cryptography standards (PKCS) encoding for this\\ncertificate's private key to be encoded in.\\n\\n\\nIf provided, allowed values are `PKCS1` and `PKCS8` standing for PKCS#1\\nand PKCS#8, respectively.\\nDefaults to `PKCS1` if not specified.\",\"enum\":[\"PKCS1\",\"PKCS8\"],\"type\":\"string\"},\"rotationPolicy\":{\"description\":\"RotationPolicy controls how private keys should be regenerated when a\\nre-issuance is being processed.\\n\\n\\nIf set to `Never`, a private key will only be generated if one does not\\nalready exist in the target `spec.secretName`. If one does exists but it\\ndoes not have the correct algorithm or size, a warning will be raised\\nto await user intervention.\\nIf set to `Always`, a private key matching the specified requirements\\nwill be generated whenever a re-issuance occurs.\\nDefault is `Never` for backward compatibility.\",\"enum\":[\"Never\",\"Always\"],\"type\":\"string\"},\"size\":{\"description\":\"Size is the key bit size of the corresponding private key for this certificate.\\n\\n\\nIf `algorithm` is set to `RSA`, valid values are `2048`, `4096` or `8192`,\\nand will default to `2048` if not specified.\\nIf `algorithm` is set to `ECDSA`, valid values are `256`, `384` or `521`,\\nand will default to `256` if not specified.\\nIf `algorithm` is set to `Ed25519`, Size is ignored.\\nNo other values are allowed.\",\"type\":\"integer\"}},\"type\":\"object\"},\"renewBefore\":{\"description\":\"How long before the currently issued certificate's expiry cert-manager should\\nrenew the certificate. For example, if a certificate is valid for 60 minutes,\\nand `renewBefore=10m`, cert-manager will begin to attempt to renew the certificate\\n50 minutes after it was issued (i.e. when there are 10 minutes remaining until\\nthe certificate is no longer valid).\\n\\n\\nNOTE: The actual lifetime of the issued certificate is used to determine the\\nrenewal time. If an issuer returns a certificate with a different lifetime than\\nthe one requested, cert-manager will use the lifetime of the issued certificate.\\n\\n\\nIf unset, this defaults to 1/3 of the issued certificate's lifetime.\\nMinimum accepted value is 5 minutes.\\nValue must be in units accepted by Go time.ParseDuration https://golang.org/pkg/time/#ParseDuration.\",\"type\":\"string\"},\"revisionHistoryLimit\":{\"description\":\"The maximum number of CertificateRequest revisions that are maintained in\\nthe Certificate's history. Each revision represents a single `CertificateRequest`\\ncreated by this Certificate, either when it was created, renewed, or Spec\\nwas changed. Revisions will be removed by oldest first if the number of\\nrevisions exceeds this number.\\n\\n\\nIf set, revisionHistoryLimit must be a value of `1` or greater.\\nIf unset (`nil`), revisions will not be garbage collected.\\nDefault value is `nil`.\",\"format\":\"int32\",\"type\":\"integer\"},\"secretName\":{\"description\":\"Name of the Secret resource that will be automatically created and\\nmanaged by this Certificate resource. It will be populated with a\\nprivate key and certificate, signed by the denoted issuer. The Secret\\nresource lives in the same namespace as the Certificate resource.\",\"type\":\"string\"},\"secretTemplate\":{\"description\":\"Defines annotations and labels to be copied to the Certificate's Secret.\\nLabels and annotations on the Secret will be changed as they appear on the\\nSecretTemplate when added or removed. SecretTemplate annotations are added\\nin conjunction with, and cannot overwrite, the base set of annotations\\ncert-manager sets on the Certificate's Secret.\",\"properties\":{\"annotations\":{\"additionalProperties\":{\"type\":\"string\"},\"description\":\"Annotations is a key value map to be copied to the target Kubernetes Secret.\",\"type\":\"object\"},\"labels\":{\"additionalProperties\":{\"type\":\"string\"},\"description\":\"Labels is a key value map to be copied to the target Kubernetes Secret.\",\"type\":\"object\"}},\"type\":\"object\"},\"subject\":{\"description\":\"Requested set of X509 certificate subject attributes.\\nMore info: https://datatracker.ietf.org/doc/html/rfc5280#section-4.1.2.6\\n\\n\\nThe common name attribute is specified separately in the `commonName` field.\\nCannot be set if the `literalSubject` field is set.\",\"properties\":{\"countries\":{\"description\":\"Countries to be used on the Certificate.\",\"items\":{\"type\":\"string\"},\"type\":\"array\"},\"localities\":{\"description\":\"Cities to be used on the Certificate.\",\"items\":{\"type\":\"string\"},\"type\":\"array\"},\"organizationalUnits\":{\"description\":\"Organizational Units to be used on the Certificate.\",\"items\":{\"type\":\"string\"},\"type\":\"array\"},\"organizations\":{\"description\":\"Organizations to be used on the Certificate.\",\"items\":{\"type\":\"string\"},\"type\":\"array\"},\"postalCodes\":{\"description\":\"Postal codes to be used on the Certificate.\",\"items\":{\"type\":\"string\"},\"type\":\"array\"},\"provinces\":{\"description\":\"State/Provinces to be used on the Certificate.\",\"items\":{\"type\":\"string\"},\"type\":\"array\"},\"serialNumber\":{\"description\":\"Serial number to be used on the Certificate.\",\"type\":\"string\"},\"streetAddresses\":{\"description\":\"Street addresses to be used on the Certificate.\",\"items\":{\"type\":\"string\"},\"type\":\"array\"}},\"type\":\"object\"},\"uris\":{\"description\":\"Requested URI subject alternative names.\",\"items\":{\"type\":\"string\"},\"type\":\"array\"},\"usages\":{\"description\":\"Requested key usages and extended key usages.\\nThese usages are used to set the `usages` field on the created CertificateRequest\\nresources. If `encodeUsagesInRequest` is unset or set to `true`, the usages\\nwill additionally be encoded in the `request` field which contains the CSR blob.\\n\\n\\nIf unset, defaults to `digital signature` and `key encipherment`.\",\"items\":{\"description\":\"KeyUsage specifies valid usage contexts for keys.\\nSee:\\nhttps://tools.ietf.org/html/rfc5280#section-4.2.1.3\\nhttps://tools.ietf.org/html/rfc5280#section-4.2.1.12\\n\\n\\nValid KeyUsage values are as follows:\\n\\\"signing\\\",\\n\\\"digital signature\\\",\\n\\\"content commitment\\\",\\n\\\"key encipherment\\\",\\n\\\"key agreement\\\",\\n\\\"data encipherment\\\",\\n\\\"cert sign\\\",\\n\\\"crl sign\\\",\\n\\\"encipher only\\\",\\n\\\"decipher only\\\",\\n\\\"any\\\",\\n\\\"server auth\\\",\\n\\\"client auth\\\",\\n\\\"code signing\\\",\\n\\\"email protection\\\",\\n\\\"s/mime\\\",\\n\\\"ipsec end system\\\",\\n\\\"ipsec tunnel\\\",\\n\\\"ipsec user\\\",\\n\\\"timestamping\\\",\\n\\\"ocsp signing\\\",\\n\\\"microsoft sgc\\\",\\n\\\"netscape sgc\\\"\",\"enum\":[\"signing\",\"digital signature\",\"content commitment\",\"key encipherment\",\"key agreement\",\"data encipherment\",\"cert sign\",\"crl sign\",\"encipher only\",\"decipher only\",\"any\",\"server auth\",\"client auth\",\"code signing\",\"email protection\",\"s/mime\",\"ipsec end system\",\"ipsec tunnel\",\"ipsec user\",\"timestamping\",\"ocsp signing\",\"microsoft sgc\",\"netscape sgc\"],\"type\":\"string\"},\"type\":\"array\"}},\"required\":[\"issuerRef\",\"secretName\"],\"type\":\"object\"},\"status\":{\"description\":\"Status of the Certificate.\\nThis is set and managed automatically.\\nRead-only.\\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status\",\"properties\":{\"conditions\":{\"description\":\"List of status conditions to indicate the status of certificates.\\nKnown condition types are `Ready` and `Issuing`.\",\"items\":{\"description\":\"CertificateCondition contains condition information for an Certificate.\",\"properties\":{\"lastTransitionTime\":{\"description\":\"LastTransitionTime is the timestamp corresponding to the last status\\nchange of this condition.\",\"format\":\"date-time\",\"type\":\"string\"},\"message\":{\"description\":\"Message is a human readable description of the details of the last\\ntransition, complementing reason.\",\"type\":\"string\"},\"observedGeneration\":{\"description\":\"If set, this represents the .metadata.generation that the condition was\\nset based upon.\\nFor instance, if .metadata.generation is currently 12, but the\\n.status.condition[x].observedGeneration is 9, the condition is out of date\\nwith respect to the current state of the Certificate.\",\"format\":\"int64\",\"type\":\"integer\"},\"reason\":{\"description\":\"Reason is a brief machine readable explanation for the condition's last\\ntransition.\",\"type\":\"string\"},\"status\":{\"description\":\"Status of the condition, one of (`True`, `False`, `Unknown`).\",\"enum\":[\"True\",\"False\",\"Unknown\"],\"type\":\"string\"},\"type\":{\"description\":\"Type of the condition, known values are (`Ready`, `Issuing`).\",\"type\":\"string\"}},\"required\":[\"status\",\"type\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-map-keys\":[\"type\"],\"x-kubernetes-list-type\":\"map\"},\"failedIssuanceAttempts\":{\"description\":\"The number of continuous failed issuance attempts up till now. This\\nfield gets removed (if set) on a successful issuance and gets set to\\n1 if unset and an issuance has failed. If an issuance has failed, the\\ndelay till the next issuance will be calculated using formula\\ntime.Hour * 2 ^ (failedIssuanceAttempts - 1).\",\"type\":\"integer\"},\"lastFailureTime\":{\"description\":\"LastFailureTime is set only if the lastest issuance for this\\nCertificate failed and contains the time of the failure. If an\\nissuance has failed, the delay till the next issuance will be\\ncalculated using formula time.Hour * 2 ^ (failedIssuanceAttempts -\\n1). If the latest issuance has succeeded this field will be unset.\",\"format\":\"date-time\",\"type\":\"string\"},\"nextPrivateKeySecretName\":{\"description\":\"The name of the Secret resource containing the private key to be used\\nfor the next certificate iteration.\\nThe keymanager controller will automatically set this field if the\\n`Issuing` condition is set to `True`.\\nIt will automatically unset this field when the Issuing condition is\\nnot set or False.\",\"type\":\"string\"},\"notAfter\":{\"description\":\"The expiration time of the certificate stored in the secret named\\nby this resource in `spec.secretName`.\",\"format\":\"date-time\",\"type\":\"string\"},\"notBefore\":{\"description\":\"The time after which the certificate stored in the secret named\\nby this resource in `spec.secretName` is valid.\",\"format\":\"date-time\",\"type\":\"string\"},\"renewalTime\":{\"description\":\"RenewalTime is the time at which the certificate will be next\\nrenewed.\\nIf not set, no upcoming renewal is scheduled.\",\"format\":\"date-time\",\"type\":\"string\"},\"revision\":{\"description\":\"The current 'revision' of the certificate as issued.\\n\\n\\nWhen a CertificateRequest resource is created, it will have the\\n`cert-manager.io/certificate-revision` set to one greater than the\\ncurrent value of this field.\\n\\n\\nUpon issuance, this field will be set to the value of the annotation\\non the CertificateRequest resource used to issue the certificate.\\n\\n\\nPersisting the value on the CertificateRequest resource allows the\\ncertificates controller to know whether a request is part of an old\\nissuance or if it is part of the ongoing revision's issuance by\\nchecking if the revision value in the annotation is greater than this\\nfield.\",\"type\":\"integer\"}},\"type\":\"object\"}},\"type\":\"object\"}},\"served\":true,\"storage\":true,\"subresources\":{\"status\":{}}}]}}\n"
      },
      "served_versions": [
        "v1"
      ],
      "stored_version": "v1",
      "categories": [
        "cert-manager"
      ],
      "short_names": [
        "cert",
        "certs"
      ],
      "description": null,
      "instance_count": 6
    },
    {
      "name": "challenges.acme.cert-manager.io",
      "group": "acme.cert-manager.io",
      "version": "v1",
      "kind": "Challenge",
      "plural": "challenges",
      "singular": "challenge",
      "scope": "Namespaced",
      "creation_timestamp": "2025-09-06T12:52:41+00:00",
      "labels": {
        "app": "cert-manager",
        "app.kubernetes.io/instance": "cert-manager",
        "app.kubernetes.io/name": "cert-manager",
        "app.kubernetes.io/version": "v1.15.3"
      },
      "annotations": {
        "helm.sh/resource-policy": "keep",
        "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"apiextensions.k8s.io/v1\",\"kind\":\"CustomResourceDefinition\",\"metadata\":{\"annotations\":{\"helm.sh/resource-policy\":\"keep\"},\"labels\":{\"app\":\"cert-manager\",\"app.kubernetes.io/instance\":\"cert-manager\",\"app.kubernetes.io/name\":\"cert-manager\",\"app.kubernetes.io/version\":\"v1.15.3\"},\"name\":\"challenges.acme.cert-manager.io\"},\"spec\":{\"group\":\"acme.cert-manager.io\",\"names\":{\"categories\":[\"cert-manager\",\"cert-manager-acme\"],\"kind\":\"Challenge\",\"listKind\":\"ChallengeList\",\"plural\":\"challenges\",\"singular\":\"challenge\"},\"scope\":\"Namespaced\",\"versions\":[{\"additionalPrinterColumns\":[{\"jsonPath\":\".status.state\",\"name\":\"State\",\"type\":\"string\"},{\"jsonPath\":\".spec.dnsName\",\"name\":\"Domain\",\"type\":\"string\"},{\"jsonPath\":\".status.reason\",\"name\":\"Reason\",\"priority\":1,\"type\":\"string\"},{\"description\":\"CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC.\",\"jsonPath\":\".metadata.creationTimestamp\",\"name\":\"Age\",\"type\":\"date\"}],\"name\":\"v1\",\"schema\":{\"openAPIV3Schema\":{\"description\":\"Challenge is a type to represent a Challenge request with an ACME server\",\"properties\":{\"apiVersion\":{\"description\":\"APIVersion defines the versioned schema of this representation of an object.\\nServers should convert recognized schemas to the latest internal value, and\\nmay reject unrecognized values.\\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources\",\"type\":\"string\"},\"kind\":{\"description\":\"Kind is a string value representing the REST resource this object represents.\\nServers may infer this from the endpoint the client submits requests to.\\nCannot be updated.\\nIn CamelCase.\\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\",\"type\":\"string\"},\"metadata\":{\"type\":\"object\"},\"spec\":{\"properties\":{\"authorizationURL\":{\"description\":\"The URL to the ACME Authorization resource that this\\nchallenge is a part of.\",\"type\":\"string\"},\"dnsName\":{\"description\":\"dnsName is the identifier that this challenge is for, e.g. example.com.\\nIf the requested DNSName is a 'wildcard', this field MUST be set to the\\nnon-wildcard domain, e.g. for `*.example.com`, it must be `example.com`.\",\"type\":\"string\"},\"issuerRef\":{\"description\":\"References a properly configured ACME-type Issuer which should\\nbe used to create this Challenge.\\nIf the Issuer does not exist, processing will be retried.\\nIf the Issuer is not an 'ACME' Issuer, an error will be returned and the\\nChallenge will be marked as failed.\",\"properties\":{\"group\":{\"description\":\"Group of the resource being referred to.\",\"type\":\"string\"},\"kind\":{\"description\":\"Kind of the resource being referred to.\",\"type\":\"string\"},\"name\":{\"description\":\"Name of the resource being referred to.\",\"type\":\"string\"}},\"required\":[\"name\"],\"type\":\"object\"},\"key\":{\"description\":\"The ACME challenge key for this challenge\\nFor HTTP01 challenges, this is the value that must be responded with to\\ncomplete the HTTP01 challenge in the format:\\n`\\u003cprivate key JWK thumbprint\\u003e.\\u003ckey from acme server for challenge\\u003e`.\\nFor DNS01 challenges, this is the base64 encoded SHA256 sum of the\\n`\\u003cprivate key JWK thumbprint\\u003e.\\u003ckey from acme server for challenge\\u003e`\\ntext that must be set as the TXT record content.\",\"type\":\"string\"},\"solver\":{\"description\":\"Contains the domain solving configuration that should be used to\\nsolve this challenge resource.\",\"properties\":{\"dns01\":{\"description\":\"Configures cert-manager to attempt to complete authorizations by\\nperforming the DNS01 challenge flow.\",\"properties\":{\"acmeDNS\":{\"description\":\"Use the 'ACME DNS' (https://github.com/joohoi/acme-dns) API to manage\\nDNS01 challenge records.\",\"properties\":{\"accountSecretRef\":{\"description\":\"A reference to a specific 'key' within a Secret resource.\\nIn some instances, `key` is a required field.\",\"properties\":{\"key\":{\"description\":\"The key of the entry in the Secret resource's `data` field to be used.\\nSome instances of this field may be defaulted, in others it may be\\nrequired.\",\"type\":\"string\"},\"name\":{\"description\":\"Name of the resource being referred to.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\",\"type\":\"string\"}},\"required\":[\"name\"],\"type\":\"object\"},\"host\":{\"type\":\"string\"}},\"required\":[\"accountSecretRef\",\"host\"],\"type\":\"object\"},\"akamai\":{\"description\":\"Use the Akamai DNS zone management API to manage DNS01 challenge records.\",\"properties\":{\"accessTokenSecretRef\":{\"description\":\"A reference to a specific 'key' within a Secret resource.\\nIn some instances, `key` is a required field.\",\"properties\":{\"key\":{\"description\":\"The key of the entry in the Secret resource's `data` field to be used.\\nSome instances of this field may be defaulted, in others it may be\\nrequired.\",\"type\":\"string\"},\"name\":{\"description\":\"Name of the resource being referred to.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\",\"type\":\"string\"}},\"required\":[\"name\"],\"type\":\"object\"},\"clientSecretSecretRef\":{\"description\":\"A reference to a specific 'key' within a Secret resource.\\nIn some instances, `key` is a required field.\",\"properties\":{\"key\":{\"description\":\"The key of the entry in the Secret resource's `data` field to be used.\\nSome instances of this field may be defaulted, in others it may be\\nrequired.\",\"type\":\"string\"},\"name\":{\"description\":\"Name of the resource being referred to.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\",\"type\":\"string\"}},\"required\":[\"name\"],\"type\":\"object\"},\"clientTokenSecretRef\":{\"description\":\"A reference to a specific 'key' within a Secret resource.\\nIn some instances, `key` is a required field.\",\"properties\":{\"key\":{\"description\":\"The key of the entry in the Secret resource's `data` field to be used.\\nSome instances of this field may be defaulted, in others it may be\\nrequired.\",\"type\":\"string\"},\"name\":{\"description\":\"Name of the resource being referred to.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\",\"type\":\"string\"}},\"required\":[\"name\"],\"type\":\"object\"},\"serviceConsumerDomain\":{\"type\":\"string\"}},\"required\":[\"accessTokenSecretRef\",\"clientSecretSecretRef\",\"clientTokenSecretRef\",\"serviceConsumerDomain\"],\"type\":\"object\"},\"azureDNS\":{\"description\":\"Use the Microsoft Azure DNS API to manage DNS01 challenge records.\",\"properties\":{\"clientID\":{\"description\":\"Auth: Azure Service Principal:\\nThe ClientID of the Azure Service Principal used to authenticate with Azure DNS.\\nIf set, ClientSecret and TenantID must also be set.\",\"type\":\"string\"},\"clientSecretSecretRef\":{\"description\":\"Auth: Azure Service Principal:\\nA reference to a Secret containing the password associated with the Service Principal.\\nIf set, ClientID and TenantID must also be set.\",\"properties\":{\"key\":{\"description\":\"The key of the entry in the Secret resource's `data` field to be used.\\nSome instances of this field may be defaulted, in others it may be\\nrequired.\",\"type\":\"string\"},\"name\":{\"description\":\"Name of the resource being referred to.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\",\"type\":\"string\"}},\"required\":[\"name\"],\"type\":\"object\"},\"environment\":{\"description\":\"name of the Azure environment (default AzurePublicCloud)\",\"enum\":[\"AzurePublicCloud\",\"AzureChinaCloud\",\"AzureGermanCloud\",\"AzureUSGovernmentCloud\"],\"type\":\"string\"},\"hostedZoneName\":{\"description\":\"name of the DNS zone that should be used\",\"type\":\"string\"},\"managedIdentity\":{\"description\":\"Auth: Azure Workload Identity or Azure Managed Service Identity:\\nSettings to enable Azure Workload Identity or Azure Managed Service Identity\\nIf set, ClientID, ClientSecret and TenantID must not be set.\",\"properties\":{\"clientID\":{\"description\":\"client ID of the managed identity, can not be used at the same time as resourceID\",\"type\":\"string\"},\"resourceID\":{\"description\":\"resource ID of the managed identity, can not be used at the same time as clientID\\nCannot be used for Azure Managed Service Identity\",\"type\":\"string\"}},\"type\":\"object\"},\"resourceGroupName\":{\"description\":\"resource group the DNS zone is located in\",\"type\":\"string\"},\"subscriptionID\":{\"description\":\"ID of the Azure subscription\",\"type\":\"string\"},\"tenantID\":{\"description\":\"Auth: Azure Service Principal:\\nThe TenantID of the Azure Service Principal used to authenticate with Azure DNS.\\nIf set, ClientID and ClientSecret must also be set.\",\"type\":\"string\"}},\"required\":[\"resourceGroupName\",\"subscriptionID\"],\"type\":\"object\"},\"cloudDNS\":{\"description\":\"Use the Google Cloud DNS API to manage DNS01 challenge records.\",\"properties\":{\"hostedZoneName\":{\"description\":\"HostedZoneName is an optional field that tells cert-manager in which\\nCloud DNS zone the challenge record has to be created.\\nIf left empty cert-manager will automatically choose a zone.\",\"type\":\"string\"},\"project\":{\"type\":\"string\"},\"serviceAccountSecretRef\":{\"description\":\"A reference to a specific 'key' within a Secret resource.\\nIn some instances, `key` is a required field.\",\"properties\":{\"key\":{\"description\":\"The key of the entry in the Secret resource's `data` field to be used.\\nSome instances of this field may be defaulted, in others it may be\\nrequired.\",\"type\":\"string\"},\"name\":{\"description\":\"Name of the resource being referred to.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\",\"type\":\"string\"}},\"required\":[\"name\"],\"type\":\"object\"}},\"required\":[\"project\"],\"type\":\"object\"},\"cloudflare\":{\"description\":\"Use the Cloudflare API to manage DNS01 challenge records.\",\"properties\":{\"apiKeySecretRef\":{\"description\":\"API key to use to authenticate with Cloudflare.\\nNote: using an API token to authenticate is now the recommended method\\nas it allows greater control of permissions.\",\"properties\":{\"key\":{\"description\":\"The key of the entry in the Secret resource's `data` field to be used.\\nSome instances of this field may be defaulted, in others it may be\\nrequired.\",\"type\":\"string\"},\"name\":{\"description\":\"Name of the resource being referred to.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\",\"type\":\"string\"}},\"required\":[\"name\"],\"type\":\"object\"},\"apiTokenSecretRef\":{\"description\":\"API token used to authenticate with Cloudflare.\",\"properties\":{\"key\":{\"description\":\"The key of the entry in the Secret resource's `data` field to be used.\\nSome instances of this field may be defaulted, in others it may be\\nrequired.\",\"type\":\"string\"},\"name\":{\"description\":\"Name of the resource being referred to.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\",\"type\":\"string\"}},\"required\":[\"name\"],\"type\":\"object\"},\"email\":{\"description\":\"Email of the account, only required when using API key based authentication.\",\"type\":\"string\"}},\"type\":\"object\"},\"cnameStrategy\":{\"description\":\"CNAMEStrategy configures how the DNS01 provider should handle CNAME\\nrecords when found in DNS zones.\",\"enum\":[\"None\",\"Follow\"],\"type\":\"string\"},\"digitalocean\":{\"description\":\"Use the DigitalOcean DNS API to manage DNS01 challenge records.\",\"properties\":{\"tokenSecretRef\":{\"description\":\"A reference to a specific 'key' within a Secret resource.\\nIn some instances, `key` is a required field.\",\"properties\":{\"key\":{\"description\":\"The key of the entry in the Secret resource's `data` field to be used.\\nSome instances of this field may be defaulted, in others it may be\\nrequired.\",\"type\":\"string\"},\"name\":{\"description\":\"Name of the resource being referred to.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\",\"type\":\"string\"}},\"required\":[\"name\"],\"type\":\"object\"}},\"required\":[\"tokenSecretRef\"],\"type\":\"object\"},\"rfc2136\":{\"description\":\"Use RFC2136 (\\\"Dynamic Updates in the Domain Name System\\\") (https://datatracker.ietf.org/doc/rfc2136/)\\nto manage DNS01 challenge records.\",\"properties\":{\"nameserver\":{\"description\":\"The IP address or hostname of an authoritative DNS server supporting\\nRFC2136 in the form host:port. If the host is an IPv6 address it must be\\nenclosed in square brackets (e.g [2001:db8::1])\u00a0; port is optional.\\nThis field is required.\",\"type\":\"string\"},\"tsigAlgorithm\":{\"description\":\"The TSIG Algorithm configured in the DNS supporting RFC2136. Used only\\nwhen ``tsigSecretSecretRef`` and ``tsigKeyName`` are defined.\\nSupported values are (case-insensitive): ``HMACMD5`` (default),\\n``HMACSHA1``, ``HMACSHA256`` or ``HMACSHA512``.\",\"type\":\"string\"},\"tsigKeyName\":{\"description\":\"The TSIG Key name configured in the DNS.\\nIf ``tsigSecretSecretRef`` is defined, this field is required.\",\"type\":\"string\"},\"tsigSecretSecretRef\":{\"description\":\"The name of the secret containing the TSIG value.\\nIf ``tsigKeyName`` is defined, this field is required.\",\"properties\":{\"key\":{\"description\":\"The key of the entry in the Secret resource's `data` field to be used.\\nSome instances of this field may be defaulted, in others it may be\\nrequired.\",\"type\":\"string\"},\"name\":{\"description\":\"Name of the resource being referred to.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\",\"type\":\"string\"}},\"required\":[\"name\"],\"type\":\"object\"}},\"required\":[\"nameserver\"],\"type\":\"object\"},\"route53\":{\"description\":\"Use the AWS Route53 API to manage DNS01 challenge records.\",\"properties\":{\"accessKeyID\":{\"description\":\"The AccessKeyID is used for authentication.\\nCannot be set when SecretAccessKeyID is set.\\nIf neither the Access Key nor Key ID are set, we fall-back to using env\\nvars, shared credentials file or AWS Instance metadata,\\nsee: https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials\",\"type\":\"string\"},\"accessKeyIDSecretRef\":{\"description\":\"The SecretAccessKey is used for authentication. If set, pull the AWS\\naccess key ID from a key within a Kubernetes Secret.\\nCannot be set when AccessKeyID is set.\\nIf neither the Access Key nor Key ID are set, we fall-back to using env\\nvars, shared credentials file or AWS Instance metadata,\\nsee: https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials\",\"properties\":{\"key\":{\"description\":\"The key of the entry in the Secret resource's `data` field to be used.\\nSome instances of this field may be defaulted, in others it may be\\nrequired.\",\"type\":\"string\"},\"name\":{\"description\":\"Name of the resource being referred to.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\",\"type\":\"string\"}},\"required\":[\"name\"],\"type\":\"object\"},\"auth\":{\"description\":\"Auth configures how cert-manager authenticates.\",\"properties\":{\"kubernetes\":{\"description\":\"Kubernetes authenticates with Route53 using AssumeRoleWithWebIdentity\\nby passing a bound ServiceAccount token.\",\"properties\":{\"serviceAccountRef\":{\"description\":\"A reference to a service account that will be used to request a bound\\ntoken (also known as \\\"projected token\\\"). To use this field, you must\\nconfigure an RBAC rule to let cert-manager request a token.\",\"properties\":{\"audiences\":{\"description\":\"TokenAudiences is an optional list of audiences to include in the\\ntoken passed to AWS. The default token consisting of the issuer's namespace\\nand name is always included.\\nIf unset the audience defaults to `sts.amazonaws.com`.\",\"items\":{\"type\":\"string\"},\"type\":\"array\"},\"name\":{\"description\":\"Name of the ServiceAccount used to request a token.\",\"type\":\"string\"}},\"required\":[\"name\"],\"type\":\"object\"}},\"required\":[\"serviceAccountRef\"],\"type\":\"object\"}},\"required\":[\"kubernetes\"],\"type\":\"object\"},\"hostedZoneID\":{\"description\":\"If set, the provider will manage only this zone in Route53 and will not do an lookup using the route53:ListHostedZonesByName api call.\",\"type\":\"string\"},\"region\":{\"description\":\"Always set the region when using AccessKeyID and SecretAccessKey\",\"type\":\"string\"},\"role\":{\"description\":\"Role is a Role ARN which the Route53 provider will assume using either the explicit credentials AccessKeyID/SecretAccessKey\\nor the inferred credentials from environment variables, shared credentials file or AWS Instance metadata\",\"type\":\"string\"},\"secretAccessKeySecretRef\":{\"description\":\"The SecretAccessKey is used for authentication.\\nIf neither the Access Key nor Key ID are set, we fall-back to using env\\nvars, shared credentials file or AWS Instance metadata,\\nsee: https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials\",\"properties\":{\"key\":{\"description\":\"The key of the entry in the Secret resource's `data` field to be used.\\nSome instances of this field may be defaulted, in others it may be\\nrequired.\",\"type\":\"string\"},\"name\":{\"description\":\"Name of the resource being referred to.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\",\"type\":\"string\"}},\"required\":[\"name\"],\"type\":\"object\"}},\"required\":[\"region\"],\"type\":\"object\"},\"webhook\":{\"description\":\"Configure an external webhook based DNS01 challenge solver to manage\\nDNS01 challenge records.\",\"properties\":{\"config\":{\"description\":\"Additional configuration that should be passed to the webhook apiserver\\nwhen challenges are processed.\\nThis can contain arbitrary JSON data.\\nSecret values should not be specified in this stanza.\\nIf secret values are needed (e.g. credentials for a DNS service), you\\nshould use a SecretKeySelector to reference a Secret resource.\\nFor details on the schema of this field, consult the webhook provider\\nimplementation's documentation.\",\"x-kubernetes-preserve-unknown-fields\":true},\"groupName\":{\"description\":\"The API group name that should be used when POSTing ChallengePayload\\nresources to the webhook apiserver.\\nThis should be the same as the GroupName specified in the webhook\\nprovider implementation.\",\"type\":\"string\"},\"solverName\":{\"description\":\"The name of the solver to use, as defined in the webhook provider\\nimplementation.\\nThis will typically be the name of the provider, e.g. 'cloudflare'.\",\"type\":\"string\"}},\"required\":[\"groupName\",\"solverName\"],\"type\":\"object\"}},\"type\":\"object\"},\"http01\":{\"description\":\"Configures cert-manager to attempt to complete authorizations by\\nperforming the HTTP01 challenge flow.\\nIt is not possible to obtain certificates for wildcard domain names\\n(e.g. `*.example.com`) using the HTTP01 challenge mechanism.\",\"properties\":{\"gatewayHTTPRoute\":{\"description\":\"The Gateway API is a sig-network community API that models service networking\\nin Kubernetes (https://gateway-api.sigs.k8s.io/). The Gateway solver will\\ncreate HTTPRoutes with the specified labels in the same namespace as the challenge.\\nThis solver is experimental, and fields / behaviour may change in the future.\",\"properties\":{\"labels\":{\"additionalProperties\":{\"type\":\"string\"},\"description\":\"Custom labels that will be applied to HTTPRoutes created by cert-manager\\nwhile solving HTTP-01 challenges.\",\"type\":\"object\"},\"parentRefs\":{\"description\":\"When solving an HTTP-01 challenge, cert-manager creates an HTTPRoute.\\ncert-manager needs to know which parentRefs should be used when creating\\nthe HTTPRoute. Usually, the parentRef references a Gateway. See:\\nhttps://gateway-api.sigs.k8s.io/api-types/httproute/#attaching-to-gateways\",\"items\":{\"description\":\"ParentReference identifies an API object (usually a Gateway) that can be considered\\na parent of this resource (usually a route). There are two kinds of parent resources\\nwith \\\"Core\\\" support:\\n\\n\\n* Gateway (Gateway conformance profile)\\n* Service (Mesh conformance profile, ClusterIP Services only)\\n\\n\\nThis API may be extended in the future to support additional kinds of parent\\nresources.\\n\\n\\nThe API object must be valid in the cluster; the Group and Kind must\\nbe registered in the cluster for this reference to be valid.\",\"properties\":{\"group\":{\"default\":\"gateway.networking.k8s.io\",\"description\":\"Group is the group of the referent.\\nWhen unspecified, \\\"gateway.networking.k8s.io\\\" is inferred.\\nTo set the core API group (such as for a \\\"Service\\\" kind referent),\\nGroup must be explicitly set to \\\"\\\" (empty string).\\n\\n\\nSupport: Core\",\"maxLength\":253,\"pattern\":\"^$|^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$\",\"type\":\"string\"},\"kind\":{\"default\":\"Gateway\",\"description\":\"Kind is kind of the referent.\\n\\n\\nThere are two kinds of parent resources with \\\"Core\\\" support:\\n\\n\\n* Gateway (Gateway conformance profile)\\n* Service (Mesh conformance profile, ClusterIP Services only)\\n\\n\\nSupport for other resources is Implementation-Specific.\",\"maxLength\":63,\"minLength\":1,\"pattern\":\"^[a-zA-Z]([-a-zA-Z0-9]*[a-zA-Z0-9])?$\",\"type\":\"string\"},\"name\":{\"description\":\"Name is the name of the referent.\\n\\n\\nSupport: Core\",\"maxLength\":253,\"minLength\":1,\"type\":\"string\"},\"namespace\":{\"description\":\"Namespace is the namespace of the referent. When unspecified, this refers\\nto the local namespace of the Route.\\n\\n\\nNote that there are specific rules for ParentRefs which cross namespace\\nboundaries. Cross-namespace references are only valid if they are explicitly\\nallowed by something in the namespace they are referring to. For example:\\nGateway has the AllowedRoutes field, and ReferenceGrant provides a\\ngeneric way to enable any other kind of cross-namespace reference.\\n\\n\\n\\u003cgateway:experimental:description\\u003e\\nParentRefs from a Route to a Service in the same namespace are \\\"producer\\\"\\nroutes, which apply default routing rules to inbound connections from\\nany namespace to the Service.\\n\\n\\nParentRefs from a Route to a Service in a different namespace are\\n\\\"consumer\\\" routes, and these routing rules are only applied to outbound\\nconnections originating from the same namespace as the Route, for which\\nthe intended destination of the connections are a Service targeted as a\\nParentRef of the Route.\\n\\u003c/gateway:experimental:description\\u003e\\n\\n\\nSupport: Core\",\"maxLength\":63,\"minLength\":1,\"pattern\":\"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\",\"type\":\"string\"},\"port\":{\"description\":\"Port is the network port this Route targets. It can be interpreted\\ndifferently based on the type of parent resource.\\n\\n\\nWhen the parent resource is a Gateway, this targets all listeners\\nlistening on the specified port that also support this kind of Route(and\\nselect this Route). It's not recommended to set `Port` unless the\\nnetworking behaviors specified in a Route must apply to a specific port\\nas opposed to a listener(s) whose port(s) may be changed. When both Port\\nand SectionName are specified, the name and port of the selected listener\\nmust match both specified values.\\n\\n\\n\\u003cgateway:experimental:description\\u003e\\nWhen the parent resource is a Service, this targets a specific port in the\\nService spec. When both Port (experimental) and SectionName are specified,\\nthe name and port of the selected port must match both specified values.\\n\\u003c/gateway:experimental:description\\u003e\\n\\n\\nImplementations MAY choose to support other parent resources.\\nImplementations supporting other types of parent resources MUST clearly\\ndocument how/if Port is interpreted.\\n\\n\\nFor the purpose of status, an attachment is considered successful as\\nlong as the parent resource accepts it partially. For example, Gateway\\nlisteners can restrict which Routes can attach to them by Route kind,\\nnamespace, or hostname. If 1 of 2 Gateway listeners accept attachment\\nfrom the referencing Route, the Route MUST be considered successfully\\nattached. If no Gateway listeners accept attachment from this Route,\\nthe Route MUST be considered detached from the Gateway.\\n\\n\\nSupport: Extended\",\"format\":\"int32\",\"maximum\":65535,\"minimum\":1,\"type\":\"integer\"},\"sectionName\":{\"description\":\"SectionName is the name of a section within the target resource. In the\\nfollowing resources, SectionName is interpreted as the following:\\n\\n\\n* Gateway: Listener name. When both Port (experimental) and SectionName\\nare specified, the name and port of the selected listener must match\\nboth specified values.\\n* Service: Port name. When both Port (experimental) and SectionName\\nare specified, the name and port of the selected listener must match\\nboth specified values.\\n\\n\\nImplementations MAY choose to support attaching Routes to other resources.\\nIf that is the case, they MUST clearly document how SectionName is\\ninterpreted.\\n\\n\\nWhen unspecified (empty string), this will reference the entire resource.\\nFor the purpose of status, an attachment is considered successful if at\\nleast one section in the parent resource accepts it. For example, Gateway\\nlisteners can restrict which Routes can attach to them by Route kind,\\nnamespace, or hostname. If 1 of 2 Gateway listeners accept attachment from\\nthe referencing Route, the Route MUST be considered successfully\\nattached. If no Gateway listeners accept attachment from this Route, the\\nRoute MUST be considered detached from the Gateway.\\n\\n\\nSupport: Core\",\"maxLength\":253,\"minLength\":1,\"pattern\":\"^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$\",\"type\":\"string\"}},\"required\":[\"name\"],\"type\":\"object\"},\"type\":\"array\"},\"serviceType\":{\"description\":\"Optional service type for Kubernetes solver service. Supported values\\nare NodePort or ClusterIP. If unset, defaults to NodePort.\",\"type\":\"string\"}},\"type\":\"object\"},\"ingress\":{\"description\":\"The ingress based HTTP01 challenge solver will solve challenges by\\ncreating or modifying Ingress resources in order to route requests for\\n'/.well-known/acme-challenge/XYZ' to 'challenge solver' pods that are\\nprovisioned by cert-manager for each Challenge to be completed.\",\"properties\":{\"class\":{\"description\":\"This field configures the annotation `kubernetes.io/ingress.class` when\\ncreating Ingress resources to solve ACME challenges that use this\\nchallenge solver. Only one of `class`, `name` or `ingressClassName` may\\nbe specified.\",\"type\":\"string\"},\"ingressClassName\":{\"description\":\"This field configures the field `ingressClassName` on the created Ingress\\nresources used to solve ACME challenges that use this challenge solver.\\nThis is the recommended way of configuring the ingress class. Only one of\\n`class`, `name` or `ingressClassName` may be specified.\",\"type\":\"string\"},\"ingressTemplate\":{\"description\":\"Optional ingress template used to configure the ACME challenge solver\\ningress used for HTTP01 challenges.\",\"properties\":{\"metadata\":{\"description\":\"ObjectMeta overrides for the ingress used to solve HTTP01 challenges.\\nOnly the 'labels' and 'annotations' fields may be set.\\nIf labels or annotations overlap with in-built values, the values here\\nwill override the in-built values.\",\"properties\":{\"annotations\":{\"additionalProperties\":{\"type\":\"string\"},\"description\":\"Annotations that should be added to the created ACME HTTP01 solver ingress.\",\"type\":\"object\"},\"labels\":{\"additionalProperties\":{\"type\":\"string\"},\"description\":\"Labels that should be added to the created ACME HTTP01 solver ingress.\",\"type\":\"object\"}},\"type\":\"object\"}},\"type\":\"object\"},\"name\":{\"description\":\"The name of the ingress resource that should have ACME challenge solving\\nroutes inserted into it in order to solve HTTP01 challenges.\\nThis is typically used in conjunction with ingress controllers like\\ningress-gce, which maintains a 1:1 mapping between external IPs and\\ningress resources. Only one of `class`, `name` or `ingressClassName` may\\nbe specified.\",\"type\":\"string\"},\"podTemplate\":{\"description\":\"Optional pod template used to configure the ACME challenge solver pods\\nused for HTTP01 challenges.\",\"properties\":{\"metadata\":{\"description\":\"ObjectMeta overrides for the pod used to solve HTTP01 challenges.\\nOnly the 'labels' and 'annotations' fields may be set.\\nIf labels or annotations overlap with in-built values, the values here\\nwill override the in-built values.\",\"properties\":{\"annotations\":{\"additionalProperties\":{\"type\":\"string\"},\"description\":\"Annotations that should be added to the create ACME HTTP01 solver pods.\",\"type\":\"object\"},\"labels\":{\"additionalProperties\":{\"type\":\"string\"},\"description\":\"Labels that should be added to the created ACME HTTP01 solver pods.\",\"type\":\"object\"}},\"type\":\"object\"},\"spec\":{\"description\":\"PodSpec defines overrides for the HTTP01 challenge solver pod.\\nCheck ACMEChallengeSolverHTTP01IngressPodSpec to find out currently supported fields.\\nAll other fields will be ignored.\",\"properties\":{\"affinity\":{\"description\":\"If specified, the pod's scheduling constraints\",\"properties\":{\"nodeAffinity\":{\"description\":\"Describes node affinity scheduling rules for the pod.\",\"properties\":{\"preferredDuringSchedulingIgnoredDuringExecution\":{\"description\":\"The scheduler will prefer to schedule pods to nodes that satisfy\\nthe affinity expressions specified by this field, but it may choose\\na node that violates one or more of the expressions. The node that is\\nmost preferred is the one with the greatest sum of weights, i.e.\\nfor each node that meets all of the scheduling requirements (resource\\nrequest, requiredDuringScheduling affinity expressions, etc.),\\ncompute a sum by iterating through the elements of this field and adding\\n\\\"weight\\\" to the sum if the node matches the corresponding matchExpressions; the\\nnode(s) with the highest sum are the most preferred.\",\"items\":{\"description\":\"An empty preferred scheduling term matches all objects with implicit weight 0\\n(i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).\",\"properties\":{\"preference\":{\"description\":\"A node selector term, associated with the corresponding weight.\",\"properties\":{\"matchExpressions\":{\"description\":\"A list of node selector requirements by node's labels.\",\"items\":{\"description\":\"A node selector requirement is a selector that contains values, a key, and an operator\\nthat relates the key and values.\",\"properties\":{\"key\":{\"description\":\"The label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"Represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.\",\"type\":\"string\"},\"values\":{\"description\":\"An array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. If the operator is Gt or Lt, the values\\narray must have a single element, which will be interpreted as an integer.\\nThis array is replaced during a strategic merge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"matchFields\":{\"description\":\"A list of node selector requirements by node's fields.\",\"items\":{\"description\":\"A node selector requirement is a selector that contains values, a key, and an operator\\nthat relates the key and values.\",\"properties\":{\"key\":{\"description\":\"The label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"Represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.\",\"type\":\"string\"},\"values\":{\"description\":\"An array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. If the operator is Gt or Lt, the values\\narray must have a single element, which will be interpreted as an integer.\\nThis array is replaced during a strategic merge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"type\":\"object\",\"x-kubernetes-map-type\":\"atomic\"},\"weight\":{\"description\":\"Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.\",\"format\":\"int32\",\"type\":\"integer\"}},\"required\":[\"preference\",\"weight\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"requiredDuringSchedulingIgnoredDuringExecution\":{\"description\":\"If the affinity requirements specified by this field are not met at\\nscheduling time, the pod will not be scheduled onto the node.\\nIf the affinity requirements specified by this field cease to be met\\nat some point during pod execution (e.g. due to an update), the system\\nmay or may not try to eventually evict the pod from its node.\",\"properties\":{\"nodeSelectorTerms\":{\"description\":\"Required. A list of node selector terms. The terms are ORed.\",\"items\":{\"description\":\"A null or empty node selector term matches no objects. The requirements of\\nthem are ANDed.\\nThe TopologySelectorTerm type implements a subset of the NodeSelectorTerm.\",\"properties\":{\"matchExpressions\":{\"description\":\"A list of node selector requirements by node's labels.\",\"items\":{\"description\":\"A node selector requirement is a selector that contains values, a key, and an operator\\nthat relates the key and values.\",\"properties\":{\"key\":{\"description\":\"The label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"Represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.\",\"type\":\"string\"},\"values\":{\"description\":\"An array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. If the operator is Gt or Lt, the values\\narray must have a single element, which will be interpreted as an integer.\\nThis array is replaced during a strategic merge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"matchFields\":{\"description\":\"A list of node selector requirements by node's fields.\",\"items\":{\"description\":\"A node selector requirement is a selector that contains values, a key, and an operator\\nthat relates the key and values.\",\"properties\":{\"key\":{\"description\":\"The label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"Represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.\",\"type\":\"string\"},\"values\":{\"description\":\"An array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. If the operator is Gt or Lt, the values\\narray must have a single element, which will be interpreted as an integer.\\nThis array is replaced during a strategic merge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"type\":\"object\",\"x-kubernetes-map-type\":\"atomic\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"nodeSelectorTerms\"],\"type\":\"object\",\"x-kubernetes-map-type\":\"atomic\"}},\"type\":\"object\"},\"podAffinity\":{\"description\":\"Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).\",\"properties\":{\"preferredDuringSchedulingIgnoredDuringExecution\":{\"description\":\"The scheduler will prefer to schedule pods to nodes that satisfy\\nthe affinity expressions specified by this field, but it may choose\\na node that violates one or more of the expressions. The node that is\\nmost preferred is the one with the greatest sum of weights, i.e.\\nfor each node that meets all of the scheduling requirements (resource\\nrequest, requiredDuringScheduling affinity expressions, etc.),\\ncompute a sum by iterating through the elements of this field and adding\\n\\\"weight\\\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the\\nnode(s) with the highest sum are the most preferred.\",\"items\":{\"description\":\"The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)\",\"properties\":{\"podAffinityTerm\":{\"description\":\"Required. A pod affinity term, associated with the corresponding weight.\",\"properties\":{\"labelSelector\":{\"description\":\"A label query over a set of resources, in this case pods.\\nIf it's null, this PodAffinityTerm matches with no Pods.\",\"properties\":{\"matchExpressions\":{\"description\":\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\",\"items\":{\"description\":\"A label selector requirement is a selector that contains values, a key, and an operator that\\nrelates the key and values.\",\"properties\":{\"key\":{\"description\":\"key is the label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"operator represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists and DoesNotExist.\",\"type\":\"string\"},\"values\":{\"description\":\"values is an array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. This array is replaced during a strategic\\nmerge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"matchLabels\":{\"additionalProperties\":{\"type\":\"string\"},\"description\":\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\\nmap is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the\\noperator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\",\"type\":\"object\"}},\"type\":\"object\",\"x-kubernetes-map-type\":\"atomic\"},\"matchLabelKeys\":{\"description\":\"MatchLabelKeys is a set of pod label keys to select which pods will\\nbe taken into consideration. The keys are used to lookup values from the\\nincoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`\\nto select the group of existing pods which pods will be taken into consideration\\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\\npod labels will be ignored. The default value is empty.\\nThe same key is forbidden to exist in both matchLabelKeys and labelSelector.\\nAlso, matchLabelKeys cannot be set when labelSelector isn't set.\\nThis is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"mismatchLabelKeys\":{\"description\":\"MismatchLabelKeys is a set of pod label keys to select which pods will\\nbe taken into consideration. The keys are used to lookup values from the\\nincoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`\\nto select the group of existing pods which pods will be taken into consideration\\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\\npod labels will be ignored. The default value is empty.\\nThe same key is forbidden to exist in both mismatchLabelKeys and labelSelector.\\nAlso, mismatchLabelKeys cannot be set when labelSelector isn't set.\\nThis is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"namespaceSelector\":{\"description\":\"A label query over the set of namespaces that the term applies to.\\nThe term is applied to the union of the namespaces selected by this field\\nand the ones listed in the namespaces field.\\nnull selector and null or empty namespaces list means \\\"this pod's namespace\\\".\\nAn empty selector ({}) matches all namespaces.\",\"properties\":{\"matchExpressions\":{\"description\":\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\",\"items\":{\"description\":\"A label selector requirement is a selector that contains values, a key, and an operator that\\nrelates the key and values.\",\"properties\":{\"key\":{\"description\":\"key is the label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"operator represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists and DoesNotExist.\",\"type\":\"string\"},\"values\":{\"description\":\"values is an array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. This array is replaced during a strategic\\nmerge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"matchLabels\":{\"additionalProperties\":{\"type\":\"string\"},\"description\":\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\\nmap is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the\\noperator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\",\"type\":\"object\"}},\"type\":\"object\",\"x-kubernetes-map-type\":\"atomic\"},\"namespaces\":{\"description\":\"namespaces specifies a static list of namespace names that the term applies to.\\nThe term is applied to the union of the namespaces listed in this field\\nand the ones selected by namespaceSelector.\\nnull or empty namespaces list and null namespaceSelector means \\\"this pod's namespace\\\".\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"topologyKey\":{\"description\":\"This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching\\nthe labelSelector in the specified namespaces, where co-located is defined as running on a node\\nwhose value of the label with key topologyKey matches that of any node on which any of the\\nselected pods is running.\\nEmpty topologyKey is not allowed.\",\"type\":\"string\"}},\"required\":[\"topologyKey\"],\"type\":\"object\"},\"weight\":{\"description\":\"weight associated with matching the corresponding podAffinityTerm,\\nin the range 1-100.\",\"format\":\"int32\",\"type\":\"integer\"}},\"required\":[\"podAffinityTerm\",\"weight\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"requiredDuringSchedulingIgnoredDuringExecution\":{\"description\":\"If the affinity requirements specified by this field are not met at\\nscheduling time, the pod will not be scheduled onto the node.\\nIf the affinity requirements specified by this field cease to be met\\nat some point during pod execution (e.g. due to a pod label update), the\\nsystem may or may not try to eventually evict the pod from its node.\\nWhen there are multiple elements, the lists of nodes corresponding to each\\npodAffinityTerm are intersected, i.e. all terms must be satisfied.\",\"items\":{\"description\":\"Defines a set of pods (namely those matching the labelSelector\\nrelative to the given namespace(s)) that this pod should be\\nco-located (affinity) or not co-located (anti-affinity) with,\\nwhere co-located is defined as running on a node whose value of\\nthe label with key \\u003ctopologyKey\\u003e matches that of any node on which\\na pod of the set of pods is running\",\"properties\":{\"labelSelector\":{\"description\":\"A label query over a set of resources, in this case pods.\\nIf it's null, this PodAffinityTerm matches with no Pods.\",\"properties\":{\"matchExpressions\":{\"description\":\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\",\"items\":{\"description\":\"A label selector requirement is a selector that contains values, a key, and an operator that\\nrelates the key and values.\",\"properties\":{\"key\":{\"description\":\"key is the label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"operator represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists and DoesNotExist.\",\"type\":\"string\"},\"values\":{\"description\":\"values is an array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. This array is replaced during a strategic\\nmerge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"matchLabels\":{\"additionalProperties\":{\"type\":\"string\"},\"description\":\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\\nmap is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the\\noperator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\",\"type\":\"object\"}},\"type\":\"object\",\"x-kubernetes-map-type\":\"atomic\"},\"matchLabelKeys\":{\"description\":\"MatchLabelKeys is a set of pod label keys to select which pods will\\nbe taken into consideration. The keys are used to lookup values from the\\nincoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`\\nto select the group of existing pods which pods will be taken into consideration\\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\\npod labels will be ignored. The default value is empty.\\nThe same key is forbidden to exist in both matchLabelKeys and labelSelector.\\nAlso, matchLabelKeys cannot be set when labelSelector isn't set.\\nThis is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"mismatchLabelKeys\":{\"description\":\"MismatchLabelKeys is a set of pod label keys to select which pods will\\nbe taken into consideration. The keys are used to lookup values from the\\nincoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`\\nto select the group of existing pods which pods will be taken into consideration\\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\\npod labels will be ignored. The default value is empty.\\nThe same key is forbidden to exist in both mismatchLabelKeys and labelSelector.\\nAlso, mismatchLabelKeys cannot be set when labelSelector isn't set.\\nThis is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"namespaceSelector\":{\"description\":\"A label query over the set of namespaces that the term applies to.\\nThe term is applied to the union of the namespaces selected by this field\\nand the ones listed in the namespaces field.\\nnull selector and null or empty namespaces list means \\\"this pod's namespace\\\".\\nAn empty selector ({}) matches all namespaces.\",\"properties\":{\"matchExpressions\":{\"description\":\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\",\"items\":{\"description\":\"A label selector requirement is a selector that contains values, a key, and an operator that\\nrelates the key and values.\",\"properties\":{\"key\":{\"description\":\"key is the label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"operator represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists and DoesNotExist.\",\"type\":\"string\"},\"values\":{\"description\":\"values is an array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. This array is replaced during a strategic\\nmerge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"matchLabels\":{\"additionalProperties\":{\"type\":\"string\"},\"description\":\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\\nmap is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the\\noperator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\",\"type\":\"object\"}},\"type\":\"object\",\"x-kubernetes-map-type\":\"atomic\"},\"namespaces\":{\"description\":\"namespaces specifies a static list of namespace names that the term applies to.\\nThe term is applied to the union of the namespaces listed in this field\\nand the ones selected by namespaceSelector.\\nnull or empty namespaces list and null namespaceSelector means \\\"this pod's namespace\\\".\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"topologyKey\":{\"description\":\"This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching\\nthe labelSelector in the specified namespaces, where co-located is defined as running on a node\\nwhose value of the label with key topologyKey matches that of any node on which any of the\\nselected pods is running.\\nEmpty topologyKey is not allowed.\",\"type\":\"string\"}},\"required\":[\"topologyKey\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"type\":\"object\"},\"podAntiAffinity\":{\"description\":\"Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).\",\"properties\":{\"preferredDuringSchedulingIgnoredDuringExecution\":{\"description\":\"The scheduler will prefer to schedule pods to nodes that satisfy\\nthe anti-affinity expressions specified by this field, but it may choose\\na node that violates one or more of the expressions. The node that is\\nmost preferred is the one with the greatest sum of weights, i.e.\\nfor each node that meets all of the scheduling requirements (resource\\nrequest, requiredDuringScheduling anti-affinity expressions, etc.),\\ncompute a sum by iterating through the elements of this field and adding\\n\\\"weight\\\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the\\nnode(s) with the highest sum are the most preferred.\",\"items\":{\"description\":\"The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)\",\"properties\":{\"podAffinityTerm\":{\"description\":\"Required. A pod affinity term, associated with the corresponding weight.\",\"properties\":{\"labelSelector\":{\"description\":\"A label query over a set of resources, in this case pods.\\nIf it's null, this PodAffinityTerm matches with no Pods.\",\"properties\":{\"matchExpressions\":{\"description\":\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\",\"items\":{\"description\":\"A label selector requirement is a selector that contains values, a key, and an operator that\\nrelates the key and values.\",\"properties\":{\"key\":{\"description\":\"key is the label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"operator represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists and DoesNotExist.\",\"type\":\"string\"},\"values\":{\"description\":\"values is an array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. This array is replaced during a strategic\\nmerge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"matchLabels\":{\"additionalProperties\":{\"type\":\"string\"},\"description\":\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\\nmap is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the\\noperator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\",\"type\":\"object\"}},\"type\":\"object\",\"x-kubernetes-map-type\":\"atomic\"},\"matchLabelKeys\":{\"description\":\"MatchLabelKeys is a set of pod label keys to select which pods will\\nbe taken into consideration. The keys are used to lookup values from the\\nincoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`\\nto select the group of existing pods which pods will be taken into consideration\\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\\npod labels will be ignored. The default value is empty.\\nThe same key is forbidden to exist in both matchLabelKeys and labelSelector.\\nAlso, matchLabelKeys cannot be set when labelSelector isn't set.\\nThis is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"mismatchLabelKeys\":{\"description\":\"MismatchLabelKeys is a set of pod label keys to select which pods will\\nbe taken into consideration. The keys are used to lookup values from the\\nincoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`\\nto select the group of existing pods which pods will be taken into consideration\\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\\npod labels will be ignored. The default value is empty.\\nThe same key is forbidden to exist in both mismatchLabelKeys and labelSelector.\\nAlso, mismatchLabelKeys cannot be set when labelSelector isn't set.\\nThis is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"namespaceSelector\":{\"description\":\"A label query over the set of namespaces that the term applies to.\\nThe term is applied to the union of the namespaces selected by this field\\nand the ones listed in the namespaces field.\\nnull selector and null or empty namespaces list means \\\"this pod's namespace\\\".\\nAn empty selector ({}) matches all namespaces.\",\"properties\":{\"matchExpressions\":{\"description\":\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\",\"items\":{\"description\":\"A label selector requirement is a selector that contains values, a key, and an operator that\\nrelates the key and values.\",\"properties\":{\"key\":{\"description\":\"key is the label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"operator represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists and DoesNotExist.\",\"type\":\"string\"},\"values\":{\"description\":\"values is an array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. This array is replaced during a strategic\\nmerge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"matchLabels\":{\"additionalProperties\":{\"type\":\"string\"},\"description\":\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\\nmap is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the\\noperator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\",\"type\":\"object\"}},\"type\":\"object\",\"x-kubernetes-map-type\":\"atomic\"},\"namespaces\":{\"description\":\"namespaces specifies a static list of namespace names that the term applies to.\\nThe term is applied to the union of the namespaces listed in this field\\nand the ones selected by namespaceSelector.\\nnull or empty namespaces list and null namespaceSelector means \\\"this pod's namespace\\\".\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"topologyKey\":{\"description\":\"This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching\\nthe labelSelector in the specified namespaces, where co-located is defined as running on a node\\nwhose value of the label with key topologyKey matches that of any node on which any of the\\nselected pods is running.\\nEmpty topologyKey is not allowed.\",\"type\":\"string\"}},\"required\":[\"topologyKey\"],\"type\":\"object\"},\"weight\":{\"description\":\"weight associated with matching the corresponding podAffinityTerm,\\nin the range 1-100.\",\"format\":\"int32\",\"type\":\"integer\"}},\"required\":[\"podAffinityTerm\",\"weight\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"requiredDuringSchedulingIgnoredDuringExecution\":{\"description\":\"If the anti-affinity requirements specified by this field are not met at\\nscheduling time, the pod will not be scheduled onto the node.\\nIf the anti-affinity requirements specified by this field cease to be met\\nat some point during pod execution (e.g. due to a pod label update), the\\nsystem may or may not try to eventually evict the pod from its node.\\nWhen there are multiple elements, the lists of nodes corresponding to each\\npodAffinityTerm are intersected, i.e. all terms must be satisfied.\",\"items\":{\"description\":\"Defines a set of pods (namely those matching the labelSelector\\nrelative to the given namespace(s)) that this pod should be\\nco-located (affinity) or not co-located (anti-affinity) with,\\nwhere co-located is defined as running on a node whose value of\\nthe label with key \\u003ctopologyKey\\u003e matches that of any node on which\\na pod of the set of pods is running\",\"properties\":{\"labelSelector\":{\"description\":\"A label query over a set of resources, in this case pods.\\nIf it's null, this PodAffinityTerm matches with no Pods.\",\"properties\":{\"matchExpressions\":{\"description\":\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\",\"items\":{\"description\":\"A label selector requirement is a selector that contains values, a key, and an operator that\\nrelates the key and values.\",\"properties\":{\"key\":{\"description\":\"key is the label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"operator represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists and DoesNotExist.\",\"type\":\"string\"},\"values\":{\"description\":\"values is an array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. This array is replaced during a strategic\\nmerge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"matchLabels\":{\"additionalProperties\":{\"type\":\"string\"},\"description\":\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\\nmap is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the\\noperator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\",\"type\":\"object\"}},\"type\":\"object\",\"x-kubernetes-map-type\":\"atomic\"},\"matchLabelKeys\":{\"description\":\"MatchLabelKeys is a set of pod label keys to select which pods will\\nbe taken into consideration. The keys are used to lookup values from the\\nincoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`\\nto select the group of existing pods which pods will be taken into consideration\\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\\npod labels will be ignored. The default value is empty.\\nThe same key is forbidden to exist in both matchLabelKeys and labelSelector.\\nAlso, matchLabelKeys cannot be set when labelSelector isn't set.\\nThis is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"mismatchLabelKeys\":{\"description\":\"MismatchLabelKeys is a set of pod label keys to select which pods will\\nbe taken into consideration. The keys are used to lookup values from the\\nincoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`\\nto select the group of existing pods which pods will be taken into consideration\\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\\npod labels will be ignored. The default value is empty.\\nThe same key is forbidden to exist in both mismatchLabelKeys and labelSelector.\\nAlso, mismatchLabelKeys cannot be set when labelSelector isn't set.\\nThis is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"namespaceSelector\":{\"description\":\"A label query over the set of namespaces that the term applies to.\\nThe term is applied to the union of the namespaces selected by this field\\nand the ones listed in the namespaces field.\\nnull selector and null or empty namespaces list means \\\"this pod's namespace\\\".\\nAn empty selector ({}) matches all namespaces.\",\"properties\":{\"matchExpressions\":{\"description\":\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\",\"items\":{\"description\":\"A label selector requirement is a selector that contains values, a key, and an operator that\\nrelates the key and values.\",\"properties\":{\"key\":{\"description\":\"key is the label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"operator represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists and DoesNotExist.\",\"type\":\"string\"},\"values\":{\"description\":\"values is an array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. This array is replaced during a strategic\\nmerge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"matchLabels\":{\"additionalProperties\":{\"type\":\"string\"},\"description\":\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\\nmap is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the\\noperator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\",\"type\":\"object\"}},\"type\":\"object\",\"x-kubernetes-map-type\":\"atomic\"},\"namespaces\":{\"description\":\"namespaces specifies a static list of namespace names that the term applies to.\\nThe term is applied to the union of the namespaces listed in this field\\nand the ones selected by namespaceSelector.\\nnull or empty namespaces list and null namespaceSelector means \\\"this pod's namespace\\\".\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"topologyKey\":{\"description\":\"This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching\\nthe labelSelector in the specified namespaces, where co-located is defined as running on a node\\nwhose value of the label with key topologyKey matches that of any node on which any of the\\nselected pods is running.\\nEmpty topologyKey is not allowed.\",\"type\":\"string\"}},\"required\":[\"topologyKey\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"type\":\"object\"}},\"type\":\"object\"},\"imagePullSecrets\":{\"description\":\"If specified, the pod's imagePullSecrets\",\"items\":{\"description\":\"LocalObjectReference contains enough information to let you locate the\\nreferenced object inside the same namespace.\",\"properties\":{\"name\":{\"default\":\"\",\"description\":\"Name of the referent.\\nThis field is effectively required, but due to backwards compatibility is\\nallowed to be empty. Instances of this type with an empty value here are\\nalmost certainly wrong.\\nTODO: Add other useful fields. apiVersion, kind, uid?\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\\nTODO: Drop `kubebuilder:default` when controller-gen doesn't need it https://github.com/kubernetes-sigs/kubebuilder/issues/3896.\",\"type\":\"string\"}},\"type\":\"object\",\"x-kubernetes-map-type\":\"atomic\"},\"type\":\"array\"},\"nodeSelector\":{\"additionalProperties\":{\"type\":\"string\"},\"description\":\"NodeSelector is a selector which must be true for the pod to fit on a node.\\nSelector which must match a node's labels for the pod to be scheduled on that node.\\nMore info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/\",\"type\":\"object\"},\"priorityClassName\":{\"description\":\"If specified, the pod's priorityClassName.\",\"type\":\"string\"},\"serviceAccountName\":{\"description\":\"If specified, the pod's service account\",\"type\":\"string\"},\"tolerations\":{\"description\":\"If specified, the pod's tolerations.\",\"items\":{\"description\":\"The pod this Toleration is attached to tolerates any taint that matches\\nthe triple \\u003ckey,value,effect\\u003e using the matching operator \\u003coperator\\u003e.\",\"properties\":{\"effect\":{\"description\":\"Effect indicates the taint effect to match. Empty means match all taint effects.\\nWhen specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.\",\"type\":\"string\"},\"key\":{\"description\":\"Key is the taint key that the toleration applies to. Empty means match all taint keys.\\nIf the key is empty, operator must be Exists; this combination means to match all values and all keys.\",\"type\":\"string\"},\"operator\":{\"description\":\"Operator represents a key's relationship to the value.\\nValid operators are Exists and Equal. Defaults to Equal.\\nExists is equivalent to wildcard for value, so that a pod can\\ntolerate all taints of a particular category.\",\"type\":\"string\"},\"tolerationSeconds\":{\"description\":\"TolerationSeconds represents the period of time the toleration (which must be\\nof effect NoExecute, otherwise this field is ignored) tolerates the taint. By default,\\nit is not set, which means tolerate the taint forever (do not evict). Zero and\\nnegative values will be treated as 0 (evict immediately) by the system.\",\"format\":\"int64\",\"type\":\"integer\"},\"value\":{\"description\":\"Value is the taint value the toleration matches to.\\nIf the operator is Exists, the value should be empty, otherwise just a regular string.\",\"type\":\"string\"}},\"type\":\"object\"},\"type\":\"array\"}},\"type\":\"object\"}},\"type\":\"object\"},\"serviceType\":{\"description\":\"Optional service type for Kubernetes solver service. Supported values\\nare NodePort or ClusterIP. If unset, defaults to NodePort.\",\"type\":\"string\"}},\"type\":\"object\"}},\"type\":\"object\"},\"selector\":{\"description\":\"Selector selects a set of DNSNames on the Certificate resource that\\nshould be solved using this challenge solver.\\nIf not specified, the solver will be treated as the 'default' solver\\nwith the lowest priority, i.e. if any other solver has a more specific\\nmatch, it will be used instead.\",\"properties\":{\"dnsNames\":{\"description\":\"List of DNSNames that this solver will be used to solve.\\nIf specified and a match is found, a dnsNames selector will take\\nprecedence over a dnsZones selector.\\nIf multiple solvers match with the same dnsNames value, the solver\\nwith the most matching labels in matchLabels will be selected.\\nIf neither has more matches, the solver defined earlier in the list\\nwill be selected.\",\"items\":{\"type\":\"string\"},\"type\":\"array\"},\"dnsZones\":{\"description\":\"List of DNSZones that this solver will be used to solve.\\nThe most specific DNS zone match specified here will take precedence\\nover other DNS zone matches, so a solver specifying sys.example.com\\nwill be selected over one specifying example.com for the domain\\nwww.sys.example.com.\\nIf multiple solvers match with the same dnsZones value, the solver\\nwith the most matching labels in matchLabels will be selected.\\nIf neither has more matches, the solver defined earlier in the list\\nwill be selected.\",\"items\":{\"type\":\"string\"},\"type\":\"array\"},\"matchLabels\":{\"additionalProperties\":{\"type\":\"string\"},\"description\":\"A label selector that is used to refine the set of certificate's that\\nthis challenge solver will apply to.\",\"type\":\"object\"}},\"type\":\"object\"}},\"type\":\"object\"},\"token\":{\"description\":\"The ACME challenge token for this challenge.\\nThis is the raw value returned from the ACME server.\",\"type\":\"string\"},\"type\":{\"description\":\"The type of ACME challenge this resource represents.\\nOne of \\\"HTTP-01\\\" or \\\"DNS-01\\\".\",\"enum\":[\"HTTP-01\",\"DNS-01\"],\"type\":\"string\"},\"url\":{\"description\":\"The URL of the ACME Challenge resource for this challenge.\\nThis can be used to lookup details about the status of this challenge.\",\"type\":\"string\"},\"wildcard\":{\"description\":\"wildcard will be true if this challenge is for a wildcard identifier,\\nfor example '*.example.com'.\",\"type\":\"boolean\"}},\"required\":[\"authorizationURL\",\"dnsName\",\"issuerRef\",\"key\",\"solver\",\"token\",\"type\",\"url\"],\"type\":\"object\"},\"status\":{\"properties\":{\"presented\":{\"description\":\"presented will be set to true if the challenge values for this challenge\\nare currently 'presented'.\\nThis *does not* imply the self check is passing. Only that the values\\nhave been 'submitted' for the appropriate challenge mechanism (i.e. the\\nDNS01 TXT record has been presented, or the HTTP01 configuration has been\\nconfigured).\",\"type\":\"boolean\"},\"processing\":{\"description\":\"Used to denote whether this challenge should be processed or not.\\nThis field will only be set to true by the 'scheduling' component.\\nIt will only be set to false by the 'challenges' controller, after the\\nchallenge has reached a final state or timed out.\\nIf this field is set to false, the challenge controller will not take\\nany more action.\",\"type\":\"boolean\"},\"reason\":{\"description\":\"Contains human readable information on why the Challenge is in the\\ncurrent state.\",\"type\":\"string\"},\"state\":{\"description\":\"Contains the current 'state' of the challenge.\\nIf not set, the state of the challenge is unknown.\",\"enum\":[\"valid\",\"ready\",\"pending\",\"processing\",\"invalid\",\"expired\",\"errored\"],\"type\":\"string\"}},\"type\":\"object\"}},\"required\":[\"metadata\",\"spec\"],\"type\":\"object\"}},\"served\":true,\"storage\":true,\"subresources\":{\"status\":{}}}]}}\n"
      },
      "served_versions": [
        "v1"
      ],
      "stored_version": "v1",
      "categories": [
        "cert-manager",
        "cert-manager-acme"
      ],
      "short_names": [],
      "description": null,
      "instance_count": 0
    },
    {
      "name": "clickhouseversions.catalog.kubedb.com",
      "group": "catalog.kubedb.com",
      "version": "v1alpha1",
      "kind": "ClickHouseVersion",
      "plural": "clickhouseversions",
      "singular": "clickhouseversion",
      "scope": "Cluster",
      "creation_timestamp": "2025-09-06T13:33:51+00:00",
      "labels": {
        "app.kubernetes.io/name": "kubedb"
      },
      "annotations": {},
      "served_versions": [
        "v1alpha1"
      ],
      "stored_version": "v1alpha1",
      "categories": [
        "catalog",
        "kubedb",
        "appscode"
      ],
      "short_names": [
        "chversion"
      ],
      "description": null,
      "instance_count": 0
    },
    {
      "name": "clusterimagecatalogs.postgresql.cnpg.io",
      "group": "postgresql.cnpg.io",
      "version": "v1",
      "kind": "ClusterImageCatalog",
      "plural": "clusterimagecatalogs",
      "singular": "clusterimagecatalog",
      "scope": "Cluster",
      "creation_timestamp": "2025-09-07T09:12:56+00:00",
      "labels": {
        "olm.managed": "true",
        "operators.coreos.com/cloudnative-pg.operators": ""
      },
      "annotations": {
        "controller-gen.kubebuilder.io/version": "v0.18.0",
        "operatorframework.io/installed-alongside-26b2108901275579": "operators/cloudnative-pg.v1.27.0"
      },
      "served_versions": [
        "v1"
      ],
      "stored_version": "v1",
      "categories": [],
      "short_names": [],
      "description": null,
      "instance_count": 0
    },
    {
      "name": "clusterissuers.cert-manager.io",
      "group": "cert-manager.io",
      "version": "v1",
      "kind": "ClusterIssuer",
      "plural": "clusterissuers",
      "singular": "clusterissuer",
      "scope": "Cluster",
      "creation_timestamp": "2025-09-06T12:52:41+00:00",
      "labels": {
        "app": "cert-manager",
        "app.kubernetes.io/instance": "cert-manager",
        "app.kubernetes.io/name": "cert-manager",
        "app.kubernetes.io/version": "v1.15.3"
      },
      "annotations": {
        "helm.sh/resource-policy": "keep",
        "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"apiextensions.k8s.io/v1\",\"kind\":\"CustomResourceDefinition\",\"metadata\":{\"annotations\":{\"helm.sh/resource-policy\":\"keep\"},\"labels\":{\"app\":\"cert-manager\",\"app.kubernetes.io/instance\":\"cert-manager\",\"app.kubernetes.io/name\":\"cert-manager\",\"app.kubernetes.io/version\":\"v1.15.3\"},\"name\":\"clusterissuers.cert-manager.io\"},\"spec\":{\"group\":\"cert-manager.io\",\"names\":{\"categories\":[\"cert-manager\"],\"kind\":\"ClusterIssuer\",\"listKind\":\"ClusterIssuerList\",\"plural\":\"clusterissuers\",\"singular\":\"clusterissuer\"},\"scope\":\"Cluster\",\"versions\":[{\"additionalPrinterColumns\":[{\"jsonPath\":\".status.conditions[?(@.type==\\\"Ready\\\")].status\",\"name\":\"Ready\",\"type\":\"string\"},{\"jsonPath\":\".status.conditions[?(@.type==\\\"Ready\\\")].message\",\"name\":\"Status\",\"priority\":1,\"type\":\"string\"},{\"description\":\"CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC.\",\"jsonPath\":\".metadata.creationTimestamp\",\"name\":\"Age\",\"type\":\"date\"}],\"name\":\"v1\",\"schema\":{\"openAPIV3Schema\":{\"description\":\"A ClusterIssuer represents a certificate issuing authority which can be\\nreferenced as part of `issuerRef` fields.\\nIt is similar to an Issuer, however it is cluster-scoped and therefore can\\nbe referenced by resources that exist in *any* namespace, not just the same\\nnamespace as the referent.\",\"properties\":{\"apiVersion\":{\"description\":\"APIVersion defines the versioned schema of this representation of an object.\\nServers should convert recognized schemas to the latest internal value, and\\nmay reject unrecognized values.\\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources\",\"type\":\"string\"},\"kind\":{\"description\":\"Kind is a string value representing the REST resource this object represents.\\nServers may infer this from the endpoint the client submits requests to.\\nCannot be updated.\\nIn CamelCase.\\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\",\"type\":\"string\"},\"metadata\":{\"type\":\"object\"},\"spec\":{\"description\":\"Desired state of the ClusterIssuer resource.\",\"properties\":{\"acme\":{\"description\":\"ACME configures this issuer to communicate with a RFC8555 (ACME) server\\nto obtain signed x509 certificates.\",\"properties\":{\"caBundle\":{\"description\":\"Base64-encoded bundle of PEM CAs which can be used to validate the certificate\\nchain presented by the ACME server.\\nMutually exclusive with SkipTLSVerify; prefer using CABundle to prevent various\\nkinds of security vulnerabilities.\\nIf CABundle and SkipTLSVerify are unset, the system certificate bundle inside\\nthe container is used to validate the TLS connection.\",\"format\":\"byte\",\"type\":\"string\"},\"disableAccountKeyGeneration\":{\"description\":\"Enables or disables generating a new ACME account key.\\nIf true, the Issuer resource will *not* request a new account but will expect\\nthe account key to be supplied via an existing secret.\\nIf false, the cert-manager system will generate a new ACME account key\\nfor the Issuer.\\nDefaults to false.\",\"type\":\"boolean\"},\"email\":{\"description\":\"Email is the email address to be associated with the ACME account.\\nThis field is optional, but it is strongly recommended to be set.\\nIt will be used to contact you in case of issues with your account or\\ncertificates, including expiry notification emails.\\nThis field may be updated after the account is initially registered.\",\"type\":\"string\"},\"enableDurationFeature\":{\"description\":\"Enables requesting a Not After date on certificates that matches the\\nduration of the certificate. This is not supported by all ACME servers\\nlike Let's Encrypt. If set to true when the ACME server does not support\\nit, it will create an error on the Order.\\nDefaults to false.\",\"type\":\"boolean\"},\"externalAccountBinding\":{\"description\":\"ExternalAccountBinding is a reference to a CA external account of the ACME\\nserver.\\nIf set, upon registration cert-manager will attempt to associate the given\\nexternal account credentials with the registered ACME account.\",\"properties\":{\"keyAlgorithm\":{\"description\":\"Deprecated: keyAlgorithm field exists for historical compatibility\\nreasons and should not be used. The algorithm is now hardcoded to HS256\\nin golang/x/crypto/acme.\",\"enum\":[\"HS256\",\"HS384\",\"HS512\"],\"type\":\"string\"},\"keyID\":{\"description\":\"keyID is the ID of the CA key that the External Account is bound to.\",\"type\":\"string\"},\"keySecretRef\":{\"description\":\"keySecretRef is a Secret Key Selector referencing a data item in a Kubernetes\\nSecret which holds the symmetric MAC key of the External Account Binding.\\nThe `key` is the index string that is paired with the key data in the\\nSecret and should not be confused with the key data itself, or indeed with\\nthe External Account Binding keyID above.\\nThe secret key stored in the Secret **must** be un-padded, base64 URL\\nencoded data.\",\"properties\":{\"key\":{\"description\":\"The key of the entry in the Secret resource's `data` field to be used.\\nSome instances of this field may be defaulted, in others it may be\\nrequired.\",\"type\":\"string\"},\"name\":{\"description\":\"Name of the resource being referred to.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\",\"type\":\"string\"}},\"required\":[\"name\"],\"type\":\"object\"}},\"required\":[\"keyID\",\"keySecretRef\"],\"type\":\"object\"},\"preferredChain\":{\"description\":\"PreferredChain is the chain to use if the ACME server outputs multiple.\\nPreferredChain is no guarantee that this one gets delivered by the ACME\\nendpoint.\\nFor example, for Let's Encrypt's DST crosssign you would use:\\n\\\"DST Root CA X3\\\" or \\\"ISRG Root X1\\\" for the newer Let's Encrypt root CA.\\nThis value picks the first certificate bundle in the combined set of\\nACME default and alternative chains that has a root-most certificate with\\nthis value as its issuer's commonname.\",\"maxLength\":64,\"type\":\"string\"},\"privateKeySecretRef\":{\"description\":\"PrivateKey is the name of a Kubernetes Secret resource that will be used to\\nstore the automatically generated ACME account private key.\\nOptionally, a `key` may be specified to select a specific entry within\\nthe named Secret resource.\\nIf `key` is not specified, a default of `tls.key` will be used.\",\"properties\":{\"key\":{\"description\":\"The key of the entry in the Secret resource's `data` field to be used.\\nSome instances of this field may be defaulted, in others it may be\\nrequired.\",\"type\":\"string\"},\"name\":{\"description\":\"Name of the resource being referred to.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\",\"type\":\"string\"}},\"required\":[\"name\"],\"type\":\"object\"},\"server\":{\"description\":\"Server is the URL used to access the ACME server's 'directory' endpoint.\\nFor example, for Let's Encrypt's staging endpoint, you would use:\\n\\\"https://acme-staging-v02.api.letsencrypt.org/directory\\\".\\nOnly ACME v2 endpoints (i.e. RFC 8555) are supported.\",\"type\":\"string\"},\"skipTLSVerify\":{\"description\":\"INSECURE: Enables or disables validation of the ACME server TLS certificate.\\nIf true, requests to the ACME server will not have the TLS certificate chain\\nvalidated.\\nMutually exclusive with CABundle; prefer using CABundle to prevent various\\nkinds of security vulnerabilities.\\nOnly enable this option in development environments.\\nIf CABundle and SkipTLSVerify are unset, the system certificate bundle inside\\nthe container is used to validate the TLS connection.\\nDefaults to false.\",\"type\":\"boolean\"},\"solvers\":{\"description\":\"Solvers is a list of challenge solvers that will be used to solve\\nACME challenges for the matching domains.\\nSolver configurations must be provided in order to obtain certificates\\nfrom an ACME server.\\nFor more information, see: https://cert-manager.io/docs/configuration/acme/\",\"items\":{\"description\":\"An ACMEChallengeSolver describes how to solve ACME challenges for the issuer it is part of.\\nA selector may be provided to use different solving strategies for different DNS names.\\nOnly one of HTTP01 or DNS01 must be provided.\",\"properties\":{\"dns01\":{\"description\":\"Configures cert-manager to attempt to complete authorizations by\\nperforming the DNS01 challenge flow.\",\"properties\":{\"acmeDNS\":{\"description\":\"Use the 'ACME DNS' (https://github.com/joohoi/acme-dns) API to manage\\nDNS01 challenge records.\",\"properties\":{\"accountSecretRef\":{\"description\":\"A reference to a specific 'key' within a Secret resource.\\nIn some instances, `key` is a required field.\",\"properties\":{\"key\":{\"description\":\"The key of the entry in the Secret resource's `data` field to be used.\\nSome instances of this field may be defaulted, in others it may be\\nrequired.\",\"type\":\"string\"},\"name\":{\"description\":\"Name of the resource being referred to.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\",\"type\":\"string\"}},\"required\":[\"name\"],\"type\":\"object\"},\"host\":{\"type\":\"string\"}},\"required\":[\"accountSecretRef\",\"host\"],\"type\":\"object\"},\"akamai\":{\"description\":\"Use the Akamai DNS zone management API to manage DNS01 challenge records.\",\"properties\":{\"accessTokenSecretRef\":{\"description\":\"A reference to a specific 'key' within a Secret resource.\\nIn some instances, `key` is a required field.\",\"properties\":{\"key\":{\"description\":\"The key of the entry in the Secret resource's `data` field to be used.\\nSome instances of this field may be defaulted, in others it may be\\nrequired.\",\"type\":\"string\"},\"name\":{\"description\":\"Name of the resource being referred to.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\",\"type\":\"string\"}},\"required\":[\"name\"],\"type\":\"object\"},\"clientSecretSecretRef\":{\"description\":\"A reference to a specific 'key' within a Secret resource.\\nIn some instances, `key` is a required field.\",\"properties\":{\"key\":{\"description\":\"The key of the entry in the Secret resource's `data` field to be used.\\nSome instances of this field may be defaulted, in others it may be\\nrequired.\",\"type\":\"string\"},\"name\":{\"description\":\"Name of the resource being referred to.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\",\"type\":\"string\"}},\"required\":[\"name\"],\"type\":\"object\"},\"clientTokenSecretRef\":{\"description\":\"A reference to a specific 'key' within a Secret resource.\\nIn some instances, `key` is a required field.\",\"properties\":{\"key\":{\"description\":\"The key of the entry in the Secret resource's `data` field to be used.\\nSome instances of this field may be defaulted, in others it may be\\nrequired.\",\"type\":\"string\"},\"name\":{\"description\":\"Name of the resource being referred to.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\",\"type\":\"string\"}},\"required\":[\"name\"],\"type\":\"object\"},\"serviceConsumerDomain\":{\"type\":\"string\"}},\"required\":[\"accessTokenSecretRef\",\"clientSecretSecretRef\",\"clientTokenSecretRef\",\"serviceConsumerDomain\"],\"type\":\"object\"},\"azureDNS\":{\"description\":\"Use the Microsoft Azure DNS API to manage DNS01 challenge records.\",\"properties\":{\"clientID\":{\"description\":\"Auth: Azure Service Principal:\\nThe ClientID of the Azure Service Principal used to authenticate with Azure DNS.\\nIf set, ClientSecret and TenantID must also be set.\",\"type\":\"string\"},\"clientSecretSecretRef\":{\"description\":\"Auth: Azure Service Principal:\\nA reference to a Secret containing the password associated with the Service Principal.\\nIf set, ClientID and TenantID must also be set.\",\"properties\":{\"key\":{\"description\":\"The key of the entry in the Secret resource's `data` field to be used.\\nSome instances of this field may be defaulted, in others it may be\\nrequired.\",\"type\":\"string\"},\"name\":{\"description\":\"Name of the resource being referred to.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\",\"type\":\"string\"}},\"required\":[\"name\"],\"type\":\"object\"},\"environment\":{\"description\":\"name of the Azure environment (default AzurePublicCloud)\",\"enum\":[\"AzurePublicCloud\",\"AzureChinaCloud\",\"AzureGermanCloud\",\"AzureUSGovernmentCloud\"],\"type\":\"string\"},\"hostedZoneName\":{\"description\":\"name of the DNS zone that should be used\",\"type\":\"string\"},\"managedIdentity\":{\"description\":\"Auth: Azure Workload Identity or Azure Managed Service Identity:\\nSettings to enable Azure Workload Identity or Azure Managed Service Identity\\nIf set, ClientID, ClientSecret and TenantID must not be set.\",\"properties\":{\"clientID\":{\"description\":\"client ID of the managed identity, can not be used at the same time as resourceID\",\"type\":\"string\"},\"resourceID\":{\"description\":\"resource ID of the managed identity, can not be used at the same time as clientID\\nCannot be used for Azure Managed Service Identity\",\"type\":\"string\"}},\"type\":\"object\"},\"resourceGroupName\":{\"description\":\"resource group the DNS zone is located in\",\"type\":\"string\"},\"subscriptionID\":{\"description\":\"ID of the Azure subscription\",\"type\":\"string\"},\"tenantID\":{\"description\":\"Auth: Azure Service Principal:\\nThe TenantID of the Azure Service Principal used to authenticate with Azure DNS.\\nIf set, ClientID and ClientSecret must also be set.\",\"type\":\"string\"}},\"required\":[\"resourceGroupName\",\"subscriptionID\"],\"type\":\"object\"},\"cloudDNS\":{\"description\":\"Use the Google Cloud DNS API to manage DNS01 challenge records.\",\"properties\":{\"hostedZoneName\":{\"description\":\"HostedZoneName is an optional field that tells cert-manager in which\\nCloud DNS zone the challenge record has to be created.\\nIf left empty cert-manager will automatically choose a zone.\",\"type\":\"string\"},\"project\":{\"type\":\"string\"},\"serviceAccountSecretRef\":{\"description\":\"A reference to a specific 'key' within a Secret resource.\\nIn some instances, `key` is a required field.\",\"properties\":{\"key\":{\"description\":\"The key of the entry in the Secret resource's `data` field to be used.\\nSome instances of this field may be defaulted, in others it may be\\nrequired.\",\"type\":\"string\"},\"name\":{\"description\":\"Name of the resource being referred to.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\",\"type\":\"string\"}},\"required\":[\"name\"],\"type\":\"object\"}},\"required\":[\"project\"],\"type\":\"object\"},\"cloudflare\":{\"description\":\"Use the Cloudflare API to manage DNS01 challenge records.\",\"properties\":{\"apiKeySecretRef\":{\"description\":\"API key to use to authenticate with Cloudflare.\\nNote: using an API token to authenticate is now the recommended method\\nas it allows greater control of permissions.\",\"properties\":{\"key\":{\"description\":\"The key of the entry in the Secret resource's `data` field to be used.\\nSome instances of this field may be defaulted, in others it may be\\nrequired.\",\"type\":\"string\"},\"name\":{\"description\":\"Name of the resource being referred to.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\",\"type\":\"string\"}},\"required\":[\"name\"],\"type\":\"object\"},\"apiTokenSecretRef\":{\"description\":\"API token used to authenticate with Cloudflare.\",\"properties\":{\"key\":{\"description\":\"The key of the entry in the Secret resource's `data` field to be used.\\nSome instances of this field may be defaulted, in others it may be\\nrequired.\",\"type\":\"string\"},\"name\":{\"description\":\"Name of the resource being referred to.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\",\"type\":\"string\"}},\"required\":[\"name\"],\"type\":\"object\"},\"email\":{\"description\":\"Email of the account, only required when using API key based authentication.\",\"type\":\"string\"}},\"type\":\"object\"},\"cnameStrategy\":{\"description\":\"CNAMEStrategy configures how the DNS01 provider should handle CNAME\\nrecords when found in DNS zones.\",\"enum\":[\"None\",\"Follow\"],\"type\":\"string\"},\"digitalocean\":{\"description\":\"Use the DigitalOcean DNS API to manage DNS01 challenge records.\",\"properties\":{\"tokenSecretRef\":{\"description\":\"A reference to a specific 'key' within a Secret resource.\\nIn some instances, `key` is a required field.\",\"properties\":{\"key\":{\"description\":\"The key of the entry in the Secret resource's `data` field to be used.\\nSome instances of this field may be defaulted, in others it may be\\nrequired.\",\"type\":\"string\"},\"name\":{\"description\":\"Name of the resource being referred to.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\",\"type\":\"string\"}},\"required\":[\"name\"],\"type\":\"object\"}},\"required\":[\"tokenSecretRef\"],\"type\":\"object\"},\"rfc2136\":{\"description\":\"Use RFC2136 (\\\"Dynamic Updates in the Domain Name System\\\") (https://datatracker.ietf.org/doc/rfc2136/)\\nto manage DNS01 challenge records.\",\"properties\":{\"nameserver\":{\"description\":\"The IP address or hostname of an authoritative DNS server supporting\\nRFC2136 in the form host:port. If the host is an IPv6 address it must be\\nenclosed in square brackets (e.g [2001:db8::1])\u00a0; port is optional.\\nThis field is required.\",\"type\":\"string\"},\"tsigAlgorithm\":{\"description\":\"The TSIG Algorithm configured in the DNS supporting RFC2136. Used only\\nwhen ``tsigSecretSecretRef`` and ``tsigKeyName`` are defined.\\nSupported values are (case-insensitive): ``HMACMD5`` (default),\\n``HMACSHA1``, ``HMACSHA256`` or ``HMACSHA512``.\",\"type\":\"string\"},\"tsigKeyName\":{\"description\":\"The TSIG Key name configured in the DNS.\\nIf ``tsigSecretSecretRef`` is defined, this field is required.\",\"type\":\"string\"},\"tsigSecretSecretRef\":{\"description\":\"The name of the secret containing the TSIG value.\\nIf ``tsigKeyName`` is defined, this field is required.\",\"properties\":{\"key\":{\"description\":\"The key of the entry in the Secret resource's `data` field to be used.\\nSome instances of this field may be defaulted, in others it may be\\nrequired.\",\"type\":\"string\"},\"name\":{\"description\":\"Name of the resource being referred to.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\",\"type\":\"string\"}},\"required\":[\"name\"],\"type\":\"object\"}},\"required\":[\"nameserver\"],\"type\":\"object\"},\"route53\":{\"description\":\"Use the AWS Route53 API to manage DNS01 challenge records.\",\"properties\":{\"accessKeyID\":{\"description\":\"The AccessKeyID is used for authentication.\\nCannot be set when SecretAccessKeyID is set.\\nIf neither the Access Key nor Key ID are set, we fall-back to using env\\nvars, shared credentials file or AWS Instance metadata,\\nsee: https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials\",\"type\":\"string\"},\"accessKeyIDSecretRef\":{\"description\":\"The SecretAccessKey is used for authentication. If set, pull the AWS\\naccess key ID from a key within a Kubernetes Secret.\\nCannot be set when AccessKeyID is set.\\nIf neither the Access Key nor Key ID are set, we fall-back to using env\\nvars, shared credentials file or AWS Instance metadata,\\nsee: https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials\",\"properties\":{\"key\":{\"description\":\"The key of the entry in the Secret resource's `data` field to be used.\\nSome instances of this field may be defaulted, in others it may be\\nrequired.\",\"type\":\"string\"},\"name\":{\"description\":\"Name of the resource being referred to.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\",\"type\":\"string\"}},\"required\":[\"name\"],\"type\":\"object\"},\"auth\":{\"description\":\"Auth configures how cert-manager authenticates.\",\"properties\":{\"kubernetes\":{\"description\":\"Kubernetes authenticates with Route53 using AssumeRoleWithWebIdentity\\nby passing a bound ServiceAccount token.\",\"properties\":{\"serviceAccountRef\":{\"description\":\"A reference to a service account that will be used to request a bound\\ntoken (also known as \\\"projected token\\\"). To use this field, you must\\nconfigure an RBAC rule to let cert-manager request a token.\",\"properties\":{\"audiences\":{\"description\":\"TokenAudiences is an optional list of audiences to include in the\\ntoken passed to AWS. The default token consisting of the issuer's namespace\\nand name is always included.\\nIf unset the audience defaults to `sts.amazonaws.com`.\",\"items\":{\"type\":\"string\"},\"type\":\"array\"},\"name\":{\"description\":\"Name of the ServiceAccount used to request a token.\",\"type\":\"string\"}},\"required\":[\"name\"],\"type\":\"object\"}},\"required\":[\"serviceAccountRef\"],\"type\":\"object\"}},\"required\":[\"kubernetes\"],\"type\":\"object\"},\"hostedZoneID\":{\"description\":\"If set, the provider will manage only this zone in Route53 and will not do an lookup using the route53:ListHostedZonesByName api call.\",\"type\":\"string\"},\"region\":{\"description\":\"Always set the region when using AccessKeyID and SecretAccessKey\",\"type\":\"string\"},\"role\":{\"description\":\"Role is a Role ARN which the Route53 provider will assume using either the explicit credentials AccessKeyID/SecretAccessKey\\nor the inferred credentials from environment variables, shared credentials file or AWS Instance metadata\",\"type\":\"string\"},\"secretAccessKeySecretRef\":{\"description\":\"The SecretAccessKey is used for authentication.\\nIf neither the Access Key nor Key ID are set, we fall-back to using env\\nvars, shared credentials file or AWS Instance metadata,\\nsee: https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials\",\"properties\":{\"key\":{\"description\":\"The key of the entry in the Secret resource's `data` field to be used.\\nSome instances of this field may be defaulted, in others it may be\\nrequired.\",\"type\":\"string\"},\"name\":{\"description\":\"Name of the resource being referred to.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\",\"type\":\"string\"}},\"required\":[\"name\"],\"type\":\"object\"}},\"required\":[\"region\"],\"type\":\"object\"},\"webhook\":{\"description\":\"Configure an external webhook based DNS01 challenge solver to manage\\nDNS01 challenge records.\",\"properties\":{\"config\":{\"description\":\"Additional configuration that should be passed to the webhook apiserver\\nwhen challenges are processed.\\nThis can contain arbitrary JSON data.\\nSecret values should not be specified in this stanza.\\nIf secret values are needed (e.g. credentials for a DNS service), you\\nshould use a SecretKeySelector to reference a Secret resource.\\nFor details on the schema of this field, consult the webhook provider\\nimplementation's documentation.\",\"x-kubernetes-preserve-unknown-fields\":true},\"groupName\":{\"description\":\"The API group name that should be used when POSTing ChallengePayload\\nresources to the webhook apiserver.\\nThis should be the same as the GroupName specified in the webhook\\nprovider implementation.\",\"type\":\"string\"},\"solverName\":{\"description\":\"The name of the solver to use, as defined in the webhook provider\\nimplementation.\\nThis will typically be the name of the provider, e.g. 'cloudflare'.\",\"type\":\"string\"}},\"required\":[\"groupName\",\"solverName\"],\"type\":\"object\"}},\"type\":\"object\"},\"http01\":{\"description\":\"Configures cert-manager to attempt to complete authorizations by\\nperforming the HTTP01 challenge flow.\\nIt is not possible to obtain certificates for wildcard domain names\\n(e.g. `*.example.com`) using the HTTP01 challenge mechanism.\",\"properties\":{\"gatewayHTTPRoute\":{\"description\":\"The Gateway API is a sig-network community API that models service networking\\nin Kubernetes (https://gateway-api.sigs.k8s.io/). The Gateway solver will\\ncreate HTTPRoutes with the specified labels in the same namespace as the challenge.\\nThis solver is experimental, and fields / behaviour may change in the future.\",\"properties\":{\"labels\":{\"additionalProperties\":{\"type\":\"string\"},\"description\":\"Custom labels that will be applied to HTTPRoutes created by cert-manager\\nwhile solving HTTP-01 challenges.\",\"type\":\"object\"},\"parentRefs\":{\"description\":\"When solving an HTTP-01 challenge, cert-manager creates an HTTPRoute.\\ncert-manager needs to know which parentRefs should be used when creating\\nthe HTTPRoute. Usually, the parentRef references a Gateway. See:\\nhttps://gateway-api.sigs.k8s.io/api-types/httproute/#attaching-to-gateways\",\"items\":{\"description\":\"ParentReference identifies an API object (usually a Gateway) that can be considered\\na parent of this resource (usually a route). There are two kinds of parent resources\\nwith \\\"Core\\\" support:\\n\\n\\n* Gateway (Gateway conformance profile)\\n* Service (Mesh conformance profile, ClusterIP Services only)\\n\\n\\nThis API may be extended in the future to support additional kinds of parent\\nresources.\\n\\n\\nThe API object must be valid in the cluster; the Group and Kind must\\nbe registered in the cluster for this reference to be valid.\",\"properties\":{\"group\":{\"default\":\"gateway.networking.k8s.io\",\"description\":\"Group is the group of the referent.\\nWhen unspecified, \\\"gateway.networking.k8s.io\\\" is inferred.\\nTo set the core API group (such as for a \\\"Service\\\" kind referent),\\nGroup must be explicitly set to \\\"\\\" (empty string).\\n\\n\\nSupport: Core\",\"maxLength\":253,\"pattern\":\"^$|^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$\",\"type\":\"string\"},\"kind\":{\"default\":\"Gateway\",\"description\":\"Kind is kind of the referent.\\n\\n\\nThere are two kinds of parent resources with \\\"Core\\\" support:\\n\\n\\n* Gateway (Gateway conformance profile)\\n* Service (Mesh conformance profile, ClusterIP Services only)\\n\\n\\nSupport for other resources is Implementation-Specific.\",\"maxLength\":63,\"minLength\":1,\"pattern\":\"^[a-zA-Z]([-a-zA-Z0-9]*[a-zA-Z0-9])?$\",\"type\":\"string\"},\"name\":{\"description\":\"Name is the name of the referent.\\n\\n\\nSupport: Core\",\"maxLength\":253,\"minLength\":1,\"type\":\"string\"},\"namespace\":{\"description\":\"Namespace is the namespace of the referent. When unspecified, this refers\\nto the local namespace of the Route.\\n\\n\\nNote that there are specific rules for ParentRefs which cross namespace\\nboundaries. Cross-namespace references are only valid if they are explicitly\\nallowed by something in the namespace they are referring to. For example:\\nGateway has the AllowedRoutes field, and ReferenceGrant provides a\\ngeneric way to enable any other kind of cross-namespace reference.\\n\\n\\n\\u003cgateway:experimental:description\\u003e\\nParentRefs from a Route to a Service in the same namespace are \\\"producer\\\"\\nroutes, which apply default routing rules to inbound connections from\\nany namespace to the Service.\\n\\n\\nParentRefs from a Route to a Service in a different namespace are\\n\\\"consumer\\\" routes, and these routing rules are only applied to outbound\\nconnections originating from the same namespace as the Route, for which\\nthe intended destination of the connections are a Service targeted as a\\nParentRef of the Route.\\n\\u003c/gateway:experimental:description\\u003e\\n\\n\\nSupport: Core\",\"maxLength\":63,\"minLength\":1,\"pattern\":\"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\",\"type\":\"string\"},\"port\":{\"description\":\"Port is the network port this Route targets. It can be interpreted\\ndifferently based on the type of parent resource.\\n\\n\\nWhen the parent resource is a Gateway, this targets all listeners\\nlistening on the specified port that also support this kind of Route(and\\nselect this Route). It's not recommended to set `Port` unless the\\nnetworking behaviors specified in a Route must apply to a specific port\\nas opposed to a listener(s) whose port(s) may be changed. When both Port\\nand SectionName are specified, the name and port of the selected listener\\nmust match both specified values.\\n\\n\\n\\u003cgateway:experimental:description\\u003e\\nWhen the parent resource is a Service, this targets a specific port in the\\nService spec. When both Port (experimental) and SectionName are specified,\\nthe name and port of the selected port must match both specified values.\\n\\u003c/gateway:experimental:description\\u003e\\n\\n\\nImplementations MAY choose to support other parent resources.\\nImplementations supporting other types of parent resources MUST clearly\\ndocument how/if Port is interpreted.\\n\\n\\nFor the purpose of status, an attachment is considered successful as\\nlong as the parent resource accepts it partially. For example, Gateway\\nlisteners can restrict which Routes can attach to them by Route kind,\\nnamespace, or hostname. If 1 of 2 Gateway listeners accept attachment\\nfrom the referencing Route, the Route MUST be considered successfully\\nattached. If no Gateway listeners accept attachment from this Route,\\nthe Route MUST be considered detached from the Gateway.\\n\\n\\nSupport: Extended\",\"format\":\"int32\",\"maximum\":65535,\"minimum\":1,\"type\":\"integer\"},\"sectionName\":{\"description\":\"SectionName is the name of a section within the target resource. In the\\nfollowing resources, SectionName is interpreted as the following:\\n\\n\\n* Gateway: Listener name. When both Port (experimental) and SectionName\\nare specified, the name and port of the selected listener must match\\nboth specified values.\\n* Service: Port name. When both Port (experimental) and SectionName\\nare specified, the name and port of the selected listener must match\\nboth specified values.\\n\\n\\nImplementations MAY choose to support attaching Routes to other resources.\\nIf that is the case, they MUST clearly document how SectionName is\\ninterpreted.\\n\\n\\nWhen unspecified (empty string), this will reference the entire resource.\\nFor the purpose of status, an attachment is considered successful if at\\nleast one section in the parent resource accepts it. For example, Gateway\\nlisteners can restrict which Routes can attach to them by Route kind,\\nnamespace, or hostname. If 1 of 2 Gateway listeners accept attachment from\\nthe referencing Route, the Route MUST be considered successfully\\nattached. If no Gateway listeners accept attachment from this Route, the\\nRoute MUST be considered detached from the Gateway.\\n\\n\\nSupport: Core\",\"maxLength\":253,\"minLength\":1,\"pattern\":\"^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$\",\"type\":\"string\"}},\"required\":[\"name\"],\"type\":\"object\"},\"type\":\"array\"},\"serviceType\":{\"description\":\"Optional service type for Kubernetes solver service. Supported values\\nare NodePort or ClusterIP. If unset, defaults to NodePort.\",\"type\":\"string\"}},\"type\":\"object\"},\"ingress\":{\"description\":\"The ingress based HTTP01 challenge solver will solve challenges by\\ncreating or modifying Ingress resources in order to route requests for\\n'/.well-known/acme-challenge/XYZ' to 'challenge solver' pods that are\\nprovisioned by cert-manager for each Challenge to be completed.\",\"properties\":{\"class\":{\"description\":\"This field configures the annotation `kubernetes.io/ingress.class` when\\ncreating Ingress resources to solve ACME challenges that use this\\nchallenge solver. Only one of `class`, `name` or `ingressClassName` may\\nbe specified.\",\"type\":\"string\"},\"ingressClassName\":{\"description\":\"This field configures the field `ingressClassName` on the created Ingress\\nresources used to solve ACME challenges that use this challenge solver.\\nThis is the recommended way of configuring the ingress class. Only one of\\n`class`, `name` or `ingressClassName` may be specified.\",\"type\":\"string\"},\"ingressTemplate\":{\"description\":\"Optional ingress template used to configure the ACME challenge solver\\ningress used for HTTP01 challenges.\",\"properties\":{\"metadata\":{\"description\":\"ObjectMeta overrides for the ingress used to solve HTTP01 challenges.\\nOnly the 'labels' and 'annotations' fields may be set.\\nIf labels or annotations overlap with in-built values, the values here\\nwill override the in-built values.\",\"properties\":{\"annotations\":{\"additionalProperties\":{\"type\":\"string\"},\"description\":\"Annotations that should be added to the created ACME HTTP01 solver ingress.\",\"type\":\"object\"},\"labels\":{\"additionalProperties\":{\"type\":\"string\"},\"description\":\"Labels that should be added to the created ACME HTTP01 solver ingress.\",\"type\":\"object\"}},\"type\":\"object\"}},\"type\":\"object\"},\"name\":{\"description\":\"The name of the ingress resource that should have ACME challenge solving\\nroutes inserted into it in order to solve HTTP01 challenges.\\nThis is typically used in conjunction with ingress controllers like\\ningress-gce, which maintains a 1:1 mapping between external IPs and\\ningress resources. Only one of `class`, `name` or `ingressClassName` may\\nbe specified.\",\"type\":\"string\"},\"podTemplate\":{\"description\":\"Optional pod template used to configure the ACME challenge solver pods\\nused for HTTP01 challenges.\",\"properties\":{\"metadata\":{\"description\":\"ObjectMeta overrides for the pod used to solve HTTP01 challenges.\\nOnly the 'labels' and 'annotations' fields may be set.\\nIf labels or annotations overlap with in-built values, the values here\\nwill override the in-built values.\",\"properties\":{\"annotations\":{\"additionalProperties\":{\"type\":\"string\"},\"description\":\"Annotations that should be added to the create ACME HTTP01 solver pods.\",\"type\":\"object\"},\"labels\":{\"additionalProperties\":{\"type\":\"string\"},\"description\":\"Labels that should be added to the created ACME HTTP01 solver pods.\",\"type\":\"object\"}},\"type\":\"object\"},\"spec\":{\"description\":\"PodSpec defines overrides for the HTTP01 challenge solver pod.\\nCheck ACMEChallengeSolverHTTP01IngressPodSpec to find out currently supported fields.\\nAll other fields will be ignored.\",\"properties\":{\"affinity\":{\"description\":\"If specified, the pod's scheduling constraints\",\"properties\":{\"nodeAffinity\":{\"description\":\"Describes node affinity scheduling rules for the pod.\",\"properties\":{\"preferredDuringSchedulingIgnoredDuringExecution\":{\"description\":\"The scheduler will prefer to schedule pods to nodes that satisfy\\nthe affinity expressions specified by this field, but it may choose\\na node that violates one or more of the expressions. The node that is\\nmost preferred is the one with the greatest sum of weights, i.e.\\nfor each node that meets all of the scheduling requirements (resource\\nrequest, requiredDuringScheduling affinity expressions, etc.),\\ncompute a sum by iterating through the elements of this field and adding\\n\\\"weight\\\" to the sum if the node matches the corresponding matchExpressions; the\\nnode(s) with the highest sum are the most preferred.\",\"items\":{\"description\":\"An empty preferred scheduling term matches all objects with implicit weight 0\\n(i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).\",\"properties\":{\"preference\":{\"description\":\"A node selector term, associated with the corresponding weight.\",\"properties\":{\"matchExpressions\":{\"description\":\"A list of node selector requirements by node's labels.\",\"items\":{\"description\":\"A node selector requirement is a selector that contains values, a key, and an operator\\nthat relates the key and values.\",\"properties\":{\"key\":{\"description\":\"The label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"Represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.\",\"type\":\"string\"},\"values\":{\"description\":\"An array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. If the operator is Gt or Lt, the values\\narray must have a single element, which will be interpreted as an integer.\\nThis array is replaced during a strategic merge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"matchFields\":{\"description\":\"A list of node selector requirements by node's fields.\",\"items\":{\"description\":\"A node selector requirement is a selector that contains values, a key, and an operator\\nthat relates the key and values.\",\"properties\":{\"key\":{\"description\":\"The label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"Represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.\",\"type\":\"string\"},\"values\":{\"description\":\"An array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. If the operator is Gt or Lt, the values\\narray must have a single element, which will be interpreted as an integer.\\nThis array is replaced during a strategic merge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"type\":\"object\",\"x-kubernetes-map-type\":\"atomic\"},\"weight\":{\"description\":\"Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.\",\"format\":\"int32\",\"type\":\"integer\"}},\"required\":[\"preference\",\"weight\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"requiredDuringSchedulingIgnoredDuringExecution\":{\"description\":\"If the affinity requirements specified by this field are not met at\\nscheduling time, the pod will not be scheduled onto the node.\\nIf the affinity requirements specified by this field cease to be met\\nat some point during pod execution (e.g. due to an update), the system\\nmay or may not try to eventually evict the pod from its node.\",\"properties\":{\"nodeSelectorTerms\":{\"description\":\"Required. A list of node selector terms. The terms are ORed.\",\"items\":{\"description\":\"A null or empty node selector term matches no objects. The requirements of\\nthem are ANDed.\\nThe TopologySelectorTerm type implements a subset of the NodeSelectorTerm.\",\"properties\":{\"matchExpressions\":{\"description\":\"A list of node selector requirements by node's labels.\",\"items\":{\"description\":\"A node selector requirement is a selector that contains values, a key, and an operator\\nthat relates the key and values.\",\"properties\":{\"key\":{\"description\":\"The label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"Represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.\",\"type\":\"string\"},\"values\":{\"description\":\"An array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. If the operator is Gt or Lt, the values\\narray must have a single element, which will be interpreted as an integer.\\nThis array is replaced during a strategic merge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"matchFields\":{\"description\":\"A list of node selector requirements by node's fields.\",\"items\":{\"description\":\"A node selector requirement is a selector that contains values, a key, and an operator\\nthat relates the key and values.\",\"properties\":{\"key\":{\"description\":\"The label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"Represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.\",\"type\":\"string\"},\"values\":{\"description\":\"An array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. If the operator is Gt or Lt, the values\\narray must have a single element, which will be interpreted as an integer.\\nThis array is replaced during a strategic merge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"type\":\"object\",\"x-kubernetes-map-type\":\"atomic\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"nodeSelectorTerms\"],\"type\":\"object\",\"x-kubernetes-map-type\":\"atomic\"}},\"type\":\"object\"},\"podAffinity\":{\"description\":\"Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).\",\"properties\":{\"preferredDuringSchedulingIgnoredDuringExecution\":{\"description\":\"The scheduler will prefer to schedule pods to nodes that satisfy\\nthe affinity expressions specified by this field, but it may choose\\na node that violates one or more of the expressions. The node that is\\nmost preferred is the one with the greatest sum of weights, i.e.\\nfor each node that meets all of the scheduling requirements (resource\\nrequest, requiredDuringScheduling affinity expressions, etc.),\\ncompute a sum by iterating through the elements of this field and adding\\n\\\"weight\\\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the\\nnode(s) with the highest sum are the most preferred.\",\"items\":{\"description\":\"The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)\",\"properties\":{\"podAffinityTerm\":{\"description\":\"Required. A pod affinity term, associated with the corresponding weight.\",\"properties\":{\"labelSelector\":{\"description\":\"A label query over a set of resources, in this case pods.\\nIf it's null, this PodAffinityTerm matches with no Pods.\",\"properties\":{\"matchExpressions\":{\"description\":\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\",\"items\":{\"description\":\"A label selector requirement is a selector that contains values, a key, and an operator that\\nrelates the key and values.\",\"properties\":{\"key\":{\"description\":\"key is the label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"operator represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists and DoesNotExist.\",\"type\":\"string\"},\"values\":{\"description\":\"values is an array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. This array is replaced during a strategic\\nmerge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"matchLabels\":{\"additionalProperties\":{\"type\":\"string\"},\"description\":\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\\nmap is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the\\noperator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\",\"type\":\"object\"}},\"type\":\"object\",\"x-kubernetes-map-type\":\"atomic\"},\"matchLabelKeys\":{\"description\":\"MatchLabelKeys is a set of pod label keys to select which pods will\\nbe taken into consideration. The keys are used to lookup values from the\\nincoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`\\nto select the group of existing pods which pods will be taken into consideration\\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\\npod labels will be ignored. The default value is empty.\\nThe same key is forbidden to exist in both matchLabelKeys and labelSelector.\\nAlso, matchLabelKeys cannot be set when labelSelector isn't set.\\nThis is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"mismatchLabelKeys\":{\"description\":\"MismatchLabelKeys is a set of pod label keys to select which pods will\\nbe taken into consideration. The keys are used to lookup values from the\\nincoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`\\nto select the group of existing pods which pods will be taken into consideration\\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\\npod labels will be ignored. The default value is empty.\\nThe same key is forbidden to exist in both mismatchLabelKeys and labelSelector.\\nAlso, mismatchLabelKeys cannot be set when labelSelector isn't set.\\nThis is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"namespaceSelector\":{\"description\":\"A label query over the set of namespaces that the term applies to.\\nThe term is applied to the union of the namespaces selected by this field\\nand the ones listed in the namespaces field.\\nnull selector and null or empty namespaces list means \\\"this pod's namespace\\\".\\nAn empty selector ({}) matches all namespaces.\",\"properties\":{\"matchExpressions\":{\"description\":\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\",\"items\":{\"description\":\"A label selector requirement is a selector that contains values, a key, and an operator that\\nrelates the key and values.\",\"properties\":{\"key\":{\"description\":\"key is the label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"operator represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists and DoesNotExist.\",\"type\":\"string\"},\"values\":{\"description\":\"values is an array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. This array is replaced during a strategic\\nmerge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"matchLabels\":{\"additionalProperties\":{\"type\":\"string\"},\"description\":\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\\nmap is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the\\noperator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\",\"type\":\"object\"}},\"type\":\"object\",\"x-kubernetes-map-type\":\"atomic\"},\"namespaces\":{\"description\":\"namespaces specifies a static list of namespace names that the term applies to.\\nThe term is applied to the union of the namespaces listed in this field\\nand the ones selected by namespaceSelector.\\nnull or empty namespaces list and null namespaceSelector means \\\"this pod's namespace\\\".\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"topologyKey\":{\"description\":\"This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching\\nthe labelSelector in the specified namespaces, where co-located is defined as running on a node\\nwhose value of the label with key topologyKey matches that of any node on which any of the\\nselected pods is running.\\nEmpty topologyKey is not allowed.\",\"type\":\"string\"}},\"required\":[\"topologyKey\"],\"type\":\"object\"},\"weight\":{\"description\":\"weight associated with matching the corresponding podAffinityTerm,\\nin the range 1-100.\",\"format\":\"int32\",\"type\":\"integer\"}},\"required\":[\"podAffinityTerm\",\"weight\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"requiredDuringSchedulingIgnoredDuringExecution\":{\"description\":\"If the affinity requirements specified by this field are not met at\\nscheduling time, the pod will not be scheduled onto the node.\\nIf the affinity requirements specified by this field cease to be met\\nat some point during pod execution (e.g. due to a pod label update), the\\nsystem may or may not try to eventually evict the pod from its node.\\nWhen there are multiple elements, the lists of nodes corresponding to each\\npodAffinityTerm are intersected, i.e. all terms must be satisfied.\",\"items\":{\"description\":\"Defines a set of pods (namely those matching the labelSelector\\nrelative to the given namespace(s)) that this pod should be\\nco-located (affinity) or not co-located (anti-affinity) with,\\nwhere co-located is defined as running on a node whose value of\\nthe label with key \\u003ctopologyKey\\u003e matches that of any node on which\\na pod of the set of pods is running\",\"properties\":{\"labelSelector\":{\"description\":\"A label query over a set of resources, in this case pods.\\nIf it's null, this PodAffinityTerm matches with no Pods.\",\"properties\":{\"matchExpressions\":{\"description\":\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\",\"items\":{\"description\":\"A label selector requirement is a selector that contains values, a key, and an operator that\\nrelates the key and values.\",\"properties\":{\"key\":{\"description\":\"key is the label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"operator represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists and DoesNotExist.\",\"type\":\"string\"},\"values\":{\"description\":\"values is an array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. This array is replaced during a strategic\\nmerge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"matchLabels\":{\"additionalProperties\":{\"type\":\"string\"},\"description\":\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\\nmap is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the\\noperator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\",\"type\":\"object\"}},\"type\":\"object\",\"x-kubernetes-map-type\":\"atomic\"},\"matchLabelKeys\":{\"description\":\"MatchLabelKeys is a set of pod label keys to select which pods will\\nbe taken into consideration. The keys are used to lookup values from the\\nincoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`\\nto select the group of existing pods which pods will be taken into consideration\\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\\npod labels will be ignored. The default value is empty.\\nThe same key is forbidden to exist in both matchLabelKeys and labelSelector.\\nAlso, matchLabelKeys cannot be set when labelSelector isn't set.\\nThis is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"mismatchLabelKeys\":{\"description\":\"MismatchLabelKeys is a set of pod label keys to select which pods will\\nbe taken into consideration. The keys are used to lookup values from the\\nincoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`\\nto select the group of existing pods which pods will be taken into consideration\\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\\npod labels will be ignored. The default value is empty.\\nThe same key is forbidden to exist in both mismatchLabelKeys and labelSelector.\\nAlso, mismatchLabelKeys cannot be set when labelSelector isn't set.\\nThis is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"namespaceSelector\":{\"description\":\"A label query over the set of namespaces that the term applies to.\\nThe term is applied to the union of the namespaces selected by this field\\nand the ones listed in the namespaces field.\\nnull selector and null or empty namespaces list means \\\"this pod's namespace\\\".\\nAn empty selector ({}) matches all namespaces.\",\"properties\":{\"matchExpressions\":{\"description\":\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\",\"items\":{\"description\":\"A label selector requirement is a selector that contains values, a key, and an operator that\\nrelates the key and values.\",\"properties\":{\"key\":{\"description\":\"key is the label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"operator represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists and DoesNotExist.\",\"type\":\"string\"},\"values\":{\"description\":\"values is an array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. This array is replaced during a strategic\\nmerge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"matchLabels\":{\"additionalProperties\":{\"type\":\"string\"},\"description\":\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\\nmap is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the\\noperator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\",\"type\":\"object\"}},\"type\":\"object\",\"x-kubernetes-map-type\":\"atomic\"},\"namespaces\":{\"description\":\"namespaces specifies a static list of namespace names that the term applies to.\\nThe term is applied to the union of the namespaces listed in this field\\nand the ones selected by namespaceSelector.\\nnull or empty namespaces list and null namespaceSelector means \\\"this pod's namespace\\\".\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"topologyKey\":{\"description\":\"This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching\\nthe labelSelector in the specified namespaces, where co-located is defined as running on a node\\nwhose value of the label with key topologyKey matches that of any node on which any of the\\nselected pods is running.\\nEmpty topologyKey is not allowed.\",\"type\":\"string\"}},\"required\":[\"topologyKey\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"type\":\"object\"},\"podAntiAffinity\":{\"description\":\"Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).\",\"properties\":{\"preferredDuringSchedulingIgnoredDuringExecution\":{\"description\":\"The scheduler will prefer to schedule pods to nodes that satisfy\\nthe anti-affinity expressions specified by this field, but it may choose\\na node that violates one or more of the expressions. The node that is\\nmost preferred is the one with the greatest sum of weights, i.e.\\nfor each node that meets all of the scheduling requirements (resource\\nrequest, requiredDuringScheduling anti-affinity expressions, etc.),\\ncompute a sum by iterating through the elements of this field and adding\\n\\\"weight\\\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the\\nnode(s) with the highest sum are the most preferred.\",\"items\":{\"description\":\"The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)\",\"properties\":{\"podAffinityTerm\":{\"description\":\"Required. A pod affinity term, associated with the corresponding weight.\",\"properties\":{\"labelSelector\":{\"description\":\"A label query over a set of resources, in this case pods.\\nIf it's null, this PodAffinityTerm matches with no Pods.\",\"properties\":{\"matchExpressions\":{\"description\":\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\",\"items\":{\"description\":\"A label selector requirement is a selector that contains values, a key, and an operator that\\nrelates the key and values.\",\"properties\":{\"key\":{\"description\":\"key is the label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"operator represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists and DoesNotExist.\",\"type\":\"string\"},\"values\":{\"description\":\"values is an array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. This array is replaced during a strategic\\nmerge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"matchLabels\":{\"additionalProperties\":{\"type\":\"string\"},\"description\":\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\\nmap is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the\\noperator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\",\"type\":\"object\"}},\"type\":\"object\",\"x-kubernetes-map-type\":\"atomic\"},\"matchLabelKeys\":{\"description\":\"MatchLabelKeys is a set of pod label keys to select which pods will\\nbe taken into consideration. The keys are used to lookup values from the\\nincoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`\\nto select the group of existing pods which pods will be taken into consideration\\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\\npod labels will be ignored. The default value is empty.\\nThe same key is forbidden to exist in both matchLabelKeys and labelSelector.\\nAlso, matchLabelKeys cannot be set when labelSelector isn't set.\\nThis is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"mismatchLabelKeys\":{\"description\":\"MismatchLabelKeys is a set of pod label keys to select which pods will\\nbe taken into consideration. The keys are used to lookup values from the\\nincoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`\\nto select the group of existing pods which pods will be taken into consideration\\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\\npod labels will be ignored. The default value is empty.\\nThe same key is forbidden to exist in both mismatchLabelKeys and labelSelector.\\nAlso, mismatchLabelKeys cannot be set when labelSelector isn't set.\\nThis is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"namespaceSelector\":{\"description\":\"A label query over the set of namespaces that the term applies to.\\nThe term is applied to the union of the namespaces selected by this field\\nand the ones listed in the namespaces field.\\nnull selector and null or empty namespaces list means \\\"this pod's namespace\\\".\\nAn empty selector ({}) matches all namespaces.\",\"properties\":{\"matchExpressions\":{\"description\":\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\",\"items\":{\"description\":\"A label selector requirement is a selector that contains values, a key, and an operator that\\nrelates the key and values.\",\"properties\":{\"key\":{\"description\":\"key is the label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"operator represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists and DoesNotExist.\",\"type\":\"string\"},\"values\":{\"description\":\"values is an array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. This array is replaced during a strategic\\nmerge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"matchLabels\":{\"additionalProperties\":{\"type\":\"string\"},\"description\":\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\\nmap is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the\\noperator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\",\"type\":\"object\"}},\"type\":\"object\",\"x-kubernetes-map-type\":\"atomic\"},\"namespaces\":{\"description\":\"namespaces specifies a static list of namespace names that the term applies to.\\nThe term is applied to the union of the namespaces listed in this field\\nand the ones selected by namespaceSelector.\\nnull or empty namespaces list and null namespaceSelector means \\\"this pod's namespace\\\".\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"topologyKey\":{\"description\":\"This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching\\nthe labelSelector in the specified namespaces, where co-located is defined as running on a node\\nwhose value of the label with key topologyKey matches that of any node on which any of the\\nselected pods is running.\\nEmpty topologyKey is not allowed.\",\"type\":\"string\"}},\"required\":[\"topologyKey\"],\"type\":\"object\"},\"weight\":{\"description\":\"weight associated with matching the corresponding podAffinityTerm,\\nin the range 1-100.\",\"format\":\"int32\",\"type\":\"integer\"}},\"required\":[\"podAffinityTerm\",\"weight\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"requiredDuringSchedulingIgnoredDuringExecution\":{\"description\":\"If the anti-affinity requirements specified by this field are not met at\\nscheduling time, the pod will not be scheduled onto the node.\\nIf the anti-affinity requirements specified by this field cease to be met\\nat some point during pod execution (e.g. due to a pod label update), the\\nsystem may or may not try to eventually evict the pod from its node.\\nWhen there are multiple elements, the lists of nodes corresponding to each\\npodAffinityTerm are intersected, i.e. all terms must be satisfied.\",\"items\":{\"description\":\"Defines a set of pods (namely those matching the labelSelector\\nrelative to the given namespace(s)) that this pod should be\\nco-located (affinity) or not co-located (anti-affinity) with,\\nwhere co-located is defined as running on a node whose value of\\nthe label with key \\u003ctopologyKey\\u003e matches that of any node on which\\na pod of the set of pods is running\",\"properties\":{\"labelSelector\":{\"description\":\"A label query over a set of resources, in this case pods.\\nIf it's null, this PodAffinityTerm matches with no Pods.\",\"properties\":{\"matchExpressions\":{\"description\":\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\",\"items\":{\"description\":\"A label selector requirement is a selector that contains values, a key, and an operator that\\nrelates the key and values.\",\"properties\":{\"key\":{\"description\":\"key is the label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"operator represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists and DoesNotExist.\",\"type\":\"string\"},\"values\":{\"description\":\"values is an array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. This array is replaced during a strategic\\nmerge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"matchLabels\":{\"additionalProperties\":{\"type\":\"string\"},\"description\":\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\\nmap is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the\\noperator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\",\"type\":\"object\"}},\"type\":\"object\",\"x-kubernetes-map-type\":\"atomic\"},\"matchLabelKeys\":{\"description\":\"MatchLabelKeys is a set of pod label keys to select which pods will\\nbe taken into consideration. The keys are used to lookup values from the\\nincoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`\\nto select the group of existing pods which pods will be taken into consideration\\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\\npod labels will be ignored. The default value is empty.\\nThe same key is forbidden to exist in both matchLabelKeys and labelSelector.\\nAlso, matchLabelKeys cannot be set when labelSelector isn't set.\\nThis is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"mismatchLabelKeys\":{\"description\":\"MismatchLabelKeys is a set of pod label keys to select which pods will\\nbe taken into consideration. The keys are used to lookup values from the\\nincoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`\\nto select the group of existing pods which pods will be taken into consideration\\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\\npod labels will be ignored. The default value is empty.\\nThe same key is forbidden to exist in both mismatchLabelKeys and labelSelector.\\nAlso, mismatchLabelKeys cannot be set when labelSelector isn't set.\\nThis is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"namespaceSelector\":{\"description\":\"A label query over the set of namespaces that the term applies to.\\nThe term is applied to the union of the namespaces selected by this field\\nand the ones listed in the namespaces field.\\nnull selector and null or empty namespaces list means \\\"this pod's namespace\\\".\\nAn empty selector ({}) matches all namespaces.\",\"properties\":{\"matchExpressions\":{\"description\":\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\",\"items\":{\"description\":\"A label selector requirement is a selector that contains values, a key, and an operator that\\nrelates the key and values.\",\"properties\":{\"key\":{\"description\":\"key is the label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"operator represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists and DoesNotExist.\",\"type\":\"string\"},\"values\":{\"description\":\"values is an array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. This array is replaced during a strategic\\nmerge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"matchLabels\":{\"additionalProperties\":{\"type\":\"string\"},\"description\":\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\\nmap is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the\\noperator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\",\"type\":\"object\"}},\"type\":\"object\",\"x-kubernetes-map-type\":\"atomic\"},\"namespaces\":{\"description\":\"namespaces specifies a static list of namespace names that the term applies to.\\nThe term is applied to the union of the namespaces listed in this field\\nand the ones selected by namespaceSelector.\\nnull or empty namespaces list and null namespaceSelector means \\\"this pod's namespace\\\".\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"topologyKey\":{\"description\":\"This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching\\nthe labelSelector in the specified namespaces, where co-located is defined as running on a node\\nwhose value of the label with key topologyKey matches that of any node on which any of the\\nselected pods is running.\\nEmpty topologyKey is not allowed.\",\"type\":\"string\"}},\"required\":[\"topologyKey\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"type\":\"object\"}},\"type\":\"object\"},\"imagePullSecrets\":{\"description\":\"If specified, the pod's imagePullSecrets\",\"items\":{\"description\":\"LocalObjectReference contains enough information to let you locate the\\nreferenced object inside the same namespace.\",\"properties\":{\"name\":{\"default\":\"\",\"description\":\"Name of the referent.\\nThis field is effectively required, but due to backwards compatibility is\\nallowed to be empty. Instances of this type with an empty value here are\\nalmost certainly wrong.\\nTODO: Add other useful fields. apiVersion, kind, uid?\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\\nTODO: Drop `kubebuilder:default` when controller-gen doesn't need it https://github.com/kubernetes-sigs/kubebuilder/issues/3896.\",\"type\":\"string\"}},\"type\":\"object\",\"x-kubernetes-map-type\":\"atomic\"},\"type\":\"array\"},\"nodeSelector\":{\"additionalProperties\":{\"type\":\"string\"},\"description\":\"NodeSelector is a selector which must be true for the pod to fit on a node.\\nSelector which must match a node's labels for the pod to be scheduled on that node.\\nMore info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/\",\"type\":\"object\"},\"priorityClassName\":{\"description\":\"If specified, the pod's priorityClassName.\",\"type\":\"string\"},\"serviceAccountName\":{\"description\":\"If specified, the pod's service account\",\"type\":\"string\"},\"tolerations\":{\"description\":\"If specified, the pod's tolerations.\",\"items\":{\"description\":\"The pod this Toleration is attached to tolerates any taint that matches\\nthe triple \\u003ckey,value,effect\\u003e using the matching operator \\u003coperator\\u003e.\",\"properties\":{\"effect\":{\"description\":\"Effect indicates the taint effect to match. Empty means match all taint effects.\\nWhen specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.\",\"type\":\"string\"},\"key\":{\"description\":\"Key is the taint key that the toleration applies to. Empty means match all taint keys.\\nIf the key is empty, operator must be Exists; this combination means to match all values and all keys.\",\"type\":\"string\"},\"operator\":{\"description\":\"Operator represents a key's relationship to the value.\\nValid operators are Exists and Equal. Defaults to Equal.\\nExists is equivalent to wildcard for value, so that a pod can\\ntolerate all taints of a particular category.\",\"type\":\"string\"},\"tolerationSeconds\":{\"description\":\"TolerationSeconds represents the period of time the toleration (which must be\\nof effect NoExecute, otherwise this field is ignored) tolerates the taint. By default,\\nit is not set, which means tolerate the taint forever (do not evict). Zero and\\nnegative values will be treated as 0 (evict immediately) by the system.\",\"format\":\"int64\",\"type\":\"integer\"},\"value\":{\"description\":\"Value is the taint value the toleration matches to.\\nIf the operator is Exists, the value should be empty, otherwise just a regular string.\",\"type\":\"string\"}},\"type\":\"object\"},\"type\":\"array\"}},\"type\":\"object\"}},\"type\":\"object\"},\"serviceType\":{\"description\":\"Optional service type for Kubernetes solver service. Supported values\\nare NodePort or ClusterIP. If unset, defaults to NodePort.\",\"type\":\"string\"}},\"type\":\"object\"}},\"type\":\"object\"},\"selector\":{\"description\":\"Selector selects a set of DNSNames on the Certificate resource that\\nshould be solved using this challenge solver.\\nIf not specified, the solver will be treated as the 'default' solver\\nwith the lowest priority, i.e. if any other solver has a more specific\\nmatch, it will be used instead.\",\"properties\":{\"dnsNames\":{\"description\":\"List of DNSNames that this solver will be used to solve.\\nIf specified and a match is found, a dnsNames selector will take\\nprecedence over a dnsZones selector.\\nIf multiple solvers match with the same dnsNames value, the solver\\nwith the most matching labels in matchLabels will be selected.\\nIf neither has more matches, the solver defined earlier in the list\\nwill be selected.\",\"items\":{\"type\":\"string\"},\"type\":\"array\"},\"dnsZones\":{\"description\":\"List of DNSZones that this solver will be used to solve.\\nThe most specific DNS zone match specified here will take precedence\\nover other DNS zone matches, so a solver specifying sys.example.com\\nwill be selected over one specifying example.com for the domain\\nwww.sys.example.com.\\nIf multiple solvers match with the same dnsZones value, the solver\\nwith the most matching labels in matchLabels will be selected.\\nIf neither has more matches, the solver defined earlier in the list\\nwill be selected.\",\"items\":{\"type\":\"string\"},\"type\":\"array\"},\"matchLabels\":{\"additionalProperties\":{\"type\":\"string\"},\"description\":\"A label selector that is used to refine the set of certificate's that\\nthis challenge solver will apply to.\",\"type\":\"object\"}},\"type\":\"object\"}},\"type\":\"object\"},\"type\":\"array\"}},\"required\":[\"privateKeySecretRef\",\"server\"],\"type\":\"object\"},\"ca\":{\"description\":\"CA configures this issuer to sign certificates using a signing CA keypair\\nstored in a Secret resource.\\nThis is used to build internal PKIs that are managed by cert-manager.\",\"properties\":{\"crlDistributionPoints\":{\"description\":\"The CRL distribution points is an X.509 v3 certificate extension which identifies\\nthe location of the CRL from which the revocation of this certificate can be checked.\\nIf not set, certificates will be issued without distribution points set.\",\"items\":{\"type\":\"string\"},\"type\":\"array\"},\"issuingCertificateURLs\":{\"description\":\"IssuingCertificateURLs is a list of URLs which this issuer should embed into certificates\\nit creates. See https://www.rfc-editor.org/rfc/rfc5280#section-4.2.2.1 for more details.\\nAs an example, such a URL might be \\\"http://ca.domain.com/ca.crt\\\".\",\"items\":{\"type\":\"string\"},\"type\":\"array\"},\"ocspServers\":{\"description\":\"The OCSP server list is an X.509 v3 extension that defines a list of\\nURLs of OCSP responders. The OCSP responders can be queried for the\\nrevocation status of an issued certificate. If not set, the\\ncertificate will be issued with no OCSP servers set. For example, an\\nOCSP server URL could be \\\"http://ocsp.int-x3.letsencrypt.org\\\".\",\"items\":{\"type\":\"string\"},\"type\":\"array\"},\"secretName\":{\"description\":\"SecretName is the name of the secret used to sign Certificates issued\\nby this Issuer.\",\"type\":\"string\"}},\"required\":[\"secretName\"],\"type\":\"object\"},\"selfSigned\":{\"description\":\"SelfSigned configures this issuer to 'self sign' certificates using the\\nprivate key used to create the CertificateRequest object.\",\"properties\":{\"crlDistributionPoints\":{\"description\":\"The CRL distribution points is an X.509 v3 certificate extension which identifies\\nthe location of the CRL from which the revocation of this certificate can be checked.\\nIf not set certificate will be issued without CDP. Values are strings.\",\"items\":{\"type\":\"string\"},\"type\":\"array\"}},\"type\":\"object\"},\"vault\":{\"description\":\"Vault configures this issuer to sign certificates using a HashiCorp Vault\\nPKI backend.\",\"properties\":{\"auth\":{\"description\":\"Auth configures how cert-manager authenticates with the Vault server.\",\"properties\":{\"appRole\":{\"description\":\"AppRole authenticates with Vault using the App Role auth mechanism,\\nwith the role and secret stored in a Kubernetes Secret resource.\",\"properties\":{\"path\":{\"description\":\"Path where the App Role authentication backend is mounted in Vault, e.g:\\n\\\"approle\\\"\",\"type\":\"string\"},\"roleId\":{\"description\":\"RoleID configured in the App Role authentication backend when setting\\nup the authentication backend in Vault.\",\"type\":\"string\"},\"secretRef\":{\"description\":\"Reference to a key in a Secret that contains the App Role secret used\\nto authenticate with Vault.\\nThe `key` field must be specified and denotes which entry within the Secret\\nresource is used as the app role secret.\",\"properties\":{\"key\":{\"description\":\"The key of the entry in the Secret resource's `data` field to be used.\\nSome instances of this field may be defaulted, in others it may be\\nrequired.\",\"type\":\"string\"},\"name\":{\"description\":\"Name of the resource being referred to.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\",\"type\":\"string\"}},\"required\":[\"name\"],\"type\":\"object\"}},\"required\":[\"path\",\"roleId\",\"secretRef\"],\"type\":\"object\"},\"kubernetes\":{\"description\":\"Kubernetes authenticates with Vault by passing the ServiceAccount\\ntoken stored in the named Secret resource to the Vault server.\",\"properties\":{\"mountPath\":{\"description\":\"The Vault mountPath here is the mount path to use when authenticating with\\nVault. For example, setting a value to `/v1/auth/foo`, will use the path\\n`/v1/auth/foo/login` to authenticate with Vault. If unspecified, the\\ndefault value \\\"/v1/auth/kubernetes\\\" will be used.\",\"type\":\"string\"},\"role\":{\"description\":\"A required field containing the Vault Role to assume. A Role binds a\\nKubernetes ServiceAccount with a set of Vault policies.\",\"type\":\"string\"},\"secretRef\":{\"description\":\"The required Secret field containing a Kubernetes ServiceAccount JWT used\\nfor authenticating with Vault. Use of 'ambient credentials' is not\\nsupported.\",\"properties\":{\"key\":{\"description\":\"The key of the entry in the Secret resource's `data` field to be used.\\nSome instances of this field may be defaulted, in others it may be\\nrequired.\",\"type\":\"string\"},\"name\":{\"description\":\"Name of the resource being referred to.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\",\"type\":\"string\"}},\"required\":[\"name\"],\"type\":\"object\"},\"serviceAccountRef\":{\"description\":\"A reference to a service account that will be used to request a bound\\ntoken (also known as \\\"projected token\\\"). Compared to using \\\"secretRef\\\",\\nusing this field means that you don't rely on statically bound tokens. To\\nuse this field, you must configure an RBAC rule to let cert-manager\\nrequest a token.\",\"properties\":{\"audiences\":{\"description\":\"TokenAudiences is an optional list of extra audiences to include in the token passed to Vault. The default token\\nconsisting of the issuer's namespace and name is always included.\",\"items\":{\"type\":\"string\"},\"type\":\"array\"},\"name\":{\"description\":\"Name of the ServiceAccount used to request a token.\",\"type\":\"string\"}},\"required\":[\"name\"],\"type\":\"object\"}},\"required\":[\"role\"],\"type\":\"object\"},\"tokenSecretRef\":{\"description\":\"TokenSecretRef authenticates with Vault by presenting a token.\",\"properties\":{\"key\":{\"description\":\"The key of the entry in the Secret resource's `data` field to be used.\\nSome instances of this field may be defaulted, in others it may be\\nrequired.\",\"type\":\"string\"},\"name\":{\"description\":\"Name of the resource being referred to.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\",\"type\":\"string\"}},\"required\":[\"name\"],\"type\":\"object\"}},\"type\":\"object\"},\"caBundle\":{\"description\":\"Base64-encoded bundle of PEM CAs which will be used to validate the certificate\\nchain presented by Vault. Only used if using HTTPS to connect to Vault and\\nignored for HTTP connections.\\nMutually exclusive with CABundleSecretRef.\\nIf neither CABundle nor CABundleSecretRef are defined, the certificate bundle in\\nthe cert-manager controller container is used to validate the TLS connection.\",\"format\":\"byte\",\"type\":\"string\"},\"caBundleSecretRef\":{\"description\":\"Reference to a Secret containing a bundle of PEM-encoded CAs to use when\\nverifying the certificate chain presented by Vault when using HTTPS.\\nMutually exclusive with CABundle.\\nIf neither CABundle nor CABundleSecretRef are defined, the certificate bundle in\\nthe cert-manager controller container is used to validate the TLS connection.\\nIf no key for the Secret is specified, cert-manager will default to 'ca.crt'.\",\"properties\":{\"key\":{\"description\":\"The key of the entry in the Secret resource's `data` field to be used.\\nSome instances of this field may be defaulted, in others it may be\\nrequired.\",\"type\":\"string\"},\"name\":{\"description\":\"Name of the resource being referred to.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\",\"type\":\"string\"}},\"required\":[\"name\"],\"type\":\"object\"},\"clientCertSecretRef\":{\"description\":\"Reference to a Secret containing a PEM-encoded Client Certificate to use when the\\nVault server requires mTLS.\",\"properties\":{\"key\":{\"description\":\"The key of the entry in the Secret resource's `data` field to be used.\\nSome instances of this field may be defaulted, in others it may be\\nrequired.\",\"type\":\"string\"},\"name\":{\"description\":\"Name of the resource being referred to.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\",\"type\":\"string\"}},\"required\":[\"name\"],\"type\":\"object\"},\"clientKeySecretRef\":{\"description\":\"Reference to a Secret containing a PEM-encoded Client Private Key to use when the\\nVault server requires mTLS.\",\"properties\":{\"key\":{\"description\":\"The key of the entry in the Secret resource's `data` field to be used.\\nSome instances of this field may be defaulted, in others it may be\\nrequired.\",\"type\":\"string\"},\"name\":{\"description\":\"Name of the resource being referred to.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\",\"type\":\"string\"}},\"required\":[\"name\"],\"type\":\"object\"},\"namespace\":{\"description\":\"Name of the vault namespace. Namespaces is a set of features within Vault Enterprise that allows Vault environments to support Secure Multi-tenancy. e.g: \\\"ns1\\\"\\nMore about namespaces can be found here https://www.vaultproject.io/docs/enterprise/namespaces\",\"type\":\"string\"},\"path\":{\"description\":\"Path is the mount path of the Vault PKI backend's `sign` endpoint, e.g:\\n\\\"my_pki_mount/sign/my-role-name\\\".\",\"type\":\"string\"},\"server\":{\"description\":\"Server is the connection address for the Vault server, e.g: \\\"https://vault.example.com:8200\\\".\",\"type\":\"string\"}},\"required\":[\"auth\",\"path\",\"server\"],\"type\":\"object\"},\"venafi\":{\"description\":\"Venafi configures this issuer to sign certificates using a Venafi TPP\\nor Venafi Cloud policy zone.\",\"properties\":{\"cloud\":{\"description\":\"Cloud specifies the Venafi cloud configuration settings.\\nOnly one of TPP or Cloud may be specified.\",\"properties\":{\"apiTokenSecretRef\":{\"description\":\"APITokenSecretRef is a secret key selector for the Venafi Cloud API token.\",\"properties\":{\"key\":{\"description\":\"The key of the entry in the Secret resource's `data` field to be used.\\nSome instances of this field may be defaulted, in others it may be\\nrequired.\",\"type\":\"string\"},\"name\":{\"description\":\"Name of the resource being referred to.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\",\"type\":\"string\"}},\"required\":[\"name\"],\"type\":\"object\"},\"url\":{\"description\":\"URL is the base URL for Venafi Cloud.\\nDefaults to \\\"https://api.venafi.cloud/v1\\\".\",\"type\":\"string\"}},\"required\":[\"apiTokenSecretRef\"],\"type\":\"object\"},\"tpp\":{\"description\":\"TPP specifies Trust Protection Platform configuration settings.\\nOnly one of TPP or Cloud may be specified.\",\"properties\":{\"caBundle\":{\"description\":\"Base64-encoded bundle of PEM CAs which will be used to validate the certificate\\nchain presented by the TPP server. Only used if using HTTPS; ignored for HTTP.\\nIf undefined, the certificate bundle in the cert-manager controller container\\nis used to validate the chain.\",\"format\":\"byte\",\"type\":\"string\"},\"credentialsRef\":{\"description\":\"CredentialsRef is a reference to a Secret containing the username and\\npassword for the TPP server.\\nThe secret must contain two keys, 'username' and 'password'.\",\"properties\":{\"name\":{\"description\":\"Name of the resource being referred to.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\",\"type\":\"string\"}},\"required\":[\"name\"],\"type\":\"object\"},\"url\":{\"description\":\"URL is the base URL for the vedsdk endpoint of the Venafi TPP instance,\\nfor example: \\\"https://tpp.example.com/vedsdk\\\".\",\"type\":\"string\"}},\"required\":[\"credentialsRef\",\"url\"],\"type\":\"object\"},\"zone\":{\"description\":\"Zone is the Venafi Policy Zone to use for this issuer.\\nAll requests made to the Venafi platform will be restricted by the named\\nzone policy.\\nThis field is required.\",\"type\":\"string\"}},\"required\":[\"zone\"],\"type\":\"object\"}},\"type\":\"object\"},\"status\":{\"description\":\"Status of the ClusterIssuer. This is set and managed automatically.\",\"properties\":{\"acme\":{\"description\":\"ACME specific status options.\\nThis field should only be set if the Issuer is configured to use an ACME\\nserver to issue certificates.\",\"properties\":{\"lastPrivateKeyHash\":{\"description\":\"LastPrivateKeyHash is a hash of the private key associated with the latest\\nregistered ACME account, in order to track changes made to registered account\\nassociated with the Issuer\",\"type\":\"string\"},\"lastRegisteredEmail\":{\"description\":\"LastRegisteredEmail is the email associated with the latest registered\\nACME account, in order to track changes made to registered account\\nassociated with the  Issuer\",\"type\":\"string\"},\"uri\":{\"description\":\"URI is the unique account identifier, which can also be used to retrieve\\naccount details from the CA\",\"type\":\"string\"}},\"type\":\"object\"},\"conditions\":{\"description\":\"List of status conditions to indicate the status of a CertificateRequest.\\nKnown condition types are `Ready`.\",\"items\":{\"description\":\"IssuerCondition contains condition information for an Issuer.\",\"properties\":{\"lastTransitionTime\":{\"description\":\"LastTransitionTime is the timestamp corresponding to the last status\\nchange of this condition.\",\"format\":\"date-time\",\"type\":\"string\"},\"message\":{\"description\":\"Message is a human readable description of the details of the last\\ntransition, complementing reason.\",\"type\":\"string\"},\"observedGeneration\":{\"description\":\"If set, this represents the .metadata.generation that the condition was\\nset based upon.\\nFor instance, if .metadata.generation is currently 12, but the\\n.status.condition[x].observedGeneration is 9, the condition is out of date\\nwith respect to the current state of the Issuer.\",\"format\":\"int64\",\"type\":\"integer\"},\"reason\":{\"description\":\"Reason is a brief machine readable explanation for the condition's last\\ntransition.\",\"type\":\"string\"},\"status\":{\"description\":\"Status of the condition, one of (`True`, `False`, `Unknown`).\",\"enum\":[\"True\",\"False\",\"Unknown\"],\"type\":\"string\"},\"type\":{\"description\":\"Type of the condition, known values are (`Ready`).\",\"type\":\"string\"}},\"required\":[\"status\",\"type\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-map-keys\":[\"type\"],\"x-kubernetes-list-type\":\"map\"}},\"type\":\"object\"}},\"required\":[\"spec\"],\"type\":\"object\"}},\"served\":true,\"storage\":true,\"subresources\":{\"status\":{}}}]}}\n"
      },
      "served_versions": [
        "v1"
      ],
      "stored_version": "v1",
      "categories": [
        "cert-manager"
      ],
      "short_names": [],
      "description": null,
      "instance_count": 0
    },
    {
      "name": "clusters.postgresql.cnpg.io",
      "group": "postgresql.cnpg.io",
      "version": "v1",
      "kind": "Cluster",
      "plural": "clusters",
      "singular": "cluster",
      "scope": "Namespaced",
      "creation_timestamp": "2025-09-07T09:12:54+00:00",
      "labels": {
        "olm.managed": "true",
        "operators.coreos.com/cloudnative-pg.operators": ""
      },
      "annotations": {
        "controller-gen.kubebuilder.io/version": "v0.18.0",
        "operatorframework.io/installed-alongside-26b2108901275579": "operators/cloudnative-pg.v1.27.0"
      },
      "served_versions": [
        "v1"
      ],
      "stored_version": "v1",
      "categories": [],
      "short_names": [],
      "description": null,
      "instance_count": 0
    },
    {
      "name": "clusterserviceversions.operators.coreos.com",
      "group": "operators.coreos.com",
      "version": "v1alpha1",
      "kind": "ClusterServiceVersion",
      "plural": "clusterserviceversions",
      "singular": "clusterserviceversion",
      "scope": "Namespaced",
      "creation_timestamp": "2025-09-06T12:34:52+00:00",
      "labels": {},
      "annotations": {
        "controller-gen.kubebuilder.io/version": "v0.14.0"
      },
      "served_versions": [
        "v1alpha1"
      ],
      "stored_version": "v1alpha1",
      "categories": [
        "olm"
      ],
      "short_names": [
        "csv",
        "csvs"
      ],
      "description": null,
      "instance_count": 0
    },
    {
      "name": "collaborators.github.kog.krateo.io",
      "group": "github.kog.krateo.io",
      "version": "v1alpha1",
      "kind": "Collaborator",
      "plural": "collaborators",
      "singular": "collaborator",
      "scope": "Namespaced",
      "creation_timestamp": "2025-09-06T10:23:18+00:00",
      "labels": {},
      "annotations": {
        "controller-gen.kubebuilder.io/version": "v0.16.1"
      },
      "served_versions": [
        "v1alpha1"
      ],
      "stored_version": "v1alpha1",
      "categories": [
        "collaborator",
        "restresources",
        "rr"
      ],
      "short_names": [],
      "description": null,
      "instance_count": 0
    },
    {
      "name": "columns.widgets.templates.krateo.io",
      "group": "widgets.templates.krateo.io",
      "version": "v1beta1",
      "kind": "Column",
      "plural": "columns",
      "singular": "column",
      "scope": "Namespaced",
      "creation_timestamp": "2025-09-06T09:46:48+00:00",
      "labels": {},
      "annotations": {
        "controller-gen.kubebuilder.io/version": "v0.16.1"
      },
      "served_versions": [
        "v1beta1"
      ],
      "stored_version": "v1beta1",
      "categories": [
        "widgets",
        "krateo"
      ],
      "short_names": [],
      "description": null,
      "instance_count": 0
    },
    {
      "name": "compositiondefinitions.core.krateo.io",
      "group": "core.krateo.io",
      "version": "v1alpha1",
      "kind": "CompositionDefinition",
      "plural": "compositiondefinitions",
      "singular": "compositiondefinition",
      "scope": "Namespaced",
      "creation_timestamp": "2025-09-06T09:47:04+00:00",
      "labels": {},
      "annotations": {
        "controller-gen.kubebuilder.io/version": "v0.16.5"
      },
      "served_versions": [
        "v1alpha1"
      ],
      "stored_version": "v1alpha1",
      "categories": [
        "krateo",
        "defs",
        "core"
      ],
      "short_names": [],
      "description": null,
      "instance_count": 0
    },
    {
      "name": "compositionreferences.resourcetrees.krateo.io",
      "group": "resourcetrees.krateo.io",
      "version": "v1",
      "kind": "CompositionReference",
      "plural": "compositionreferences",
      "singular": "compositionreference",
      "scope": "Namespaced",
      "creation_timestamp": "2025-09-06T09:46:56+00:00",
      "labels": {},
      "annotations": {
        "controller-gen.kubebuilder.io/version": "v0.14.0"
      },
      "served_versions": [
        "v1"
      ],
      "stored_version": "v1",
      "categories": [
        "krateo"
      ],
      "short_names": [],
      "description": null,
      "instance_count": 2
    },
    {
      "name": "connectclusters.kafka.kubedb.com",
      "group": "kafka.kubedb.com",
      "version": "v1alpha1",
      "kind": "ConnectCluster",
      "plural": "connectclusters",
      "singular": "connectcluster",
      "scope": "Namespaced",
      "creation_timestamp": "2025-09-06T13:34:32+00:00",
      "labels": {
        "app.kubernetes.io/name": "kubedb"
      },
      "annotations": {},
      "served_versions": [
        "v1alpha1"
      ],
      "stored_version": "v1alpha1",
      "categories": [
        "kfstore",
        "kubedb",
        "appscode"
      ],
      "short_names": [
        "kcc"
      ],
      "description": null,
      "instance_count": 0
    },
    {
      "name": "connections.k8s.mariadb.com",
      "group": "k8s.mariadb.com",
      "version": "v1alpha1",
      "kind": "Connection",
      "plural": "connections",
      "singular": "connection",
      "scope": "Namespaced",
      "creation_timestamp": "2025-09-07T09:15:51+00:00",
      "labels": {
        "olm.managed": "true",
        "operators.coreos.com/mariadb-operator.operators": ""
      },
      "annotations": {
        "controller-gen.kubebuilder.io/version": "v0.18.0",
        "operatorframework.io/installed-alongside-6fd75c749733b588": "operators/mariadb-operator.v25.8.3"
      },
      "served_versions": [
        "v1alpha1"
      ],
      "stored_version": "v1alpha1",
      "categories": [],
      "short_names": [
        "cmdb"
      ],
      "description": null,
      "instance_count": 0
    },
    {
      "name": "connectors.kafka.kubedb.com",
      "group": "kafka.kubedb.com",
      "version": "v1alpha1",
      "kind": "Connector",
      "plural": "connectors",
      "singular": "connector",
      "scope": "Namespaced",
      "creation_timestamp": "2025-09-06T13:34:32+00:00",
      "labels": {
        "app.kubernetes.io/name": "kubedb"
      },
      "annotations": {},
      "served_versions": [
        "v1alpha1"
      ],
      "stored_version": "v1alpha1",
      "categories": [
        "kfstore",
        "kubedb",
        "appscode"
      ],
      "short_names": [
        "kc"
      ],
      "description": null,
      "instance_count": 0
    },
    {
      "name": "databaseobservers.observability.oracle.com",
      "group": "observability.oracle.com",
      "version": "v4",
      "kind": "DatabaseObserver",
      "plural": "databaseobservers",
      "singular": "databaseobserver",
      "scope": "Namespaced",
      "creation_timestamp": "2025-09-06T17:41:21+00:00",
      "labels": {
        "olm.managed": "true",
        "operators.coreos.com/oracle-database-operator.operators": ""
      },
      "annotations": {
        "cert-manager.io/inject-ca-from": "oracle-database-operator-system/oracle-database-operator-serving-cert",
        "controller-gen.kubebuilder.io/version": "v0.16.5",
        "operatorframework.io/installed-alongside-f8529ccd93ced1d5": "operators/oracle-database-operator.v1.2.0"
      },
      "served_versions": [
        "v1",
        "v1alpha1",
        "v4"
      ],
      "stored_version": "v4",
      "categories": [],
      "short_names": [
        "dbobserver",
        "dbobservers"
      ],
      "description": null,
      "instance_count": 0
    },
    {
      "name": "databases.k8s.mariadb.com",
      "group": "k8s.mariadb.com",
      "version": "v1alpha1",
      "kind": "Database",
      "plural": "databases",
      "singular": "database",
      "scope": "Namespaced",
      "creation_timestamp": "2025-09-07T09:15:51+00:00",
      "labels": {
        "olm.managed": "true",
        "operators.coreos.com/mariadb-operator.operators": ""
      },
      "annotations": {
        "controller-gen.kubebuilder.io/version": "v0.18.0",
        "operatorframework.io/installed-alongside-6fd75c749733b588": "operators/mariadb-operator.v25.8.3"
      },
      "served_versions": [
        "v1alpha1"
      ],
      "stored_version": "v1alpha1",
      "categories": [],
      "short_names": [
        "dmdb"
      ],
      "description": null,
      "instance_count": 0
    },
    {
      "name": "databases.postgresql.cnpg.io",
      "group": "postgresql.cnpg.io",
      "version": "v1",
      "kind": "Database",
      "plural": "databases",
      "singular": "database",
      "scope": "Namespaced",
      "creation_timestamp": "2025-09-07T09:12:55+00:00",
      "labels": {
        "olm.managed": "true",
        "operators.coreos.com/cloudnative-pg.operators": ""
      },
      "annotations": {
        "controller-gen.kubebuilder.io/version": "v0.18.0",
        "operatorframework.io/installed-alongside-26b2108901275579": "operators/cloudnative-pg.v1.27.0"
      },
      "served_versions": [
        "v1"
      ],
      "stored_version": "v1",
      "categories": [],
      "short_names": [],
      "description": null,
      "instance_count": 0
    },
    {
      "name": "datagrids.widgets.templates.krateo.io",
      "group": "widgets.templates.krateo.io",
      "version": "v1beta1",
      "kind": "DataGrid",
      "plural": "datagrids",
      "singular": "datagrid",
      "scope": "Namespaced",
      "creation_timestamp": "2025-09-06T09:46:48+00:00",
      "labels": {},
      "annotations": {
        "controller-gen.kubebuilder.io/version": "v0.16.1"
      },
      "served_versions": [
        "v1beta1"
      ],
      "stored_version": "v1beta1",
      "categories": [
        "widgets",
        "krateo"
      ],
      "short_names": [],
      "description": null,
      "instance_count": 0
    },
    {
      "name": "dataguardbrokers.database.oracle.com",
      "group": "database.oracle.com",
      "version": "v4",
      "kind": "DataguardBroker",
      "plural": "dataguardbrokers",
      "singular": "dataguardbroker",
      "scope": "Namespaced",
      "creation_timestamp": "2025-09-06T17:41:21+00:00",
      "labels": {
        "olm.managed": "true",
        "operators.coreos.com/oracle-database-operator.operators": ""
      },
      "annotations": {
        "cert-manager.io/inject-ca-from": "oracle-database-operator-system/oracle-database-operator-serving-cert",
        "controller-gen.kubebuilder.io/version": "v0.16.5",
        "operatorframework.io/installed-alongside-f8529ccd93ced1d5": "operators/oracle-database-operator.v1.2.0"
      },
      "served_versions": [
        "v1alpha1",
        "v4"
      ],
      "stored_version": "v4",
      "categories": [],
      "short_names": [],
      "description": null,
      "instance_count": 0
    },
    {
      "name": "dataimportcrons.cdi.kubevirt.io",
      "group": "cdi.kubevirt.io",
      "version": "v1beta1",
      "kind": "DataImportCron",
      "plural": "dataimportcrons",
      "singular": "dataimportcron",
      "scope": "Namespaced",
      "creation_timestamp": "2025-09-06T13:01:11+00:00",
      "labels": {
        "app.kubernetes.io/part-of": "hyperconverged-cluster",
        "app.kubernetes.io/version": "1.17.0",
        "operator.cdi.kubevirt.io/createVersion": "v1.63.0"
      },
      "annotations": {
        "controller-gen.kubebuilder.io/version": "v0.14.0",
        "operator.cdi.kubevirt.io/lastAppliedConfiguration": "{\"kind\":\"CustomResourceDefinition\",\"apiVersion\":\"apiextensions.k8s.io/v1\",\"metadata\":{\"name\":\"dataimportcrons.cdi.kubevirt.io\",\"creationTimestamp\":null,\"annotations\":{\"controller-gen.kubebuilder.io/version\":\"v0.14.0\"}},\"spec\":{\"group\":\"cdi.kubevirt.io\",\"names\":{\"plural\":\"dataimportcrons\",\"singular\":\"dataimportcron\",\"shortNames\":[\"dic\",\"dics\"],\"kind\":\"DataImportCron\",\"listKind\":\"DataImportCronList\",\"categories\":[\"all\"]},\"scope\":\"Namespaced\",\"versions\":[{\"name\":\"v1beta1\",\"served\":true,\"storage\":true,\"schema\":{\"openAPIV3Schema\":{\"description\":\"DataImportCron defines a cron job for recurring polling/importing disk images as PVCs into a golden image namespace\",\"type\":\"object\",\"required\":[\"spec\"],\"properties\":{\"apiVersion\":{\"description\":\"APIVersion defines the versioned schema of this representation of an object.\\nServers should convert recognized schemas to the latest internal value, and\\nmay reject unrecognized values.\\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources\",\"type\":\"string\"},\"kind\":{\"description\":\"Kind is a string value representing the REST resource this object represents.\\nServers may infer this from the endpoint the client submits requests to.\\nCannot be updated.\\nIn CamelCase.\\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\",\"type\":\"string\"},\"metadata\":{\"type\":\"object\"},\"spec\":{\"description\":\"DataImportCronSpec defines specification for DataImportCron\",\"type\":\"object\",\"required\":[\"managedDataSource\",\"schedule\",\"template\"],\"properties\":{\"garbageCollect\":{\"description\":\"GarbageCollect specifies whether old PVCs should be cleaned up after a new PVC is imported.\\nOptions are currently \\\"Outdated\\\" and \\\"Never\\\", defaults to \\\"Outdated\\\".\",\"type\":\"string\"},\"importsToKeep\":{\"description\":\"Number of import PVCs to keep when garbage collecting. Default is 3.\",\"type\":\"integer\",\"format\":\"int32\"},\"managedDataSource\":{\"description\":\"ManagedDataSource specifies the name of the corresponding DataSource this cron will manage.\\nDataSource has to be in the same namespace.\",\"type\":\"string\"},\"retentionPolicy\":{\"description\":\"RetentionPolicy specifies whether the created DataVolumes and DataSources are retained when their DataImportCron is deleted. Default is RatainAll.\",\"type\":\"string\"},\"schedule\":{\"description\":\"Schedule specifies in cron format when and how often to look for new imports\",\"type\":\"string\"},\"template\":{\"description\":\"Template specifies template for the DVs to be created\",\"type\":\"object\",\"required\":[\"spec\"],\"properties\":{\"apiVersion\":{\"description\":\"APIVersion defines the versioned schema of this representation of an object.\\nServers should convert recognized schemas to the latest internal value, and\\nmay reject unrecognized values.\\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources\",\"type\":\"string\"},\"kind\":{\"description\":\"Kind is a string value representing the REST resource this object represents.\\nServers may infer this from the endpoint the client submits requests to.\\nCannot be updated.\\nIn CamelCase.\\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\",\"type\":\"string\"},\"metadata\":{\"type\":\"object\"},\"spec\":{\"description\":\"DataVolumeSpec defines the DataVolume type specification\",\"type\":\"object\",\"properties\":{\"checkpoints\":{\"description\":\"Checkpoints is a list of DataVolumeCheckpoints, representing stages in a multistage import.\",\"type\":\"array\",\"items\":{\"description\":\"DataVolumeCheckpoint defines a stage in a warm migration.\",\"type\":\"object\",\"required\":[\"current\",\"previous\"],\"properties\":{\"current\":{\"description\":\"Current is the identifier of the snapshot created for this checkpoint.\",\"type\":\"string\"},\"previous\":{\"description\":\"Previous is the identifier of the snapshot from the previous checkpoint.\",\"type\":\"string\"}}}},\"contentType\":{\"description\":\"DataVolumeContentType options: \\\"kubevirt\\\", \\\"archive\\\"\",\"type\":\"string\",\"enum\":[\"kubevirt\",\"archive\"]},\"finalCheckpoint\":{\"description\":\"FinalCheckpoint indicates whether the current DataVolumeCheckpoint is the final checkpoint.\",\"type\":\"boolean\"},\"preallocation\":{\"description\":\"Preallocation controls whether storage for DataVolumes should be allocated in advance.\",\"type\":\"boolean\"},\"priorityClassName\":{\"description\":\"PriorityClassName for Importer, Cloner and Uploader pod\",\"type\":\"string\"},\"pvc\":{\"description\":\"PVC is the PVC specification\",\"type\":\"object\",\"properties\":{\"accessModes\":{\"description\":\"accessModes contains the desired access modes the volume should have.\\nMore info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1\",\"type\":\"array\",\"items\":{\"type\":\"string\"},\"x-kubernetes-list-type\":\"atomic\"},\"dataSource\":{\"description\":\"dataSource field can be used to specify either:\\n* An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot)\\n* An existing PVC (PersistentVolumeClaim)\\nIf the provisioner or an external controller can support the specified data source,\\nit will create a new volume based on the contents of the specified data source.\\nWhen the AnyVolumeDataSource feature gate is enabled, dataSource contents will be copied to dataSourceRef,\\nand dataSourceRef contents will be copied to dataSource when dataSourceRef.namespace is not specified.\\nIf the namespace is specified, then dataSourceRef will not be copied to dataSource.\",\"type\":\"object\",\"required\":[\"kind\",\"name\"],\"properties\":{\"apiGroup\":{\"description\":\"APIGroup is the group for the resource being referenced.\\nIf APIGroup is not specified, the specified Kind must be in the core API group.\\nFor any other third-party types, APIGroup is required.\",\"type\":\"string\"},\"kind\":{\"description\":\"Kind is the type of resource being referenced\",\"type\":\"string\"},\"name\":{\"description\":\"Name is the name of resource being referenced\",\"type\":\"string\"}},\"x-kubernetes-map-type\":\"atomic\"},\"dataSourceRef\":{\"description\":\"dataSourceRef specifies the object from which to populate the volume with data, if a non-empty\\nvolume is desired. This may be any object from a non-empty API group (non\\ncore object) or a PersistentVolumeClaim object.\\nWhen this field is specified, volume binding will only succeed if the type of\\nthe specified object matches some installed volume populator or dynamic\\nprovisioner.\\nThis field will replace the functionality of the dataSource field and as such\\nif both fields are non-empty, they must have the same value. For backwards\\ncompatibility, when namespace isn't specified in dataSourceRef,\\nboth fields (dataSource and dataSourceRef) will be set to the same\\nvalue automatically if one of them is empty and the other is non-empty.\\nWhen namespace is specified in dataSourceRef,\\ndataSource isn't set to the same value and must be empty.\\nThere are three important differences between dataSource and dataSourceRef:\\n* While dataSource only allows two specific types of objects, dataSourceRef\\n  allows any non-core object, as well as PersistentVolumeClaim objects.\\n* While dataSource ignores disallowed values (dropping them), dataSourceRef\\n  preserves all values, and generates an error if a disallowed value is\\n  specified.\\n* While dataSource only allows local objects, dataSourceRef allows objects\\n  in any namespaces.\\n(Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled.\\n(Alpha) Using the namespace field of dataSourceRef requires the CrossNamespaceVolumeDataSource feature gate to be enabled.\",\"type\":\"object\",\"required\":[\"kind\",\"name\"],\"properties\":{\"apiGroup\":{\"description\":\"APIGroup is the group for the resource being referenced.\\nIf APIGroup is not specified, the specified Kind must be in the core API group.\\nFor any other third-party types, APIGroup is required.\",\"type\":\"string\"},\"kind\":{\"description\":\"Kind is the type of resource being referenced\",\"type\":\"string\"},\"name\":{\"description\":\"Name is the name of resource being referenced\",\"type\":\"string\"},\"namespace\":{\"description\":\"Namespace is the namespace of resource being referenced\\nNote that when a namespace is specified, a gateway.networking.k8s.io/ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details.\\n(Alpha) This field requires the CrossNamespaceVolumeDataSource feature gate to be enabled.\",\"type\":\"string\"}}},\"resources\":{\"description\":\"resources represents the minimum resources the volume should have.\\nIf RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements\\nthat are lower than previous value but must still be higher than capacity recorded in the\\nstatus field of the claim.\\nMore info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources\",\"type\":\"object\",\"properties\":{\"limits\":{\"description\":\"Limits describes the maximum amount of compute resources allowed.\\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/\",\"type\":\"object\",\"additionalProperties\":{\"pattern\":\"^(\\\\+|-)?(([0-9]+(\\\\.[0-9]*)?)|(\\\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\\\+|-)?(([0-9]+(\\\\.[0-9]*)?)|(\\\\.[0-9]+))))?$\",\"anyOf\":[{\"type\":\"integer\"},{\"type\":\"string\"}],\"x-kubernetes-int-or-string\":true}},\"requests\":{\"description\":\"Requests describes the minimum amount of compute resources required.\\nIf Requests is omitted for a container, it defaults to Limits if that is explicitly specified,\\notherwise to an implementation-defined value. Requests cannot exceed Limits.\\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/\",\"type\":\"object\",\"additionalProperties\":{\"pattern\":\"^(\\\\+|-)?(([0-9]+(\\\\.[0-9]*)?)|(\\\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\\\+|-)?(([0-9]+(\\\\.[0-9]*)?)|(\\\\.[0-9]+))))?$\",\"anyOf\":[{\"type\":\"integer\"},{\"type\":\"string\"}],\"x-kubernetes-int-or-string\":true}}}},\"selector\":{\"description\":\"selector is a label query over volumes to consider for binding.\",\"type\":\"object\",\"properties\":{\"matchExpressions\":{\"description\":\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\",\"type\":\"array\",\"items\":{\"description\":\"A label selector requirement is a selector that contains values, a key, and an operator that\\nrelates the key and values.\",\"type\":\"object\",\"required\":[\"key\",\"operator\"],\"properties\":{\"key\":{\"description\":\"key is the label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"operator represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists and DoesNotExist.\",\"type\":\"string\"},\"values\":{\"description\":\"values is an array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. This array is replaced during a strategic\\nmerge patch.\",\"type\":\"array\",\"items\":{\"type\":\"string\"},\"x-kubernetes-list-type\":\"atomic\"}}},\"x-kubernetes-list-type\":\"atomic\"},\"matchLabels\":{\"description\":\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\\nmap is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the\\noperator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\",\"type\":\"object\",\"additionalProperties\":{\"type\":\"string\"}}},\"x-kubernetes-map-type\":\"atomic\"},\"storageClassName\":{\"description\":\"storageClassName is the name of the StorageClass required by the claim.\\nMore info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1\",\"type\":\"string\"},\"volumeAttributesClassName\":{\"description\":\"volumeAttributesClassName may be used to set the VolumeAttributesClass used by this claim.\\nIf specified, the CSI driver will create or update the volume with the attributes defined\\nin the corresponding VolumeAttributesClass. This has a different purpose than storageClassName,\\nit can be changed after the claim is created. An empty string value means that no VolumeAttributesClass\\nwill be applied to the claim but it's not allowed to reset this field to empty string once it is set.\\nIf unspecified and the PersistentVolumeClaim is unbound, the default VolumeAttributesClass\\nwill be set by the persistentvolume controller if it exists.\\nIf the resource referred to by volumeAttributesClass does not exist, this PersistentVolumeClaim will be\\nset to a Pending state, as reflected by the modifyVolumeStatus field, until such as a resource\\nexists.\\nMore info: https://kubernetes.io/docs/concepts/storage/volume-attributes-classes/\\n(Alpha) Using this field requires the VolumeAttributesClass feature gate to be enabled.\",\"type\":\"string\"},\"volumeMode\":{\"description\":\"volumeMode defines what type of volume is required by the claim.\\nValue of Filesystem is implied when not included in claim spec.\",\"type\":\"string\"},\"volumeName\":{\"description\":\"volumeName is the binding reference to the PersistentVolume backing this claim.\",\"type\":\"string\"}}},\"source\":{\"description\":\"Source is the src of the data for the requested DataVolume\",\"type\":\"object\",\"properties\":{\"blank\":{\"description\":\"DataVolumeBlankImage provides the parameters to create a new raw blank image for the PVC\",\"type\":\"object\"},\"gcs\":{\"description\":\"DataVolumeSourceGCS provides the parameters to create a Data Volume from an GCS source\",\"type\":\"object\",\"required\":[\"url\"],\"properties\":{\"secretRef\":{\"description\":\"SecretRef provides the secret reference needed to access the GCS source\",\"type\":\"string\"},\"url\":{\"description\":\"URL is the url of the GCS source\",\"type\":\"string\"}}},\"http\":{\"description\":\"DataVolumeSourceHTTP can be either an http or https endpoint, with an optional basic auth user name and password, and an optional configmap containing additional CAs\",\"type\":\"object\",\"required\":[\"url\"],\"properties\":{\"certConfigMap\":{\"description\":\"CertConfigMap is a configmap reference, containing a Certificate Authority(CA) public key, and a base64 encoded pem certificate\",\"type\":\"string\"},\"extraHeaders\":{\"description\":\"ExtraHeaders is a list of strings containing extra headers to include with HTTP transfer requests\",\"type\":\"array\",\"items\":{\"type\":\"string\"}},\"secretExtraHeaders\":{\"description\":\"SecretExtraHeaders is a list of Secret references, each containing an extra HTTP header that may include sensitive information\",\"type\":\"array\",\"items\":{\"type\":\"string\"}},\"secretRef\":{\"description\":\"SecretRef A Secret reference, the secret should contain accessKeyId (user name) base64 encoded, and secretKey (password) also base64 encoded\",\"type\":\"string\"},\"url\":{\"description\":\"URL is the URL of the http(s) endpoint\",\"type\":\"string\"}}},\"imageio\":{\"description\":\"DataVolumeSourceImageIO provides the parameters to create a Data Volume from an imageio source\",\"type\":\"object\",\"required\":[\"diskId\",\"url\"],\"properties\":{\"certConfigMap\":{\"description\":\"CertConfigMap provides a reference to the CA cert\",\"type\":\"string\"},\"diskId\":{\"description\":\"DiskID provides id of a disk to be imported\",\"type\":\"string\"},\"secretRef\":{\"description\":\"SecretRef provides the secret reference needed to access the ovirt-engine\",\"type\":\"string\"},\"url\":{\"description\":\"URL is the URL of the ovirt-engine\",\"type\":\"string\"}}},\"pvc\":{\"description\":\"DataVolumeSourcePVC provides the parameters to create a Data Volume from an existing PVC\",\"type\":\"object\",\"required\":[\"name\",\"namespace\"],\"properties\":{\"name\":{\"description\":\"The name of the source PVC\",\"type\":\"string\"},\"namespace\":{\"description\":\"The namespace of the source PVC\",\"type\":\"string\"}}},\"registry\":{\"description\":\"DataVolumeSourceRegistry provides the parameters to create a Data Volume from an registry source\",\"type\":\"object\",\"properties\":{\"certConfigMap\":{\"description\":\"CertConfigMap provides a reference to the Registry certs\",\"type\":\"string\"},\"imageStream\":{\"description\":\"ImageStream is the name of image stream for import\",\"type\":\"string\"},\"platform\":{\"description\":\"Platform describes the minimum runtime requirements of the image\",\"type\":\"object\",\"properties\":{\"architecture\":{\"description\":\"Architecture specifies the image target CPU architecture\",\"type\":\"string\"}}},\"pullMethod\":{\"description\":\"PullMethod can be either \\\"pod\\\" (default import), or \\\"node\\\" (node docker cache based import)\",\"type\":\"string\"},\"secretRef\":{\"description\":\"SecretRef provides the secret reference needed to access the Registry source\",\"type\":\"string\"},\"url\":{\"description\":\"URL is the url of the registry source (starting with the scheme: docker, oci-archive)\",\"type\":\"string\"}}},\"s3\":{\"description\":\"DataVolumeSourceS3 provides the parameters to create a Data Volume from an S3 source\",\"type\":\"object\",\"required\":[\"url\"],\"properties\":{\"certConfigMap\":{\"description\":\"CertConfigMap is a configmap reference, containing a Certificate Authority(CA) public key, and a base64 encoded pem certificate\",\"type\":\"string\"},\"secretRef\":{\"description\":\"SecretRef provides the secret reference needed to access the S3 source\",\"type\":\"string\"},\"url\":{\"description\":\"URL is the url of the S3 source\",\"type\":\"string\"}}},\"snapshot\":{\"description\":\"DataVolumeSourceSnapshot provides the parameters to create a Data Volume from an existing VolumeSnapshot\",\"type\":\"object\",\"required\":[\"name\",\"namespace\"],\"properties\":{\"name\":{\"description\":\"The name of the source VolumeSnapshot\",\"type\":\"string\"},\"namespace\":{\"description\":\"The namespace of the source VolumeSnapshot\",\"type\":\"string\"}}},\"upload\":{\"description\":\"DataVolumeSourceUpload provides the parameters to create a Data Volume by uploading the source\",\"type\":\"object\"},\"vddk\":{\"description\":\"DataVolumeSourceVDDK provides the parameters to create a Data Volume from a Vmware source\",\"type\":\"object\",\"properties\":{\"backingFile\":{\"description\":\"BackingFile is the path to the virtual hard disk to migrate from vCenter/ESXi\",\"type\":\"string\"},\"extraArgs\":{\"description\":\"ExtraArgs is a reference to a ConfigMap containing extra arguments to pass directly to the VDDK library\",\"type\":\"string\"},\"initImageURL\":{\"description\":\"InitImageURL is an optional URL to an image containing an extracted VDDK library, overrides v2v-vmware config map\",\"type\":\"string\"},\"secretRef\":{\"description\":\"SecretRef provides a reference to a secret containing the username and password needed to access the vCenter or ESXi host\",\"type\":\"string\"},\"thumbprint\":{\"description\":\"Thumbprint is the certificate thumbprint of the vCenter or ESXi host\",\"type\":\"string\"},\"url\":{\"description\":\"URL is the URL of the vCenter or ESXi host with the VM to migrate\",\"type\":\"string\"},\"uuid\":{\"description\":\"UUID is the UUID of the virtual machine that the backing file is attached to in vCenter/ESXi\",\"type\":\"string\"}}}}},\"sourceRef\":{\"description\":\"SourceRef is an indirect reference to the source of data for the requested DataVolume\",\"type\":\"object\",\"required\":[\"kind\",\"name\"],\"properties\":{\"kind\":{\"description\":\"The kind of the source reference, currently only \\\"DataSource\\\" is supported\",\"type\":\"string\"},\"name\":{\"description\":\"The name of the source reference\",\"type\":\"string\"},\"namespace\":{\"description\":\"The namespace of the source reference, defaults to the DataVolume namespace\",\"type\":\"string\"}}},\"storage\":{\"description\":\"Storage is the requested storage specification\",\"type\":\"object\",\"properties\":{\"accessModes\":{\"description\":\"AccessModes contains the desired access modes the volume should have.\\nMore info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1\",\"type\":\"array\",\"items\":{\"type\":\"string\"}},\"dataSource\":{\"description\":\"This field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) * An existing custom resource that implements data population (Alpha) In order to use custom resource types that implement data population, the AnyVolumeDataSource feature gate must be enabled. If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source.\\nIf the AnyVolumeDataSource feature gate is enabled, this field will always have the same contents as the DataSourceRef field.\",\"type\":\"object\",\"required\":[\"kind\",\"name\"],\"properties\":{\"apiGroup\":{\"description\":\"APIGroup is the group for the resource being referenced.\\nIf APIGroup is not specified, the specified Kind must be in the core API group.\\nFor any other third-party types, APIGroup is required.\",\"type\":\"string\"},\"kind\":{\"description\":\"Kind is the type of resource being referenced\",\"type\":\"string\"},\"name\":{\"description\":\"Name is the name of resource being referenced\",\"type\":\"string\"}},\"x-kubernetes-map-type\":\"atomic\"},\"dataSourceRef\":{\"description\":\"Specifies the object from which to populate the volume with data, if a non-empty volume is desired. This may be any local object from a non-empty API group (non core object) or a PersistentVolumeClaim object. When this field is specified, volume binding will only succeed if the type of the specified object matches some installed volume populator or dynamic provisioner.\\nThis field will replace the functionality of the DataSource field and as such if both fields are non-empty, they must have the same value. For backwards compatibility, both fields (DataSource and DataSourceRef) will be set to the same value automatically if one of them is empty and the other is non-empty.\\nThere are two important differences between DataSource and DataSourceRef:\\n* While DataSource only allows two specific types of objects, DataSourceRef allows any non-core object, as well as PersistentVolumeClaim objects.\\n* While DataSource ignores disallowed values (dropping them), DataSourceRef preserves all values, and generates an error if a disallowed value is specified.\\n(Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled.\",\"type\":\"object\",\"required\":[\"kind\",\"name\"],\"properties\":{\"apiGroup\":{\"description\":\"APIGroup is the group for the resource being referenced.\\nIf APIGroup is not specified, the specified Kind must be in the core API group.\\nFor any other third-party types, APIGroup is required.\",\"type\":\"string\"},\"kind\":{\"description\":\"Kind is the type of resource being referenced\",\"type\":\"string\"},\"name\":{\"description\":\"Name is the name of resource being referenced\",\"type\":\"string\"},\"namespace\":{\"description\":\"Namespace is the namespace of resource being referenced\\nNote that when a namespace is specified, a gateway.networking.k8s.io/ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details.\\n(Alpha) This field requires the CrossNamespaceVolumeDataSource feature gate to be enabled.\",\"type\":\"string\"}}},\"resources\":{\"description\":\"Resources represents the minimum resources the volume should have.\\nMore info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources\",\"type\":\"object\",\"properties\":{\"limits\":{\"description\":\"Limits describes the maximum amount of compute resources allowed.\\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/\",\"type\":\"object\",\"additionalProperties\":{\"pattern\":\"^(\\\\+|-)?(([0-9]+(\\\\.[0-9]*)?)|(\\\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\\\+|-)?(([0-9]+(\\\\.[0-9]*)?)|(\\\\.[0-9]+))))?$\",\"anyOf\":[{\"type\":\"integer\"},{\"type\":\"string\"}],\"x-kubernetes-int-or-string\":true}},\"requests\":{\"description\":\"Requests describes the minimum amount of compute resources required.\\nIf Requests is omitted for a container, it defaults to Limits if that is explicitly specified,\\notherwise to an implementation-defined value. Requests cannot exceed Limits.\\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/\",\"type\":\"object\",\"additionalProperties\":{\"pattern\":\"^(\\\\+|-)?(([0-9]+(\\\\.[0-9]*)?)|(\\\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\\\+|-)?(([0-9]+(\\\\.[0-9]*)?)|(\\\\.[0-9]+))))?$\",\"anyOf\":[{\"type\":\"integer\"},{\"type\":\"string\"}],\"x-kubernetes-int-or-string\":true}}}},\"selector\":{\"description\":\"A label query over volumes to consider for binding.\",\"type\":\"object\",\"properties\":{\"matchExpressions\":{\"description\":\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\",\"type\":\"array\",\"items\":{\"description\":\"A label selector requirement is a selector that contains values, a key, and an operator that\\nrelates the key and values.\",\"type\":\"object\",\"required\":[\"key\",\"operator\"],\"properties\":{\"key\":{\"description\":\"key is the label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"operator represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists and DoesNotExist.\",\"type\":\"string\"},\"values\":{\"description\":\"values is an array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. This array is replaced during a strategic\\nmerge patch.\",\"type\":\"array\",\"items\":{\"type\":\"string\"},\"x-kubernetes-list-type\":\"atomic\"}}},\"x-kubernetes-list-type\":\"atomic\"},\"matchLabels\":{\"description\":\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\\nmap is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the\\noperator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\",\"type\":\"object\",\"additionalProperties\":{\"type\":\"string\"}}},\"x-kubernetes-map-type\":\"atomic\"},\"storageClassName\":{\"description\":\"Name of the StorageClass required by the claim.\\nMore info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1\",\"type\":\"string\"},\"volumeMode\":{\"description\":\"volumeMode defines what type of volume is required by the claim.\\nValue of Filesystem is implied when not included in claim spec.\",\"type\":\"string\"},\"volumeName\":{\"description\":\"VolumeName is the binding reference to the PersistentVolume backing this claim.\",\"type\":\"string\"}}}}},\"status\":{\"description\":\"DataVolumeStatus contains the current status of the DataVolume\",\"type\":\"object\",\"properties\":{\"claimName\":{\"description\":\"ClaimName is the name of the underlying PVC used by the DataVolume.\",\"type\":\"string\"},\"conditions\":{\"type\":\"array\",\"items\":{\"description\":\"DataVolumeCondition represents the state of a data volume condition.\",\"type\":\"object\",\"required\":[\"status\",\"type\"],\"properties\":{\"lastHeartbeatTime\":{\"type\":\"string\",\"format\":\"date-time\"},\"lastTransitionTime\":{\"type\":\"string\",\"format\":\"date-time\"},\"message\":{\"type\":\"string\"},\"reason\":{\"type\":\"string\"},\"status\":{\"type\":\"string\"},\"type\":{\"description\":\"DataVolumeConditionType is the string representation of known condition types\",\"type\":\"string\"}}}},\"phase\":{\"description\":\"Phase is the current phase of the data volume\",\"type\":\"string\"},\"progress\":{\"description\":\"DataVolumeProgress is the current progress of the DataVolume transfer operation. Value between 0 and 100 inclusive, N/A if not available\",\"type\":\"string\"},\"restartCount\":{\"description\":\"RestartCount is the number of times the pod populating the DataVolume has restarted\",\"type\":\"integer\",\"format\":\"int32\"}}}}}}},\"status\":{\"description\":\"DataImportCronStatus provides the most recently observed status of the DataImportCron\",\"type\":\"object\",\"properties\":{\"conditions\":{\"type\":\"array\",\"items\":{\"description\":\"DataImportCronCondition represents the state of a data import cron condition\",\"type\":\"object\",\"required\":[\"status\",\"type\"],\"properties\":{\"lastHeartbeatTime\":{\"type\":\"string\",\"format\":\"date-time\"},\"lastTransitionTime\":{\"type\":\"string\",\"format\":\"date-time\"},\"message\":{\"type\":\"string\"},\"reason\":{\"type\":\"string\"},\"status\":{\"type\":\"string\"},\"type\":{\"description\":\"DataImportCronConditionType is the string representation of known condition types\",\"type\":\"string\"}}}},\"currentImports\":{\"description\":\"CurrentImports are the imports in progress. Currently only a single import is supported.\",\"type\":\"array\",\"items\":{\"description\":\"ImportStatus of a currently in progress import\",\"type\":\"object\",\"required\":[\"DataVolumeName\",\"Digest\"],\"properties\":{\"DataVolumeName\":{\"description\":\"DataVolumeName is the currently in progress import DataVolume\",\"type\":\"string\"},\"Digest\":{\"description\":\"Digest of the currently imported image\",\"type\":\"string\"}}}},\"lastExecutionTimestamp\":{\"description\":\"LastExecutionTimestamp is the time of the last polling\",\"type\":\"string\",\"format\":\"date-time\"},\"lastImportTimestamp\":{\"description\":\"LastImportTimestamp is the time of the last import\",\"type\":\"string\",\"format\":\"date-time\"},\"lastImportedPVC\":{\"description\":\"LastImportedPVC is the last imported PVC\",\"type\":\"object\",\"required\":[\"name\",\"namespace\"],\"properties\":{\"name\":{\"description\":\"The name of the source PVC\",\"type\":\"string\"},\"namespace\":{\"description\":\"The namespace of the source PVC\",\"type\":\"string\"}}},\"sourceFormat\":{\"description\":\"SourceFormat defines the format of the DataImportCron-created disk image sources\",\"type\":\"string\"}}}}}},\"subresources\":{},\"additionalPrinterColumns\":[{\"name\":\"Format\",\"type\":\"string\",\"description\":\"The format in which created sources are saved\",\"jsonPath\":\".status.sourceFormat\"}]}]},\"status\":{\"conditions\":null,\"acceptedNames\":{\"plural\":\"\",\"kind\":\"\"},\"storedVersions\":null}}"
      },
      "served_versions": [
        "v1beta1"
      ],
      "stored_version": "v1beta1",
      "categories": [
        "all"
      ],
      "short_names": [
        "dic",
        "dics"
      ],
      "description": null,
      "instance_count": 0
    },
    {
      "name": "datasources.cdi.kubevirt.io",
      "group": "cdi.kubevirt.io",
      "version": "v1beta1",
      "kind": "DataSource",
      "plural": "datasources",
      "singular": "datasource",
      "scope": "Namespaced",
      "creation_timestamp": "2025-09-06T13:01:11+00:00",
      "labels": {
        "app.kubernetes.io/part-of": "hyperconverged-cluster",
        "app.kubernetes.io/version": "1.17.0",
        "operator.cdi.kubevirt.io/createVersion": "v1.63.0"
      },
      "annotations": {
        "controller-gen.kubebuilder.io/version": "v0.14.0",
        "operator.cdi.kubevirt.io/lastAppliedConfiguration": "{\"kind\":\"CustomResourceDefinition\",\"apiVersion\":\"apiextensions.k8s.io/v1\",\"metadata\":{\"name\":\"datasources.cdi.kubevirt.io\",\"creationTimestamp\":null,\"annotations\":{\"controller-gen.kubebuilder.io/version\":\"v0.14.0\"}},\"spec\":{\"group\":\"cdi.kubevirt.io\",\"names\":{\"plural\":\"datasources\",\"singular\":\"datasource\",\"shortNames\":[\"das\"],\"kind\":\"DataSource\",\"listKind\":\"DataSourceList\",\"categories\":[\"all\"]},\"scope\":\"Namespaced\",\"versions\":[{\"name\":\"v1beta1\",\"served\":true,\"storage\":true,\"schema\":{\"openAPIV3Schema\":{\"description\":\"DataSource references an import/clone source for a DataVolume\",\"type\":\"object\",\"required\":[\"spec\"],\"properties\":{\"apiVersion\":{\"description\":\"APIVersion defines the versioned schema of this representation of an object.\\nServers should convert recognized schemas to the latest internal value, and\\nmay reject unrecognized values.\\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources\",\"type\":\"string\"},\"kind\":{\"description\":\"Kind is a string value representing the REST resource this object represents.\\nServers may infer this from the endpoint the client submits requests to.\\nCannot be updated.\\nIn CamelCase.\\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\",\"type\":\"string\"},\"metadata\":{\"type\":\"object\"},\"spec\":{\"description\":\"DataSourceSpec defines specification for DataSource\",\"type\":\"object\",\"required\":[\"source\"],\"properties\":{\"source\":{\"description\":\"Source is the source of the data referenced by the DataSource\",\"type\":\"object\",\"properties\":{\"dataSource\":{\"description\":\"DataSourceRefSourceDataSource serves as a reference to another DataSource\\nCan be resolved into a DataVolumeSourcePVC or a DataVolumeSourceSnapshot\\nThe maximum depth of a reference chain may not exceed 1.\",\"type\":\"object\",\"required\":[\"name\",\"namespace\"],\"properties\":{\"name\":{\"description\":\"The name of the source DataSource\",\"type\":\"string\"},\"namespace\":{\"description\":\"The namespace of the source DataSource\",\"type\":\"string\"}}},\"pvc\":{\"description\":\"DataVolumeSourcePVC provides the parameters to create a Data Volume from an existing PVC\",\"type\":\"object\",\"required\":[\"name\",\"namespace\"],\"properties\":{\"name\":{\"description\":\"The name of the source PVC\",\"type\":\"string\"},\"namespace\":{\"description\":\"The namespace of the source PVC\",\"type\":\"string\"}}},\"snapshot\":{\"description\":\"DataVolumeSourceSnapshot provides the parameters to create a Data Volume from an existing VolumeSnapshot\",\"type\":\"object\",\"required\":[\"name\",\"namespace\"],\"properties\":{\"name\":{\"description\":\"The name of the source VolumeSnapshot\",\"type\":\"string\"},\"namespace\":{\"description\":\"The namespace of the source VolumeSnapshot\",\"type\":\"string\"}}}}}}},\"status\":{\"description\":\"DataSourceStatus provides the most recently observed status of the DataSource\",\"type\":\"object\",\"properties\":{\"conditions\":{\"type\":\"array\",\"items\":{\"description\":\"DataSourceCondition represents the state of a data source condition\",\"type\":\"object\",\"required\":[\"status\",\"type\"],\"properties\":{\"lastHeartbeatTime\":{\"type\":\"string\",\"format\":\"date-time\"},\"lastTransitionTime\":{\"type\":\"string\",\"format\":\"date-time\"},\"message\":{\"type\":\"string\"},\"reason\":{\"type\":\"string\"},\"status\":{\"type\":\"string\"},\"type\":{\"description\":\"DataSourceConditionType is the string representation of known condition types\",\"type\":\"string\"}}}},\"source\":{\"description\":\"Source is the current source of the data referenced by the DataSource\",\"type\":\"object\",\"properties\":{\"dataSource\":{\"description\":\"DataSourceRefSourceDataSource serves as a reference to another DataSource\\nCan be resolved into a DataVolumeSourcePVC or a DataVolumeSourceSnapshot\\nThe maximum depth of a reference chain may not exceed 1.\",\"type\":\"object\",\"required\":[\"name\",\"namespace\"],\"properties\":{\"name\":{\"description\":\"The name of the source DataSource\",\"type\":\"string\"},\"namespace\":{\"description\":\"The namespace of the source DataSource\",\"type\":\"string\"}}},\"pvc\":{\"description\":\"DataVolumeSourcePVC provides the parameters to create a Data Volume from an existing PVC\",\"type\":\"object\",\"required\":[\"name\",\"namespace\"],\"properties\":{\"name\":{\"description\":\"The name of the source PVC\",\"type\":\"string\"},\"namespace\":{\"description\":\"The namespace of the source PVC\",\"type\":\"string\"}}},\"snapshot\":{\"description\":\"DataVolumeSourceSnapshot provides the parameters to create a Data Volume from an existing VolumeSnapshot\",\"type\":\"object\",\"required\":[\"name\",\"namespace\"],\"properties\":{\"name\":{\"description\":\"The name of the source VolumeSnapshot\",\"type\":\"string\"},\"namespace\":{\"description\":\"The namespace of the source VolumeSnapshot\",\"type\":\"string\"}}}}}}}}}}}]},\"status\":{\"conditions\":null,\"acceptedNames\":{\"plural\":\"\",\"kind\":\"\"},\"storedVersions\":null}}"
      },
      "served_versions": [
        "v1beta1"
      ],
      "stored_version": "v1beta1",
      "categories": [
        "all"
      ],
      "short_names": [
        "das"
      ],
      "description": null,
      "instance_count": 0
    },
    {
      "name": "datavolumes.cdi.kubevirt.io",
      "group": "cdi.kubevirt.io",
      "version": "v1beta1",
      "kind": "DataVolume",
      "plural": "datavolumes",
      "singular": "datavolume",
      "scope": "Namespaced",
      "creation_timestamp": "2025-09-06T13:01:11+00:00",
      "labels": {
        "app.kubernetes.io/part-of": "hyperconverged-cluster",
        "app.kubernetes.io/version": "1.17.0",
        "operator.cdi.kubevirt.io/createVersion": "v1.63.0"
      },
      "annotations": {
        "controller-gen.kubebuilder.io/version": "v0.14.0",
        "operator.cdi.kubevirt.io/lastAppliedConfiguration": "{\"kind\":\"CustomResourceDefinition\",\"apiVersion\":\"apiextensions.k8s.io/v1\",\"metadata\":{\"name\":\"datavolumes.cdi.kubevirt.io\",\"creationTimestamp\":null,\"annotations\":{\"controller-gen.kubebuilder.io/version\":\"v0.14.0\"}},\"spec\":{\"group\":\"cdi.kubevirt.io\",\"names\":{\"plural\":\"datavolumes\",\"singular\":\"datavolume\",\"shortNames\":[\"dv\",\"dvs\"],\"kind\":\"DataVolume\",\"listKind\":\"DataVolumeList\",\"categories\":[\"all\"]},\"scope\":\"Namespaced\",\"versions\":[{\"name\":\"v1beta1\",\"served\":true,\"storage\":true,\"schema\":{\"openAPIV3Schema\":{\"description\":\"DataVolume is an abstraction on top of PersistentVolumeClaims to allow easy population of those PersistentVolumeClaims with relation to VirtualMachines\",\"type\":\"object\",\"required\":[\"spec\"],\"properties\":{\"apiVersion\":{\"description\":\"APIVersion defines the versioned schema of this representation of an object.\\nServers should convert recognized schemas to the latest internal value, and\\nmay reject unrecognized values.\\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources\",\"type\":\"string\"},\"kind\":{\"description\":\"Kind is a string value representing the REST resource this object represents.\\nServers may infer this from the endpoint the client submits requests to.\\nCannot be updated.\\nIn CamelCase.\\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\",\"type\":\"string\"},\"metadata\":{\"type\":\"object\"},\"spec\":{\"description\":\"DataVolumeSpec defines the DataVolume type specification\",\"type\":\"object\",\"properties\":{\"checkpoints\":{\"description\":\"Checkpoints is a list of DataVolumeCheckpoints, representing stages in a multistage import.\",\"type\":\"array\",\"items\":{\"description\":\"DataVolumeCheckpoint defines a stage in a warm migration.\",\"type\":\"object\",\"required\":[\"current\",\"previous\"],\"properties\":{\"current\":{\"description\":\"Current is the identifier of the snapshot created for this checkpoint.\",\"type\":\"string\"},\"previous\":{\"description\":\"Previous is the identifier of the snapshot from the previous checkpoint.\",\"type\":\"string\"}}}},\"contentType\":{\"description\":\"DataVolumeContentType options: \\\"kubevirt\\\", \\\"archive\\\"\",\"type\":\"string\",\"enum\":[\"kubevirt\",\"archive\"]},\"finalCheckpoint\":{\"description\":\"FinalCheckpoint indicates whether the current DataVolumeCheckpoint is the final checkpoint.\",\"type\":\"boolean\"},\"preallocation\":{\"description\":\"Preallocation controls whether storage for DataVolumes should be allocated in advance.\",\"type\":\"boolean\"},\"priorityClassName\":{\"description\":\"PriorityClassName for Importer, Cloner and Uploader pod\",\"type\":\"string\"},\"pvc\":{\"description\":\"PVC is the PVC specification\",\"type\":\"object\",\"properties\":{\"accessModes\":{\"description\":\"accessModes contains the desired access modes the volume should have.\\nMore info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1\",\"type\":\"array\",\"items\":{\"type\":\"string\"},\"x-kubernetes-list-type\":\"atomic\"},\"dataSource\":{\"description\":\"dataSource field can be used to specify either:\\n* An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot)\\n* An existing PVC (PersistentVolumeClaim)\\nIf the provisioner or an external controller can support the specified data source,\\nit will create a new volume based on the contents of the specified data source.\\nWhen the AnyVolumeDataSource feature gate is enabled, dataSource contents will be copied to dataSourceRef,\\nand dataSourceRef contents will be copied to dataSource when dataSourceRef.namespace is not specified.\\nIf the namespace is specified, then dataSourceRef will not be copied to dataSource.\",\"type\":\"object\",\"required\":[\"kind\",\"name\"],\"properties\":{\"apiGroup\":{\"description\":\"APIGroup is the group for the resource being referenced.\\nIf APIGroup is not specified, the specified Kind must be in the core API group.\\nFor any other third-party types, APIGroup is required.\",\"type\":\"string\"},\"kind\":{\"description\":\"Kind is the type of resource being referenced\",\"type\":\"string\"},\"name\":{\"description\":\"Name is the name of resource being referenced\",\"type\":\"string\"}},\"x-kubernetes-map-type\":\"atomic\"},\"dataSourceRef\":{\"description\":\"dataSourceRef specifies the object from which to populate the volume with data, if a non-empty\\nvolume is desired. This may be any object from a non-empty API group (non\\ncore object) or a PersistentVolumeClaim object.\\nWhen this field is specified, volume binding will only succeed if the type of\\nthe specified object matches some installed volume populator or dynamic\\nprovisioner.\\nThis field will replace the functionality of the dataSource field and as such\\nif both fields are non-empty, they must have the same value. For backwards\\ncompatibility, when namespace isn't specified in dataSourceRef,\\nboth fields (dataSource and dataSourceRef) will be set to the same\\nvalue automatically if one of them is empty and the other is non-empty.\\nWhen namespace is specified in dataSourceRef,\\ndataSource isn't set to the same value and must be empty.\\nThere are three important differences between dataSource and dataSourceRef:\\n* While dataSource only allows two specific types of objects, dataSourceRef\\n  allows any non-core object, as well as PersistentVolumeClaim objects.\\n* While dataSource ignores disallowed values (dropping them), dataSourceRef\\n  preserves all values, and generates an error if a disallowed value is\\n  specified.\\n* While dataSource only allows local objects, dataSourceRef allows objects\\n  in any namespaces.\\n(Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled.\\n(Alpha) Using the namespace field of dataSourceRef requires the CrossNamespaceVolumeDataSource feature gate to be enabled.\",\"type\":\"object\",\"required\":[\"kind\",\"name\"],\"properties\":{\"apiGroup\":{\"description\":\"APIGroup is the group for the resource being referenced.\\nIf APIGroup is not specified, the specified Kind must be in the core API group.\\nFor any other third-party types, APIGroup is required.\",\"type\":\"string\"},\"kind\":{\"description\":\"Kind is the type of resource being referenced\",\"type\":\"string\"},\"name\":{\"description\":\"Name is the name of resource being referenced\",\"type\":\"string\"},\"namespace\":{\"description\":\"Namespace is the namespace of resource being referenced\\nNote that when a namespace is specified, a gateway.networking.k8s.io/ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details.\\n(Alpha) This field requires the CrossNamespaceVolumeDataSource feature gate to be enabled.\",\"type\":\"string\"}}},\"resources\":{\"description\":\"resources represents the minimum resources the volume should have.\\nIf RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements\\nthat are lower than previous value but must still be higher than capacity recorded in the\\nstatus field of the claim.\\nMore info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources\",\"type\":\"object\",\"properties\":{\"limits\":{\"description\":\"Limits describes the maximum amount of compute resources allowed.\\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/\",\"type\":\"object\",\"additionalProperties\":{\"pattern\":\"^(\\\\+|-)?(([0-9]+(\\\\.[0-9]*)?)|(\\\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\\\+|-)?(([0-9]+(\\\\.[0-9]*)?)|(\\\\.[0-9]+))))?$\",\"anyOf\":[{\"type\":\"integer\"},{\"type\":\"string\"}],\"x-kubernetes-int-or-string\":true}},\"requests\":{\"description\":\"Requests describes the minimum amount of compute resources required.\\nIf Requests is omitted for a container, it defaults to Limits if that is explicitly specified,\\notherwise to an implementation-defined value. Requests cannot exceed Limits.\\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/\",\"type\":\"object\",\"additionalProperties\":{\"pattern\":\"^(\\\\+|-)?(([0-9]+(\\\\.[0-9]*)?)|(\\\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\\\+|-)?(([0-9]+(\\\\.[0-9]*)?)|(\\\\.[0-9]+))))?$\",\"anyOf\":[{\"type\":\"integer\"},{\"type\":\"string\"}],\"x-kubernetes-int-or-string\":true}}}},\"selector\":{\"description\":\"selector is a label query over volumes to consider for binding.\",\"type\":\"object\",\"properties\":{\"matchExpressions\":{\"description\":\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\",\"type\":\"array\",\"items\":{\"description\":\"A label selector requirement is a selector that contains values, a key, and an operator that\\nrelates the key and values.\",\"type\":\"object\",\"required\":[\"key\",\"operator\"],\"properties\":{\"key\":{\"description\":\"key is the label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"operator represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists and DoesNotExist.\",\"type\":\"string\"},\"values\":{\"description\":\"values is an array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. This array is replaced during a strategic\\nmerge patch.\",\"type\":\"array\",\"items\":{\"type\":\"string\"},\"x-kubernetes-list-type\":\"atomic\"}}},\"x-kubernetes-list-type\":\"atomic\"},\"matchLabels\":{\"description\":\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\\nmap is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the\\noperator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\",\"type\":\"object\",\"additionalProperties\":{\"type\":\"string\"}}},\"x-kubernetes-map-type\":\"atomic\"},\"storageClassName\":{\"description\":\"storageClassName is the name of the StorageClass required by the claim.\\nMore info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1\",\"type\":\"string\"},\"volumeAttributesClassName\":{\"description\":\"volumeAttributesClassName may be used to set the VolumeAttributesClass used by this claim.\\nIf specified, the CSI driver will create or update the volume with the attributes defined\\nin the corresponding VolumeAttributesClass. This has a different purpose than storageClassName,\\nit can be changed after the claim is created. An empty string value means that no VolumeAttributesClass\\nwill be applied to the claim but it's not allowed to reset this field to empty string once it is set.\\nIf unspecified and the PersistentVolumeClaim is unbound, the default VolumeAttributesClass\\nwill be set by the persistentvolume controller if it exists.\\nIf the resource referred to by volumeAttributesClass does not exist, this PersistentVolumeClaim will be\\nset to a Pending state, as reflected by the modifyVolumeStatus field, until such as a resource\\nexists.\\nMore info: https://kubernetes.io/docs/concepts/storage/volume-attributes-classes/\\n(Alpha) Using this field requires the VolumeAttributesClass feature gate to be enabled.\",\"type\":\"string\"},\"volumeMode\":{\"description\":\"volumeMode defines what type of volume is required by the claim.\\nValue of Filesystem is implied when not included in claim spec.\",\"type\":\"string\"},\"volumeName\":{\"description\":\"volumeName is the binding reference to the PersistentVolume backing this claim.\",\"type\":\"string\"}}},\"source\":{\"description\":\"Source is the src of the data for the requested DataVolume\",\"type\":\"object\",\"properties\":{\"blank\":{\"description\":\"DataVolumeBlankImage provides the parameters to create a new raw blank image for the PVC\",\"type\":\"object\"},\"gcs\":{\"description\":\"DataVolumeSourceGCS provides the parameters to create a Data Volume from an GCS source\",\"type\":\"object\",\"required\":[\"url\"],\"properties\":{\"secretRef\":{\"description\":\"SecretRef provides the secret reference needed to access the GCS source\",\"type\":\"string\"},\"url\":{\"description\":\"URL is the url of the GCS source\",\"type\":\"string\"}}},\"http\":{\"description\":\"DataVolumeSourceHTTP can be either an http or https endpoint, with an optional basic auth user name and password, and an optional configmap containing additional CAs\",\"type\":\"object\",\"required\":[\"url\"],\"properties\":{\"certConfigMap\":{\"description\":\"CertConfigMap is a configmap reference, containing a Certificate Authority(CA) public key, and a base64 encoded pem certificate\",\"type\":\"string\"},\"extraHeaders\":{\"description\":\"ExtraHeaders is a list of strings containing extra headers to include with HTTP transfer requests\",\"type\":\"array\",\"items\":{\"type\":\"string\"}},\"secretExtraHeaders\":{\"description\":\"SecretExtraHeaders is a list of Secret references, each containing an extra HTTP header that may include sensitive information\",\"type\":\"array\",\"items\":{\"type\":\"string\"}},\"secretRef\":{\"description\":\"SecretRef A Secret reference, the secret should contain accessKeyId (user name) base64 encoded, and secretKey (password) also base64 encoded\",\"type\":\"string\"},\"url\":{\"description\":\"URL is the URL of the http(s) endpoint\",\"type\":\"string\"}}},\"imageio\":{\"description\":\"DataVolumeSourceImageIO provides the parameters to create a Data Volume from an imageio source\",\"type\":\"object\",\"required\":[\"diskId\",\"url\"],\"properties\":{\"certConfigMap\":{\"description\":\"CertConfigMap provides a reference to the CA cert\",\"type\":\"string\"},\"diskId\":{\"description\":\"DiskID provides id of a disk to be imported\",\"type\":\"string\"},\"secretRef\":{\"description\":\"SecretRef provides the secret reference needed to access the ovirt-engine\",\"type\":\"string\"},\"url\":{\"description\":\"URL is the URL of the ovirt-engine\",\"type\":\"string\"}}},\"pvc\":{\"description\":\"DataVolumeSourcePVC provides the parameters to create a Data Volume from an existing PVC\",\"type\":\"object\",\"required\":[\"name\",\"namespace\"],\"properties\":{\"name\":{\"description\":\"The name of the source PVC\",\"type\":\"string\"},\"namespace\":{\"description\":\"The namespace of the source PVC\",\"type\":\"string\"}}},\"registry\":{\"description\":\"DataVolumeSourceRegistry provides the parameters to create a Data Volume from an registry source\",\"type\":\"object\",\"properties\":{\"certConfigMap\":{\"description\":\"CertConfigMap provides a reference to the Registry certs\",\"type\":\"string\"},\"imageStream\":{\"description\":\"ImageStream is the name of image stream for import\",\"type\":\"string\"},\"platform\":{\"description\":\"Platform describes the minimum runtime requirements of the image\",\"type\":\"object\",\"properties\":{\"architecture\":{\"description\":\"Architecture specifies the image target CPU architecture\",\"type\":\"string\"}}},\"pullMethod\":{\"description\":\"PullMethod can be either \\\"pod\\\" (default import), or \\\"node\\\" (node docker cache based import)\",\"type\":\"string\"},\"secretRef\":{\"description\":\"SecretRef provides the secret reference needed to access the Registry source\",\"type\":\"string\"},\"url\":{\"description\":\"URL is the url of the registry source (starting with the scheme: docker, oci-archive)\",\"type\":\"string\"}}},\"s3\":{\"description\":\"DataVolumeSourceS3 provides the parameters to create a Data Volume from an S3 source\",\"type\":\"object\",\"required\":[\"url\"],\"properties\":{\"certConfigMap\":{\"description\":\"CertConfigMap is a configmap reference, containing a Certificate Authority(CA) public key, and a base64 encoded pem certificate\",\"type\":\"string\"},\"secretRef\":{\"description\":\"SecretRef provides the secret reference needed to access the S3 source\",\"type\":\"string\"},\"url\":{\"description\":\"URL is the url of the S3 source\",\"type\":\"string\"}}},\"snapshot\":{\"description\":\"DataVolumeSourceSnapshot provides the parameters to create a Data Volume from an existing VolumeSnapshot\",\"type\":\"object\",\"required\":[\"name\",\"namespace\"],\"properties\":{\"name\":{\"description\":\"The name of the source VolumeSnapshot\",\"type\":\"string\"},\"namespace\":{\"description\":\"The namespace of the source VolumeSnapshot\",\"type\":\"string\"}}},\"upload\":{\"description\":\"DataVolumeSourceUpload provides the parameters to create a Data Volume by uploading the source\",\"type\":\"object\"},\"vddk\":{\"description\":\"DataVolumeSourceVDDK provides the parameters to create a Data Volume from a Vmware source\",\"type\":\"object\",\"properties\":{\"backingFile\":{\"description\":\"BackingFile is the path to the virtual hard disk to migrate from vCenter/ESXi\",\"type\":\"string\"},\"extraArgs\":{\"description\":\"ExtraArgs is a reference to a ConfigMap containing extra arguments to pass directly to the VDDK library\",\"type\":\"string\"},\"initImageURL\":{\"description\":\"InitImageURL is an optional URL to an image containing an extracted VDDK library, overrides v2v-vmware config map\",\"type\":\"string\"},\"secretRef\":{\"description\":\"SecretRef provides a reference to a secret containing the username and password needed to access the vCenter or ESXi host\",\"type\":\"string\"},\"thumbprint\":{\"description\":\"Thumbprint is the certificate thumbprint of the vCenter or ESXi host\",\"type\":\"string\"},\"url\":{\"description\":\"URL is the URL of the vCenter or ESXi host with the VM to migrate\",\"type\":\"string\"},\"uuid\":{\"description\":\"UUID is the UUID of the virtual machine that the backing file is attached to in vCenter/ESXi\",\"type\":\"string\"}}}}},\"sourceRef\":{\"description\":\"SourceRef is an indirect reference to the source of data for the requested DataVolume\",\"type\":\"object\",\"required\":[\"kind\",\"name\"],\"properties\":{\"kind\":{\"description\":\"The kind of the source reference, currently only \\\"DataSource\\\" is supported\",\"type\":\"string\"},\"name\":{\"description\":\"The name of the source reference\",\"type\":\"string\"},\"namespace\":{\"description\":\"The namespace of the source reference, defaults to the DataVolume namespace\",\"type\":\"string\"}}},\"storage\":{\"description\":\"Storage is the requested storage specification\",\"type\":\"object\",\"properties\":{\"accessModes\":{\"description\":\"AccessModes contains the desired access modes the volume should have.\\nMore info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1\",\"type\":\"array\",\"items\":{\"type\":\"string\"}},\"dataSource\":{\"description\":\"This field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) * An existing custom resource that implements data population (Alpha) In order to use custom resource types that implement data population, the AnyVolumeDataSource feature gate must be enabled. If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source.\\nIf the AnyVolumeDataSource feature gate is enabled, this field will always have the same contents as the DataSourceRef field.\",\"type\":\"object\",\"required\":[\"kind\",\"name\"],\"properties\":{\"apiGroup\":{\"description\":\"APIGroup is the group for the resource being referenced.\\nIf APIGroup is not specified, the specified Kind must be in the core API group.\\nFor any other third-party types, APIGroup is required.\",\"type\":\"string\"},\"kind\":{\"description\":\"Kind is the type of resource being referenced\",\"type\":\"string\"},\"name\":{\"description\":\"Name is the name of resource being referenced\",\"type\":\"string\"}},\"x-kubernetes-map-type\":\"atomic\"},\"dataSourceRef\":{\"description\":\"Specifies the object from which to populate the volume with data, if a non-empty volume is desired. This may be any local object from a non-empty API group (non core object) or a PersistentVolumeClaim object. When this field is specified, volume binding will only succeed if the type of the specified object matches some installed volume populator or dynamic provisioner.\\nThis field will replace the functionality of the DataSource field and as such if both fields are non-empty, they must have the same value. For backwards compatibility, both fields (DataSource and DataSourceRef) will be set to the same value automatically if one of them is empty and the other is non-empty.\\nThere are two important differences between DataSource and DataSourceRef:\\n* While DataSource only allows two specific types of objects, DataSourceRef allows any non-core object, as well as PersistentVolumeClaim objects.\\n* While DataSource ignores disallowed values (dropping them), DataSourceRef preserves all values, and generates an error if a disallowed value is specified.\\n(Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled.\",\"type\":\"object\",\"required\":[\"kind\",\"name\"],\"properties\":{\"apiGroup\":{\"description\":\"APIGroup is the group for the resource being referenced.\\nIf APIGroup is not specified, the specified Kind must be in the core API group.\\nFor any other third-party types, APIGroup is required.\",\"type\":\"string\"},\"kind\":{\"description\":\"Kind is the type of resource being referenced\",\"type\":\"string\"},\"name\":{\"description\":\"Name is the name of resource being referenced\",\"type\":\"string\"},\"namespace\":{\"description\":\"Namespace is the namespace of resource being referenced\\nNote that when a namespace is specified, a gateway.networking.k8s.io/ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details.\\n(Alpha) This field requires the CrossNamespaceVolumeDataSource feature gate to be enabled.\",\"type\":\"string\"}}},\"resources\":{\"description\":\"Resources represents the minimum resources the volume should have.\\nMore info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources\",\"type\":\"object\",\"properties\":{\"limits\":{\"description\":\"Limits describes the maximum amount of compute resources allowed.\\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/\",\"type\":\"object\",\"additionalProperties\":{\"pattern\":\"^(\\\\+|-)?(([0-9]+(\\\\.[0-9]*)?)|(\\\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\\\+|-)?(([0-9]+(\\\\.[0-9]*)?)|(\\\\.[0-9]+))))?$\",\"anyOf\":[{\"type\":\"integer\"},{\"type\":\"string\"}],\"x-kubernetes-int-or-string\":true}},\"requests\":{\"description\":\"Requests describes the minimum amount of compute resources required.\\nIf Requests is omitted for a container, it defaults to Limits if that is explicitly specified,\\notherwise to an implementation-defined value. Requests cannot exceed Limits.\\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/\",\"type\":\"object\",\"additionalProperties\":{\"pattern\":\"^(\\\\+|-)?(([0-9]+(\\\\.[0-9]*)?)|(\\\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\\\+|-)?(([0-9]+(\\\\.[0-9]*)?)|(\\\\.[0-9]+))))?$\",\"anyOf\":[{\"type\":\"integer\"},{\"type\":\"string\"}],\"x-kubernetes-int-or-string\":true}}}},\"selector\":{\"description\":\"A label query over volumes to consider for binding.\",\"type\":\"object\",\"properties\":{\"matchExpressions\":{\"description\":\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\",\"type\":\"array\",\"items\":{\"description\":\"A label selector requirement is a selector that contains values, a key, and an operator that\\nrelates the key and values.\",\"type\":\"object\",\"required\":[\"key\",\"operator\"],\"properties\":{\"key\":{\"description\":\"key is the label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"operator represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists and DoesNotExist.\",\"type\":\"string\"},\"values\":{\"description\":\"values is an array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. This array is replaced during a strategic\\nmerge patch.\",\"type\":\"array\",\"items\":{\"type\":\"string\"},\"x-kubernetes-list-type\":\"atomic\"}}},\"x-kubernetes-list-type\":\"atomic\"},\"matchLabels\":{\"description\":\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\\nmap is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the\\noperator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\",\"type\":\"object\",\"additionalProperties\":{\"type\":\"string\"}}},\"x-kubernetes-map-type\":\"atomic\"},\"storageClassName\":{\"description\":\"Name of the StorageClass required by the claim.\\nMore info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1\",\"type\":\"string\"},\"volumeMode\":{\"description\":\"volumeMode defines what type of volume is required by the claim.\\nValue of Filesystem is implied when not included in claim spec.\",\"type\":\"string\"},\"volumeName\":{\"description\":\"VolumeName is the binding reference to the PersistentVolume backing this claim.\",\"type\":\"string\"}}}}},\"status\":{\"description\":\"DataVolumeStatus contains the current status of the DataVolume\",\"type\":\"object\",\"properties\":{\"claimName\":{\"description\":\"ClaimName is the name of the underlying PVC used by the DataVolume.\",\"type\":\"string\"},\"conditions\":{\"type\":\"array\",\"items\":{\"description\":\"DataVolumeCondition represents the state of a data volume condition.\",\"type\":\"object\",\"required\":[\"status\",\"type\"],\"properties\":{\"lastHeartbeatTime\":{\"type\":\"string\",\"format\":\"date-time\"},\"lastTransitionTime\":{\"type\":\"string\",\"format\":\"date-time\"},\"message\":{\"type\":\"string\"},\"reason\":{\"type\":\"string\"},\"status\":{\"type\":\"string\"},\"type\":{\"description\":\"DataVolumeConditionType is the string representation of known condition types\",\"type\":\"string\"}}}},\"phase\":{\"description\":\"Phase is the current phase of the data volume\",\"type\":\"string\"},\"progress\":{\"description\":\"DataVolumeProgress is the current progress of the DataVolume transfer operation. Value between 0 and 100 inclusive, N/A if not available\",\"type\":\"string\"},\"restartCount\":{\"description\":\"RestartCount is the number of times the pod populating the DataVolume has restarted\",\"type\":\"integer\",\"format\":\"int32\"}}}}}},\"subresources\":{\"status\":{}},\"additionalPrinterColumns\":[{\"name\":\"Phase\",\"type\":\"string\",\"description\":\"The phase the data volume is in\",\"jsonPath\":\".status.phase\"},{\"name\":\"Progress\",\"type\":\"string\",\"description\":\"Transfer progress in percentage if known, N/A otherwise\",\"jsonPath\":\".status.progress\"},{\"name\":\"Restarts\",\"type\":\"integer\",\"description\":\"The number of times the transfer has been restarted.\",\"jsonPath\":\".status.restartCount\"},{\"name\":\"Age\",\"type\":\"date\",\"jsonPath\":\".metadata.creationTimestamp\"}]}]},\"status\":{\"conditions\":null,\"acceptedNames\":{\"plural\":\"\",\"kind\":\"\"},\"storedVersions\":null}}"
      },
      "served_versions": [
        "v1beta1"
      ],
      "stored_version": "v1beta1",
      "categories": [
        "all"
      ],
      "short_names": [
        "dv",
        "dvs"
      ],
      "description": null,
      "instance_count": 0
    },
    {
      "name": "dbcssystems.database.oracle.com",
      "group": "database.oracle.com",
      "version": "v4",
      "kind": "DbcsSystem",
      "plural": "dbcssystems",
      "singular": "dbcssystem",
      "scope": "Namespaced",
      "creation_timestamp": "2025-09-06T17:41:22+00:00",
      "labels": {
        "olm.managed": "true",
        "operators.coreos.com/oracle-database-operator.operators": ""
      },
      "annotations": {
        "cert-manager.io/inject-ca-from": "oracle-database-operator-system/oracle-database-operator-serving-cert",
        "controller-gen.kubebuilder.io/version": "v0.16.5",
        "operatorframework.io/installed-alongside-f8529ccd93ced1d5": "operators/oracle-database-operator.v1.2.0"
      },
      "served_versions": [
        "v1alpha1",
        "v4"
      ],
      "stored_version": "v4",
      "categories": [],
      "short_names": [],
      "description": null,
      "instance_count": 0
    },
    {
      "name": "deployments.deployment.krateo.io",
      "group": "deployment.krateo.io",
      "version": "v1alpha1",
      "kind": "Deployment",
      "plural": "deployments",
      "singular": "deployment",
      "scope": "Cluster",
      "creation_timestamp": "2025-09-06T18:03:46+00:00",
      "labels": {},
      "annotations": {
        "controller-gen.kubebuilder.io/version": "v0.9.2"
      },
      "served_versions": [
        "v1alpha1"
      ],
      "stored_version": "v1alpha1",
      "categories": [
        "managed",
        "krateo",
        "deployments"
      ],
      "short_names": [],
      "description": null,
      "instance_count": 0
    },
    {
      "name": "druidversions.catalog.kubedb.com",
      "group": "catalog.kubedb.com",
      "version": "v1alpha1",
      "kind": "DruidVersion",
      "plural": "druidversions",
      "singular": "druidversion",
      "scope": "Cluster",
      "creation_timestamp": "2025-09-06T13:33:51+00:00",
      "labels": {
        "app.kubernetes.io/name": "kubedb"
      },
      "annotations": {},
      "served_versions": [
        "v1alpha1"
      ],
      "stored_version": "v1alpha1",
      "categories": [
        "catalog",
        "kubedb",
        "appscode"
      ],
      "short_names": [
        "drversion"
      ],
      "description": null,
      "instance_count": 0
    },
    {
      "name": "elasticsearchautoscalers.autoscaling.kubedb.com",
      "group": "autoscaling.kubedb.com",
      "version": "v1alpha1",
      "kind": "ElasticsearchAutoscaler",
      "plural": "elasticsearchautoscalers",
      "singular": "elasticsearchautoscaler",
      "scope": "Namespaced",
      "creation_timestamp": "2025-09-06T13:34:29+00:00",
      "labels": {
        "app.kubernetes.io/name": "kubedb"
      },
      "annotations": {},
      "served_versions": [
        "v1alpha1"
      ],
      "stored_version": "v1alpha1",
      "categories": [
        "autoscaler",
        "kubedb",
        "appscode"
      ],
      "short_names": [
        "esscaler"
      ],
      "description": null,
      "instance_count": 0
    },
    {
      "name": "elasticsearchbindings.catalog.appscode.com",
      "group": "catalog.appscode.com",
      "version": "v1alpha1",
      "kind": "ElasticsearchBinding",
      "plural": "elasticsearchbindings",
      "singular": "elasticsearchbinding",
      "scope": "Namespaced",
      "creation_timestamp": "2025-09-06T13:34:29+00:00",
      "labels": {
        "app.kubernetes.io/name": "ace",
        "kube-bind.appscode.com/exported": "true"
      },
      "annotations": {},
      "served_versions": [
        "v1alpha1"
      ],
      "stored_version": "v1alpha1",
      "categories": [
        "binding",
        "kubedb",
        "appscode"
      ],
      "short_names": [
        "esbinding"
      ],
      "description": null,
      "instance_count": 0
    },
    {
      "name": "elasticsearchdashboards.elasticsearch.kubedb.com",
      "group": "elasticsearch.kubedb.com",
      "version": "v1alpha1",
      "kind": "ElasticsearchDashboard",
      "plural": "elasticsearchdashboards",
      "singular": "elasticsearchdashboard",
      "scope": "Namespaced",
      "creation_timestamp": "2025-09-06T13:34:29+00:00",
      "labels": {
        "app.kubernetes.io/name": "kubedb"
      },
      "annotations": {},
      "served_versions": [
        "v1alpha1"
      ],
      "stored_version": "v1alpha1",
      "categories": [
        "esstore",
        "kubedb",
        "appscode"
      ],
      "short_names": [
        "ed"
      ],
      "description": null,
      "instance_count": 0
    },
    {
      "name": "elasticsearches.kubedb.com",
      "group": "kubedb.com",
      "version": "v1",
      "kind": "Elasticsearch",
      "plural": "elasticsearches",
      "singular": "elasticsearch",
      "scope": "Namespaced",
      "creation_timestamp": "2025-09-06T13:34:28+00:00",
      "labels": {
        "app.kubernetes.io/name": "kubedb"
      },
      "annotations": {},
      "served_versions": [
        "v1",
        "v1alpha2"
      ],
      "stored_version": "v1",
      "categories": [
        "datastore",
        "kubedb",
        "appscode",
        "all"
      ],
      "short_names": [
        "es"
      ],
      "description": null,
      "instance_count": 0
    },
    {
      "name": "elasticsearchopsrequests.ops.kubedb.com",
      "group": "ops.kubedb.com",
      "version": "v1alpha1",
      "kind": "ElasticsearchOpsRequest",
      "plural": "elasticsearchopsrequests",
      "singular": "elasticsearchopsrequest",
      "scope": "Namespaced",
      "creation_timestamp": "2025-09-06T13:34:28+00:00",
      "labels": {
        "app.kubernetes.io/name": "kubedb"
      },
      "annotations": {},
      "served_versions": [
        "v1alpha1"
      ],
      "stored_version": "v1alpha1",
      "categories": [
        "ops",
        "kubedb",
        "appscode"
      ],
      "short_names": [
        "esops"
      ],
      "description": null,
      "instance_count": 0
    },
    {
      "name": "elasticsearchversions.catalog.kubedb.com",
      "group": "catalog.kubedb.com",
      "version": "v1alpha1",
      "kind": "ElasticsearchVersion",
      "plural": "elasticsearchversions",
      "singular": "elasticsearchversion",
      "scope": "Cluster",
      "creation_timestamp": "2025-09-06T13:33:51+00:00",
      "labels": {
        "app.kubernetes.io/name": "kubedb"
      },
      "annotations": {},
      "served_versions": [
        "v1alpha1"
      ],
      "stored_version": "v1alpha1",
      "categories": [
        "catalog",
        "kubedb",
        "appscode"
      ],
      "short_names": [
        "esversion"
      ],
      "description": null,
      "instance_count": 0
    },
    {
      "name": "etcdsnapshotfiles.k3s.cattle.io",
      "group": "k3s.cattle.io",
      "version": "v1",
      "kind": "ETCDSnapshotFile",
      "plural": "etcdsnapshotfiles",
      "singular": "etcdsnapshotfile",
      "scope": "Cluster",
      "creation_timestamp": "2025-06-26T15:33:35+00:00",
      "labels": {
        "objectset.rio.cattle.io/hash": "af51d2b9f5dc9de83def68bd73da68a7585c6527"
      },
      "annotations": {
        "objectset.rio.cattle.io/applied": "H4sIAAAAAAAA/5yV30/bMBDH/5XpnrNMUBVKpD2gMqRpCKEV+jLx4NqX1sTxWT6nwKr+75PTtDQQ2miPPt99Lt/7Ea9AOD1Fz5osZPGALwFtPHJajDjV9G15AgkU2irIYFxxoPI3MlVe4hXm2uoQYxMoMQglgoBsBcJaCiJecDzS7AllYAyp15RKEYLBSNYRCcmn9/Rs0X+dL4vPPy358ktb9f3Adx2GW1EiZIBBKrbC8YJCrg1yWgz4zbkXhp2QkQXrBKTHWv69LpGDKB1ktjImASNmaA4WZSF4EfXmwxN1OrvIh0peKBwNFOZno5k6HyhxNhLnw9FQng1Pz2O2niLWCbBDGZPPPVUOMnivstYRHZp+/7gfX00a5LU2CAk4U3lhutJBAqztvDLCd1zH9M4jo1/igy0sPdtrjUYxZLkwjAmwJBd1jE3FAT0ksNxMJkP2ZwVCqbqnwtx5bQP6MZmqbC6fmOydCLFyaRSZblPfxtrsSjRpW8NrnZCD13YO66SDY0lhm3FLqmesISmaKWxib94sR+KDCBWnrP/uf/3m1CtyfwLfCOO29R3pcedX7zzLBZb1PpNDe3n3czqY7EzOk0Mf9GZctnPVtu70ZyuI4y9mBiELvsKPItr/j71W7wOPQj5x2Oxa7bBtZx8aD7rc2hpnlSww9MJtXG+Iirh7PQLQKkfa9qNvnceXvdy1ZZSVrwvRXM6IDArbLGquX3qBPM77tpgL7SaTmyl6nb92JV53dKy1yMezdCLqlfg4n60d6VVj78kfn4kSmcW8HzL0y90ly6NQr/f0wIcAe02tfyb/k6rTUv/I1ZbBgXwtOR7Xj62iCynRBVS37x6X/cekfjTJbtaet69lpKKa7l6BaF2v/wUAAP//wPkU4LUIAAA",
        "objectset.rio.cattle.io/id": "",
        "objectset.rio.cattle.io/owner-gvk": "apiextensions.k8s.io/v1, Kind=CustomResourceDefinition",
        "objectset.rio.cattle.io/owner-name": "etcdsnapshotfiles.k3s.cattle.io",
        "objectset.rio.cattle.io/owner-namespace": ""
      },
      "served_versions": [
        "v1"
      ],
      "stored_version": "v1",
      "categories": [],
      "short_names": [],
      "description": null,
      "instance_count": 0
    },
    {
      "name": "etcdversions.catalog.kubedb.com",
      "group": "catalog.kubedb.com",
      "version": "v1alpha1",
      "kind": "EtcdVersion",
      "plural": "etcdversions",
      "singular": "etcdversion",
      "scope": "Cluster",
      "creation_timestamp": "2025-09-06T13:33:51+00:00",
      "labels": {
        "app.kubernetes.io/name": "kubedb"
      },
      "annotations": {},
      "served_versions": [
        "v1alpha1"
      ],
      "stored_version": "v1alpha1",
      "categories": [
        "catalog",
        "kubedb",
        "appscode"
      ],
      "short_names": [
        "etcversion"
      ],
      "description": null,
      "instance_count": 0
    },
    {
      "name": "eventlists.widgets.templates.krateo.io",
      "group": "widgets.templates.krateo.io",
      "version": "v1beta1",
      "kind": "EventList",
      "plural": "eventlists",
      "singular": "eventlist",
      "scope": "Namespaced",
      "creation_timestamp": "2025-09-06T09:46:48+00:00",
      "labels": {},
      "annotations": {
        "controller-gen.kubebuilder.io/version": "v0.16.1"
      },
      "served_versions": [
        "v1beta1"
      ],
      "stored_version": "v1beta1",
      "categories": [
        "widgets",
        "krateo"
      ],
      "short_names": [],
      "description": null,
      "instance_count": 0
    },
    {
      "name": "failoverquorums.postgresql.cnpg.io",
      "group": "postgresql.cnpg.io",
      "version": "v1",
      "kind": "FailoverQuorum",
      "plural": "failoverquorums",
      "singular": "failoverquorum",
      "scope": "Namespaced",
      "creation_timestamp": "2025-09-07T09:12:54+00:00",
      "labels": {
        "olm.managed": "true",
        "operators.coreos.com/cloudnative-pg.operators": ""
      },
      "annotations": {
        "controller-gen.kubebuilder.io/version": "v0.18.0",
        "operatorframework.io/installed-alongside-26b2108901275579": "operators/cloudnative-pg.v1.27.0"
      },
      "served_versions": [
        "v1"
      ],
      "stored_version": "v1",
      "categories": [],
      "short_names": [],
      "description": null,
      "instance_count": 0
    },
    {
      "name": "ferretdbversions.catalog.kubedb.com",
      "group": "catalog.kubedb.com",
      "version": "v1alpha1",
      "kind": "FerretDBVersion",
      "plural": "ferretdbversions",
      "singular": "ferretdbversion",
      "scope": "Cluster",
      "creation_timestamp": "2025-09-06T13:33:51+00:00",
      "labels": {
        "app.kubernetes.io/name": "kubedb"
      },
      "annotations": {},
      "served_versions": [
        "v1alpha1"
      ],
      "stored_version": "v1alpha1",
      "categories": [
        "catalog",
        "kubedb",
        "appscode"
      ],
      "short_names": [
        "frversion"
      ],
      "description": null,
      "instance_count": 0
    },
    {
      "name": "filters.widgets.templates.krateo.io",
      "group": "widgets.templates.krateo.io",
      "version": "v1beta1",
      "kind": "Filters",
      "plural": "filters",
      "singular": "filters",
      "scope": "Namespaced",
      "creation_timestamp": "2025-09-06T09:46:48+00:00",
      "labels": {},
      "annotations": {
        "controller-gen.kubebuilder.io/version": "v0.16.1"
      },
      "served_versions": [
        "v1beta1"
      ],
      "stored_version": "v1beta1",
      "categories": [
        "widgets",
        "krateo"
      ],
      "short_names": [],
      "description": null,
      "instance_count": 0
    },
    {
      "name": "fireworksapps.composition.krateo.io",
      "group": "composition.krateo.io",
      "version": "v2-0-2",
      "kind": "FireworksApp",
      "plural": "fireworksapps",
      "singular": "fireworksapp",
      "scope": "Namespaced",
      "creation_timestamp": "2025-09-06T10:39:01+00:00",
      "labels": {},
      "annotations": {
        "controller-gen.kubebuilder.io/version": "v0.18.0"
      },
      "served_versions": [
        "v2-0-2"
      ],
      "stored_version": "v2-0-2",
      "categories": [
        "compositions",
        "comps"
      ],
      "short_names": [],
      "description": null,
      "instance_count": 0
    },
    {
      "name": "flowcharts.widgets.templates.krateo.io",
      "group": "widgets.templates.krateo.io",
      "version": "v1beta1",
      "kind": "FlowChart",
      "plural": "flowcharts",
      "singular": "flowchart",
      "scope": "Namespaced",
      "creation_timestamp": "2025-09-06T09:46:48+00:00",
      "labels": {},
      "annotations": {
        "controller-gen.kubebuilder.io/version": "v0.16.1"
      },
      "served_versions": [
        "v1beta1"
      ],
      "stored_version": "v1beta1",
      "categories": [
        "widgets",
        "krateo"
      ],
      "short_names": [],
      "description": null,
      "instance_count": 0
    },
    {
      "name": "forms.widgets.templates.krateo.io",
      "group": "widgets.templates.krateo.io",
      "version": "v1beta1",
      "kind": "Form",
      "plural": "forms",
      "singular": "form",
      "scope": "Namespaced",
      "creation_timestamp": "2025-09-06T09:46:48+00:00",
      "labels": {},
      "annotations": {
        "controller-gen.kubebuilder.io/version": "v0.16.1"
      },
      "served_versions": [
        "v1beta1"
      ],
      "stored_version": "v1beta1",
      "categories": [
        "widgets",
        "krateo"
      ],
      "short_names": [],
      "description": null,
      "instance_count": 0
    },
    {
      "name": "functions.addons.kubestash.com",
      "group": "addons.kubestash.com",
      "version": "v1alpha1",
      "kind": "Function",
      "plural": "functions",
      "singular": "function",
      "scope": "Cluster",
      "creation_timestamp": "2025-09-06T13:33:51+00:00",
      "labels": {
        "app.kubernetes.io/name": "kubestash"
      },
      "annotations": {
        "config.kubernetes.io/local-config": "true"
      },
      "served_versions": [
        "v1alpha1"
      ],
      "stored_version": "v1alpha1",
      "categories": [
        "kubestash",
        "appscode",
        "all"
      ],
      "short_names": [
        "fn"
      ],
      "description": null,
      "instance_count": 0
    },
    {
      "name": "gatewayclasses.gateway.networking.k8s.io",
      "group": "gateway.networking.k8s.io",
      "version": "v1",
      "kind": "GatewayClass",
      "plural": "gatewayclasses",
      "singular": "gatewayclass",
      "scope": "Cluster",
      "creation_timestamp": "2025-06-26T15:37:15+00:00",
      "labels": {},
      "annotations": {
        "api-approved.kubernetes.io": "https://github.com/kubernetes-sigs/gateway-api/pull/3328",
        "gateway.networking.k8s.io/bundle-version": "v1.2.1",
        "gateway.networking.k8s.io/channel": "standard"
      },
      "served_versions": [
        "v1",
        "v1beta1"
      ],
      "stored_version": "v1",
      "categories": [
        "gateway-api"
      ],
      "short_names": [
        "gc"
      ],
      "description": null,
      "instance_count": 0
    },
    {
      "name": "gateways.gateway.networking.k8s.io",
      "group": "gateway.networking.k8s.io",
      "version": "v1",
      "kind": "Gateway",
      "plural": "gateways",
      "singular": "gateway",
      "scope": "Namespaced",
      "creation_timestamp": "2025-06-26T15:37:15+00:00",
      "labels": {},
      "annotations": {
        "api-approved.kubernetes.io": "https://github.com/kubernetes-sigs/gateway-api/pull/3328",
        "gateway.networking.k8s.io/bundle-version": "v1.2.1",
        "gateway.networking.k8s.io/channel": "standard"
      },
      "served_versions": [
        "v1",
        "v1beta1"
      ],
      "stored_version": "v1",
      "categories": [
        "gateway-api"
      ],
      "short_names": [
        "gtw"
      ],
      "description": null,
      "instance_count": 0
    },
    {
      "name": "grants.k8s.mariadb.com",
      "group": "k8s.mariadb.com",
      "version": "v1alpha1",
      "kind": "Grant",
      "plural": "grants",
      "singular": "grant",
      "scope": "Namespaced",
      "creation_timestamp": "2025-09-07T09:15:51+00:00",
      "labels": {
        "olm.managed": "true",
        "operators.coreos.com/mariadb-operator.operators": ""
      },
      "annotations": {
        "controller-gen.kubebuilder.io/version": "v0.18.0",
        "operatorframework.io/installed-alongside-6fd75c749733b588": "operators/mariadb-operator.v25.8.3"
      },
      "served_versions": [
        "v1alpha1"
      ],
      "stored_version": "v1alpha1",
      "categories": [],
      "short_names": [
        "gmdb"
      ],
      "description": null,
      "instance_count": 0
    },
    {
      "name": "grpcroutes.gateway.networking.k8s.io",
      "group": "gateway.networking.k8s.io",
      "version": "v1",
      "kind": "GRPCRoute",
      "plural": "grpcroutes",
      "singular": "grpcroute",
      "scope": "Namespaced",
      "creation_timestamp": "2025-06-26T15:37:15+00:00",
      "labels": {},
      "annotations": {
        "api-approved.kubernetes.io": "https://github.com/kubernetes-sigs/gateway-api/pull/3328",
        "gateway.networking.k8s.io/bundle-version": "v1.2.1",
        "gateway.networking.k8s.io/channel": "standard"
      },
      "served_versions": [
        "v1"
      ],
      "stored_version": "v1",
      "categories": [
        "gateway-api"
      ],
      "short_names": [],
      "description": null,
      "instance_count": 0
    },
    {
      "name": "hazelcastversions.catalog.kubedb.com",
      "group": "catalog.kubedb.com",
      "version": "v1alpha1",
      "kind": "HazelcastVersion",
      "plural": "hazelcastversions",
      "singular": "hazelcastversion",
      "scope": "Cluster",
      "creation_timestamp": "2025-09-06T13:33:51+00:00",
      "labels": {
        "app.kubernetes.io/name": "kubedb"
      },
      "annotations": {},
      "served_versions": [
        "v1alpha1"
      ],
      "stored_version": "v1alpha1",
      "categories": [
        "catalog",
        "kubedb",
        "appscode"
      ],
      "short_names": [
        "hzversion"
      ],
      "description": null,
      "instance_count": 0
    },
    {
      "name": "helmchartconfigs.helm.cattle.io",
      "group": "helm.cattle.io",
      "version": "v1",
      "kind": "HelmChartConfig",
      "plural": "helmchartconfigs",
      "singular": "helmchartconfig",
      "scope": "Namespaced",
      "creation_timestamp": "2025-06-26T15:33:35+00:00",
      "labels": {
        "objectset.rio.cattle.io/hash": "2052208f1663688d05f513c2fa308fde31521d9d"
      },
      "annotations": {
        "objectset.rio.cattle.io/applied": "H4sIAAAAAAAA/5SUXY/TPBCF/8qrufZb+qFWJRIXqAiBkFYrlu0N4mJqT1JTx7Y8ky5Vlf+OnH4spdt2ufQZzzNzkpNsAaOdU2IbPBT5QL+EfD5ybzXlng1v1gNQsLLeQAGzhiXUX4lDkzR9oNJ6K7lXQU2CBgWh2AJ6HwRzgfMxLH6SFibpJRt6GkUcZbLNSFAX6+HJU/q/Wq8ur6b++2K9eXdlr+twjzVBAUtytV5iEh18aSvuZeH58qswHFFnFrQKdKLO/jdbEwvWEQrfOKfA4YLc1YeyRF5CAcP+eDjsT8vBZDKaTKemPy7Hg5EeljjqT0tDo8F4ODBvTZ72ShOtAo6k8/AqhSbuW05sdkbyjf0L/0SunmXmrGOCguiahO6FcaCAra8ah+m8mofHRExpTY9+5cOT/2jJGYaiRMekgHWI2cXd4VEaULDeRZOh+L492OzyyHpJdZe1EMm/v/88Hz0cpZhCpCR25+Tg+VQt0bom0X1wVm+ykN8PLhxBIakhBbLp1mFJ1nfrr9E1xLPghbz8Q8cD6UTSDbVCNZ/vYisfEj1Gg7IT9qRFCI7QZ9SKNqeEm8MvXMCUcPMcmpug9qjsAnsbfd7xotJFwRwQLCFhtSe2P3JdUJrOKmpNUcjc/ZXNP8PYfXTBG7v/6ey+tkwlMz+GKKtt+zsAAP//OZfIefUEAAA",
        "objectset.rio.cattle.io/id": "",
        "objectset.rio.cattle.io/owner-gvk": "apiextensions.k8s.io/v1, Kind=CustomResourceDefinition",
        "objectset.rio.cattle.io/owner-name": "helmchartconfigs.helm.cattle.io",
        "objectset.rio.cattle.io/owner-namespace": ""
      },
      "served_versions": [
        "v1"
      ],
      "stored_version": "v1",
      "categories": [],
      "short_names": [],
      "description": null,
      "instance_count": 0
    },
    {
      "name": "helmcharts.helm.cattle.io",
      "group": "helm.cattle.io",
      "version": "v1",
      "kind": "HelmChart",
      "plural": "helmcharts",
      "singular": "helmchart",
      "scope": "Namespaced",
      "creation_timestamp": "2025-06-26T15:33:35+00:00",
      "labels": {
        "objectset.rio.cattle.io/hash": "29aa74e2abe5947484ef867c989a6921f51b1438"
      },
      "annotations": {
        "objectset.rio.cattle.io/applied": "H4sIAAAAAAAA/+xYTXPbNhP+K+/gTOsdJ05ia6YHV22atImjsWxdOjkswRUFC8RisKBsjUf/vQOS+qYlyHVbH3Ijgf18dhcL7KMAq4boWJER3fCDDx5N+OXO5Jw7iv4/PRWJmCiTia7oleypuEam0kn8BUfKKB94E1Gghww8iO6jAGPIQ9jg8EvpHUrP6DtOUUeC9xqDZBVEiuTJfbo36E7y6eRp05L//aFM9tMeu/YLN1Cg6Iox6kKOwXnuhM8VWZQAtiCDFDFPhHRYOX6jCmQPhRVdU2qdCA0p6r1wjIHHoiveXAB8OMM3kOK7i7MPZ+dnODp//0FenF/A+4s3p6N3p+np2dvzoO2g+fNEsEUZ1OaOStsQbzhYuRAomiB/Ql30gjSRCKtLB3pDhUgEK5OXGtz6elBlHTK6Kd6aiaF781Ghzlh0R6AZE8GSbLD2agFZJhIxrZOPRffPRwFZVoUNdN8p49H1SJdFs3nHZPrgA0Qd9uBL7txRGoSJJRC/UyoS4WeVHvZOmVzMky1ei7IjG/8avoW7EZweXI5+6cNKxs3ORoS0xv2VlOFyIYLboaUV63X9F8EXgjbc1vxpYzFCSkrk2TuwKxk/ry1tSfi+JKoOFJZjLKrDgiyay/7n4dvBcsk6sui8qtNykcCbq1D6cR+Yew4zNF5BXVyN1pRII5iQlIFwgNKhD/uhGCHVKLrelZhsCa0t3KXa8mW+XKlrOahJQU6+jUZfVKFaFTUMIa1zdBXHEqxWu+sUPWxMQ9kj49FEMoRDClep2qo/IzlBd425Yu9m/wKCI1C6dNgnreQsyo/1PI6hV4ZRlg4HE2VvvgyG6NRo1u79HaWfC8hjfAmnJCjz6eam3y7LUjYIepWfVVF6iMARrL10Bbm+o5HSrWZsMmiSoMfEfg/HjuH1wvOixb/VDSUm1Rvi3hhMfkyAXWkuj9FT0V+RuSbaVwlrsak4bhldnALGL8qUD0c70vB9s8tL0YFo4hR1HET0srFORLkfjX1JwSglFfbVJi2X1mos0HjQVVpVViiPxXrzWIv3EzrAOZi1CzwmKWYsvd404VmnaSKmoMvngnLIx3tlMrrn6NzNC4ZVVx403fugC7tsV7HeNxkkkVvN21P1kSp2YWsDsrqORdUsWupdHkHaIzNS+VdoPQZfrAHz0U1Ka7rvOzVVGnP8lSXo6vETF4RX3+IkWEiVVkto94ORZRuVfNCyQ3WXObIvKbHNRbsIXhYXM+tIfqUy8p7pELJvRs9CO/6oNPKMPRZHlOgrbP0/Wvh/W5Q/ulFkN+L6ubY+U1nH5eFkUqboDHrkE2X8CbmTRkGl9enjZKViexYSFXpVIJVx50d1q+FjXrY1R/1Y3XexUrkhh7c2A49PzA0mOOOXPdD/Rms+JHoa/QpuTZVqnLaLkiRTJ88+KAtkjn0oOwSOfKuvbPonT5NDuC4mjC9TlFVVumlotrUM9uQq7JrfMnXNDLuefC0wmM/n3zcwASnResyutma36yPb6gqzFsF6Dh1UYjZcjl3D6nz+VwAAAP//EdZTnQkYAAA",
        "objectset.rio.cattle.io/id": "",
        "objectset.rio.cattle.io/owner-gvk": "apiextensions.k8s.io/v1, Kind=CustomResourceDefinition",
        "objectset.rio.cattle.io/owner-name": "helmcharts.helm.cattle.io",
        "objectset.rio.cattle.io/owner-namespace": ""
      },
      "served_versions": [
        "v1"
      ],
      "stored_version": "v1",
      "categories": [],
      "short_names": [],
      "description": null,
      "instance_count": 0
    },
    {
      "name": "hostpathprovisioners.hostpathprovisioner.kubevirt.io",
      "group": "hostpathprovisioner.kubevirt.io",
      "version": "v1beta1",
      "kind": "HostPathProvisioner",
      "plural": "hostpathprovisioners",
      "singular": "hostpathprovisioner",
      "scope": "Cluster",
      "creation_timestamp": "2025-09-06T12:58:08+00:00",
      "labels": {},
      "annotations": {
        "controller-gen.kubebuilder.io/version": "v0.16.5",
        "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"apiextensions.k8s.io/v1\",\"kind\":\"CustomResourceDefinition\",\"metadata\":{\"annotations\":{\"controller-gen.kubebuilder.io/version\":\"v0.16.5\"},\"name\":\"hostpathprovisioners.hostpathprovisioner.kubevirt.io\"},\"spec\":{\"group\":\"hostpathprovisioner.kubevirt.io\",\"names\":{\"kind\":\"HostPathProvisioner\",\"listKind\":\"HostPathProvisionerList\",\"plural\":\"hostpathprovisioners\",\"singular\":\"hostpathprovisioner\"},\"scope\":\"Cluster\",\"versions\":[{\"name\":\"v1beta1\",\"schema\":{\"openAPIV3Schema\":{\"description\":\"HostPathProvisioner is the Schema for the hostpathprovisioners API\",\"properties\":{\"apiVersion\":{\"description\":\"APIVersion defines the versioned schema of this representation of an object.\\nServers should convert recognized schemas to the latest internal value, and\\nmay reject unrecognized values.\\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources\",\"type\":\"string\"},\"kind\":{\"description\":\"Kind is a string value representing the REST resource this object represents.\\nServers may infer this from the endpoint the client submits requests to.\\nCannot be updated.\\nIn CamelCase.\\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\",\"type\":\"string\"},\"metadata\":{\"type\":\"object\"},\"spec\":{\"description\":\"HostPathProvisionerSpec defines the desired state of HostPathProvisioner\",\"properties\":{\"featureGates\":{\"description\":\"FeatureGates are a list of specific enabled feature gates\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"set\"},\"imagePullPolicy\":{\"description\":\"ImagePullPolicy is the container pull policy for the host path provisioner containers\",\"type\":\"string\"},\"pathConfig\":{\"description\":\"PathConfig describes the location and layout of PV storage on nodes. Deprecated\",\"properties\":{\"path\":{\"description\":\"Path The path the directories for the PVs are created under\",\"type\":\"string\"},\"useNamingPrefix\":{\"description\":\"UseNamingPrefix Use the name of the PVC requesting the PV as part of the directory created\",\"type\":\"boolean\"}},\"type\":\"object\"},\"storagePools\":{\"description\":\"StoragePools are a list of storage pools\",\"items\":{\"description\":\"StoragePool defines how and where hostpath provisioner can use storage to create volumes.\",\"properties\":{\"name\":{\"description\":\"Name specifies an identifier that is used in the storage class arguments to identify the source to use.\",\"type\":\"string\"},\"path\":{\"description\":\"path the path to use on the host, this is a required field\",\"type\":\"string\"},\"pvcTemplate\":{\"description\":\"PVCTemplate is the template of the PVC to create as the source volume\",\"properties\":{\"accessModes\":{\"description\":\"accessModes contains the desired access modes the volume should have.\\nMore info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"dataSource\":{\"description\":\"dataSource field can be used to specify either:\\n* An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot)\\n* An existing PVC (PersistentVolumeClaim)\\nIf the provisioner or an external controller can support the specified data source,\\nit will create a new volume based on the contents of the specified data source.\\nWhen the AnyVolumeDataSource feature gate is enabled, dataSource contents will be copied to dataSourceRef,\\nand dataSourceRef contents will be copied to dataSource when dataSourceRef.namespace is not specified.\\nIf the namespace is specified, then dataSourceRef will not be copied to dataSource.\",\"properties\":{\"apiGroup\":{\"description\":\"APIGroup is the group for the resource being referenced.\\nIf APIGroup is not specified, the specified Kind must be in the core API group.\\nFor any other third-party types, APIGroup is required.\",\"type\":\"string\"},\"kind\":{\"description\":\"Kind is the type of resource being referenced\",\"type\":\"string\"},\"name\":{\"description\":\"Name is the name of resource being referenced\",\"type\":\"string\"}},\"required\":[\"kind\",\"name\"],\"type\":\"object\",\"x-kubernetes-map-type\":\"atomic\"},\"dataSourceRef\":{\"description\":\"dataSourceRef specifies the object from which to populate the volume with data, if a non-empty\\nvolume is desired. This may be any object from a non-empty API group (non\\ncore object) or a PersistentVolumeClaim object.\\nWhen this field is specified, volume binding will only succeed if the type of\\nthe specified object matches some installed volume populator or dynamic\\nprovisioner.\\nThis field will replace the functionality of the dataSource field and as such\\nif both fields are non-empty, they must have the same value. For backwards\\ncompatibility, when namespace isn't specified in dataSourceRef,\\nboth fields (dataSource and dataSourceRef) will be set to the same\\nvalue automatically if one of them is empty and the other is non-empty.\\nWhen namespace is specified in dataSourceRef,\\ndataSource isn't set to the same value and must be empty.\\nThere are three important differences between dataSource and dataSourceRef:\\n* While dataSource only allows two specific types of objects, dataSourceRef\\n  allows any non-core object, as well as PersistentVolumeClaim objects.\\n* While dataSource ignores disallowed values (dropping them), dataSourceRef\\n  preserves all values, and generates an error if a disallowed value is\\n  specified.\\n* While dataSource only allows local objects, dataSourceRef allows objects\\n  in any namespaces.\\n(Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled.\\n(Alpha) Using the namespace field of dataSourceRef requires the CrossNamespaceVolumeDataSource feature gate to be enabled.\",\"properties\":{\"apiGroup\":{\"description\":\"APIGroup is the group for the resource being referenced.\\nIf APIGroup is not specified, the specified Kind must be in the core API group.\\nFor any other third-party types, APIGroup is required.\",\"type\":\"string\"},\"kind\":{\"description\":\"Kind is the type of resource being referenced\",\"type\":\"string\"},\"name\":{\"description\":\"Name is the name of resource being referenced\",\"type\":\"string\"},\"namespace\":{\"description\":\"Namespace is the namespace of resource being referenced\\nNote that when a namespace is specified, a gateway.networking.k8s.io/ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details.\\n(Alpha) This field requires the CrossNamespaceVolumeDataSource feature gate to be enabled.\",\"type\":\"string\"}},\"required\":[\"kind\",\"name\"],\"type\":\"object\"},\"resources\":{\"description\":\"resources represents the minimum resources the volume should have.\\nIf RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements\\nthat are lower than previous value but must still be higher than capacity recorded in the\\nstatus field of the claim.\\nMore info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources\",\"properties\":{\"limits\":{\"additionalProperties\":{\"anyOf\":[{\"type\":\"integer\"},{\"type\":\"string\"}],\"pattern\":\"^(\\\\+|-)?(([0-9]+(\\\\.[0-9]*)?)|(\\\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\\\+|-)?(([0-9]+(\\\\.[0-9]*)?)|(\\\\.[0-9]+))))?$\",\"x-kubernetes-int-or-string\":true},\"description\":\"Limits describes the maximum amount of compute resources allowed.\\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/\",\"type\":\"object\"},\"requests\":{\"additionalProperties\":{\"anyOf\":[{\"type\":\"integer\"},{\"type\":\"string\"}],\"pattern\":\"^(\\\\+|-)?(([0-9]+(\\\\.[0-9]*)?)|(\\\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\\\+|-)?(([0-9]+(\\\\.[0-9]*)?)|(\\\\.[0-9]+))))?$\",\"x-kubernetes-int-or-string\":true},\"description\":\"Requests describes the minimum amount of compute resources required.\\nIf Requests is omitted for a container, it defaults to Limits if that is explicitly specified,\\notherwise to an implementation-defined value. Requests cannot exceed Limits.\\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/\",\"type\":\"object\"}},\"type\":\"object\"},\"selector\":{\"description\":\"selector is a label query over volumes to consider for binding.\",\"properties\":{\"matchExpressions\":{\"description\":\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\",\"items\":{\"description\":\"A label selector requirement is a selector that contains values, a key, and an operator that\\nrelates the key and values.\",\"properties\":{\"key\":{\"description\":\"key is the label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"operator represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists and DoesNotExist.\",\"type\":\"string\"},\"values\":{\"description\":\"values is an array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. This array is replaced during a strategic\\nmerge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"matchLabels\":{\"additionalProperties\":{\"type\":\"string\"},\"description\":\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\\nmap is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the\\noperator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\",\"type\":\"object\"}},\"type\":\"object\",\"x-kubernetes-map-type\":\"atomic\"},\"storageClassName\":{\"description\":\"storageClassName is the name of the StorageClass required by the claim.\\nMore info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1\",\"type\":\"string\"},\"volumeAttributesClassName\":{\"description\":\"volumeAttributesClassName may be used to set the VolumeAttributesClass used by this claim.\\nIf specified, the CSI driver will create or update the volume with the attributes defined\\nin the corresponding VolumeAttributesClass. This has a different purpose than storageClassName,\\nit can be changed after the claim is created. An empty string value means that no VolumeAttributesClass\\nwill be applied to the claim but it's not allowed to reset this field to empty string once it is set.\\nIf unspecified and the PersistentVolumeClaim is unbound, the default VolumeAttributesClass\\nwill be set by the persistentvolume controller if it exists.\\nIf the resource referred to by volumeAttributesClass does not exist, this PersistentVolumeClaim will be\\nset to a Pending state, as reflected by the modifyVolumeStatus field, until such as a resource\\nexists.\\nMore info: https://kubernetes.io/docs/concepts/storage/volume-attributes-classes/\\n(Beta) Using this field requires the VolumeAttributesClass feature gate to be enabled (off by default).\",\"type\":\"string\"},\"volumeMode\":{\"description\":\"volumeMode defines what type of volume is required by the claim.\\nValue of Filesystem is implied when not included in claim spec.\",\"type\":\"string\"},\"volumeName\":{\"description\":\"volumeName is the binding reference to the PersistentVolume backing this claim.\",\"type\":\"string\"}},\"type\":\"object\"}},\"required\":[\"name\",\"path\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"workload\":{\"description\":\"Restrict on which nodes HPP workload pods will be scheduled\",\"properties\":{\"affinity\":{\"description\":\"affinity enables pod affinity/anti-affinity placement expanding the types of constraints\\nthat can be expressed with nodeSelector.\\naffinity is going to be applied to the relevant kind of pods in parallel with nodeSelector\\nSee https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#affinity-and-anti-affinity\",\"properties\":{\"nodeAffinity\":{\"description\":\"Describes node affinity scheduling rules for the pod.\",\"properties\":{\"preferredDuringSchedulingIgnoredDuringExecution\":{\"description\":\"The scheduler will prefer to schedule pods to nodes that satisfy\\nthe affinity expressions specified by this field, but it may choose\\na node that violates one or more of the expressions. The node that is\\nmost preferred is the one with the greatest sum of weights, i.e.\\nfor each node that meets all of the scheduling requirements (resource\\nrequest, requiredDuringScheduling affinity expressions, etc.),\\ncompute a sum by iterating through the elements of this field and adding\\n\\\"weight\\\" to the sum if the node matches the corresponding matchExpressions; the\\nnode(s) with the highest sum are the most preferred.\",\"items\":{\"description\":\"An empty preferred scheduling term matches all objects with implicit weight 0\\n(i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).\",\"properties\":{\"preference\":{\"description\":\"A node selector term, associated with the corresponding weight.\",\"properties\":{\"matchExpressions\":{\"description\":\"A list of node selector requirements by node's labels.\",\"items\":{\"description\":\"A node selector requirement is a selector that contains values, a key, and an operator\\nthat relates the key and values.\",\"properties\":{\"key\":{\"description\":\"The label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"Represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.\",\"type\":\"string\"},\"values\":{\"description\":\"An array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. If the operator is Gt or Lt, the values\\narray must have a single element, which will be interpreted as an integer.\\nThis array is replaced during a strategic merge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"matchFields\":{\"description\":\"A list of node selector requirements by node's fields.\",\"items\":{\"description\":\"A node selector requirement is a selector that contains values, a key, and an operator\\nthat relates the key and values.\",\"properties\":{\"key\":{\"description\":\"The label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"Represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.\",\"type\":\"string\"},\"values\":{\"description\":\"An array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. If the operator is Gt or Lt, the values\\narray must have a single element, which will be interpreted as an integer.\\nThis array is replaced during a strategic merge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"type\":\"object\",\"x-kubernetes-map-type\":\"atomic\"},\"weight\":{\"description\":\"Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.\",\"format\":\"int32\",\"type\":\"integer\"}},\"required\":[\"preference\",\"weight\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"requiredDuringSchedulingIgnoredDuringExecution\":{\"description\":\"If the affinity requirements specified by this field are not met at\\nscheduling time, the pod will not be scheduled onto the node.\\nIf the affinity requirements specified by this field cease to be met\\nat some point during pod execution (e.g. due to an update), the system\\nmay or may not try to eventually evict the pod from its node.\",\"properties\":{\"nodeSelectorTerms\":{\"description\":\"Required. A list of node selector terms. The terms are ORed.\",\"items\":{\"description\":\"A null or empty node selector term matches no objects. The requirements of\\nthem are ANDed.\\nThe TopologySelectorTerm type implements a subset of the NodeSelectorTerm.\",\"properties\":{\"matchExpressions\":{\"description\":\"A list of node selector requirements by node's labels.\",\"items\":{\"description\":\"A node selector requirement is a selector that contains values, a key, and an operator\\nthat relates the key and values.\",\"properties\":{\"key\":{\"description\":\"The label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"Represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.\",\"type\":\"string\"},\"values\":{\"description\":\"An array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. If the operator is Gt or Lt, the values\\narray must have a single element, which will be interpreted as an integer.\\nThis array is replaced during a strategic merge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"matchFields\":{\"description\":\"A list of node selector requirements by node's fields.\",\"items\":{\"description\":\"A node selector requirement is a selector that contains values, a key, and an operator\\nthat relates the key and values.\",\"properties\":{\"key\":{\"description\":\"The label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"Represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.\",\"type\":\"string\"},\"values\":{\"description\":\"An array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. If the operator is Gt or Lt, the values\\narray must have a single element, which will be interpreted as an integer.\\nThis array is replaced during a strategic merge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"type\":\"object\",\"x-kubernetes-map-type\":\"atomic\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"nodeSelectorTerms\"],\"type\":\"object\",\"x-kubernetes-map-type\":\"atomic\"}},\"type\":\"object\"},\"podAffinity\":{\"description\":\"Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).\",\"properties\":{\"preferredDuringSchedulingIgnoredDuringExecution\":{\"description\":\"The scheduler will prefer to schedule pods to nodes that satisfy\\nthe affinity expressions specified by this field, but it may choose\\na node that violates one or more of the expressions. The node that is\\nmost preferred is the one with the greatest sum of weights, i.e.\\nfor each node that meets all of the scheduling requirements (resource\\nrequest, requiredDuringScheduling affinity expressions, etc.),\\ncompute a sum by iterating through the elements of this field and adding\\n\\\"weight\\\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the\\nnode(s) with the highest sum are the most preferred.\",\"items\":{\"description\":\"The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)\",\"properties\":{\"podAffinityTerm\":{\"description\":\"Required. A pod affinity term, associated with the corresponding weight.\",\"properties\":{\"labelSelector\":{\"description\":\"A label query over a set of resources, in this case pods.\\nIf it's null, this PodAffinityTerm matches with no Pods.\",\"properties\":{\"matchExpressions\":{\"description\":\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\",\"items\":{\"description\":\"A label selector requirement is a selector that contains values, a key, and an operator that\\nrelates the key and values.\",\"properties\":{\"key\":{\"description\":\"key is the label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"operator represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists and DoesNotExist.\",\"type\":\"string\"},\"values\":{\"description\":\"values is an array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. This array is replaced during a strategic\\nmerge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"matchLabels\":{\"additionalProperties\":{\"type\":\"string\"},\"description\":\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\\nmap is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the\\noperator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\",\"type\":\"object\"}},\"type\":\"object\",\"x-kubernetes-map-type\":\"atomic\"},\"matchLabelKeys\":{\"description\":\"MatchLabelKeys is a set of pod label keys to select which pods will\\nbe taken into consideration. The keys are used to lookup values from the\\nincoming pod labels, those key-value labels are merged with 'labelSelector' as 'key in (value)'\\nto select the group of existing pods which pods will be taken into consideration\\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\\npod labels will be ignored. The default value is empty.\\nThe same key is forbidden to exist in both matchLabelKeys and labelSelector.\\nAlso, matchLabelKeys cannot be set when labelSelector isn't set.\\nThis is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"mismatchLabelKeys\":{\"description\":\"MismatchLabelKeys is a set of pod label keys to select which pods will\\nbe taken into consideration. The keys are used to lookup values from the\\nincoming pod labels, those key-value labels are merged with 'labelSelector' as 'key notin (value)'\\nto select the group of existing pods which pods will be taken into consideration\\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\\npod labels will be ignored. The default value is empty.\\nThe same key is forbidden to exist in both mismatchLabelKeys and labelSelector.\\nAlso, mismatchLabelKeys cannot be set when labelSelector isn't set.\\nThis is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"namespaceSelector\":{\"description\":\"A label query over the set of namespaces that the term applies to.\\nThe term is applied to the union of the namespaces selected by this field\\nand the ones listed in the namespaces field.\\nnull selector and null or empty namespaces list means \\\"this pod's namespace\\\".\\nAn empty selector ({}) matches all namespaces.\",\"properties\":{\"matchExpressions\":{\"description\":\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\",\"items\":{\"description\":\"A label selector requirement is a selector that contains values, a key, and an operator that\\nrelates the key and values.\",\"properties\":{\"key\":{\"description\":\"key is the label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"operator represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists and DoesNotExist.\",\"type\":\"string\"},\"values\":{\"description\":\"values is an array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. This array is replaced during a strategic\\nmerge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"matchLabels\":{\"additionalProperties\":{\"type\":\"string\"},\"description\":\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\\nmap is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the\\noperator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\",\"type\":\"object\"}},\"type\":\"object\",\"x-kubernetes-map-type\":\"atomic\"},\"namespaces\":{\"description\":\"namespaces specifies a static list of namespace names that the term applies to.\\nThe term is applied to the union of the namespaces listed in this field\\nand the ones selected by namespaceSelector.\\nnull or empty namespaces list and null namespaceSelector means \\\"this pod's namespace\\\".\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"topologyKey\":{\"description\":\"This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching\\nthe labelSelector in the specified namespaces, where co-located is defined as running on a node\\nwhose value of the label with key topologyKey matches that of any node on which any of the\\nselected pods is running.\\nEmpty topologyKey is not allowed.\",\"type\":\"string\"}},\"required\":[\"topologyKey\"],\"type\":\"object\"},\"weight\":{\"description\":\"weight associated with matching the corresponding podAffinityTerm,\\nin the range 1-100.\",\"format\":\"int32\",\"type\":\"integer\"}},\"required\":[\"podAffinityTerm\",\"weight\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"requiredDuringSchedulingIgnoredDuringExecution\":{\"description\":\"If the affinity requirements specified by this field are not met at\\nscheduling time, the pod will not be scheduled onto the node.\\nIf the affinity requirements specified by this field cease to be met\\nat some point during pod execution (e.g. due to a pod label update), the\\nsystem may or may not try to eventually evict the pod from its node.\\nWhen there are multiple elements, the lists of nodes corresponding to each\\npodAffinityTerm are intersected, i.e. all terms must be satisfied.\",\"items\":{\"description\":\"Defines a set of pods (namely those matching the labelSelector\\nrelative to the given namespace(s)) that this pod should be\\nco-located (affinity) or not co-located (anti-affinity) with,\\nwhere co-located is defined as running on a node whose value of\\nthe label with key \\u003ctopologyKey\\u003e matches that of any node on which\\na pod of the set of pods is running\",\"properties\":{\"labelSelector\":{\"description\":\"A label query over a set of resources, in this case pods.\\nIf it's null, this PodAffinityTerm matches with no Pods.\",\"properties\":{\"matchExpressions\":{\"description\":\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\",\"items\":{\"description\":\"A label selector requirement is a selector that contains values, a key, and an operator that\\nrelates the key and values.\",\"properties\":{\"key\":{\"description\":\"key is the label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"operator represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists and DoesNotExist.\",\"type\":\"string\"},\"values\":{\"description\":\"values is an array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. This array is replaced during a strategic\\nmerge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"matchLabels\":{\"additionalProperties\":{\"type\":\"string\"},\"description\":\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\\nmap is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the\\noperator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\",\"type\":\"object\"}},\"type\":\"object\",\"x-kubernetes-map-type\":\"atomic\"},\"matchLabelKeys\":{\"description\":\"MatchLabelKeys is a set of pod label keys to select which pods will\\nbe taken into consideration. The keys are used to lookup values from the\\nincoming pod labels, those key-value labels are merged with 'labelSelector' as 'key in (value)'\\nto select the group of existing pods which pods will be taken into consideration\\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\\npod labels will be ignored. The default value is empty.\\nThe same key is forbidden to exist in both matchLabelKeys and labelSelector.\\nAlso, matchLabelKeys cannot be set when labelSelector isn't set.\\nThis is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"mismatchLabelKeys\":{\"description\":\"MismatchLabelKeys is a set of pod label keys to select which pods will\\nbe taken into consideration. The keys are used to lookup values from the\\nincoming pod labels, those key-value labels are merged with 'labelSelector' as 'key notin (value)'\\nto select the group of existing pods which pods will be taken into consideration\\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\\npod labels will be ignored. The default value is empty.\\nThe same key is forbidden to exist in both mismatchLabelKeys and labelSelector.\\nAlso, mismatchLabelKeys cannot be set when labelSelector isn't set.\\nThis is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"namespaceSelector\":{\"description\":\"A label query over the set of namespaces that the term applies to.\\nThe term is applied to the union of the namespaces selected by this field\\nand the ones listed in the namespaces field.\\nnull selector and null or empty namespaces list means \\\"this pod's namespace\\\".\\nAn empty selector ({}) matches all namespaces.\",\"properties\":{\"matchExpressions\":{\"description\":\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\",\"items\":{\"description\":\"A label selector requirement is a selector that contains values, a key, and an operator that\\nrelates the key and values.\",\"properties\":{\"key\":{\"description\":\"key is the label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"operator represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists and DoesNotExist.\",\"type\":\"string\"},\"values\":{\"description\":\"values is an array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. This array is replaced during a strategic\\nmerge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"matchLabels\":{\"additionalProperties\":{\"type\":\"string\"},\"description\":\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\\nmap is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the\\noperator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\",\"type\":\"object\"}},\"type\":\"object\",\"x-kubernetes-map-type\":\"atomic\"},\"namespaces\":{\"description\":\"namespaces specifies a static list of namespace names that the term applies to.\\nThe term is applied to the union of the namespaces listed in this field\\nand the ones selected by namespaceSelector.\\nnull or empty namespaces list and null namespaceSelector means \\\"this pod's namespace\\\".\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"topologyKey\":{\"description\":\"This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching\\nthe labelSelector in the specified namespaces, where co-located is defined as running on a node\\nwhose value of the label with key topologyKey matches that of any node on which any of the\\nselected pods is running.\\nEmpty topologyKey is not allowed.\",\"type\":\"string\"}},\"required\":[\"topologyKey\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"type\":\"object\"},\"podAntiAffinity\":{\"description\":\"Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).\",\"properties\":{\"preferredDuringSchedulingIgnoredDuringExecution\":{\"description\":\"The scheduler will prefer to schedule pods to nodes that satisfy\\nthe anti-affinity expressions specified by this field, but it may choose\\na node that violates one or more of the expressions. The node that is\\nmost preferred is the one with the greatest sum of weights, i.e.\\nfor each node that meets all of the scheduling requirements (resource\\nrequest, requiredDuringScheduling anti-affinity expressions, etc.),\\ncompute a sum by iterating through the elements of this field and adding\\n\\\"weight\\\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the\\nnode(s) with the highest sum are the most preferred.\",\"items\":{\"description\":\"The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)\",\"properties\":{\"podAffinityTerm\":{\"description\":\"Required. A pod affinity term, associated with the corresponding weight.\",\"properties\":{\"labelSelector\":{\"description\":\"A label query over a set of resources, in this case pods.\\nIf it's null, this PodAffinityTerm matches with no Pods.\",\"properties\":{\"matchExpressions\":{\"description\":\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\",\"items\":{\"description\":\"A label selector requirement is a selector that contains values, a key, and an operator that\\nrelates the key and values.\",\"properties\":{\"key\":{\"description\":\"key is the label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"operator represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists and DoesNotExist.\",\"type\":\"string\"},\"values\":{\"description\":\"values is an array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. This array is replaced during a strategic\\nmerge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"matchLabels\":{\"additionalProperties\":{\"type\":\"string\"},\"description\":\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\\nmap is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the\\noperator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\",\"type\":\"object\"}},\"type\":\"object\",\"x-kubernetes-map-type\":\"atomic\"},\"matchLabelKeys\":{\"description\":\"MatchLabelKeys is a set of pod label keys to select which pods will\\nbe taken into consideration. The keys are used to lookup values from the\\nincoming pod labels, those key-value labels are merged with 'labelSelector' as 'key in (value)'\\nto select the group of existing pods which pods will be taken into consideration\\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\\npod labels will be ignored. The default value is empty.\\nThe same key is forbidden to exist in both matchLabelKeys and labelSelector.\\nAlso, matchLabelKeys cannot be set when labelSelector isn't set.\\nThis is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"mismatchLabelKeys\":{\"description\":\"MismatchLabelKeys is a set of pod label keys to select which pods will\\nbe taken into consideration. The keys are used to lookup values from the\\nincoming pod labels, those key-value labels are merged with 'labelSelector' as 'key notin (value)'\\nto select the group of existing pods which pods will be taken into consideration\\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\\npod labels will be ignored. The default value is empty.\\nThe same key is forbidden to exist in both mismatchLabelKeys and labelSelector.\\nAlso, mismatchLabelKeys cannot be set when labelSelector isn't set.\\nThis is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"namespaceSelector\":{\"description\":\"A label query over the set of namespaces that the term applies to.\\nThe term is applied to the union of the namespaces selected by this field\\nand the ones listed in the namespaces field.\\nnull selector and null or empty namespaces list means \\\"this pod's namespace\\\".\\nAn empty selector ({}) matches all namespaces.\",\"properties\":{\"matchExpressions\":{\"description\":\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\",\"items\":{\"description\":\"A label selector requirement is a selector that contains values, a key, and an operator that\\nrelates the key and values.\",\"properties\":{\"key\":{\"description\":\"key is the label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"operator represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists and DoesNotExist.\",\"type\":\"string\"},\"values\":{\"description\":\"values is an array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. This array is replaced during a strategic\\nmerge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"matchLabels\":{\"additionalProperties\":{\"type\":\"string\"},\"description\":\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\\nmap is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the\\noperator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\",\"type\":\"object\"}},\"type\":\"object\",\"x-kubernetes-map-type\":\"atomic\"},\"namespaces\":{\"description\":\"namespaces specifies a static list of namespace names that the term applies to.\\nThe term is applied to the union of the namespaces listed in this field\\nand the ones selected by namespaceSelector.\\nnull or empty namespaces list and null namespaceSelector means \\\"this pod's namespace\\\".\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"topologyKey\":{\"description\":\"This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching\\nthe labelSelector in the specified namespaces, where co-located is defined as running on a node\\nwhose value of the label with key topologyKey matches that of any node on which any of the\\nselected pods is running.\\nEmpty topologyKey is not allowed.\",\"type\":\"string\"}},\"required\":[\"topologyKey\"],\"type\":\"object\"},\"weight\":{\"description\":\"weight associated with matching the corresponding podAffinityTerm,\\nin the range 1-100.\",\"format\":\"int32\",\"type\":\"integer\"}},\"required\":[\"podAffinityTerm\",\"weight\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"requiredDuringSchedulingIgnoredDuringExecution\":{\"description\":\"If the anti-affinity requirements specified by this field are not met at\\nscheduling time, the pod will not be scheduled onto the node.\\nIf the anti-affinity requirements specified by this field cease to be met\\nat some point during pod execution (e.g. due to a pod label update), the\\nsystem may or may not try to eventually evict the pod from its node.\\nWhen there are multiple elements, the lists of nodes corresponding to each\\npodAffinityTerm are intersected, i.e. all terms must be satisfied.\",\"items\":{\"description\":\"Defines a set of pods (namely those matching the labelSelector\\nrelative to the given namespace(s)) that this pod should be\\nco-located (affinity) or not co-located (anti-affinity) with,\\nwhere co-located is defined as running on a node whose value of\\nthe label with key \\u003ctopologyKey\\u003e matches that of any node on which\\na pod of the set of pods is running\",\"properties\":{\"labelSelector\":{\"description\":\"A label query over a set of resources, in this case pods.\\nIf it's null, this PodAffinityTerm matches with no Pods.\",\"properties\":{\"matchExpressions\":{\"description\":\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\",\"items\":{\"description\":\"A label selector requirement is a selector that contains values, a key, and an operator that\\nrelates the key and values.\",\"properties\":{\"key\":{\"description\":\"key is the label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"operator represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists and DoesNotExist.\",\"type\":\"string\"},\"values\":{\"description\":\"values is an array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. This array is replaced during a strategic\\nmerge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"matchLabels\":{\"additionalProperties\":{\"type\":\"string\"},\"description\":\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\\nmap is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the\\noperator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\",\"type\":\"object\"}},\"type\":\"object\",\"x-kubernetes-map-type\":\"atomic\"},\"matchLabelKeys\":{\"description\":\"MatchLabelKeys is a set of pod label keys to select which pods will\\nbe taken into consideration. The keys are used to lookup values from the\\nincoming pod labels, those key-value labels are merged with 'labelSelector' as 'key in (value)'\\nto select the group of existing pods which pods will be taken into consideration\\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\\npod labels will be ignored. The default value is empty.\\nThe same key is forbidden to exist in both matchLabelKeys and labelSelector.\\nAlso, matchLabelKeys cannot be set when labelSelector isn't set.\\nThis is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"mismatchLabelKeys\":{\"description\":\"MismatchLabelKeys is a set of pod label keys to select which pods will\\nbe taken into consideration. The keys are used to lookup values from the\\nincoming pod labels, those key-value labels are merged with 'labelSelector' as 'key notin (value)'\\nto select the group of existing pods which pods will be taken into consideration\\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\\npod labels will be ignored. The default value is empty.\\nThe same key is forbidden to exist in both mismatchLabelKeys and labelSelector.\\nAlso, mismatchLabelKeys cannot be set when labelSelector isn't set.\\nThis is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"namespaceSelector\":{\"description\":\"A label query over the set of namespaces that the term applies to.\\nThe term is applied to the union of the namespaces selected by this field\\nand the ones listed in the namespaces field.\\nnull selector and null or empty namespaces list means \\\"this pod's namespace\\\".\\nAn empty selector ({}) matches all namespaces.\",\"properties\":{\"matchExpressions\":{\"description\":\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\",\"items\":{\"description\":\"A label selector requirement is a selector that contains values, a key, and an operator that\\nrelates the key and values.\",\"properties\":{\"key\":{\"description\":\"key is the label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"operator represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists and DoesNotExist.\",\"type\":\"string\"},\"values\":{\"description\":\"values is an array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. This array is replaced during a strategic\\nmerge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"matchLabels\":{\"additionalProperties\":{\"type\":\"string\"},\"description\":\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\\nmap is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the\\noperator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\",\"type\":\"object\"}},\"type\":\"object\",\"x-kubernetes-map-type\":\"atomic\"},\"namespaces\":{\"description\":\"namespaces specifies a static list of namespace names that the term applies to.\\nThe term is applied to the union of the namespaces listed in this field\\nand the ones selected by namespaceSelector.\\nnull or empty namespaces list and null namespaceSelector means \\\"this pod's namespace\\\".\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"topologyKey\":{\"description\":\"This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching\\nthe labelSelector in the specified namespaces, where co-located is defined as running on a node\\nwhose value of the label with key topologyKey matches that of any node on which any of the\\nselected pods is running.\\nEmpty topologyKey is not allowed.\",\"type\":\"string\"}},\"required\":[\"topologyKey\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"type\":\"object\"}},\"type\":\"object\"},\"nodeSelector\":{\"additionalProperties\":{\"type\":\"string\"},\"description\":\"nodeSelector is the node selector applied to the relevant kind of pods\\nIt specifies a map of key-value pairs: for the pod to be eligible to run on a node,\\nthe node must have each of the indicated key-value pairs as labels\\n(it can have additional labels as well).\\nSee https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#nodeselector\",\"type\":\"object\"},\"tolerations\":{\"description\":\"tolerations is a list of tolerations applied to the relevant kind of pods\\nSee https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/ for more info.\\nThese are additional tolerations other than default ones.\",\"items\":{\"description\":\"The pod this Toleration is attached to tolerates any taint that matches\\nthe triple \\u003ckey,value,effect\\u003e using the matching operator \\u003coperator\\u003e.\",\"properties\":{\"effect\":{\"description\":\"Effect indicates the taint effect to match. Empty means match all taint effects.\\nWhen specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.\",\"type\":\"string\"},\"key\":{\"description\":\"Key is the taint key that the toleration applies to. Empty means match all taint keys.\\nIf the key is empty, operator must be Exists; this combination means to match all values and all keys.\",\"type\":\"string\"},\"operator\":{\"description\":\"Operator represents a key's relationship to the value.\\nValid operators are Exists and Equal. Defaults to Equal.\\nExists is equivalent to wildcard for value, so that a pod can\\ntolerate all taints of a particular category.\",\"type\":\"string\"},\"tolerationSeconds\":{\"description\":\"TolerationSeconds represents the period of time the toleration (which must be\\nof effect NoExecute, otherwise this field is ignored) tolerates the taint. By default,\\nit is not set, which means tolerate the taint forever (do not evict). Zero and\\nnegative values will be treated as 0 (evict immediately) by the system.\",\"format\":\"int64\",\"type\":\"integer\"},\"value\":{\"description\":\"Value is the taint value the toleration matches to.\\nIf the operator is Exists, the value should be empty, otherwise just a regular string.\",\"type\":\"string\"}},\"type\":\"object\"},\"type\":\"array\"}},\"type\":\"object\"}},\"type\":\"object\"},\"status\":{\"description\":\"HostPathProvisionerStatus defines the observed state of HostPathProvisioner\",\"properties\":{\"conditions\":{\"description\":\"Conditions contains the current conditions observed by the operator\",\"items\":{\"description\":\"Condition represents the state of the operator's\\nreconciliation functionality.\",\"properties\":{\"lastHeartbeatTime\":{\"format\":\"date-time\",\"type\":\"string\"},\"lastTransitionTime\":{\"format\":\"date-time\",\"type\":\"string\"},\"message\":{\"type\":\"string\"},\"reason\":{\"type\":\"string\"},\"status\":{\"type\":\"string\"},\"type\":{\"description\":\"ConditionType is the state of the operator's reconciliation functionality.\",\"type\":\"string\"}},\"required\":[\"status\",\"type\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"observedVersion\":{\"description\":\"ObservedVersion The observed version of the HostPathProvisioner deployment\",\"type\":\"string\"},\"operatorVersion\":{\"description\":\"OperatorVersion The version of the HostPathProvisioner Operator\",\"type\":\"string\"},\"storagePoolStatuses\":{\"items\":{\"description\":\"StoragePoolStatus is the status of the named storage pool\",\"properties\":{\"claimStatuses\":{\"description\":\"The status of all the claims.\",\"items\":{\"description\":\"ClaimStatus defines the storage claim status for each PVC in a storage pool\",\"properties\":{\"name\":{\"description\":\"Name of the PersistentVolumeClaim\",\"type\":\"string\"},\"status\":{\"description\":\"Status of the PersistentVolumeClaim\",\"properties\":{\"accessModes\":{\"description\":\"accessModes contains the actual access modes the volume backing the PVC has.\\nMore info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"allocatedResourceStatuses\":{\"additionalProperties\":{\"description\":\"When a controller receives persistentvolume claim update with ClaimResourceStatus for a resource\\nthat it does not recognizes, then it should ignore that update and let other controllers\\nhandle it.\",\"type\":\"string\"},\"description\":\"allocatedResourceStatuses stores status of resource being resized for the given PVC.\\nKey names follow standard Kubernetes label syntax. Valid values are either:\\n\\t* Un-prefixed keys:\\n\\t\\t- storage - the capacity of the volume.\\n\\t* Custom resources must use implementation-defined prefixed names such as \\\"example.com/my-custom-resource\\\"\\nApart from above values - keys that are unprefixed or have kubernetes.io prefix are considered\\nreserved and hence may not be used.\\n\\nClaimResourceStatus can be in any of following states:\\n\\t- ControllerResizeInProgress:\\n\\t\\tState set when resize controller starts resizing the volume in control-plane.\\n\\t- ControllerResizeFailed:\\n\\t\\tState set when resize has failed in resize controller with a terminal error.\\n\\t- NodeResizePending:\\n\\t\\tState set when resize controller has finished resizing the volume but further resizing of\\n\\t\\tvolume is needed on the node.\\n\\t- NodeResizeInProgress:\\n\\t\\tState set when kubelet starts resizing the volume.\\n\\t- NodeResizeFailed:\\n\\t\\tState set when resizing has failed in kubelet with a terminal error. Transient errors don't set\\n\\t\\tNodeResizeFailed.\\nFor example: if expanding a PVC for more capacity - this field can be one of the following states:\\n\\t- pvc.status.allocatedResourceStatus['storage'] = \\\"ControllerResizeInProgress\\\"\\n     - pvc.status.allocatedResourceStatus['storage'] = \\\"ControllerResizeFailed\\\"\\n     - pvc.status.allocatedResourceStatus['storage'] = \\\"NodeResizePending\\\"\\n     - pvc.status.allocatedResourceStatus['storage'] = \\\"NodeResizeInProgress\\\"\\n     - pvc.status.allocatedResourceStatus['storage'] = \\\"NodeResizeFailed\\\"\\nWhen this field is not set, it means that no resize operation is in progress for the given PVC.\\n\\nA controller that receives PVC update with previously unknown resourceName or ClaimResourceStatus\\nshould ignore the update for the purpose it was designed. For example - a controller that\\nonly is responsible for resizing capacity of the volume, should ignore PVC updates that change other valid\\nresources associated with PVC.\\n\\nThis is an alpha field and requires enabling RecoverVolumeExpansionFailure feature.\",\"type\":\"object\",\"x-kubernetes-map-type\":\"granular\"},\"allocatedResources\":{\"additionalProperties\":{\"anyOf\":[{\"type\":\"integer\"},{\"type\":\"string\"}],\"pattern\":\"^(\\\\+|-)?(([0-9]+(\\\\.[0-9]*)?)|(\\\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\\\+|-)?(([0-9]+(\\\\.[0-9]*)?)|(\\\\.[0-9]+))))?$\",\"x-kubernetes-int-or-string\":true},\"description\":\"allocatedResources tracks the resources allocated to a PVC including its capacity.\\nKey names follow standard Kubernetes label syntax. Valid values are either:\\n\\t* Un-prefixed keys:\\n\\t\\t- storage - the capacity of the volume.\\n\\t* Custom resources must use implementation-defined prefixed names such as \\\"example.com/my-custom-resource\\\"\\nApart from above values - keys that are unprefixed or have kubernetes.io prefix are considered\\nreserved and hence may not be used.\\n\\nCapacity reported here may be larger than the actual capacity when a volume expansion operation\\nis requested.\\nFor storage quota, the larger value from allocatedResources and PVC.spec.resources is used.\\nIf allocatedResources is not set, PVC.spec.resources alone is used for quota calculation.\\nIf a volume expansion capacity request is lowered, allocatedResources is only\\nlowered if there are no expansion operations in progress and if the actual volume capacity\\nis equal or lower than the requested capacity.\\n\\nA controller that receives PVC update with previously unknown resourceName\\nshould ignore the update for the purpose it was designed. For example - a controller that\\nonly is responsible for resizing capacity of the volume, should ignore PVC updates that change other valid\\nresources associated with PVC.\\n\\nThis is an alpha field and requires enabling RecoverVolumeExpansionFailure feature.\",\"type\":\"object\"},\"capacity\":{\"additionalProperties\":{\"anyOf\":[{\"type\":\"integer\"},{\"type\":\"string\"}],\"pattern\":\"^(\\\\+|-)?(([0-9]+(\\\\.[0-9]*)?)|(\\\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\\\+|-)?(([0-9]+(\\\\.[0-9]*)?)|(\\\\.[0-9]+))))?$\",\"x-kubernetes-int-or-string\":true},\"description\":\"capacity represents the actual resources of the underlying volume.\",\"type\":\"object\"},\"conditions\":{\"description\":\"conditions is the current Condition of persistent volume claim. If underlying persistent volume is being\\nresized then the Condition will be set to 'Resizing'.\",\"items\":{\"description\":\"PersistentVolumeClaimCondition contains details about state of pvc\",\"properties\":{\"lastProbeTime\":{\"description\":\"lastProbeTime is the time we probed the condition.\",\"format\":\"date-time\",\"type\":\"string\"},\"lastTransitionTime\":{\"description\":\"lastTransitionTime is the time the condition transitioned from one status to another.\",\"format\":\"date-time\",\"type\":\"string\"},\"message\":{\"description\":\"message is the human-readable message indicating details about last transition.\",\"type\":\"string\"},\"reason\":{\"description\":\"reason is a unique, this should be a short, machine understandable string that gives the reason\\nfor condition's last transition. If it reports \\\"Resizing\\\" that means the underlying\\npersistent volume is being resized.\",\"type\":\"string\"},\"status\":{\"type\":\"string\"},\"type\":{\"description\":\"PersistentVolumeClaimConditionType defines the condition of PV claim.\\nValid values are:\\n  - \\\"Resizing\\\", \\\"FileSystemResizePending\\\"\\n\\nIf RecoverVolumeExpansionFailure feature gate is enabled, then following additional values can be expected:\\n  - \\\"ControllerResizeError\\\", \\\"NodeResizeError\\\"\\n\\nIf VolumeAttributesClass feature gate is enabled, then following additional values can be expected:\\n  - \\\"ModifyVolumeError\\\", \\\"ModifyingVolume\\\"\",\"type\":\"string\"}},\"required\":[\"status\",\"type\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-map-keys\":[\"type\"],\"x-kubernetes-list-type\":\"map\"},\"currentVolumeAttributesClassName\":{\"description\":\"currentVolumeAttributesClassName is the current name of the VolumeAttributesClass the PVC is using.\\nWhen unset, there is no VolumeAttributeClass applied to this PersistentVolumeClaim\\nThis is a beta field and requires enabling VolumeAttributesClass feature (off by default).\",\"type\":\"string\"},\"modifyVolumeStatus\":{\"description\":\"ModifyVolumeStatus represents the status object of ControllerModifyVolume operation.\\nWhen this is unset, there is no ModifyVolume operation being attempted.\\nThis is a beta field and requires enabling VolumeAttributesClass feature (off by default).\",\"properties\":{\"status\":{\"description\":\"status is the status of the ControllerModifyVolume operation. It can be in any of following states:\\n - Pending\\n   Pending indicates that the PersistentVolumeClaim cannot be modified due to unmet requirements, such as\\n   the specified VolumeAttributesClass not existing.\\n - InProgress\\n   InProgress indicates that the volume is being modified.\\n - Infeasible\\n  Infeasible indicates that the request has been rejected as invalid by the CSI driver. To\\n\\t  resolve the error, a valid VolumeAttributesClass needs to be specified.\\nNote: New statuses can be added in the future. Consumers should check for unknown statuses and fail appropriately.\",\"type\":\"string\"},\"targetVolumeAttributesClassName\":{\"description\":\"targetVolumeAttributesClassName is the name of the VolumeAttributesClass the PVC currently being reconciled\",\"type\":\"string\"}},\"required\":[\"status\"],\"type\":\"object\"},\"phase\":{\"description\":\"phase represents the current phase of PersistentVolumeClaim.\",\"type\":\"string\"}},\"type\":\"object\"}},\"required\":[\"name\",\"status\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"currentReady\":{\"description\":\"CurrentReady is the number of currently ready replicasets.\",\"type\":\"integer\"},\"desiredReady\":{\"description\":\"DesiredReady is the number of desired ready replicasets.\",\"type\":\"integer\"},\"name\":{\"description\":\"Name is the name of the storage pool\",\"type\":\"string\"},\"phase\":{\"description\":\"StoragePoolPhase indicates which phase the storage pool is in.\",\"type\":\"string\"}},\"required\":[\"name\",\"phase\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"targetVersion\":{\"description\":\"TargetVersion The targeted version of the HostPathProvisioner deployment\",\"type\":\"string\"}},\"type\":\"object\"}},\"type\":\"object\"}},\"served\":true,\"storage\":true}]}}\n"
      },
      "served_versions": [
        "v1beta1"
      ],
      "stored_version": "v1beta1",
      "categories": [],
      "short_names": [],
      "description": null,
      "instance_count": 0
    },
    {
      "name": "httproutes.gateway.networking.k8s.io",
      "group": "gateway.networking.k8s.io",
      "version": "v1",
      "kind": "HTTPRoute",
      "plural": "httproutes",
      "singular": "httproute",
      "scope": "Namespaced",
      "creation_timestamp": "2025-06-26T15:37:15+00:00",
      "labels": {},
      "annotations": {
        "api-approved.kubernetes.io": "https://github.com/kubernetes-sigs/gateway-api/pull/3328",
        "gateway.networking.k8s.io/bundle-version": "v1.2.1",
        "gateway.networking.k8s.io/channel": "standard"
      },
      "served_versions": [
        "v1",
        "v1beta1"
      ],
      "stored_version": "v1",
      "categories": [
        "gateway-api"
      ],
      "short_names": [],
      "description": null,
      "instance_count": 0
    },
    {
      "name": "hyperconvergeds.hco.kubevirt.io",
      "group": "hco.kubevirt.io",
      "version": "v1beta1",
      "kind": "HyperConverged",
      "plural": "hyperconvergeds",
      "singular": "hyperconverged",
      "scope": "Namespaced",
      "creation_timestamp": "2025-09-06T12:58:07+00:00",
      "labels": {},
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"apiextensions.k8s.io/v1\",\"kind\":\"CustomResourceDefinition\",\"metadata\":{\"annotations\":{},\"name\":\"hyperconvergeds.hco.kubevirt.io\"},\"spec\":{\"group\":\"hco.kubevirt.io\",\"names\":{\"categories\":[\"all\"],\"kind\":\"HyperConverged\",\"listKind\":\"HyperConvergedList\",\"plural\":\"hyperconvergeds\",\"shortNames\":[\"hco\",\"hcos\"],\"singular\":\"hyperconverged\"},\"scope\":\"Namespaced\",\"versions\":[{\"additionalPrinterColumns\":[{\"jsonPath\":\".metadata.creationTimestamp\",\"name\":\"Age\",\"type\":\"date\"}],\"name\":\"v1beta1\",\"schema\":{\"openAPIV3Schema\":{\"description\":\"HyperConverged is the Schema for the hyperconvergeds API\",\"properties\":{\"apiVersion\":{\"description\":\"APIVersion defines the versioned schema of this representation of an object.\\nServers should convert recognized schemas to the latest internal value, and\\nmay reject unrecognized values.\\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources\",\"type\":\"string\"},\"kind\":{\"description\":\"Kind is a string value representing the REST resource this object represents.\\nServers may infer this from the endpoint the client submits requests to.\\nCannot be updated.\\nIn CamelCase.\\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\",\"type\":\"string\"},\"metadata\":{\"properties\":{\"name\":{\"pattern\":\"kubevirt-hyperconverged\",\"type\":\"string\"}},\"type\":\"object\"},\"spec\":{\"default\":{\"certConfig\":{\"ca\":{\"duration\":\"48h0m0s\",\"renewBefore\":\"24h0m0s\"},\"server\":{\"duration\":\"24h0m0s\",\"renewBefore\":\"12h0m0s\"}},\"deployVmConsoleProxy\":false,\"enableApplicationAwareQuota\":false,\"enableCommonBootImageImport\":true,\"featureGates\":{\"decentralizedLiveMigration\":false,\"deployKubeSecondaryDNS\":false,\"disableMDevConfiguration\":false,\"downwardMetrics\":false,\"enableMultiArchBootImageImport\":false,\"persistentReservation\":false},\"liveMigrationConfig\":{\"allowAutoConverge\":false,\"allowPostCopy\":false,\"completionTimeoutPerGiB\":150,\"parallelMigrationsPerCluster\":5,\"parallelOutboundMigrationsPerNode\":2,\"progressTimeout\":150},\"resourceRequirements\":{\"vmiCPUAllocationRatio\":10},\"uninstallStrategy\":\"BlockUninstallIfWorkloadsExist\",\"virtualMachineOptions\":{\"disableFreePageReporting\":false,\"disableSerialConsoleLog\":false}},\"description\":\"HyperConvergedSpec defines the desired state of HyperConverged\",\"properties\":{\"CommonInstancetypesDeployment\":{\"description\":\"CommonInstancetypesDeployment holds the configuration of common-instancetypes deployment within KubeVirt.\",\"properties\":{\"enabled\":{\"description\":\"Enabled controls the deployment of common-instancetypes resources, defaults to True.\",\"nullable\":true,\"type\":\"boolean\"}},\"type\":\"object\"},\"applicationAwareConfig\":{\"description\":\"ApplicationAwareConfig set the AAQ configurations\",\"properties\":{\"allowApplicationAwareClusterResourceQuota\":{\"default\":false,\"description\":\"AllowApplicationAwareClusterResourceQuota if set to true, allows creation and management of ClusterAppsResourceQuota\",\"type\":\"boolean\"},\"namespaceSelector\":{\"description\":\"NamespaceSelector determines in which namespaces scheduling gate will be added to pods..\",\"properties\":{\"matchExpressions\":{\"description\":\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\",\"items\":{\"description\":\"A label selector requirement is a selector that contains values, a key, and an operator that\\nrelates the key and values.\",\"properties\":{\"key\":{\"description\":\"key is the label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"operator represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists and DoesNotExist.\",\"type\":\"string\"},\"values\":{\"description\":\"values is an array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. This array is replaced during a strategic\\nmerge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"matchLabels\":{\"additionalProperties\":{\"type\":\"string\"},\"description\":\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\\nmap is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the\\noperator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\",\"type\":\"object\"}},\"type\":\"object\",\"x-kubernetes-map-type\":\"atomic\"},\"vmiCalcConfigName\":{\"default\":\"DedicatedVirtualResources\",\"description\":\"VmiCalcConfigName determine how resource allocation will be done with ApplicationsResourceQuota.\\nallowed values are: VmiPodUsage, VirtualResources, DedicatedVirtualResources or IgnoreVmiCalculator\",\"enum\":[\"VmiPodUsage\",\"VirtualResources\",\"DedicatedVirtualResources\",\"IgnoreVmiCalculator\"],\"type\":\"string\"}},\"type\":\"object\"},\"certConfig\":{\"default\":{\"ca\":{\"duration\":\"48h0m0s\",\"renewBefore\":\"24h0m0s\"},\"server\":{\"duration\":\"24h0m0s\",\"renewBefore\":\"12h0m0s\"}},\"description\":\"certConfig holds the rotation policy for internal, self-signed certificates\",\"properties\":{\"ca\":{\"default\":{\"duration\":\"48h0m0s\",\"renewBefore\":\"24h0m0s\"},\"description\":\"CA configuration -\\nCA certs are kept in the CA bundle as long as they are valid\",\"properties\":{\"duration\":{\"default\":\"48h0m0s\",\"description\":\"The requested 'duration' (i.e. lifetime) of the Certificate.\\nThis should comply with golang's ParseDuration format (https://golang.org/pkg/time/#ParseDuration)\",\"type\":\"string\"},\"renewBefore\":{\"default\":\"24h0m0s\",\"description\":\"The amount of time before the currently issued certificate's `notAfter`\\ntime that we will begin to attempt to renew the certificate.\\nThis should comply with golang's ParseDuration format (https://golang.org/pkg/time/#ParseDuration)\",\"type\":\"string\"}},\"type\":\"object\"},\"server\":{\"default\":{\"duration\":\"24h0m0s\",\"renewBefore\":\"12h0m0s\"},\"description\":\"Server configuration -\\nCerts are rotated and discarded\",\"properties\":{\"duration\":{\"default\":\"24h0m0s\",\"description\":\"The requested 'duration' (i.e. lifetime) of the Certificate.\\nThis should comply with golang's ParseDuration format (https://golang.org/pkg/time/#ParseDuration)\",\"type\":\"string\"},\"renewBefore\":{\"default\":\"12h0m0s\",\"description\":\"The amount of time before the currently issued certificate's `notAfter`\\ntime that we will begin to attempt to renew the certificate.\\nThis should comply with golang's ParseDuration format (https://golang.org/pkg/time/#ParseDuration)\",\"type\":\"string\"}},\"type\":\"object\"}},\"type\":\"object\"},\"commonBootImageNamespace\":{\"description\":\"CommonBootImageNamespace override the default namespace of the common boot images, in order to hide them.\\n\\nIf not set, HCO won't set any namespace, letting SSP to use the default. If set, use the namespace to create the\\nDataImportCronTemplates and the common image streams, with this namespace. This field is not set by default.\",\"type\":\"string\"},\"commonTemplatesNamespace\":{\"description\":\"CommonTemplatesNamespace defines namespace in which common templates will\\nbe deployed. It overrides the default openshift namespace.\",\"type\":\"string\"},\"dataImportCronTemplates\":{\"description\":\"DataImportCronTemplates holds list of data import cron templates (golden images)\",\"items\":{\"description\":\"DataImportCronTemplate defines the template type for DataImportCrons.\\nIt requires metadata.name to be specified while leaving namespace as optional.\",\"properties\":{\"metadata\":{\"properties\":{\"annotations\":{\"additionalProperties\":{\"type\":\"string\"},\"type\":\"object\"},\"finalizers\":{\"items\":{\"type\":\"string\"},\"type\":\"array\"},\"labels\":{\"additionalProperties\":{\"type\":\"string\"},\"type\":\"object\"},\"name\":{\"type\":\"string\"},\"namespace\":{\"type\":\"string\"}},\"type\":\"object\"},\"spec\":{\"description\":\"DataImportCronSpec defines specification for DataImportCron\",\"properties\":{\"garbageCollect\":{\"description\":\"GarbageCollect specifies whether old PVCs should be cleaned up after a new PVC is imported.\\nOptions are currently \\\"Outdated\\\" and \\\"Never\\\", defaults to \\\"Outdated\\\".\",\"type\":\"string\"},\"importsToKeep\":{\"description\":\"Number of import PVCs to keep when garbage collecting. Default is 3.\",\"format\":\"int32\",\"type\":\"integer\"},\"managedDataSource\":{\"description\":\"ManagedDataSource specifies the name of the corresponding DataSource this cron will manage.\\nDataSource has to be in the same namespace.\",\"type\":\"string\"},\"retentionPolicy\":{\"description\":\"RetentionPolicy specifies whether the created DataVolumes and DataSources are retained when their DataImportCron is deleted. Default is RatainAll.\",\"type\":\"string\"},\"schedule\":{\"description\":\"Schedule specifies in cron format when and how often to look for new imports\",\"type\":\"string\"},\"template\":{\"description\":\"Template specifies template for the DVs to be created\",\"properties\":{\"apiVersion\":{\"description\":\"APIVersion defines the versioned schema of this representation of an object.\\nServers should convert recognized schemas to the latest internal value, and\\nmay reject unrecognized values.\\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources\",\"type\":\"string\"},\"kind\":{\"description\":\"Kind is a string value representing the REST resource this object represents.\\nServers may infer this from the endpoint the client submits requests to.\\nCannot be updated.\\nIn CamelCase.\\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\",\"type\":\"string\"},\"metadata\":{\"properties\":{\"annotations\":{\"additionalProperties\":{\"type\":\"string\"},\"type\":\"object\"},\"finalizers\":{\"items\":{\"type\":\"string\"},\"type\":\"array\"},\"labels\":{\"additionalProperties\":{\"type\":\"string\"},\"type\":\"object\"},\"name\":{\"type\":\"string\"},\"namespace\":{\"type\":\"string\"}},\"type\":\"object\"},\"spec\":{\"description\":\"DataVolumeSpec defines the DataVolume type specification\",\"properties\":{\"checkpoints\":{\"description\":\"Checkpoints is a list of DataVolumeCheckpoints, representing stages in a multistage import.\",\"items\":{\"description\":\"DataVolumeCheckpoint defines a stage in a warm migration.\",\"properties\":{\"current\":{\"description\":\"Current is the identifier of the snapshot created for this checkpoint.\",\"type\":\"string\"},\"previous\":{\"description\":\"Previous is the identifier of the snapshot from the previous checkpoint.\",\"type\":\"string\"}},\"required\":[\"current\",\"previous\"],\"type\":\"object\"},\"type\":\"array\"},\"contentType\":{\"description\":\"DataVolumeContentType options: \\\"kubevirt\\\", \\\"archive\\\"\",\"enum\":[\"kubevirt\",\"archive\"],\"type\":\"string\"},\"finalCheckpoint\":{\"description\":\"FinalCheckpoint indicates whether the current DataVolumeCheckpoint is the final checkpoint.\",\"type\":\"boolean\"},\"preallocation\":{\"description\":\"Preallocation controls whether storage for DataVolumes should be allocated in advance.\",\"type\":\"boolean\"},\"priorityClassName\":{\"description\":\"PriorityClassName for Importer, Cloner and Uploader pod\",\"type\":\"string\"},\"pvc\":{\"description\":\"PVC is the PVC specification\",\"properties\":{\"accessModes\":{\"description\":\"accessModes contains the desired access modes the volume should have.\\nMore info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"dataSource\":{\"description\":\"dataSource field can be used to specify either:\\n* An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot)\\n* An existing PVC (PersistentVolumeClaim)\\nIf the provisioner or an external controller can support the specified data source,\\nit will create a new volume based on the contents of the specified data source.\\nWhen the AnyVolumeDataSource feature gate is enabled, dataSource contents will be copied to dataSourceRef,\\nand dataSourceRef contents will be copied to dataSource when dataSourceRef.namespace is not specified.\\nIf the namespace is specified, then dataSourceRef will not be copied to dataSource.\",\"properties\":{\"apiGroup\":{\"description\":\"APIGroup is the group for the resource being referenced.\\nIf APIGroup is not specified, the specified Kind must be in the core API group.\\nFor any other third-party types, APIGroup is required.\",\"type\":\"string\"},\"kind\":{\"description\":\"Kind is the type of resource being referenced\",\"type\":\"string\"},\"name\":{\"description\":\"Name is the name of resource being referenced\",\"type\":\"string\"}},\"required\":[\"kind\",\"name\"],\"type\":\"object\",\"x-kubernetes-map-type\":\"atomic\"},\"dataSourceRef\":{\"description\":\"dataSourceRef specifies the object from which to populate the volume with data, if a non-empty\\nvolume is desired. This may be any object from a non-empty API group (non\\ncore object) or a PersistentVolumeClaim object.\\nWhen this field is specified, volume binding will only succeed if the type of\\nthe specified object matches some installed volume populator or dynamic\\nprovisioner.\\nThis field will replace the functionality of the dataSource field and as such\\nif both fields are non-empty, they must have the same value. For backwards\\ncompatibility, when namespace isn't specified in dataSourceRef,\\nboth fields (dataSource and dataSourceRef) will be set to the same\\nvalue automatically if one of them is empty and the other is non-empty.\\nWhen namespace is specified in dataSourceRef,\\ndataSource isn't set to the same value and must be empty.\\nThere are three important differences between dataSource and dataSourceRef:\\n* While dataSource only allows two specific types of objects, dataSourceRef\\n  allows any non-core object, as well as PersistentVolumeClaim objects.\\n* While dataSource ignores disallowed values (dropping them), dataSourceRef\\n  preserves all values, and generates an error if a disallowed value is\\n  specified.\\n* While dataSource only allows local objects, dataSourceRef allows objects\\n  in any namespaces.\\n(Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled.\\n(Alpha) Using the namespace field of dataSourceRef requires the CrossNamespaceVolumeDataSource feature gate to be enabled.\",\"properties\":{\"apiGroup\":{\"description\":\"APIGroup is the group for the resource being referenced.\\nIf APIGroup is not specified, the specified Kind must be in the core API group.\\nFor any other third-party types, APIGroup is required.\",\"type\":\"string\"},\"kind\":{\"description\":\"Kind is the type of resource being referenced\",\"type\":\"string\"},\"name\":{\"description\":\"Name is the name of resource being referenced\",\"type\":\"string\"},\"namespace\":{\"description\":\"Namespace is the namespace of resource being referenced\\nNote that when a namespace is specified, a gateway.networking.k8s.io/ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details.\\n(Alpha) This field requires the CrossNamespaceVolumeDataSource feature gate to be enabled.\",\"type\":\"string\"}},\"required\":[\"kind\",\"name\"],\"type\":\"object\"},\"resources\":{\"description\":\"resources represents the minimum resources the volume should have.\\nIf RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements\\nthat are lower than previous value but must still be higher than capacity recorded in the\\nstatus field of the claim.\\nMore info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources\",\"properties\":{\"limits\":{\"additionalProperties\":{\"anyOf\":[{\"type\":\"integer\"},{\"type\":\"string\"}],\"pattern\":\"^(\\\\+|-)?(([0-9]+(\\\\.[0-9]*)?)|(\\\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\\\+|-)?(([0-9]+(\\\\.[0-9]*)?)|(\\\\.[0-9]+))))?$\",\"x-kubernetes-int-or-string\":true},\"description\":\"Limits describes the maximum amount of compute resources allowed.\\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/\",\"type\":\"object\"},\"requests\":{\"additionalProperties\":{\"anyOf\":[{\"type\":\"integer\"},{\"type\":\"string\"}],\"pattern\":\"^(\\\\+|-)?(([0-9]+(\\\\.[0-9]*)?)|(\\\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\\\+|-)?(([0-9]+(\\\\.[0-9]*)?)|(\\\\.[0-9]+))))?$\",\"x-kubernetes-int-or-string\":true},\"description\":\"Requests describes the minimum amount of compute resources required.\\nIf Requests is omitted for a container, it defaults to Limits if that is explicitly specified,\\notherwise to an implementation-defined value. Requests cannot exceed Limits.\\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/\",\"type\":\"object\"}},\"type\":\"object\"},\"selector\":{\"description\":\"selector is a label query over volumes to consider for binding.\",\"properties\":{\"matchExpressions\":{\"description\":\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\",\"items\":{\"description\":\"A label selector requirement is a selector that contains values, a key, and an operator that\\nrelates the key and values.\",\"properties\":{\"key\":{\"description\":\"key is the label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"operator represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists and DoesNotExist.\",\"type\":\"string\"},\"values\":{\"description\":\"values is an array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. This array is replaced during a strategic\\nmerge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"matchLabels\":{\"additionalProperties\":{\"type\":\"string\"},\"description\":\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\\nmap is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the\\noperator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\",\"type\":\"object\"}},\"type\":\"object\",\"x-kubernetes-map-type\":\"atomic\"},\"storageClassName\":{\"description\":\"storageClassName is the name of the StorageClass required by the claim.\\nMore info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1\",\"type\":\"string\"},\"volumeAttributesClassName\":{\"description\":\"volumeAttributesClassName may be used to set the VolumeAttributesClass used by this claim.\\nIf specified, the CSI driver will create or update the volume with the attributes defined\\nin the corresponding VolumeAttributesClass. This has a different purpose than storageClassName,\\nit can be changed after the claim is created. An empty string value means that no VolumeAttributesClass\\nwill be applied to the claim but it's not allowed to reset this field to empty string once it is set.\\nIf unspecified and the PersistentVolumeClaim is unbound, the default VolumeAttributesClass\\nwill be set by the persistentvolume controller if it exists.\\nIf the resource referred to by volumeAttributesClass does not exist, this PersistentVolumeClaim will be\\nset to a Pending state, as reflected by the modifyVolumeStatus field, until such as a resource\\nexists.\\nMore info: https://kubernetes.io/docs/concepts/storage/volume-attributes-classes/\\n(Beta) Using this field requires the VolumeAttributesClass feature gate to be enabled (off by default).\",\"type\":\"string\"},\"volumeMode\":{\"description\":\"volumeMode defines what type of volume is required by the claim.\\nValue of Filesystem is implied when not included in claim spec.\",\"type\":\"string\"},\"volumeName\":{\"description\":\"volumeName is the binding reference to the PersistentVolume backing this claim.\",\"type\":\"string\"}},\"type\":\"object\"},\"source\":{\"description\":\"Source is the src of the data for the requested DataVolume\",\"properties\":{\"blank\":{\"description\":\"DataVolumeBlankImage provides the parameters to create a new raw blank image for the PVC\",\"type\":\"object\"},\"gcs\":{\"description\":\"DataVolumeSourceGCS provides the parameters to create a Data Volume from an GCS source\",\"properties\":{\"secretRef\":{\"description\":\"SecretRef provides the secret reference needed to access the GCS source\",\"type\":\"string\"},\"url\":{\"description\":\"URL is the url of the GCS source\",\"type\":\"string\"}},\"required\":[\"url\"],\"type\":\"object\"},\"http\":{\"description\":\"DataVolumeSourceHTTP can be either an http or https endpoint, with an optional basic auth user name and password, and an optional configmap containing additional CAs\",\"properties\":{\"certConfigMap\":{\"description\":\"CertConfigMap is a configmap reference, containing a Certificate Authority(CA) public key, and a base64 encoded pem certificate\",\"type\":\"string\"},\"extraHeaders\":{\"description\":\"ExtraHeaders is a list of strings containing extra headers to include with HTTP transfer requests\",\"items\":{\"type\":\"string\"},\"type\":\"array\"},\"secretExtraHeaders\":{\"description\":\"SecretExtraHeaders is a list of Secret references, each containing an extra HTTP header that may include sensitive information\",\"items\":{\"type\":\"string\"},\"type\":\"array\"},\"secretRef\":{\"description\":\"SecretRef A Secret reference, the secret should contain accessKeyId (user name) base64 encoded, and secretKey (password) also base64 encoded\",\"type\":\"string\"},\"url\":{\"description\":\"URL is the URL of the http(s) endpoint\",\"type\":\"string\"}},\"required\":[\"url\"],\"type\":\"object\"},\"imageio\":{\"description\":\"DataVolumeSourceImageIO provides the parameters to create a Data Volume from an imageio source\",\"properties\":{\"certConfigMap\":{\"description\":\"CertConfigMap provides a reference to the CA cert\",\"type\":\"string\"},\"diskId\":{\"description\":\"DiskID provides id of a disk to be imported\",\"type\":\"string\"},\"secretRef\":{\"description\":\"SecretRef provides the secret reference needed to access the ovirt-engine\",\"type\":\"string\"},\"url\":{\"description\":\"URL is the URL of the ovirt-engine\",\"type\":\"string\"}},\"required\":[\"diskId\",\"url\"],\"type\":\"object\"},\"pvc\":{\"description\":\"DataVolumeSourcePVC provides the parameters to create a Data Volume from an existing PVC\",\"properties\":{\"name\":{\"description\":\"The name of the source PVC\",\"type\":\"string\"},\"namespace\":{\"description\":\"The namespace of the source PVC\",\"type\":\"string\"}},\"required\":[\"name\",\"namespace\"],\"type\":\"object\"},\"registry\":{\"description\":\"DataVolumeSourceRegistry provides the parameters to create a Data Volume from an registry source\",\"properties\":{\"certConfigMap\":{\"description\":\"CertConfigMap provides a reference to the Registry certs\",\"type\":\"string\"},\"imageStream\":{\"description\":\"ImageStream is the name of image stream for import\",\"type\":\"string\"},\"platform\":{\"description\":\"Platform describes the minimum runtime requirements of the image\",\"properties\":{\"architecture\":{\"description\":\"Architecture specifies the image target CPU architecture\",\"type\":\"string\"}},\"type\":\"object\"},\"pullMethod\":{\"description\":\"PullMethod can be either \\\"pod\\\" (default import), or \\\"node\\\" (node docker cache based import)\",\"type\":\"string\"},\"secretRef\":{\"description\":\"SecretRef provides the secret reference needed to access the Registry source\",\"type\":\"string\"},\"url\":{\"description\":\"URL is the url of the registry source (starting with the scheme: docker, oci-archive)\",\"type\":\"string\"}},\"type\":\"object\"},\"s3\":{\"description\":\"DataVolumeSourceS3 provides the parameters to create a Data Volume from an S3 source\",\"properties\":{\"certConfigMap\":{\"description\":\"CertConfigMap is a configmap reference, containing a Certificate Authority(CA) public key, and a base64 encoded pem certificate\",\"type\":\"string\"},\"secretRef\":{\"description\":\"SecretRef provides the secret reference needed to access the S3 source\",\"type\":\"string\"},\"url\":{\"description\":\"URL is the url of the S3 source\",\"type\":\"string\"}},\"required\":[\"url\"],\"type\":\"object\"},\"snapshot\":{\"description\":\"DataVolumeSourceSnapshot provides the parameters to create a Data Volume from an existing VolumeSnapshot\",\"properties\":{\"name\":{\"description\":\"The name of the source VolumeSnapshot\",\"type\":\"string\"},\"namespace\":{\"description\":\"The namespace of the source VolumeSnapshot\",\"type\":\"string\"}},\"required\":[\"name\",\"namespace\"],\"type\":\"object\"},\"upload\":{\"description\":\"DataVolumeSourceUpload provides the parameters to create a Data Volume by uploading the source\",\"type\":\"object\"},\"vddk\":{\"description\":\"DataVolumeSourceVDDK provides the parameters to create a Data Volume from a Vmware source\",\"properties\":{\"backingFile\":{\"description\":\"BackingFile is the path to the virtual hard disk to migrate from vCenter/ESXi\",\"type\":\"string\"},\"extraArgs\":{\"description\":\"ExtraArgs is a reference to a ConfigMap containing extra arguments to pass directly to the VDDK library\",\"type\":\"string\"},\"initImageURL\":{\"description\":\"InitImageURL is an optional URL to an image containing an extracted VDDK library, overrides v2v-vmware config map\",\"type\":\"string\"},\"secretRef\":{\"description\":\"SecretRef provides a reference to a secret containing the username and password needed to access the vCenter or ESXi host\",\"type\":\"string\"},\"thumbprint\":{\"description\":\"Thumbprint is the certificate thumbprint of the vCenter or ESXi host\",\"type\":\"string\"},\"url\":{\"description\":\"URL is the URL of the vCenter or ESXi host with the VM to migrate\",\"type\":\"string\"},\"uuid\":{\"description\":\"UUID is the UUID of the virtual machine that the backing file is attached to in vCenter/ESXi\",\"type\":\"string\"}},\"type\":\"object\"}},\"type\":\"object\"},\"sourceRef\":{\"description\":\"SourceRef is an indirect reference to the source of data for the requested DataVolume\",\"properties\":{\"kind\":{\"description\":\"The kind of the source reference, currently only \\\"DataSource\\\" is supported\",\"type\":\"string\"},\"name\":{\"description\":\"The name of the source reference\",\"type\":\"string\"},\"namespace\":{\"description\":\"The namespace of the source reference, defaults to the DataVolume namespace\",\"type\":\"string\"}},\"required\":[\"kind\",\"name\"],\"type\":\"object\"},\"storage\":{\"description\":\"Storage is the requested storage specification\",\"properties\":{\"accessModes\":{\"description\":\"AccessModes contains the desired access modes the volume should have.\\nMore info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1\",\"items\":{\"type\":\"string\"},\"type\":\"array\"},\"dataSource\":{\"description\":\"This field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) * An existing custom resource that implements data population (Alpha) In order to use custom resource types that implement data population, the AnyVolumeDataSource feature gate must be enabled. If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source.\\nIf the AnyVolumeDataSource feature gate is enabled, this field will always have the same contents as the DataSourceRef field.\",\"properties\":{\"apiGroup\":{\"description\":\"APIGroup is the group for the resource being referenced.\\nIf APIGroup is not specified, the specified Kind must be in the core API group.\\nFor any other third-party types, APIGroup is required.\",\"type\":\"string\"},\"kind\":{\"description\":\"Kind is the type of resource being referenced\",\"type\":\"string\"},\"name\":{\"description\":\"Name is the name of resource being referenced\",\"type\":\"string\"}},\"required\":[\"kind\",\"name\"],\"type\":\"object\",\"x-kubernetes-map-type\":\"atomic\"},\"dataSourceRef\":{\"description\":\"Specifies the object from which to populate the volume with data, if a non-empty volume is desired. This may be any local object from a non-empty API group (non core object) or a PersistentVolumeClaim object. When this field is specified, volume binding will only succeed if the type of the specified object matches some installed volume populator or dynamic provisioner.\\nThis field will replace the functionality of the DataSource field and as such if both fields are non-empty, they must have the same value. For backwards compatibility, both fields (DataSource and DataSourceRef) will be set to the same value automatically if one of them is empty and the other is non-empty.\\nThere are two important differences between DataSource and DataSourceRef:\\n* While DataSource only allows two specific types of objects, DataSourceRef allows any non-core object, as well as PersistentVolumeClaim objects.\\n* While DataSource ignores disallowed values (dropping them), DataSourceRef preserves all values, and generates an error if a disallowed value is specified.\\n(Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled.\",\"properties\":{\"apiGroup\":{\"description\":\"APIGroup is the group for the resource being referenced.\\nIf APIGroup is not specified, the specified Kind must be in the core API group.\\nFor any other third-party types, APIGroup is required.\",\"type\":\"string\"},\"kind\":{\"description\":\"Kind is the type of resource being referenced\",\"type\":\"string\"},\"name\":{\"description\":\"Name is the name of resource being referenced\",\"type\":\"string\"},\"namespace\":{\"description\":\"Namespace is the namespace of resource being referenced\\nNote that when a namespace is specified, a gateway.networking.k8s.io/ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details.\\n(Alpha) This field requires the CrossNamespaceVolumeDataSource feature gate to be enabled.\",\"type\":\"string\"}},\"required\":[\"kind\",\"name\"],\"type\":\"object\"},\"resources\":{\"description\":\"Resources represents the minimum resources the volume should have.\\nMore info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources\",\"properties\":{\"limits\":{\"additionalProperties\":{\"anyOf\":[{\"type\":\"integer\"},{\"type\":\"string\"}],\"pattern\":\"^(\\\\+|-)?(([0-9]+(\\\\.[0-9]*)?)|(\\\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\\\+|-)?(([0-9]+(\\\\.[0-9]*)?)|(\\\\.[0-9]+))))?$\",\"x-kubernetes-int-or-string\":true},\"description\":\"Limits describes the maximum amount of compute resources allowed.\\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/\",\"type\":\"object\"},\"requests\":{\"additionalProperties\":{\"anyOf\":[{\"type\":\"integer\"},{\"type\":\"string\"}],\"pattern\":\"^(\\\\+|-)?(([0-9]+(\\\\.[0-9]*)?)|(\\\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\\\+|-)?(([0-9]+(\\\\.[0-9]*)?)|(\\\\.[0-9]+))))?$\",\"x-kubernetes-int-or-string\":true},\"description\":\"Requests describes the minimum amount of compute resources required.\\nIf Requests is omitted for a container, it defaults to Limits if that is explicitly specified,\\notherwise to an implementation-defined value. Requests cannot exceed Limits.\\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/\",\"type\":\"object\"}},\"type\":\"object\"},\"selector\":{\"description\":\"A label query over volumes to consider for binding.\",\"properties\":{\"matchExpressions\":{\"description\":\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\",\"items\":{\"description\":\"A label selector requirement is a selector that contains values, a key, and an operator that\\nrelates the key and values.\",\"properties\":{\"key\":{\"description\":\"key is the label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"operator represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists and DoesNotExist.\",\"type\":\"string\"},\"values\":{\"description\":\"values is an array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. This array is replaced during a strategic\\nmerge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"matchLabels\":{\"additionalProperties\":{\"type\":\"string\"},\"description\":\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\\nmap is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the\\noperator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\",\"type\":\"object\"}},\"type\":\"object\",\"x-kubernetes-map-type\":\"atomic\"},\"storageClassName\":{\"description\":\"Name of the StorageClass required by the claim.\\nMore info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1\",\"type\":\"string\"},\"volumeMode\":{\"description\":\"volumeMode defines what type of volume is required by the claim.\\nValue of Filesystem is implied when not included in claim spec.\",\"type\":\"string\"},\"volumeName\":{\"description\":\"VolumeName is the binding reference to the PersistentVolume backing this claim.\",\"type\":\"string\"}},\"type\":\"object\"}},\"type\":\"object\"},\"status\":{\"description\":\"DataVolumeStatus contains the current status of the DataVolume\",\"properties\":{\"claimName\":{\"description\":\"ClaimName is the name of the underlying PVC used by the DataVolume.\",\"type\":\"string\"},\"conditions\":{\"items\":{\"description\":\"DataVolumeCondition represents the state of a data volume condition.\",\"properties\":{\"lastHeartbeatTime\":{\"format\":\"date-time\",\"type\":\"string\"},\"lastTransitionTime\":{\"format\":\"date-time\",\"type\":\"string\"},\"message\":{\"type\":\"string\"},\"reason\":{\"type\":\"string\"},\"status\":{\"type\":\"string\"},\"type\":{\"description\":\"DataVolumeConditionType is the string representation of known condition types\",\"type\":\"string\"}},\"required\":[\"status\",\"type\"],\"type\":\"object\"},\"type\":\"array\"},\"phase\":{\"description\":\"Phase is the current phase of the data volume\",\"type\":\"string\"},\"progress\":{\"description\":\"DataVolumeProgress is the current progress of the DataVolume transfer operation. Value between 0 and 100 inclusive, N/A if not available\",\"type\":\"string\"},\"restartCount\":{\"description\":\"RestartCount is the number of times the pod populating the DataVolume has restarted\",\"format\":\"int32\",\"type\":\"integer\"}},\"type\":\"object\"}},\"required\":[\"spec\"],\"type\":\"object\"}},\"required\":[\"managedDataSource\",\"schedule\",\"template\"],\"type\":\"object\"}},\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"defaultCPUModel\":{\"description\":\"DefaultCPUModel defines a cluster default for CPU model: default CPU model is set when VMI doesn't have any CPU model.\\nWhen VMI has CPU model set, then VMI's CPU model is preferred.\\nWhen default CPU model is not set and VMI's CPU model is not set too, host-model will be set.\\nDefault CPU model can be changed when kubevirt is running.\",\"type\":\"string\"},\"defaultRuntimeClass\":{\"description\":\"DefaultRuntimeClass defines a cluster default for the RuntimeClass to be used for VMIs pods if not set there.\\nDefault RuntimeClass can be changed when kubevirt is running, existing VMIs are not impacted till\\nthe next restart/live-migration when they are eventually going to consume the new default RuntimeClass.\",\"type\":\"string\"},\"deployVmConsoleProxy\":{\"default\":false,\"description\":\"deploy VM console proxy resources in SSP operator\",\"type\":\"boolean\"},\"enableApplicationAwareQuota\":{\"default\":false,\"description\":\"EnableApplicationAwareQuota if true, enables the Application Aware Quota feature\",\"type\":\"boolean\"},\"enableCommonBootImageImport\":{\"default\":true,\"description\":\"Opt-in to automatic delivery/updates of the common data import cron templates.\\nThere are two sources for the data import cron templates: hard coded list of common templates, and custom (user\\ndefined) templates that can be added to the dataImportCronTemplates field. This field only controls the common\\ntemplates. It is possible to use custom templates by adding them to the dataImportCronTemplates field.\",\"type\":\"boolean\"},\"evictionStrategy\":{\"description\":\"EvictionStrategy defines at the cluster level if the VirtualMachineInstance should be\\nmigrated instead of shut-off in case of a node drain. If the VirtualMachineInstance specific\\nfield is set it overrides the cluster level one.\\nAllowed values:\\n- `None` no eviction strategy at cluster level.\\n- `LiveMigrate` migrate the VM on eviction; a not live migratable VM with no specific strategy will block the drain of the node util manually evicted.\\n- `LiveMigrateIfPossible` migrate the VM on eviction if live migration is possible, otherwise directly evict.\\n- `External` block the drain, track eviction and notify an external controller.\\nDefaults to LiveMigrate with multiple worker nodes, None on single worker clusters.\",\"enum\":[\"None\",\"LiveMigrate\",\"LiveMigrateIfPossible\",\"External\"],\"type\":\"string\"},\"featureGates\":{\"default\":{\"decentralizedLiveMigration\":false,\"deployKubeSecondaryDNS\":false,\"disableMDevConfiguration\":false,\"downwardMetrics\":false,\"enableMultiArchBootImageImport\":false,\"persistentReservation\":false},\"description\":\"featureGates is a map of feature gate flags. Setting a flag to `true` will enable\\nthe feature. Setting `false` or removing the feature gate, disables the feature.\",\"properties\":{\"alignCPUs\":{\"default\":false,\"description\":\"Enable KubeVirt to request up to two additional dedicated CPUs\\nin order to complete the total CPU count to an even parity when using emulator thread isolation.\\nNote: this feature is in Developer Preview.\",\"type\":\"boolean\"},\"autoResourceLimits\":{\"description\":\"Deprecated: this field is ignored and will be removed in the next version of the API.\",\"type\":\"boolean\"},\"decentralizedLiveMigration\":{\"default\":false,\"description\":\"DecentralizedLiveMigration enables the decentralized live migration (cross-cluster migration) feature.\\nThis feature allows live migration of VirtualMachineInstances between different clusters.\\nThis feature is in Developer Preview.\",\"type\":\"boolean\"},\"deployKubeSecondaryDNS\":{\"default\":false,\"description\":\"Deploy KubeSecondaryDNS by CNAO\",\"type\":\"boolean\"},\"deployKubevirtIpamController\":{\"description\":\"Deprecated: this field is ignored and will be removed in the next version of the API.\",\"type\":\"boolean\"},\"deployTektonTaskResources\":{\"description\":\"Deprecated: This field is ignored and will be removed on the next version of the API.\",\"type\":\"boolean\"},\"deployVmConsoleProxy\":{\"description\":\"Deprecated: This field is ignored and will be removed on the next version of the API.\\nUse spec.deployVmConsoleProxy instead\",\"type\":\"boolean\"},\"disableMDevConfiguration\":{\"default\":false,\"description\":\"Disable mediated devices handling on KubeVirt\",\"type\":\"boolean\"},\"downwardMetrics\":{\"default\":false,\"description\":\"Allow to expose a limited set of host metrics to guests.\",\"type\":\"boolean\"},\"enableApplicationAwareQuota\":{\"description\":\"Deprecated: This field is ignored and will be removed on the next version of the API.\\nUse spec.enableApplicationAwareQuota instead\",\"type\":\"boolean\"},\"enableCommonBootImageImport\":{\"description\":\"Deprecated: This field is ignored. Use spec.enableCommonBootImageImport instead\",\"type\":\"boolean\"},\"enableManagedTenantQuota\":{\"description\":\"Deprecated: This field is ignored and will be removed on the next version of the API.\",\"type\":\"boolean\"},\"enableMultiArchBootImageImport\":{\"default\":false,\"description\":\"EnableMultiArchBootImageImport allows the HCO to run on heterogeneous clusters with different CPU architectures.\\nSetting this field to true will allow the HCO to create Golden Images for different CPU architectures.\\n\\nThis feature is in Developer Preview.\",\"type\":\"boolean\"},\"nonRoot\":{\"description\":\"Deprecated: // Deprecated: This field is ignored and will be removed on the next version of the API.\",\"type\":\"boolean\"},\"persistentReservation\":{\"default\":false,\"description\":\"Enable persistent reservation of a LUN through the SCSI Persistent Reserve commands on Kubevirt.\\nIn order to issue privileged SCSI ioctls, the VM requires activation of the persistent reservation flag.\\nOnce this feature gate is enabled, then the additional container with the qemu-pr-helper is deployed inside the virt-handler pod.\\nEnabling (or removing) the feature gate causes the redeployment of the virt-handler pod.\",\"type\":\"boolean\"},\"primaryUserDefinedNetworkBinding\":{\"description\":\"primaryUserDefinedNetworkBinding deploys the needed configurations for kubevirt users to\\nbe able to bind their VM to a UDN network on the VM's primary interface.\\nDeprecated: this field is ignored and will be removed in the next version of the API.\",\"type\":\"boolean\"},\"withHostPassthroughCPU\":{\"description\":\"Deprecated: there is no such FG in KubeVirt. This field is ignored\",\"type\":\"boolean\"}},\"type\":\"object\"},\"filesystemOverhead\":{\"description\":\"FilesystemOverhead describes the space reserved for overhead when using Filesystem volumes.\\nA value is between 0 and 1, if not defined it is 0.055 (5.5 percent overhead)\",\"properties\":{\"global\":{\"description\":\"Global is how much space of a Filesystem volume should be reserved for overhead. This value is used unless overridden by a more specific value (per storageClass)\",\"pattern\":\"^(0(?:\\\\.\\\\d{1,3})?|1)$\",\"type\":\"string\"},\"storageClass\":{\"additionalProperties\":{\"description\":\"Percent is a string that can only be a value between [0,1)\\n(Note: we actually rely on reconcile to reject invalid values)\",\"pattern\":\"^(0(?:\\\\.\\\\d{1,3})?|1)$\",\"type\":\"string\"},\"description\":\"StorageClass specifies how much space of a Filesystem volume should be reserved for safety. The keys are the storageClass and the values are the overhead. This value overrides the global value\",\"type\":\"object\"}},\"type\":\"object\"},\"higherWorkloadDensity\":{\"default\":{\"memoryOvercommitPercentage\":100},\"description\":\"HigherWorkloadDensity holds configurataion aimed to increase virtual machine density\",\"properties\":{\"memoryOvercommitPercentage\":{\"default\":100,\"description\":\"MemoryOvercommitPercentage is the percentage of memory we want to give VMIs compared to the amount\\ngiven to its parent pod (virt-launcher). For example, a value of 102 means the VMI will\\n\\\"see\\\" 2% more memory than its parent pod. Values under 100 are effectively \\\"undercommits\\\".\\nOvercommits can lead to memory exhaustion, which in turn can lead to crashes. Use carefully.\",\"minimum\":1,\"type\":\"integer\"}},\"type\":\"object\"},\"infra\":{\"description\":\"infra HyperConvergedConfig influences the pod configuration (currently only placement)\\nfor all the infra components needed on the virtualization enabled cluster\\nbut not necessarily directly on each node running VMs/VMIs.\",\"properties\":{\"nodePlacement\":{\"description\":\"NodePlacement describes node scheduling configuration.\",\"properties\":{\"affinity\":{\"description\":\"affinity enables pod affinity/anti-affinity placement expanding the types of constraints\\nthat can be expressed with nodeSelector.\\naffinity is going to be applied to the relevant kind of pods in parallel with nodeSelector\\nSee https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#affinity-and-anti-affinity\",\"properties\":{\"nodeAffinity\":{\"description\":\"Describes node affinity scheduling rules for the pod.\",\"properties\":{\"preferredDuringSchedulingIgnoredDuringExecution\":{\"description\":\"The scheduler will prefer to schedule pods to nodes that satisfy\\nthe affinity expressions specified by this field, but it may choose\\na node that violates one or more of the expressions. The node that is\\nmost preferred is the one with the greatest sum of weights, i.e.\\nfor each node that meets all of the scheduling requirements (resource\\nrequest, requiredDuringScheduling affinity expressions, etc.),\\ncompute a sum by iterating through the elements of this field and adding\\n\\\"weight\\\" to the sum if the node matches the corresponding matchExpressions; the\\nnode(s) with the highest sum are the most preferred.\",\"items\":{\"description\":\"An empty preferred scheduling term matches all objects with implicit weight 0\\n(i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).\",\"properties\":{\"preference\":{\"description\":\"A node selector term, associated with the corresponding weight.\",\"properties\":{\"matchExpressions\":{\"description\":\"A list of node selector requirements by node's labels.\",\"items\":{\"description\":\"A node selector requirement is a selector that contains values, a key, and an operator\\nthat relates the key and values.\",\"properties\":{\"key\":{\"description\":\"The label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"Represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.\",\"type\":\"string\"},\"values\":{\"description\":\"An array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. If the operator is Gt or Lt, the values\\narray must have a single element, which will be interpreted as an integer.\\nThis array is replaced during a strategic merge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"matchFields\":{\"description\":\"A list of node selector requirements by node's fields.\",\"items\":{\"description\":\"A node selector requirement is a selector that contains values, a key, and an operator\\nthat relates the key and values.\",\"properties\":{\"key\":{\"description\":\"The label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"Represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.\",\"type\":\"string\"},\"values\":{\"description\":\"An array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. If the operator is Gt or Lt, the values\\narray must have a single element, which will be interpreted as an integer.\\nThis array is replaced during a strategic merge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"type\":\"object\",\"x-kubernetes-map-type\":\"atomic\"},\"weight\":{\"description\":\"Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.\",\"format\":\"int32\",\"type\":\"integer\"}},\"required\":[\"preference\",\"weight\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"requiredDuringSchedulingIgnoredDuringExecution\":{\"description\":\"If the affinity requirements specified by this field are not met at\\nscheduling time, the pod will not be scheduled onto the node.\\nIf the affinity requirements specified by this field cease to be met\\nat some point during pod execution (e.g. due to an update), the system\\nmay or may not try to eventually evict the pod from its node.\",\"properties\":{\"nodeSelectorTerms\":{\"description\":\"Required. A list of node selector terms. The terms are ORed.\",\"items\":{\"description\":\"A null or empty node selector term matches no objects. The requirements of\\nthem are ANDed.\\nThe TopologySelectorTerm type implements a subset of the NodeSelectorTerm.\",\"properties\":{\"matchExpressions\":{\"description\":\"A list of node selector requirements by node's labels.\",\"items\":{\"description\":\"A node selector requirement is a selector that contains values, a key, and an operator\\nthat relates the key and values.\",\"properties\":{\"key\":{\"description\":\"The label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"Represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.\",\"type\":\"string\"},\"values\":{\"description\":\"An array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. If the operator is Gt or Lt, the values\\narray must have a single element, which will be interpreted as an integer.\\nThis array is replaced during a strategic merge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"matchFields\":{\"description\":\"A list of node selector requirements by node's fields.\",\"items\":{\"description\":\"A node selector requirement is a selector that contains values, a key, and an operator\\nthat relates the key and values.\",\"properties\":{\"key\":{\"description\":\"The label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"Represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.\",\"type\":\"string\"},\"values\":{\"description\":\"An array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. If the operator is Gt or Lt, the values\\narray must have a single element, which will be interpreted as an integer.\\nThis array is replaced during a strategic merge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"type\":\"object\",\"x-kubernetes-map-type\":\"atomic\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"nodeSelectorTerms\"],\"type\":\"object\",\"x-kubernetes-map-type\":\"atomic\"}},\"type\":\"object\"},\"podAffinity\":{\"description\":\"Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).\",\"properties\":{\"preferredDuringSchedulingIgnoredDuringExecution\":{\"description\":\"The scheduler will prefer to schedule pods to nodes that satisfy\\nthe affinity expressions specified by this field, but it may choose\\na node that violates one or more of the expressions. The node that is\\nmost preferred is the one with the greatest sum of weights, i.e.\\nfor each node that meets all of the scheduling requirements (resource\\nrequest, requiredDuringScheduling affinity expressions, etc.),\\ncompute a sum by iterating through the elements of this field and adding\\n\\\"weight\\\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the\\nnode(s) with the highest sum are the most preferred.\",\"items\":{\"description\":\"The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)\",\"properties\":{\"podAffinityTerm\":{\"description\":\"Required. A pod affinity term, associated with the corresponding weight.\",\"properties\":{\"labelSelector\":{\"description\":\"A label query over a set of resources, in this case pods.\\nIf it's null, this PodAffinityTerm matches with no Pods.\",\"properties\":{\"matchExpressions\":{\"description\":\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\",\"items\":{\"description\":\"A label selector requirement is a selector that contains values, a key, and an operator that\\nrelates the key and values.\",\"properties\":{\"key\":{\"description\":\"key is the label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"operator represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists and DoesNotExist.\",\"type\":\"string\"},\"values\":{\"description\":\"values is an array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. This array is replaced during a strategic\\nmerge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"matchLabels\":{\"additionalProperties\":{\"type\":\"string\"},\"description\":\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\\nmap is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the\\noperator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\",\"type\":\"object\"}},\"type\":\"object\",\"x-kubernetes-map-type\":\"atomic\"},\"matchLabelKeys\":{\"description\":\"MatchLabelKeys is a set of pod label keys to select which pods will\\nbe taken into consideration. The keys are used to lookup values from the\\nincoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`\\nto select the group of existing pods which pods will be taken into consideration\\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\\npod labels will be ignored. The default value is empty.\\nThe same key is forbidden to exist in both matchLabelKeys and labelSelector.\\nAlso, matchLabelKeys cannot be set when labelSelector isn't set.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"mismatchLabelKeys\":{\"description\":\"MismatchLabelKeys is a set of pod label keys to select which pods will\\nbe taken into consideration. The keys are used to lookup values from the\\nincoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`\\nto select the group of existing pods which pods will be taken into consideration\\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\\npod labels will be ignored. The default value is empty.\\nThe same key is forbidden to exist in both mismatchLabelKeys and labelSelector.\\nAlso, mismatchLabelKeys cannot be set when labelSelector isn't set.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"namespaceSelector\":{\"description\":\"A label query over the set of namespaces that the term applies to.\\nThe term is applied to the union of the namespaces selected by this field\\nand the ones listed in the namespaces field.\\nnull selector and null or empty namespaces list means \\\"this pod's namespace\\\".\\nAn empty selector ({}) matches all namespaces.\",\"properties\":{\"matchExpressions\":{\"description\":\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\",\"items\":{\"description\":\"A label selector requirement is a selector that contains values, a key, and an operator that\\nrelates the key and values.\",\"properties\":{\"key\":{\"description\":\"key is the label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"operator represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists and DoesNotExist.\",\"type\":\"string\"},\"values\":{\"description\":\"values is an array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. This array is replaced during a strategic\\nmerge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"matchLabels\":{\"additionalProperties\":{\"type\":\"string\"},\"description\":\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\\nmap is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the\\noperator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\",\"type\":\"object\"}},\"type\":\"object\",\"x-kubernetes-map-type\":\"atomic\"},\"namespaces\":{\"description\":\"namespaces specifies a static list of namespace names that the term applies to.\\nThe term is applied to the union of the namespaces listed in this field\\nand the ones selected by namespaceSelector.\\nnull or empty namespaces list and null namespaceSelector means \\\"this pod's namespace\\\".\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"topologyKey\":{\"description\":\"This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching\\nthe labelSelector in the specified namespaces, where co-located is defined as running on a node\\nwhose value of the label with key topologyKey matches that of any node on which any of the\\nselected pods is running.\\nEmpty topologyKey is not allowed.\",\"type\":\"string\"}},\"required\":[\"topologyKey\"],\"type\":\"object\"},\"weight\":{\"description\":\"weight associated with matching the corresponding podAffinityTerm,\\nin the range 1-100.\",\"format\":\"int32\",\"type\":\"integer\"}},\"required\":[\"podAffinityTerm\",\"weight\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"requiredDuringSchedulingIgnoredDuringExecution\":{\"description\":\"If the affinity requirements specified by this field are not met at\\nscheduling time, the pod will not be scheduled onto the node.\\nIf the affinity requirements specified by this field cease to be met\\nat some point during pod execution (e.g. due to a pod label update), the\\nsystem may or may not try to eventually evict the pod from its node.\\nWhen there are multiple elements, the lists of nodes corresponding to each\\npodAffinityTerm are intersected, i.e. all terms must be satisfied.\",\"items\":{\"description\":\"Defines a set of pods (namely those matching the labelSelector\\nrelative to the given namespace(s)) that this pod should be\\nco-located (affinity) or not co-located (anti-affinity) with,\\nwhere co-located is defined as running on a node whose value of\\nthe label with key \\u003ctopologyKey\\u003e matches that of any node on which\\na pod of the set of pods is running\",\"properties\":{\"labelSelector\":{\"description\":\"A label query over a set of resources, in this case pods.\\nIf it's null, this PodAffinityTerm matches with no Pods.\",\"properties\":{\"matchExpressions\":{\"description\":\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\",\"items\":{\"description\":\"A label selector requirement is a selector that contains values, a key, and an operator that\\nrelates the key and values.\",\"properties\":{\"key\":{\"description\":\"key is the label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"operator represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists and DoesNotExist.\",\"type\":\"string\"},\"values\":{\"description\":\"values is an array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. This array is replaced during a strategic\\nmerge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"matchLabels\":{\"additionalProperties\":{\"type\":\"string\"},\"description\":\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\\nmap is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the\\noperator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\",\"type\":\"object\"}},\"type\":\"object\",\"x-kubernetes-map-type\":\"atomic\"},\"matchLabelKeys\":{\"description\":\"MatchLabelKeys is a set of pod label keys to select which pods will\\nbe taken into consideration. The keys are used to lookup values from the\\nincoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`\\nto select the group of existing pods which pods will be taken into consideration\\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\\npod labels will be ignored. The default value is empty.\\nThe same key is forbidden to exist in both matchLabelKeys and labelSelector.\\nAlso, matchLabelKeys cannot be set when labelSelector isn't set.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"mismatchLabelKeys\":{\"description\":\"MismatchLabelKeys is a set of pod label keys to select which pods will\\nbe taken into consideration. The keys are used to lookup values from the\\nincoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`\\nto select the group of existing pods which pods will be taken into consideration\\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\\npod labels will be ignored. The default value is empty.\\nThe same key is forbidden to exist in both mismatchLabelKeys and labelSelector.\\nAlso, mismatchLabelKeys cannot be set when labelSelector isn't set.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"namespaceSelector\":{\"description\":\"A label query over the set of namespaces that the term applies to.\\nThe term is applied to the union of the namespaces selected by this field\\nand the ones listed in the namespaces field.\\nnull selector and null or empty namespaces list means \\\"this pod's namespace\\\".\\nAn empty selector ({}) matches all namespaces.\",\"properties\":{\"matchExpressions\":{\"description\":\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\",\"items\":{\"description\":\"A label selector requirement is a selector that contains values, a key, and an operator that\\nrelates the key and values.\",\"properties\":{\"key\":{\"description\":\"key is the label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"operator represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists and DoesNotExist.\",\"type\":\"string\"},\"values\":{\"description\":\"values is an array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. This array is replaced during a strategic\\nmerge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"matchLabels\":{\"additionalProperties\":{\"type\":\"string\"},\"description\":\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\\nmap is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the\\noperator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\",\"type\":\"object\"}},\"type\":\"object\",\"x-kubernetes-map-type\":\"atomic\"},\"namespaces\":{\"description\":\"namespaces specifies a static list of namespace names that the term applies to.\\nThe term is applied to the union of the namespaces listed in this field\\nand the ones selected by namespaceSelector.\\nnull or empty namespaces list and null namespaceSelector means \\\"this pod's namespace\\\".\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"topologyKey\":{\"description\":\"This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching\\nthe labelSelector in the specified namespaces, where co-located is defined as running on a node\\nwhose value of the label with key topologyKey matches that of any node on which any of the\\nselected pods is running.\\nEmpty topologyKey is not allowed.\",\"type\":\"string\"}},\"required\":[\"topologyKey\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"type\":\"object\"},\"podAntiAffinity\":{\"description\":\"Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).\",\"properties\":{\"preferredDuringSchedulingIgnoredDuringExecution\":{\"description\":\"The scheduler will prefer to schedule pods to nodes that satisfy\\nthe anti-affinity expressions specified by this field, but it may choose\\na node that violates one or more of the expressions. The node that is\\nmost preferred is the one with the greatest sum of weights, i.e.\\nfor each node that meets all of the scheduling requirements (resource\\nrequest, requiredDuringScheduling anti-affinity expressions, etc.),\\ncompute a sum by iterating through the elements of this field and adding\\n\\\"weight\\\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the\\nnode(s) with the highest sum are the most preferred.\",\"items\":{\"description\":\"The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)\",\"properties\":{\"podAffinityTerm\":{\"description\":\"Required. A pod affinity term, associated with the corresponding weight.\",\"properties\":{\"labelSelector\":{\"description\":\"A label query over a set of resources, in this case pods.\\nIf it's null, this PodAffinityTerm matches with no Pods.\",\"properties\":{\"matchExpressions\":{\"description\":\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\",\"items\":{\"description\":\"A label selector requirement is a selector that contains values, a key, and an operator that\\nrelates the key and values.\",\"properties\":{\"key\":{\"description\":\"key is the label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"operator represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists and DoesNotExist.\",\"type\":\"string\"},\"values\":{\"description\":\"values is an array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. This array is replaced during a strategic\\nmerge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"matchLabels\":{\"additionalProperties\":{\"type\":\"string\"},\"description\":\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\\nmap is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the\\noperator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\",\"type\":\"object\"}},\"type\":\"object\",\"x-kubernetes-map-type\":\"atomic\"},\"matchLabelKeys\":{\"description\":\"MatchLabelKeys is a set of pod label keys to select which pods will\\nbe taken into consideration. The keys are used to lookup values from the\\nincoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`\\nto select the group of existing pods which pods will be taken into consideration\\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\\npod labels will be ignored. The default value is empty.\\nThe same key is forbidden to exist in both matchLabelKeys and labelSelector.\\nAlso, matchLabelKeys cannot be set when labelSelector isn't set.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"mismatchLabelKeys\":{\"description\":\"MismatchLabelKeys is a set of pod label keys to select which pods will\\nbe taken into consideration. The keys are used to lookup values from the\\nincoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`\\nto select the group of existing pods which pods will be taken into consideration\\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\\npod labels will be ignored. The default value is empty.\\nThe same key is forbidden to exist in both mismatchLabelKeys and labelSelector.\\nAlso, mismatchLabelKeys cannot be set when labelSelector isn't set.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"namespaceSelector\":{\"description\":\"A label query over the set of namespaces that the term applies to.\\nThe term is applied to the union of the namespaces selected by this field\\nand the ones listed in the namespaces field.\\nnull selector and null or empty namespaces list means \\\"this pod's namespace\\\".\\nAn empty selector ({}) matches all namespaces.\",\"properties\":{\"matchExpressions\":{\"description\":\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\",\"items\":{\"description\":\"A label selector requirement is a selector that contains values, a key, and an operator that\\nrelates the key and values.\",\"properties\":{\"key\":{\"description\":\"key is the label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"operator represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists and DoesNotExist.\",\"type\":\"string\"},\"values\":{\"description\":\"values is an array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. This array is replaced during a strategic\\nmerge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"matchLabels\":{\"additionalProperties\":{\"type\":\"string\"},\"description\":\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\\nmap is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the\\noperator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\",\"type\":\"object\"}},\"type\":\"object\",\"x-kubernetes-map-type\":\"atomic\"},\"namespaces\":{\"description\":\"namespaces specifies a static list of namespace names that the term applies to.\\nThe term is applied to the union of the namespaces listed in this field\\nand the ones selected by namespaceSelector.\\nnull or empty namespaces list and null namespaceSelector means \\\"this pod's namespace\\\".\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"topologyKey\":{\"description\":\"This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching\\nthe labelSelector in the specified namespaces, where co-located is defined as running on a node\\nwhose value of the label with key topologyKey matches that of any node on which any of the\\nselected pods is running.\\nEmpty topologyKey is not allowed.\",\"type\":\"string\"}},\"required\":[\"topologyKey\"],\"type\":\"object\"},\"weight\":{\"description\":\"weight associated with matching the corresponding podAffinityTerm,\\nin the range 1-100.\",\"format\":\"int32\",\"type\":\"integer\"}},\"required\":[\"podAffinityTerm\",\"weight\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"requiredDuringSchedulingIgnoredDuringExecution\":{\"description\":\"If the anti-affinity requirements specified by this field are not met at\\nscheduling time, the pod will not be scheduled onto the node.\\nIf the anti-affinity requirements specified by this field cease to be met\\nat some point during pod execution (e.g. due to a pod label update), the\\nsystem may or may not try to eventually evict the pod from its node.\\nWhen there are multiple elements, the lists of nodes corresponding to each\\npodAffinityTerm are intersected, i.e. all terms must be satisfied.\",\"items\":{\"description\":\"Defines a set of pods (namely those matching the labelSelector\\nrelative to the given namespace(s)) that this pod should be\\nco-located (affinity) or not co-located (anti-affinity) with,\\nwhere co-located is defined as running on a node whose value of\\nthe label with key \\u003ctopologyKey\\u003e matches that of any node on which\\na pod of the set of pods is running\",\"properties\":{\"labelSelector\":{\"description\":\"A label query over a set of resources, in this case pods.\\nIf it's null, this PodAffinityTerm matches with no Pods.\",\"properties\":{\"matchExpressions\":{\"description\":\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\",\"items\":{\"description\":\"A label selector requirement is a selector that contains values, a key, and an operator that\\nrelates the key and values.\",\"properties\":{\"key\":{\"description\":\"key is the label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"operator represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists and DoesNotExist.\",\"type\":\"string\"},\"values\":{\"description\":\"values is an array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. This array is replaced during a strategic\\nmerge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"matchLabels\":{\"additionalProperties\":{\"type\":\"string\"},\"description\":\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\\nmap is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the\\noperator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\",\"type\":\"object\"}},\"type\":\"object\",\"x-kubernetes-map-type\":\"atomic\"},\"matchLabelKeys\":{\"description\":\"MatchLabelKeys is a set of pod label keys to select which pods will\\nbe taken into consideration. The keys are used to lookup values from the\\nincoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`\\nto select the group of existing pods which pods will be taken into consideration\\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\\npod labels will be ignored. The default value is empty.\\nThe same key is forbidden to exist in both matchLabelKeys and labelSelector.\\nAlso, matchLabelKeys cannot be set when labelSelector isn't set.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"mismatchLabelKeys\":{\"description\":\"MismatchLabelKeys is a set of pod label keys to select which pods will\\nbe taken into consideration. The keys are used to lookup values from the\\nincoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`\\nto select the group of existing pods which pods will be taken into consideration\\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\\npod labels will be ignored. The default value is empty.\\nThe same key is forbidden to exist in both mismatchLabelKeys and labelSelector.\\nAlso, mismatchLabelKeys cannot be set when labelSelector isn't set.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"namespaceSelector\":{\"description\":\"A label query over the set of namespaces that the term applies to.\\nThe term is applied to the union of the namespaces selected by this field\\nand the ones listed in the namespaces field.\\nnull selector and null or empty namespaces list means \\\"this pod's namespace\\\".\\nAn empty selector ({}) matches all namespaces.\",\"properties\":{\"matchExpressions\":{\"description\":\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\",\"items\":{\"description\":\"A label selector requirement is a selector that contains values, a key, and an operator that\\nrelates the key and values.\",\"properties\":{\"key\":{\"description\":\"key is the label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"operator represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists and DoesNotExist.\",\"type\":\"string\"},\"values\":{\"description\":\"values is an array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. This array is replaced during a strategic\\nmerge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"matchLabels\":{\"additionalProperties\":{\"type\":\"string\"},\"description\":\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\\nmap is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the\\noperator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\",\"type\":\"object\"}},\"type\":\"object\",\"x-kubernetes-map-type\":\"atomic\"},\"namespaces\":{\"description\":\"namespaces specifies a static list of namespace names that the term applies to.\\nThe term is applied to the union of the namespaces listed in this field\\nand the ones selected by namespaceSelector.\\nnull or empty namespaces list and null namespaceSelector means \\\"this pod's namespace\\\".\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"topologyKey\":{\"description\":\"This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching\\nthe labelSelector in the specified namespaces, where co-located is defined as running on a node\\nwhose value of the label with key topologyKey matches that of any node on which any of the\\nselected pods is running.\\nEmpty topologyKey is not allowed.\",\"type\":\"string\"}},\"required\":[\"topologyKey\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"type\":\"object\"}},\"type\":\"object\"},\"nodeSelector\":{\"additionalProperties\":{\"type\":\"string\"},\"description\":\"nodeSelector is the node selector applied to the relevant kind of pods\\nIt specifies a map of key-value pairs: for the pod to be eligible to run on a node,\\nthe node must have each of the indicated key-value pairs as labels\\n(it can have additional labels as well).\\nSee https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#nodeselector\",\"type\":\"object\"},\"tolerations\":{\"description\":\"tolerations is a list of tolerations applied to the relevant kind of pods\\nSee https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/ for more info.\\nThese are additional tolerations other than default ones.\",\"items\":{\"description\":\"The pod this Toleration is attached to tolerates any taint that matches\\nthe triple \\u003ckey,value,effect\\u003e using the matching operator \\u003coperator\\u003e.\",\"properties\":{\"effect\":{\"description\":\"Effect indicates the taint effect to match. Empty means match all taint effects.\\nWhen specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.\",\"type\":\"string\"},\"key\":{\"description\":\"Key is the taint key that the toleration applies to. Empty means match all taint keys.\\nIf the key is empty, operator must be Exists; this combination means to match all values and all keys.\",\"type\":\"string\"},\"operator\":{\"description\":\"Operator represents a key's relationship to the value.\\nValid operators are Exists and Equal. Defaults to Equal.\\nExists is equivalent to wildcard for value, so that a pod can\\ntolerate all taints of a particular category.\",\"type\":\"string\"},\"tolerationSeconds\":{\"description\":\"TolerationSeconds represents the period of time the toleration (which must be\\nof effect NoExecute, otherwise this field is ignored) tolerates the taint. By default,\\nit is not set, which means tolerate the taint forever (do not evict). Zero and\\nnegative values will be treated as 0 (evict immediately) by the system.\",\"format\":\"int64\",\"type\":\"integer\"},\"value\":{\"description\":\"Value is the taint value the toleration matches to.\\nIf the operator is Exists, the value should be empty, otherwise just a regular string.\",\"type\":\"string\"}},\"type\":\"object\"},\"type\":\"array\"}},\"type\":\"object\"}},\"type\":\"object\"},\"instancetypeConfig\":{\"description\":\"InstancetypeConfig holds the configuration of instance type related functionality within KubeVirt.\",\"properties\":{\"referencePolicy\":{\"description\":\"ReferencePolicy defines how an instance type or preference should be referenced by the VM after submission, supported values are:\\nreference (default) - Where a copy of the original object is stashed in a ControllerRevision and referenced by the VM.\\nexpand - Where the instance type or preference are expanded into the VM if no revisionNames have been populated.\\nexpandAll - Where the instance type or preference are expanded into the VM regardless of revisionNames previously being populated.\",\"enum\":[\"reference\",\"expand\",\"expandAll\"],\"nullable\":true,\"type\":\"string\"}},\"type\":\"object\"},\"ksmConfiguration\":{\"description\":\"KSMConfiguration holds the information regarding\\nthe enabling the KSM in the nodes (if available).\",\"properties\":{\"nodeLabelSelector\":{\"description\":\"NodeLabelSelector is a selector that filters in which nodes the KSM will be enabled.\\nEmpty NodeLabelSelector will enable ksm for every node.\",\"properties\":{\"matchExpressions\":{\"description\":\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\",\"items\":{\"description\":\"A label selector requirement is a selector that contains values, a key, and an operator that\\nrelates the key and values.\",\"properties\":{\"key\":{\"description\":\"key is the label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"operator represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists and DoesNotExist.\",\"type\":\"string\"},\"values\":{\"description\":\"values is an array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. This array is replaced during a strategic\\nmerge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"matchLabels\":{\"additionalProperties\":{\"type\":\"string\"},\"description\":\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\\nmap is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the\\noperator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\",\"type\":\"object\"}},\"type\":\"object\",\"x-kubernetes-map-type\":\"atomic\"}},\"type\":\"object\"},\"kubeSecondaryDNSNameServerIP\":{\"description\":\"KubeSecondaryDNSNameServerIP defines name server IP used by KubeSecondaryDNS\",\"type\":\"string\"},\"liveMigrationConfig\":{\"default\":{\"allowAutoConverge\":false,\"allowPostCopy\":false,\"completionTimeoutPerGiB\":150,\"parallelMigrationsPerCluster\":5,\"parallelOutboundMigrationsPerNode\":2,\"progressTimeout\":150},\"description\":\"Live migration limits and timeouts are applied so that migration processes do not\\noverwhelm the cluster.\",\"properties\":{\"allowAutoConverge\":{\"default\":false,\"description\":\"AllowAutoConverge allows the platform to compromise performance/availability of VMIs to\\nguarantee successful VMI live migrations. Defaults to false\",\"type\":\"boolean\"},\"allowPostCopy\":{\"default\":false,\"description\":\"When enabled, KubeVirt attempts to use post-copy live-migration in case it\\nreaches its completion timeout while attempting pre-copy live-migration.\\nPost-copy migrations allow even the busiest VMs to successfully live-migrate.\\nHowever, events like a network failure or a failure in any of the source or\\ndestination nodes can cause the migrated VM to crash or reach inconsistency.\\nEnable this option when evicting nodes is more important than keeping VMs\\nalive.\\nDefaults to false.\",\"type\":\"boolean\"},\"bandwidthPerMigration\":{\"description\":\"Bandwidth limit of each migration, the value is quantity of bytes per second (e.g. 2048Mi = 2048MiB/sec)\",\"pattern\":\"^(\\\\+|-)?(([0-9]+(\\\\.[0-9]*)?)|(\\\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\\\+|-)?(([0-9]+(\\\\.[0-9]*)?)|(\\\\.[0-9]+))))?$\",\"type\":\"string\"},\"completionTimeoutPerGiB\":{\"default\":150,\"description\":\"If a migrating VM is big and busy, while the connection to the destination node\\nis slow, migration may never converge. The completion timeout is calculated\\nbased on completionTimeoutPerGiB times the size of the guest (both RAM and\\nmigrated disks, if any). For example, with completionTimeoutPerGiB set to 800,\\na virtual machine instance with 6GiB memory will timeout if it has not\\ncompleted migration in 1h20m. Use a lower completionTimeoutPerGiB to induce\\nquicker failure, so that another destination or post-copy is attempted. Use a\\nhigher completionTimeoutPerGiB to let workload with spikes in its memory dirty\\nrate to converge.\\nThe format is a number.\",\"format\":\"int64\",\"type\":\"integer\"},\"network\":{\"description\":\"The migrations will be performed over a dedicated multus network to minimize disruption to tenant workloads due to network saturation when VM live migrations are triggered.\",\"type\":\"string\"},\"parallelMigrationsPerCluster\":{\"default\":5,\"description\":\"Number of migrations running in parallel in the cluster.\",\"format\":\"int32\",\"type\":\"integer\"},\"parallelOutboundMigrationsPerNode\":{\"default\":2,\"description\":\"Maximum number of outbound migrations per node.\",\"format\":\"int32\",\"type\":\"integer\"},\"progressTimeout\":{\"default\":150,\"description\":\"The migration will be canceled if memory copy fails to make progress in this time, in seconds.\",\"format\":\"int64\",\"type\":\"integer\"}},\"type\":\"object\"},\"liveUpdateConfiguration\":{\"description\":\"LiveUpdateConfiguration holds the cluster configuration for live update of virtual machines - max cpu sockets,\\nmax guest memory and max hotplug ratio. This setting can affect VM CPU and memory settings.\",\"properties\":{\"maxCpuSockets\":{\"description\":\"MaxCpuSockets provides a MaxSockets value for VMs that do not provide their own.\\nFor VMs with more sockets than maximum the MaxSockets will be set to equal number of sockets.\",\"format\":\"int32\",\"type\":\"integer\"},\"maxGuest\":{\"anyOf\":[{\"type\":\"integer\"},{\"type\":\"string\"}],\"description\":\"MaxGuest defines the maximum amount memory that can be allocated\\nto the guest using hotplug.\",\"pattern\":\"^(\\\\+|-)?(([0-9]+(\\\\.[0-9]*)?)|(\\\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\\\+|-)?(([0-9]+(\\\\.[0-9]*)?)|(\\\\.[0-9]+))))?$\",\"x-kubernetes-int-or-string\":true},\"maxHotplugRatio\":{\"description\":\"MaxHotplugRatio is the ratio used to define the max amount\\nof a hotplug resource that can be made available to a VM\\nwhen the specific Max* setting is not defined (MaxCpuSockets, MaxGuest)\\nExample: VM is configured with 512Mi of guest memory, if MaxGuest is not\\ndefined and MaxHotplugRatio is 2 then MaxGuest = 1Gi\\ndefaults to 4\",\"format\":\"int32\",\"type\":\"integer\"}},\"type\":\"object\"},\"localStorageClassName\":{\"description\":\"Deprecated: LocalStorageClassName the name of the local storage class.\",\"type\":\"string\"},\"logVerbosityConfig\":{\"description\":\"LogVerbosityConfig configures the verbosity level of Kubevirt's different components. The higher\\nthe value - the higher the log verbosity.\",\"properties\":{\"cdi\":{\"description\":\"CDI indicates the log verbosity level that controls the amount of information logged for CDI components.\",\"format\":\"int32\",\"type\":\"integer\"},\"kubevirt\":{\"description\":\"Kubevirt is a struct that allows specifying the log verbosity level that controls the amount of information\\nlogged for each Kubevirt component.\",\"properties\":{\"nodeVerbosity\":{\"additionalProperties\":{\"type\":\"integer\"},\"description\":\"NodeVerbosity represents a map of nodes with a specific verbosity level\",\"type\":\"object\"},\"virtAPI\":{\"type\":\"integer\"},\"virtController\":{\"type\":\"integer\"},\"virtHandler\":{\"type\":\"integer\"},\"virtLauncher\":{\"type\":\"integer\"},\"virtOperator\":{\"type\":\"integer\"},\"virtSynchronizationController\":{\"type\":\"integer\"}},\"type\":\"object\"}},\"type\":\"object\"},\"mediatedDevicesConfiguration\":{\"description\":\"MediatedDevicesConfiguration holds information about MDEV types to be defined on nodes, if available\",\"properties\":{\"mediatedDeviceTypes\":{\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"mediatedDevicesTypes\":{\"description\":\"Deprecated: please use mediatedDeviceTypes instead.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"nodeMediatedDeviceTypes\":{\"items\":{\"description\":\"NodeMediatedDeviceTypesConfig holds information about MDEV types to be defined in a specific node that matches the NodeSelector field.\",\"properties\":{\"mediatedDeviceTypes\":{\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"mediatedDevicesTypes\":{\"description\":\"Deprecated: please use mediatedDeviceTypes instead.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"nodeSelector\":{\"additionalProperties\":{\"type\":\"string\"},\"description\":\"NodeSelector is a selector which must be true for the vmi to fit on a node.\\nSelector which must match a node's labels for the vmi to be scheduled on that node.\\nMore info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/\",\"type\":\"object\"}},\"required\":[\"nodeSelector\"],\"type\":\"object\",\"x-kubernetes-validations\":[{\"message\":\"for nodeMediatedDeviceTypes a non-empty mediatedDeviceTypes or mediatedDevicesTypes(deprecated) is required\",\"rule\":\"(has(self.mediatedDeviceTypes) \\u0026\\u0026 size(self.mediatedDeviceTypes)\\u003e0) || (has(self.mediatedDevicesTypes) \\u0026\\u0026 size(self.mediatedDevicesTypes)\\u003e0)\"}]},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"type\":\"object\",\"x-kubernetes-validations\":[{\"message\":\"for mediatedDevicesConfiguration a non-empty mediatedDeviceTypes or mediatedDevicesTypes(deprecated) is required\",\"rule\":\"(has(self.mediatedDeviceTypes) \\u0026\\u0026 size(self.mediatedDeviceTypes)\\u003e0) || (has(self.mediatedDevicesTypes) \\u0026\\u0026 size(self.mediatedDevicesTypes)\\u003e0)\"}]},\"networkBinding\":{\"additionalProperties\":{\"properties\":{\"computeResourceOverhead\":{\"description\":\"ComputeResourceOverhead specifies the resource overhead that should be added to the compute container when using the binding.\\nversion: v1alphav1\",\"properties\":{\"limits\":{\"additionalProperties\":{\"anyOf\":[{\"type\":\"integer\"},{\"type\":\"string\"}],\"pattern\":\"^(\\\\+|-)?(([0-9]+(\\\\.[0-9]*)?)|(\\\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\\\+|-)?(([0-9]+(\\\\.[0-9]*)?)|(\\\\.[0-9]+))))?$\",\"x-kubernetes-int-or-string\":true},\"description\":\"Limits describes the maximum amount of compute resources allowed.\\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/\",\"type\":\"object\"},\"requests\":{\"additionalProperties\":{\"anyOf\":[{\"type\":\"integer\"},{\"type\":\"string\"}],\"pattern\":\"^(\\\\+|-)?(([0-9]+(\\\\.[0-9]*)?)|(\\\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\\\+|-)?(([0-9]+(\\\\.[0-9]*)?)|(\\\\.[0-9]+))))?$\",\"x-kubernetes-int-or-string\":true},\"description\":\"Requests describes the minimum amount of compute resources required.\\nIf Requests is omitted for a container, it defaults to Limits if that is explicitly specified,\\notherwise to an implementation-defined value. Requests cannot exceed Limits.\\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/\",\"type\":\"object\"}},\"type\":\"object\"},\"domainAttachmentType\":{\"description\":\"DomainAttachmentType is a standard domain network attachment method kubevirt supports.\\nSupported values: \\\"tap\\\", \\\"managedTap\\\" (since v1.4).\\nThe standard domain attachment can be used instead or in addition to the sidecarImage.\\nversion: 1alphav1\",\"type\":\"string\"},\"downwardAPI\":{\"description\":\"DownwardAPI specifies what kind of data should be exposed to the binding plugin sidecar.\\nSupported values: \\\"device-info\\\"\\nversion: v1alphav1\",\"type\":\"string\"},\"migration\":{\"description\":\"Migration means the VM using the plugin can be safely migrated\\nversion: 1alphav1\",\"properties\":{\"method\":{\"description\":\"Method defines a pre-defined migration methodology\\nversion: 1alphav1\",\"type\":\"string\"}},\"type\":\"object\"},\"networkAttachmentDefinition\":{\"description\":\"NetworkAttachmentDefinition references to a NetworkAttachmentDefinition CR object.\\nFormat: \\u003cname\\u003e, \\u003cnamespace\\u003e/\\u003cname\\u003e.\\nIf namespace is not specified, VMI namespace is assumed.\\nversion: 1alphav1\",\"type\":\"string\"},\"sidecarImage\":{\"description\":\"SidecarImage references a container image that runs in the virt-launcher pod.\\nThe sidecar handles (libvirt) domain configuration and optional services.\\nversion: 1alphav1\",\"type\":\"string\"}},\"type\":\"object\"},\"description\":\"NetworkBinding defines the network binding plugins.\\nThose bindings can be used when defining virtual machine interfaces.\",\"type\":\"object\"},\"obsoleteCPUs\":{\"description\":\"ObsoleteCPUs allows avoiding scheduling of VMs for obsolete CPU models\",\"properties\":{\"cpuModels\":{\"description\":\"CPUModels is a list of obsolete CPU models. When the node-labeller obtains the list of obsolete CPU models, it\\neliminates those CPU models and creates labels for valid CPU models.\\nThe default values for this field is nil, however, HCO uses opinionated values, and adding values to this list\\nwill add them to the opinionated values.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"set\"},\"minCPUModel\":{\"description\":\"MinCPUModel is the Minimum CPU model that is used for basic CPU features; e.g. Penryn or Haswell.\\nThe default value for this field is nil, but in KubeVirt, the default value is \\\"Penryn\\\", if nothing else is set.\\nUse this field to override KubeVirt default value.\",\"type\":\"string\"}},\"type\":\"object\"},\"permittedHostDevices\":{\"description\":\"PermittedHostDevices holds information about devices allowed for passthrough\",\"properties\":{\"mediatedDevices\":{\"items\":{\"description\":\"MediatedHostDevice represents a host mediated device allowed for passthrough\",\"properties\":{\"disabled\":{\"description\":\"HCO enforces the existence of several MediatedHostDevice objects. Set disabled field to true instead of remove\\nthese objects.\",\"type\":\"boolean\"},\"externalResourceProvider\":{\"description\":\"indicates that this resource is being provided by an external device plugin\",\"type\":\"boolean\"},\"mdevNameSelector\":{\"description\":\"name of a mediated device type required to identify a mediated device on a host\",\"type\":\"string\"},\"resourceName\":{\"description\":\"name by which a device is advertised and being requested\",\"type\":\"string\"}},\"required\":[\"mdevNameSelector\",\"resourceName\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-map-keys\":[\"mdevNameSelector\"],\"x-kubernetes-list-type\":\"map\"},\"pciHostDevices\":{\"items\":{\"description\":\"PciHostDevice represents a host PCI device allowed for passthrough\",\"properties\":{\"disabled\":{\"description\":\"HCO enforces the existence of several PciHostDevice objects. Set disabled field to true instead of remove\\nthese objects.\",\"type\":\"boolean\"},\"externalResourceProvider\":{\"description\":\"indicates that this resource is being provided by an external device plugin\",\"type\":\"boolean\"},\"pciDeviceSelector\":{\"description\":\"a combination of a vendor_id:product_id required to identify a PCI device on a host.\",\"type\":\"string\"},\"resourceName\":{\"description\":\"name by which a device is advertised and being requested\",\"type\":\"string\"}},\"required\":[\"pciDeviceSelector\",\"resourceName\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-map-keys\":[\"pciDeviceSelector\"],\"x-kubernetes-list-type\":\"map\"},\"usbHostDevices\":{\"items\":{\"description\":\"USBHostDevice represents a host USB device allowed for passthrough\",\"properties\":{\"disabled\":{\"description\":\"HCO enforces the existence of several USBHostDevice objects. Set disabled field to true instead of remove\\nthese objects.\",\"type\":\"boolean\"},\"externalResourceProvider\":{\"description\":\"If true, KubeVirt will leave the allocation and monitoring to an\\nexternal device plugin\",\"type\":\"boolean\"},\"resourceName\":{\"description\":\"Identifies the list of USB host devices.\\ne.g: kubevirt.io/storage, kubevirt.io/bootable-usb, etc\",\"type\":\"string\"},\"selectors\":{\"items\":{\"description\":\"USBSelector represents a selector for a USB device allowed for passthrough\",\"properties\":{\"product\":{\"type\":\"string\"},\"vendor\":{\"type\":\"string\"}},\"required\":[\"product\",\"vendor\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"resourceName\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-map-keys\":[\"resourceName\"],\"x-kubernetes-list-type\":\"map\"}},\"type\":\"object\"},\"resourceRequirements\":{\"default\":{\"vmiCPUAllocationRatio\":10},\"description\":\"ResourceRequirements describes the resource requirements for the operand workloads.\",\"properties\":{\"autoCPULimitNamespaceLabelSelector\":{\"description\":\"When set, AutoCPULimitNamespaceLabelSelector will set a CPU limit on virt-launcher for VMIs running inside\\nnamespaces that match the label selector.\\nThe CPU limit will equal the number of requested vCPUs.\\nThis setting does not apply to VMIs with dedicated CPUs.\",\"properties\":{\"matchExpressions\":{\"description\":\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\",\"items\":{\"description\":\"A label selector requirement is a selector that contains values, a key, and an operator that\\nrelates the key and values.\",\"properties\":{\"key\":{\"description\":\"key is the label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"operator represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists and DoesNotExist.\",\"type\":\"string\"},\"values\":{\"description\":\"values is an array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. This array is replaced during a strategic\\nmerge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"matchLabels\":{\"additionalProperties\":{\"type\":\"string\"},\"description\":\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\\nmap is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the\\noperator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\",\"type\":\"object\"}},\"type\":\"object\",\"x-kubernetes-map-type\":\"atomic\"},\"storageWorkloads\":{\"description\":\"StorageWorkloads defines the resources requirements for storage workloads. It will propagate to the CDI custom\\nresource\",\"properties\":{\"claims\":{\"description\":\"Claims lists the names of resources, defined in spec.resourceClaims,\\nthat are used by this container.\\n\\nThis is an alpha field and requires enabling the\\nDynamicResourceAllocation feature gate.\\n\\nThis field is immutable. It can only be set for containers.\",\"items\":{\"description\":\"ResourceClaim references one entry in PodSpec.ResourceClaims.\",\"properties\":{\"name\":{\"description\":\"Name must match the name of one entry in pod.spec.resourceClaims of\\nthe Pod where this field is used. It makes that resource available\\ninside a container.\",\"type\":\"string\"},\"request\":{\"description\":\"Request is the name chosen for a request in the referenced claim.\\nIf empty, everything from the claim is made available, otherwise\\nonly the result of this request.\",\"type\":\"string\"}},\"required\":[\"name\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-map-keys\":[\"name\"],\"x-kubernetes-list-type\":\"map\"},\"limits\":{\"additionalProperties\":{\"anyOf\":[{\"type\":\"integer\"},{\"type\":\"string\"}],\"pattern\":\"^(\\\\+|-)?(([0-9]+(\\\\.[0-9]*)?)|(\\\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\\\+|-)?(([0-9]+(\\\\.[0-9]*)?)|(\\\\.[0-9]+))))?$\",\"x-kubernetes-int-or-string\":true},\"description\":\"Limits describes the maximum amount of compute resources allowed.\\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/\",\"type\":\"object\"},\"requests\":{\"additionalProperties\":{\"anyOf\":[{\"type\":\"integer\"},{\"type\":\"string\"}],\"pattern\":\"^(\\\\+|-)?(([0-9]+(\\\\.[0-9]*)?)|(\\\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\\\+|-)?(([0-9]+(\\\\.[0-9]*)?)|(\\\\.[0-9]+))))?$\",\"x-kubernetes-int-or-string\":true},\"description\":\"Requests describes the minimum amount of compute resources required.\\nIf Requests is omitted for a container, it defaults to Limits if that is explicitly specified,\\notherwise to an implementation-defined value. Requests cannot exceed Limits.\\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/\",\"type\":\"object\"}},\"type\":\"object\"},\"vmiCPUAllocationRatio\":{\"default\":10,\"description\":\"VmiCPUAllocationRatio defines, for each requested virtual CPU,\\nhow much physical CPU to request per VMI from the\\nhosting node. The value is in fraction of a CPU thread (or\\ncore on non-hyperthreaded nodes).\\nVMI POD CPU request = number of vCPUs * 1/vmiCPUAllocationRatio\\nFor example, a value of 1 means 1 physical CPU thread per VMI CPU thread.\\nA value of 100 would be 1% of a physical thread allocated for each\\nrequested VMI thread.\\nThis option has no effect on VMIs that request dedicated CPUs.\\nDefaults to 10\",\"minimum\":1,\"type\":\"integer\"}},\"type\":\"object\",\"x-kubernetes-validations\":[{\"message\":\"vmiCPUAllocationRatio must be greater than 0\",\"rule\":\"!has(self.vmiCPUAllocationRatio) || self.vmiCPUAllocationRatio \\u003e 0\"}]},\"scratchSpaceStorageClass\":{\"description\":\"Override the storage class used for scratch space during transfer operations. The scratch space storage class\\nis determined in the following order:\\nvalue of scratchSpaceStorageClass, if that doesn't exist, use the default storage class, if there is no default\\nstorage class, use the storage class of the DataVolume, if no storage class specified, use no storage class for\\nscratch space\",\"type\":\"string\"},\"storageImport\":{\"description\":\"StorageImport contains configuration for importing containerized data\",\"properties\":{\"insecureRegistries\":{\"description\":\"InsecureRegistries is a list of image registries URLs that are not secured. Setting an insecure registry URL\\nin this list allows pulling images from this registry.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"set\"}},\"type\":\"object\"},\"tektonPipelinesNamespace\":{\"description\":\"TektonPipelinesNamespace defines namespace in which example pipelines will be deployed.\\nIf unset, then the default value is the operator namespace.\\nDeprecated: This field is ignored.\",\"type\":\"string\"},\"tektonTasksNamespace\":{\"description\":\"TektonTasksNamespace defines namespace in which tekton tasks will be deployed.\\nIf unset, then the default value is the operator namespace.\\nDeprecated: This field is ignored.\",\"type\":\"string\"},\"tlsSecurityProfile\":{\"description\":\"TLSSecurityProfile specifies the settings for TLS connections to be propagated to all kubevirt-hyperconverged components.\\nIf unset, the hyperconverged cluster operator will consume the value set on the APIServer CR on OCP/OKD or Intermediate if on vanilla k8s.\\nNote that only Old, Intermediate and Custom profiles are currently supported, and the maximum available\\nMinTLSVersions is VersionTLS12.\",\"properties\":{\"custom\":{\"description\":\"custom is a user-defined TLS security profile. Be extremely careful using a custom\\nprofile as invalid configurations can be catastrophic. An example custom profile\\nlooks like this:\\n\\n  ciphers:\\n\\n    - ECDHE-ECDSA-CHACHA20-POLY1305\\n\\n    - ECDHE-RSA-CHACHA20-POLY1305\\n\\n    - ECDHE-RSA-AES128-GCM-SHA256\\n\\n    - ECDHE-ECDSA-AES128-GCM-SHA256\\n\\n  minTLSVersion: VersionTLS11\",\"nullable\":true,\"properties\":{\"ciphers\":{\"description\":\"ciphers is used to specify the cipher algorithms that are negotiated\\nduring the TLS handshake.  Operators may remove entries their operands\\ndo not support.  For example, to use DES-CBC3-SHA  (yaml):\\n\\n  ciphers:\\n    - DES-CBC3-SHA\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"minTLSVersion\":{\"description\":\"minTLSVersion is used to specify the minimal version of the TLS protocol\\nthat is negotiated during the TLS handshake. For example, to use TLS\\nversions 1.1, 1.2 and 1.3 (yaml):\\n\\n  minTLSVersion: VersionTLS11\\n\\nNOTE: currently the highest minTLSVersion allowed is VersionTLS12\",\"enum\":[\"VersionTLS10\",\"VersionTLS11\",\"VersionTLS12\",\"VersionTLS13\"],\"type\":\"string\"}},\"type\":\"object\"},\"intermediate\":{\"description\":\"intermediate is a TLS security profile based on:\\n\\nhttps://wiki.mozilla.org/Security/Server_Side_TLS#Intermediate_compatibility_.28recommended.29\\n\\nand looks like this (yaml):\\n\\n  ciphers:\\n\\n    - TLS_AES_128_GCM_SHA256\\n\\n    - TLS_AES_256_GCM_SHA384\\n\\n    - TLS_CHACHA20_POLY1305_SHA256\\n\\n    - ECDHE-ECDSA-AES128-GCM-SHA256\\n\\n    - ECDHE-RSA-AES128-GCM-SHA256\\n\\n    - ECDHE-ECDSA-AES256-GCM-SHA384\\n\\n    - ECDHE-RSA-AES256-GCM-SHA384\\n\\n    - ECDHE-ECDSA-CHACHA20-POLY1305\\n\\n    - ECDHE-RSA-CHACHA20-POLY1305\\n\\n    - DHE-RSA-AES128-GCM-SHA256\\n\\n    - DHE-RSA-AES256-GCM-SHA384\\n\\n  minTLSVersion: VersionTLS12\",\"nullable\":true,\"type\":\"object\"},\"modern\":{\"description\":\"modern is a TLS security profile based on:\\n\\nhttps://wiki.mozilla.org/Security/Server_Side_TLS#Modern_compatibility\\n\\nand looks like this (yaml):\\n\\n  ciphers:\\n\\n    - TLS_AES_128_GCM_SHA256\\n\\n    - TLS_AES_256_GCM_SHA384\\n\\n    - TLS_CHACHA20_POLY1305_SHA256\\n\\n  minTLSVersion: VersionTLS13\",\"nullable\":true,\"type\":\"object\"},\"old\":{\"description\":\"old is a TLS security profile based on:\\n\\nhttps://wiki.mozilla.org/Security/Server_Side_TLS#Old_backward_compatibility\\n\\nand looks like this (yaml):\\n\\n  ciphers:\\n\\n    - TLS_AES_128_GCM_SHA256\\n\\n    - TLS_AES_256_GCM_SHA384\\n\\n    - TLS_CHACHA20_POLY1305_SHA256\\n\\n    - ECDHE-ECDSA-AES128-GCM-SHA256\\n\\n    - ECDHE-RSA-AES128-GCM-SHA256\\n\\n    - ECDHE-ECDSA-AES256-GCM-SHA384\\n\\n    - ECDHE-RSA-AES256-GCM-SHA384\\n\\n    - ECDHE-ECDSA-CHACHA20-POLY1305\\n\\n    - ECDHE-RSA-CHACHA20-POLY1305\\n\\n    - DHE-RSA-AES128-GCM-SHA256\\n\\n    - DHE-RSA-AES256-GCM-SHA384\\n\\n    - DHE-RSA-CHACHA20-POLY1305\\n\\n    - ECDHE-ECDSA-AES128-SHA256\\n\\n    - ECDHE-RSA-AES128-SHA256\\n\\n    - ECDHE-ECDSA-AES128-SHA\\n\\n    - ECDHE-RSA-AES128-SHA\\n\\n    - ECDHE-ECDSA-AES256-SHA384\\n\\n    - ECDHE-RSA-AES256-SHA384\\n\\n    - ECDHE-ECDSA-AES256-SHA\\n\\n    - ECDHE-RSA-AES256-SHA\\n\\n    - DHE-RSA-AES128-SHA256\\n\\n    - DHE-RSA-AES256-SHA256\\n\\n    - AES128-GCM-SHA256\\n\\n    - AES256-GCM-SHA384\\n\\n    - AES128-SHA256\\n\\n    - AES256-SHA256\\n\\n    - AES128-SHA\\n\\n    - AES256-SHA\\n\\n    - DES-CBC3-SHA\\n\\n  minTLSVersion: VersionTLS10\",\"nullable\":true,\"type\":\"object\"},\"type\":{\"description\":\"type is one of Old, Intermediate, Modern or Custom. Custom provides\\nthe ability to specify individual TLS security profile parameters.\\nOld, Intermediate and Modern are TLS security profiles based on:\\n\\nhttps://wiki.mozilla.org/Security/Server_Side_TLS#Recommended_configurations\\n\\nThe profiles are intent based, so they may change over time as new ciphers are developed and existing ciphers\\nare found to be insecure.  Depending on precisely which ciphers are available to a process, the list may be\\nreduced.\\n\\nNote that the Modern profile is currently not supported because it is not\\nyet well adopted by common software libraries.\",\"enum\":[\"Old\",\"Intermediate\",\"Modern\",\"Custom\"],\"type\":\"string\"}},\"type\":\"object\"},\"tuningPolicy\":{\"description\":\"TuningPolicy allows to configure the mode in which the RateLimits of kubevirt are set.\\nIf TuningPolicy is not present the default kubevirt values are used.\\nIt can be set to `annotation` for fine-tuning the kubevirt queryPerSeconds (qps) and burst values.\\nQps and burst values are taken from the annotation hco.kubevirt.io/tuningPolicy\",\"enum\":[\"annotation\",\"highBurst\"],\"type\":\"string\"},\"uninstallStrategy\":{\"default\":\"BlockUninstallIfWorkloadsExist\",\"description\":\"UninstallStrategy defines how to proceed on uninstall when workloads (VirtualMachines, DataVolumes) still exist.\\nBlockUninstallIfWorkloadsExist will prevent the CR from being removed when workloads still exist.\\nBlockUninstallIfWorkloadsExist is the safest choice to protect your workloads from accidental data loss, so it's strongly advised.\\nRemoveWorkloads will cause all the workloads to be cascading deleted on uninstallation.\\nWARNING: please notice that RemoveWorkloads will cause your workloads to be deleted as soon as this CR will be, even accidentally, deleted.\\nPlease correctly consider the implications of this option before setting it.\\nBlockUninstallIfWorkloadsExist is the default behaviour.\",\"enum\":[\"RemoveWorkloads\",\"BlockUninstallIfWorkloadsExist\"],\"type\":\"string\"},\"vddkInitImage\":{\"description\":\"VDDK Init Image eventually used to import VMs from external providers\\n\\nDeprecated: please use the Migration Toolkit for Virtualization\",\"type\":\"string\"},\"virtualMachineOptions\":{\"default\":{\"disableFreePageReporting\":false,\"disableSerialConsoleLog\":false},\"description\":\"VirtualMachineOptions holds the cluster level information regarding the virtual machine.\",\"properties\":{\"disableFreePageReporting\":{\"default\":false,\"description\":\"DisableFreePageReporting disable the free page reporting of\\nmemory balloon device https://libvirt.org/formatdomain.html#memory-balloon-device.\\nThis will have effect only if AutoattachMemBalloon is not false and the vmi is not\\nrequesting any high performance feature (dedicatedCPU/realtime/hugePages), in which free page reporting is always disabled.\",\"type\":\"boolean\"},\"disableSerialConsoleLog\":{\"default\":false,\"description\":\"DisableSerialConsoleLog disables logging the auto-attached default serial console.\\nIf not set, serial console logs will be written to a file and then streamed from a container named `guest-console-log`.\\nThe value can be individually overridden for each VM, not relevant if AutoattachSerialConsole is disabled for the VM.\",\"type\":\"boolean\"}},\"type\":\"object\"},\"vmStateStorageClass\":{\"description\":\"VMStateStorageClass is the name of the storage class to use for the PVCs created to preserve VM state, like TPM.\",\"type\":\"string\"},\"workloadUpdateStrategy\":{\"default\":{\"batchEvictionInterval\":\"1m0s\",\"batchEvictionSize\":10,\"workloadUpdateMethods\":[\"LiveMigrate\"]},\"description\":\"WorkloadUpdateStrategy defines at the cluster level how to handle automated workload updates\",\"properties\":{\"batchEvictionInterval\":{\"default\":\"1m0s\",\"description\":\"BatchEvictionInterval Represents the interval to wait before issuing the next\\nbatch of shutdowns\",\"type\":\"string\"},\"batchEvictionSize\":{\"default\":10,\"description\":\"BatchEvictionSize Represents the number of VMIs that can be forced updated per\\nthe BatchShutdownInterval interval\",\"type\":\"integer\"},\"workloadUpdateMethods\":{\"default\":[\"LiveMigrate\"],\"description\":\"WorkloadUpdateMethods defines the methods that can be used to disrupt workloads\\nduring automated workload updates.\\nWhen multiple methods are present, the least disruptive method takes\\nprecedence over more disruptive methods. For example if both LiveMigrate and Evict\\nmethods are listed, only VMs which are not live migratable will be restarted/shutdown.\\nAn empty list defaults to no automated workload updating.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"workloadUpdateMethods\"],\"type\":\"object\"},\"workloads\":{\"description\":\"workloads HyperConvergedConfig influences the pod configuration (currently only placement) of components\\nwhich need to be running on a node where virtualization workloads should be able to run.\\nChanges to Workloads HyperConvergedConfig can be applied only without existing workload.\",\"properties\":{\"nodePlacement\":{\"description\":\"NodePlacement describes node scheduling configuration.\",\"properties\":{\"affinity\":{\"description\":\"affinity enables pod affinity/anti-affinity placement expanding the types of constraints\\nthat can be expressed with nodeSelector.\\naffinity is going to be applied to the relevant kind of pods in parallel with nodeSelector\\nSee https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#affinity-and-anti-affinity\",\"properties\":{\"nodeAffinity\":{\"description\":\"Describes node affinity scheduling rules for the pod.\",\"properties\":{\"preferredDuringSchedulingIgnoredDuringExecution\":{\"description\":\"The scheduler will prefer to schedule pods to nodes that satisfy\\nthe affinity expressions specified by this field, but it may choose\\na node that violates one or more of the expressions. The node that is\\nmost preferred is the one with the greatest sum of weights, i.e.\\nfor each node that meets all of the scheduling requirements (resource\\nrequest, requiredDuringScheduling affinity expressions, etc.),\\ncompute a sum by iterating through the elements of this field and adding\\n\\\"weight\\\" to the sum if the node matches the corresponding matchExpressions; the\\nnode(s) with the highest sum are the most preferred.\",\"items\":{\"description\":\"An empty preferred scheduling term matches all objects with implicit weight 0\\n(i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).\",\"properties\":{\"preference\":{\"description\":\"A node selector term, associated with the corresponding weight.\",\"properties\":{\"matchExpressions\":{\"description\":\"A list of node selector requirements by node's labels.\",\"items\":{\"description\":\"A node selector requirement is a selector that contains values, a key, and an operator\\nthat relates the key and values.\",\"properties\":{\"key\":{\"description\":\"The label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"Represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.\",\"type\":\"string\"},\"values\":{\"description\":\"An array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. If the operator is Gt or Lt, the values\\narray must have a single element, which will be interpreted as an integer.\\nThis array is replaced during a strategic merge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"matchFields\":{\"description\":\"A list of node selector requirements by node's fields.\",\"items\":{\"description\":\"A node selector requirement is a selector that contains values, a key, and an operator\\nthat relates the key and values.\",\"properties\":{\"key\":{\"description\":\"The label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"Represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.\",\"type\":\"string\"},\"values\":{\"description\":\"An array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. If the operator is Gt or Lt, the values\\narray must have a single element, which will be interpreted as an integer.\\nThis array is replaced during a strategic merge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"type\":\"object\",\"x-kubernetes-map-type\":\"atomic\"},\"weight\":{\"description\":\"Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.\",\"format\":\"int32\",\"type\":\"integer\"}},\"required\":[\"preference\",\"weight\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"requiredDuringSchedulingIgnoredDuringExecution\":{\"description\":\"If the affinity requirements specified by this field are not met at\\nscheduling time, the pod will not be scheduled onto the node.\\nIf the affinity requirements specified by this field cease to be met\\nat some point during pod execution (e.g. due to an update), the system\\nmay or may not try to eventually evict the pod from its node.\",\"properties\":{\"nodeSelectorTerms\":{\"description\":\"Required. A list of node selector terms. The terms are ORed.\",\"items\":{\"description\":\"A null or empty node selector term matches no objects. The requirements of\\nthem are ANDed.\\nThe TopologySelectorTerm type implements a subset of the NodeSelectorTerm.\",\"properties\":{\"matchExpressions\":{\"description\":\"A list of node selector requirements by node's labels.\",\"items\":{\"description\":\"A node selector requirement is a selector that contains values, a key, and an operator\\nthat relates the key and values.\",\"properties\":{\"key\":{\"description\":\"The label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"Represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.\",\"type\":\"string\"},\"values\":{\"description\":\"An array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. If the operator is Gt or Lt, the values\\narray must have a single element, which will be interpreted as an integer.\\nThis array is replaced during a strategic merge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"matchFields\":{\"description\":\"A list of node selector requirements by node's fields.\",\"items\":{\"description\":\"A node selector requirement is a selector that contains values, a key, and an operator\\nthat relates the key and values.\",\"properties\":{\"key\":{\"description\":\"The label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"Represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.\",\"type\":\"string\"},\"values\":{\"description\":\"An array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. If the operator is Gt or Lt, the values\\narray must have a single element, which will be interpreted as an integer.\\nThis array is replaced during a strategic merge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"type\":\"object\",\"x-kubernetes-map-type\":\"atomic\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"nodeSelectorTerms\"],\"type\":\"object\",\"x-kubernetes-map-type\":\"atomic\"}},\"type\":\"object\"},\"podAffinity\":{\"description\":\"Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).\",\"properties\":{\"preferredDuringSchedulingIgnoredDuringExecution\":{\"description\":\"The scheduler will prefer to schedule pods to nodes that satisfy\\nthe affinity expressions specified by this field, but it may choose\\na node that violates one or more of the expressions. The node that is\\nmost preferred is the one with the greatest sum of weights, i.e.\\nfor each node that meets all of the scheduling requirements (resource\\nrequest, requiredDuringScheduling affinity expressions, etc.),\\ncompute a sum by iterating through the elements of this field and adding\\n\\\"weight\\\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the\\nnode(s) with the highest sum are the most preferred.\",\"items\":{\"description\":\"The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)\",\"properties\":{\"podAffinityTerm\":{\"description\":\"Required. A pod affinity term, associated with the corresponding weight.\",\"properties\":{\"labelSelector\":{\"description\":\"A label query over a set of resources, in this case pods.\\nIf it's null, this PodAffinityTerm matches with no Pods.\",\"properties\":{\"matchExpressions\":{\"description\":\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\",\"items\":{\"description\":\"A label selector requirement is a selector that contains values, a key, and an operator that\\nrelates the key and values.\",\"properties\":{\"key\":{\"description\":\"key is the label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"operator represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists and DoesNotExist.\",\"type\":\"string\"},\"values\":{\"description\":\"values is an array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. This array is replaced during a strategic\\nmerge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"matchLabels\":{\"additionalProperties\":{\"type\":\"string\"},\"description\":\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\\nmap is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the\\noperator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\",\"type\":\"object\"}},\"type\":\"object\",\"x-kubernetes-map-type\":\"atomic\"},\"matchLabelKeys\":{\"description\":\"MatchLabelKeys is a set of pod label keys to select which pods will\\nbe taken into consideration. The keys are used to lookup values from the\\nincoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`\\nto select the group of existing pods which pods will be taken into consideration\\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\\npod labels will be ignored. The default value is empty.\\nThe same key is forbidden to exist in both matchLabelKeys and labelSelector.\\nAlso, matchLabelKeys cannot be set when labelSelector isn't set.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"mismatchLabelKeys\":{\"description\":\"MismatchLabelKeys is a set of pod label keys to select which pods will\\nbe taken into consideration. The keys are used to lookup values from the\\nincoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`\\nto select the group of existing pods which pods will be taken into consideration\\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\\npod labels will be ignored. The default value is empty.\\nThe same key is forbidden to exist in both mismatchLabelKeys and labelSelector.\\nAlso, mismatchLabelKeys cannot be set when labelSelector isn't set.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"namespaceSelector\":{\"description\":\"A label query over the set of namespaces that the term applies to.\\nThe term is applied to the union of the namespaces selected by this field\\nand the ones listed in the namespaces field.\\nnull selector and null or empty namespaces list means \\\"this pod's namespace\\\".\\nAn empty selector ({}) matches all namespaces.\",\"properties\":{\"matchExpressions\":{\"description\":\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\",\"items\":{\"description\":\"A label selector requirement is a selector that contains values, a key, and an operator that\\nrelates the key and values.\",\"properties\":{\"key\":{\"description\":\"key is the label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"operator represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists and DoesNotExist.\",\"type\":\"string\"},\"values\":{\"description\":\"values is an array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. This array is replaced during a strategic\\nmerge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"matchLabels\":{\"additionalProperties\":{\"type\":\"string\"},\"description\":\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\\nmap is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the\\noperator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\",\"type\":\"object\"}},\"type\":\"object\",\"x-kubernetes-map-type\":\"atomic\"},\"namespaces\":{\"description\":\"namespaces specifies a static list of namespace names that the term applies to.\\nThe term is applied to the union of the namespaces listed in this field\\nand the ones selected by namespaceSelector.\\nnull or empty namespaces list and null namespaceSelector means \\\"this pod's namespace\\\".\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"topologyKey\":{\"description\":\"This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching\\nthe labelSelector in the specified namespaces, where co-located is defined as running on a node\\nwhose value of the label with key topologyKey matches that of any node on which any of the\\nselected pods is running.\\nEmpty topologyKey is not allowed.\",\"type\":\"string\"}},\"required\":[\"topologyKey\"],\"type\":\"object\"},\"weight\":{\"description\":\"weight associated with matching the corresponding podAffinityTerm,\\nin the range 1-100.\",\"format\":\"int32\",\"type\":\"integer\"}},\"required\":[\"podAffinityTerm\",\"weight\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"requiredDuringSchedulingIgnoredDuringExecution\":{\"description\":\"If the affinity requirements specified by this field are not met at\\nscheduling time, the pod will not be scheduled onto the node.\\nIf the affinity requirements specified by this field cease to be met\\nat some point during pod execution (e.g. due to a pod label update), the\\nsystem may or may not try to eventually evict the pod from its node.\\nWhen there are multiple elements, the lists of nodes corresponding to each\\npodAffinityTerm are intersected, i.e. all terms must be satisfied.\",\"items\":{\"description\":\"Defines a set of pods (namely those matching the labelSelector\\nrelative to the given namespace(s)) that this pod should be\\nco-located (affinity) or not co-located (anti-affinity) with,\\nwhere co-located is defined as running on a node whose value of\\nthe label with key \\u003ctopologyKey\\u003e matches that of any node on which\\na pod of the set of pods is running\",\"properties\":{\"labelSelector\":{\"description\":\"A label query over a set of resources, in this case pods.\\nIf it's null, this PodAffinityTerm matches with no Pods.\",\"properties\":{\"matchExpressions\":{\"description\":\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\",\"items\":{\"description\":\"A label selector requirement is a selector that contains values, a key, and an operator that\\nrelates the key and values.\",\"properties\":{\"key\":{\"description\":\"key is the label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"operator represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists and DoesNotExist.\",\"type\":\"string\"},\"values\":{\"description\":\"values is an array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. This array is replaced during a strategic\\nmerge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"matchLabels\":{\"additionalProperties\":{\"type\":\"string\"},\"description\":\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\\nmap is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the\\noperator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\",\"type\":\"object\"}},\"type\":\"object\",\"x-kubernetes-map-type\":\"atomic\"},\"matchLabelKeys\":{\"description\":\"MatchLabelKeys is a set of pod label keys to select which pods will\\nbe taken into consideration. The keys are used to lookup values from the\\nincoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`\\nto select the group of existing pods which pods will be taken into consideration\\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\\npod labels will be ignored. The default value is empty.\\nThe same key is forbidden to exist in both matchLabelKeys and labelSelector.\\nAlso, matchLabelKeys cannot be set when labelSelector isn't set.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"mismatchLabelKeys\":{\"description\":\"MismatchLabelKeys is a set of pod label keys to select which pods will\\nbe taken into consideration. The keys are used to lookup values from the\\nincoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`\\nto select the group of existing pods which pods will be taken into consideration\\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\\npod labels will be ignored. The default value is empty.\\nThe same key is forbidden to exist in both mismatchLabelKeys and labelSelector.\\nAlso, mismatchLabelKeys cannot be set when labelSelector isn't set.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"namespaceSelector\":{\"description\":\"A label query over the set of namespaces that the term applies to.\\nThe term is applied to the union of the namespaces selected by this field\\nand the ones listed in the namespaces field.\\nnull selector and null or empty namespaces list means \\\"this pod's namespace\\\".\\nAn empty selector ({}) matches all namespaces.\",\"properties\":{\"matchExpressions\":{\"description\":\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\",\"items\":{\"description\":\"A label selector requirement is a selector that contains values, a key, and an operator that\\nrelates the key and values.\",\"properties\":{\"key\":{\"description\":\"key is the label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"operator represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists and DoesNotExist.\",\"type\":\"string\"},\"values\":{\"description\":\"values is an array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. This array is replaced during a strategic\\nmerge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"matchLabels\":{\"additionalProperties\":{\"type\":\"string\"},\"description\":\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\\nmap is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the\\noperator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\",\"type\":\"object\"}},\"type\":\"object\",\"x-kubernetes-map-type\":\"atomic\"},\"namespaces\":{\"description\":\"namespaces specifies a static list of namespace names that the term applies to.\\nThe term is applied to the union of the namespaces listed in this field\\nand the ones selected by namespaceSelector.\\nnull or empty namespaces list and null namespaceSelector means \\\"this pod's namespace\\\".\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"topologyKey\":{\"description\":\"This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching\\nthe labelSelector in the specified namespaces, where co-located is defined as running on a node\\nwhose value of the label with key topologyKey matches that of any node on which any of the\\nselected pods is running.\\nEmpty topologyKey is not allowed.\",\"type\":\"string\"}},\"required\":[\"topologyKey\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"type\":\"object\"},\"podAntiAffinity\":{\"description\":\"Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).\",\"properties\":{\"preferredDuringSchedulingIgnoredDuringExecution\":{\"description\":\"The scheduler will prefer to schedule pods to nodes that satisfy\\nthe anti-affinity expressions specified by this field, but it may choose\\na node that violates one or more of the expressions. The node that is\\nmost preferred is the one with the greatest sum of weights, i.e.\\nfor each node that meets all of the scheduling requirements (resource\\nrequest, requiredDuringScheduling anti-affinity expressions, etc.),\\ncompute a sum by iterating through the elements of this field and adding\\n\\\"weight\\\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the\\nnode(s) with the highest sum are the most preferred.\",\"items\":{\"description\":\"The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)\",\"properties\":{\"podAffinityTerm\":{\"description\":\"Required. A pod affinity term, associated with the corresponding weight.\",\"properties\":{\"labelSelector\":{\"description\":\"A label query over a set of resources, in this case pods.\\nIf it's null, this PodAffinityTerm matches with no Pods.\",\"properties\":{\"matchExpressions\":{\"description\":\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\",\"items\":{\"description\":\"A label selector requirement is a selector that contains values, a key, and an operator that\\nrelates the key and values.\",\"properties\":{\"key\":{\"description\":\"key is the label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"operator represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists and DoesNotExist.\",\"type\":\"string\"},\"values\":{\"description\":\"values is an array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. This array is replaced during a strategic\\nmerge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"matchLabels\":{\"additionalProperties\":{\"type\":\"string\"},\"description\":\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\\nmap is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the\\noperator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\",\"type\":\"object\"}},\"type\":\"object\",\"x-kubernetes-map-type\":\"atomic\"},\"matchLabelKeys\":{\"description\":\"MatchLabelKeys is a set of pod label keys to select which pods will\\nbe taken into consideration. The keys are used to lookup values from the\\nincoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`\\nto select the group of existing pods which pods will be taken into consideration\\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\\npod labels will be ignored. The default value is empty.\\nThe same key is forbidden to exist in both matchLabelKeys and labelSelector.\\nAlso, matchLabelKeys cannot be set when labelSelector isn't set.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"mismatchLabelKeys\":{\"description\":\"MismatchLabelKeys is a set of pod label keys to select which pods will\\nbe taken into consideration. The keys are used to lookup values from the\\nincoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`\\nto select the group of existing pods which pods will be taken into consideration\\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\\npod labels will be ignored. The default value is empty.\\nThe same key is forbidden to exist in both mismatchLabelKeys and labelSelector.\\nAlso, mismatchLabelKeys cannot be set when labelSelector isn't set.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"namespaceSelector\":{\"description\":\"A label query over the set of namespaces that the term applies to.\\nThe term is applied to the union of the namespaces selected by this field\\nand the ones listed in the namespaces field.\\nnull selector and null or empty namespaces list means \\\"this pod's namespace\\\".\\nAn empty selector ({}) matches all namespaces.\",\"properties\":{\"matchExpressions\":{\"description\":\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\",\"items\":{\"description\":\"A label selector requirement is a selector that contains values, a key, and an operator that\\nrelates the key and values.\",\"properties\":{\"key\":{\"description\":\"key is the label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"operator represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists and DoesNotExist.\",\"type\":\"string\"},\"values\":{\"description\":\"values is an array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. This array is replaced during a strategic\\nmerge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"matchLabels\":{\"additionalProperties\":{\"type\":\"string\"},\"description\":\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\\nmap is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the\\noperator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\",\"type\":\"object\"}},\"type\":\"object\",\"x-kubernetes-map-type\":\"atomic\"},\"namespaces\":{\"description\":\"namespaces specifies a static list of namespace names that the term applies to.\\nThe term is applied to the union of the namespaces listed in this field\\nand the ones selected by namespaceSelector.\\nnull or empty namespaces list and null namespaceSelector means \\\"this pod's namespace\\\".\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"topologyKey\":{\"description\":\"This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching\\nthe labelSelector in the specified namespaces, where co-located is defined as running on a node\\nwhose value of the label with key topologyKey matches that of any node on which any of the\\nselected pods is running.\\nEmpty topologyKey is not allowed.\",\"type\":\"string\"}},\"required\":[\"topologyKey\"],\"type\":\"object\"},\"weight\":{\"description\":\"weight associated with matching the corresponding podAffinityTerm,\\nin the range 1-100.\",\"format\":\"int32\",\"type\":\"integer\"}},\"required\":[\"podAffinityTerm\",\"weight\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"requiredDuringSchedulingIgnoredDuringExecution\":{\"description\":\"If the anti-affinity requirements specified by this field are not met at\\nscheduling time, the pod will not be scheduled onto the node.\\nIf the anti-affinity requirements specified by this field cease to be met\\nat some point during pod execution (e.g. due to a pod label update), the\\nsystem may or may not try to eventually evict the pod from its node.\\nWhen there are multiple elements, the lists of nodes corresponding to each\\npodAffinityTerm are intersected, i.e. all terms must be satisfied.\",\"items\":{\"description\":\"Defines a set of pods (namely those matching the labelSelector\\nrelative to the given namespace(s)) that this pod should be\\nco-located (affinity) or not co-located (anti-affinity) with,\\nwhere co-located is defined as running on a node whose value of\\nthe label with key \\u003ctopologyKey\\u003e matches that of any node on which\\na pod of the set of pods is running\",\"properties\":{\"labelSelector\":{\"description\":\"A label query over a set of resources, in this case pods.\\nIf it's null, this PodAffinityTerm matches with no Pods.\",\"properties\":{\"matchExpressions\":{\"description\":\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\",\"items\":{\"description\":\"A label selector requirement is a selector that contains values, a key, and an operator that\\nrelates the key and values.\",\"properties\":{\"key\":{\"description\":\"key is the label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"operator represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists and DoesNotExist.\",\"type\":\"string\"},\"values\":{\"description\":\"values is an array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. This array is replaced during a strategic\\nmerge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"matchLabels\":{\"additionalProperties\":{\"type\":\"string\"},\"description\":\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\\nmap is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the\\noperator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\",\"type\":\"object\"}},\"type\":\"object\",\"x-kubernetes-map-type\":\"atomic\"},\"matchLabelKeys\":{\"description\":\"MatchLabelKeys is a set of pod label keys to select which pods will\\nbe taken into consideration. The keys are used to lookup values from the\\nincoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`\\nto select the group of existing pods which pods will be taken into consideration\\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\\npod labels will be ignored. The default value is empty.\\nThe same key is forbidden to exist in both matchLabelKeys and labelSelector.\\nAlso, matchLabelKeys cannot be set when labelSelector isn't set.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"mismatchLabelKeys\":{\"description\":\"MismatchLabelKeys is a set of pod label keys to select which pods will\\nbe taken into consideration. The keys are used to lookup values from the\\nincoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`\\nto select the group of existing pods which pods will be taken into consideration\\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\\npod labels will be ignored. The default value is empty.\\nThe same key is forbidden to exist in both mismatchLabelKeys and labelSelector.\\nAlso, mismatchLabelKeys cannot be set when labelSelector isn't set.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"namespaceSelector\":{\"description\":\"A label query over the set of namespaces that the term applies to.\\nThe term is applied to the union of the namespaces selected by this field\\nand the ones listed in the namespaces field.\\nnull selector and null or empty namespaces list means \\\"this pod's namespace\\\".\\nAn empty selector ({}) matches all namespaces.\",\"properties\":{\"matchExpressions\":{\"description\":\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\",\"items\":{\"description\":\"A label selector requirement is a selector that contains values, a key, and an operator that\\nrelates the key and values.\",\"properties\":{\"key\":{\"description\":\"key is the label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"operator represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists and DoesNotExist.\",\"type\":\"string\"},\"values\":{\"description\":\"values is an array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. This array is replaced during a strategic\\nmerge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"matchLabels\":{\"additionalProperties\":{\"type\":\"string\"},\"description\":\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\\nmap is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the\\noperator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\",\"type\":\"object\"}},\"type\":\"object\",\"x-kubernetes-map-type\":\"atomic\"},\"namespaces\":{\"description\":\"namespaces specifies a static list of namespace names that the term applies to.\\nThe term is applied to the union of the namespaces listed in this field\\nand the ones selected by namespaceSelector.\\nnull or empty namespaces list and null namespaceSelector means \\\"this pod's namespace\\\".\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"topologyKey\":{\"description\":\"This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching\\nthe labelSelector in the specified namespaces, where co-located is defined as running on a node\\nwhose value of the label with key topologyKey matches that of any node on which any of the\\nselected pods is running.\\nEmpty topologyKey is not allowed.\",\"type\":\"string\"}},\"required\":[\"topologyKey\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"type\":\"object\"}},\"type\":\"object\"},\"nodeSelector\":{\"additionalProperties\":{\"type\":\"string\"},\"description\":\"nodeSelector is the node selector applied to the relevant kind of pods\\nIt specifies a map of key-value pairs: for the pod to be eligible to run on a node,\\nthe node must have each of the indicated key-value pairs as labels\\n(it can have additional labels as well).\\nSee https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#nodeselector\",\"type\":\"object\"},\"tolerations\":{\"description\":\"tolerations is a list of tolerations applied to the relevant kind of pods\\nSee https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/ for more info.\\nThese are additional tolerations other than default ones.\",\"items\":{\"description\":\"The pod this Toleration is attached to tolerates any taint that matches\\nthe triple \\u003ckey,value,effect\\u003e using the matching operator \\u003coperator\\u003e.\",\"properties\":{\"effect\":{\"description\":\"Effect indicates the taint effect to match. Empty means match all taint effects.\\nWhen specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.\",\"type\":\"string\"},\"key\":{\"description\":\"Key is the taint key that the toleration applies to. Empty means match all taint keys.\\nIf the key is empty, operator must be Exists; this combination means to match all values and all keys.\",\"type\":\"string\"},\"operator\":{\"description\":\"Operator represents a key's relationship to the value.\\nValid operators are Exists and Equal. Defaults to Equal.\\nExists is equivalent to wildcard for value, so that a pod can\\ntolerate all taints of a particular category.\",\"type\":\"string\"},\"tolerationSeconds\":{\"description\":\"TolerationSeconds represents the period of time the toleration (which must be\\nof effect NoExecute, otherwise this field is ignored) tolerates the taint. By default,\\nit is not set, which means tolerate the taint forever (do not evict). Zero and\\nnegative values will be treated as 0 (evict immediately) by the system.\",\"format\":\"int64\",\"type\":\"integer\"},\"value\":{\"description\":\"Value is the taint value the toleration matches to.\\nIf the operator is Exists, the value should be empty, otherwise just a regular string.\",\"type\":\"string\"}},\"type\":\"object\"},\"type\":\"array\"}},\"type\":\"object\"}},\"type\":\"object\"}},\"type\":\"object\"},\"status\":{\"description\":\"HyperConvergedStatus defines the observed state of HyperConverged\",\"properties\":{\"conditions\":{\"description\":\"Conditions describes the state of the HyperConverged resource.\",\"items\":{\"description\":\"Condition contains details for one aspect of the current state of this API Resource.\",\"properties\":{\"lastTransitionTime\":{\"description\":\"lastTransitionTime is the last time the condition transitioned from one status to another.\\nThis should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.\",\"format\":\"date-time\",\"type\":\"string\"},\"message\":{\"description\":\"message is a human readable message indicating details about the transition.\\nThis may be an empty string.\",\"maxLength\":32768,\"type\":\"string\"},\"observedGeneration\":{\"description\":\"observedGeneration represents the .metadata.generation that the condition was set based upon.\\nFor instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date\\nwith respect to the current state of the instance.\",\"format\":\"int64\",\"minimum\":0,\"type\":\"integer\"},\"reason\":{\"description\":\"reason contains a programmatic identifier indicating the reason for the condition's last transition.\\nProducers of specific condition types may define expected values and meanings for this field,\\nand whether the values are considered a guaranteed API.\\nThe value should be a CamelCase string.\\nThis field may not be empty.\",\"maxLength\":1024,\"minLength\":1,\"pattern\":\"^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$\",\"type\":\"string\"},\"status\":{\"description\":\"status of the condition, one of True, False, Unknown.\",\"enum\":[\"True\",\"False\",\"Unknown\"],\"type\":\"string\"},\"type\":{\"description\":\"type of condition in CamelCase or in foo.example.com/CamelCase.\",\"maxLength\":316,\"pattern\":\"^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$\",\"type\":\"string\"}},\"required\":[\"lastTransitionTime\",\"message\",\"reason\",\"status\",\"type\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"dataImportCronTemplates\":{\"description\":\"DataImportCronTemplates is a list of the actual DataImportCronTemplates as HCO update in the SSP CR. The list\\ncontains both the common and the custom templates, including any modification done by HCO.\",\"items\":{\"description\":\"DataImportCronTemplateStatus is a copy of a dataImportCronTemplate as defined in the spec, or in the HCO image.\",\"properties\":{\"metadata\":{\"properties\":{\"annotations\":{\"additionalProperties\":{\"type\":\"string\"},\"type\":\"object\"},\"finalizers\":{\"items\":{\"type\":\"string\"},\"type\":\"array\"},\"labels\":{\"additionalProperties\":{\"type\":\"string\"},\"type\":\"object\"},\"name\":{\"type\":\"string\"},\"namespace\":{\"type\":\"string\"}},\"type\":\"object\"},\"spec\":{\"description\":\"DataImportCronSpec defines specification for DataImportCron\",\"properties\":{\"garbageCollect\":{\"description\":\"GarbageCollect specifies whether old PVCs should be cleaned up after a new PVC is imported.\\nOptions are currently \\\"Outdated\\\" and \\\"Never\\\", defaults to \\\"Outdated\\\".\",\"type\":\"string\"},\"importsToKeep\":{\"description\":\"Number of import PVCs to keep when garbage collecting. Default is 3.\",\"format\":\"int32\",\"type\":\"integer\"},\"managedDataSource\":{\"description\":\"ManagedDataSource specifies the name of the corresponding DataSource this cron will manage.\\nDataSource has to be in the same namespace.\",\"type\":\"string\"},\"retentionPolicy\":{\"description\":\"RetentionPolicy specifies whether the created DataVolumes and DataSources are retained when their DataImportCron is deleted. Default is RatainAll.\",\"type\":\"string\"},\"schedule\":{\"description\":\"Schedule specifies in cron format when and how often to look for new imports\",\"type\":\"string\"},\"template\":{\"description\":\"Template specifies template for the DVs to be created\",\"properties\":{\"apiVersion\":{\"description\":\"APIVersion defines the versioned schema of this representation of an object.\\nServers should convert recognized schemas to the latest internal value, and\\nmay reject unrecognized values.\\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources\",\"type\":\"string\"},\"kind\":{\"description\":\"Kind is a string value representing the REST resource this object represents.\\nServers may infer this from the endpoint the client submits requests to.\\nCannot be updated.\\nIn CamelCase.\\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\",\"type\":\"string\"},\"metadata\":{\"properties\":{\"annotations\":{\"additionalProperties\":{\"type\":\"string\"},\"type\":\"object\"},\"finalizers\":{\"items\":{\"type\":\"string\"},\"type\":\"array\"},\"labels\":{\"additionalProperties\":{\"type\":\"string\"},\"type\":\"object\"},\"name\":{\"type\":\"string\"},\"namespace\":{\"type\":\"string\"}},\"type\":\"object\"},\"spec\":{\"description\":\"DataVolumeSpec defines the DataVolume type specification\",\"properties\":{\"checkpoints\":{\"description\":\"Checkpoints is a list of DataVolumeCheckpoints, representing stages in a multistage import.\",\"items\":{\"description\":\"DataVolumeCheckpoint defines a stage in a warm migration.\",\"properties\":{\"current\":{\"description\":\"Current is the identifier of the snapshot created for this checkpoint.\",\"type\":\"string\"},\"previous\":{\"description\":\"Previous is the identifier of the snapshot from the previous checkpoint.\",\"type\":\"string\"}},\"required\":[\"current\",\"previous\"],\"type\":\"object\"},\"type\":\"array\"},\"contentType\":{\"description\":\"DataVolumeContentType options: \\\"kubevirt\\\", \\\"archive\\\"\",\"enum\":[\"kubevirt\",\"archive\"],\"type\":\"string\"},\"finalCheckpoint\":{\"description\":\"FinalCheckpoint indicates whether the current DataVolumeCheckpoint is the final checkpoint.\",\"type\":\"boolean\"},\"preallocation\":{\"description\":\"Preallocation controls whether storage for DataVolumes should be allocated in advance.\",\"type\":\"boolean\"},\"priorityClassName\":{\"description\":\"PriorityClassName for Importer, Cloner and Uploader pod\",\"type\":\"string\"},\"pvc\":{\"description\":\"PVC is the PVC specification\",\"properties\":{\"accessModes\":{\"description\":\"accessModes contains the desired access modes the volume should have.\\nMore info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"dataSource\":{\"description\":\"dataSource field can be used to specify either:\\n* An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot)\\n* An existing PVC (PersistentVolumeClaim)\\nIf the provisioner or an external controller can support the specified data source,\\nit will create a new volume based on the contents of the specified data source.\\nWhen the AnyVolumeDataSource feature gate is enabled, dataSource contents will be copied to dataSourceRef,\\nand dataSourceRef contents will be copied to dataSource when dataSourceRef.namespace is not specified.\\nIf the namespace is specified, then dataSourceRef will not be copied to dataSource.\",\"properties\":{\"apiGroup\":{\"description\":\"APIGroup is the group for the resource being referenced.\\nIf APIGroup is not specified, the specified Kind must be in the core API group.\\nFor any other third-party types, APIGroup is required.\",\"type\":\"string\"},\"kind\":{\"description\":\"Kind is the type of resource being referenced\",\"type\":\"string\"},\"name\":{\"description\":\"Name is the name of resource being referenced\",\"type\":\"string\"}},\"required\":[\"kind\",\"name\"],\"type\":\"object\",\"x-kubernetes-map-type\":\"atomic\"},\"dataSourceRef\":{\"description\":\"dataSourceRef specifies the object from which to populate the volume with data, if a non-empty\\nvolume is desired. This may be any object from a non-empty API group (non\\ncore object) or a PersistentVolumeClaim object.\\nWhen this field is specified, volume binding will only succeed if the type of\\nthe specified object matches some installed volume populator or dynamic\\nprovisioner.\\nThis field will replace the functionality of the dataSource field and as such\\nif both fields are non-empty, they must have the same value. For backwards\\ncompatibility, when namespace isn't specified in dataSourceRef,\\nboth fields (dataSource and dataSourceRef) will be set to the same\\nvalue automatically if one of them is empty and the other is non-empty.\\nWhen namespace is specified in dataSourceRef,\\ndataSource isn't set to the same value and must be empty.\\nThere are three important differences between dataSource and dataSourceRef:\\n* While dataSource only allows two specific types of objects, dataSourceRef\\n  allows any non-core object, as well as PersistentVolumeClaim objects.\\n* While dataSource ignores disallowed values (dropping them), dataSourceRef\\n  preserves all values, and generates an error if a disallowed value is\\n  specified.\\n* While dataSource only allows local objects, dataSourceRef allows objects\\n  in any namespaces.\\n(Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled.\\n(Alpha) Using the namespace field of dataSourceRef requires the CrossNamespaceVolumeDataSource feature gate to be enabled.\",\"properties\":{\"apiGroup\":{\"description\":\"APIGroup is the group for the resource being referenced.\\nIf APIGroup is not specified, the specified Kind must be in the core API group.\\nFor any other third-party types, APIGroup is required.\",\"type\":\"string\"},\"kind\":{\"description\":\"Kind is the type of resource being referenced\",\"type\":\"string\"},\"name\":{\"description\":\"Name is the name of resource being referenced\",\"type\":\"string\"},\"namespace\":{\"description\":\"Namespace is the namespace of resource being referenced\\nNote that when a namespace is specified, a gateway.networking.k8s.io/ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details.\\n(Alpha) This field requires the CrossNamespaceVolumeDataSource feature gate to be enabled.\",\"type\":\"string\"}},\"required\":[\"kind\",\"name\"],\"type\":\"object\"},\"resources\":{\"description\":\"resources represents the minimum resources the volume should have.\\nIf RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements\\nthat are lower than previous value but must still be higher than capacity recorded in the\\nstatus field of the claim.\\nMore info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources\",\"properties\":{\"limits\":{\"additionalProperties\":{\"anyOf\":[{\"type\":\"integer\"},{\"type\":\"string\"}],\"pattern\":\"^(\\\\+|-)?(([0-9]+(\\\\.[0-9]*)?)|(\\\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\\\+|-)?(([0-9]+(\\\\.[0-9]*)?)|(\\\\.[0-9]+))))?$\",\"x-kubernetes-int-or-string\":true},\"description\":\"Limits describes the maximum amount of compute resources allowed.\\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/\",\"type\":\"object\"},\"requests\":{\"additionalProperties\":{\"anyOf\":[{\"type\":\"integer\"},{\"type\":\"string\"}],\"pattern\":\"^(\\\\+|-)?(([0-9]+(\\\\.[0-9]*)?)|(\\\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\\\+|-)?(([0-9]+(\\\\.[0-9]*)?)|(\\\\.[0-9]+))))?$\",\"x-kubernetes-int-or-string\":true},\"description\":\"Requests describes the minimum amount of compute resources required.\\nIf Requests is omitted for a container, it defaults to Limits if that is explicitly specified,\\notherwise to an implementation-defined value. Requests cannot exceed Limits.\\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/\",\"type\":\"object\"}},\"type\":\"object\"},\"selector\":{\"description\":\"selector is a label query over volumes to consider for binding.\",\"properties\":{\"matchExpressions\":{\"description\":\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\",\"items\":{\"description\":\"A label selector requirement is a selector that contains values, a key, and an operator that\\nrelates the key and values.\",\"properties\":{\"key\":{\"description\":\"key is the label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"operator represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists and DoesNotExist.\",\"type\":\"string\"},\"values\":{\"description\":\"values is an array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. This array is replaced during a strategic\\nmerge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"matchLabels\":{\"additionalProperties\":{\"type\":\"string\"},\"description\":\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\\nmap is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the\\noperator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\",\"type\":\"object\"}},\"type\":\"object\",\"x-kubernetes-map-type\":\"atomic\"},\"storageClassName\":{\"description\":\"storageClassName is the name of the StorageClass required by the claim.\\nMore info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1\",\"type\":\"string\"},\"volumeAttributesClassName\":{\"description\":\"volumeAttributesClassName may be used to set the VolumeAttributesClass used by this claim.\\nIf specified, the CSI driver will create or update the volume with the attributes defined\\nin the corresponding VolumeAttributesClass. This has a different purpose than storageClassName,\\nit can be changed after the claim is created. An empty string value means that no VolumeAttributesClass\\nwill be applied to the claim but it's not allowed to reset this field to empty string once it is set.\\nIf unspecified and the PersistentVolumeClaim is unbound, the default VolumeAttributesClass\\nwill be set by the persistentvolume controller if it exists.\\nIf the resource referred to by volumeAttributesClass does not exist, this PersistentVolumeClaim will be\\nset to a Pending state, as reflected by the modifyVolumeStatus field, until such as a resource\\nexists.\\nMore info: https://kubernetes.io/docs/concepts/storage/volume-attributes-classes/\\n(Beta) Using this field requires the VolumeAttributesClass feature gate to be enabled (off by default).\",\"type\":\"string\"},\"volumeMode\":{\"description\":\"volumeMode defines what type of volume is required by the claim.\\nValue of Filesystem is implied when not included in claim spec.\",\"type\":\"string\"},\"volumeName\":{\"description\":\"volumeName is the binding reference to the PersistentVolume backing this claim.\",\"type\":\"string\"}},\"type\":\"object\"},\"source\":{\"description\":\"Source is the src of the data for the requested DataVolume\",\"properties\":{\"blank\":{\"description\":\"DataVolumeBlankImage provides the parameters to create a new raw blank image for the PVC\",\"type\":\"object\"},\"gcs\":{\"description\":\"DataVolumeSourceGCS provides the parameters to create a Data Volume from an GCS source\",\"properties\":{\"secretRef\":{\"description\":\"SecretRef provides the secret reference needed to access the GCS source\",\"type\":\"string\"},\"url\":{\"description\":\"URL is the url of the GCS source\",\"type\":\"string\"}},\"required\":[\"url\"],\"type\":\"object\"},\"http\":{\"description\":\"DataVolumeSourceHTTP can be either an http or https endpoint, with an optional basic auth user name and password, and an optional configmap containing additional CAs\",\"properties\":{\"certConfigMap\":{\"description\":\"CertConfigMap is a configmap reference, containing a Certificate Authority(CA) public key, and a base64 encoded pem certificate\",\"type\":\"string\"},\"extraHeaders\":{\"description\":\"ExtraHeaders is a list of strings containing extra headers to include with HTTP transfer requests\",\"items\":{\"type\":\"string\"},\"type\":\"array\"},\"secretExtraHeaders\":{\"description\":\"SecretExtraHeaders is a list of Secret references, each containing an extra HTTP header that may include sensitive information\",\"items\":{\"type\":\"string\"},\"type\":\"array\"},\"secretRef\":{\"description\":\"SecretRef A Secret reference, the secret should contain accessKeyId (user name) base64 encoded, and secretKey (password) also base64 encoded\",\"type\":\"string\"},\"url\":{\"description\":\"URL is the URL of the http(s) endpoint\",\"type\":\"string\"}},\"required\":[\"url\"],\"type\":\"object\"},\"imageio\":{\"description\":\"DataVolumeSourceImageIO provides the parameters to create a Data Volume from an imageio source\",\"properties\":{\"certConfigMap\":{\"description\":\"CertConfigMap provides a reference to the CA cert\",\"type\":\"string\"},\"diskId\":{\"description\":\"DiskID provides id of a disk to be imported\",\"type\":\"string\"},\"secretRef\":{\"description\":\"SecretRef provides the secret reference needed to access the ovirt-engine\",\"type\":\"string\"},\"url\":{\"description\":\"URL is the URL of the ovirt-engine\",\"type\":\"string\"}},\"required\":[\"diskId\",\"url\"],\"type\":\"object\"},\"pvc\":{\"description\":\"DataVolumeSourcePVC provides the parameters to create a Data Volume from an existing PVC\",\"properties\":{\"name\":{\"description\":\"The name of the source PVC\",\"type\":\"string\"},\"namespace\":{\"description\":\"The namespace of the source PVC\",\"type\":\"string\"}},\"required\":[\"name\",\"namespace\"],\"type\":\"object\"},\"registry\":{\"description\":\"DataVolumeSourceRegistry provides the parameters to create a Data Volume from an registry source\",\"properties\":{\"certConfigMap\":{\"description\":\"CertConfigMap provides a reference to the Registry certs\",\"type\":\"string\"},\"imageStream\":{\"description\":\"ImageStream is the name of image stream for import\",\"type\":\"string\"},\"platform\":{\"description\":\"Platform describes the minimum runtime requirements of the image\",\"properties\":{\"architecture\":{\"description\":\"Architecture specifies the image target CPU architecture\",\"type\":\"string\"}},\"type\":\"object\"},\"pullMethod\":{\"description\":\"PullMethod can be either \\\"pod\\\" (default import), or \\\"node\\\" (node docker cache based import)\",\"type\":\"string\"},\"secretRef\":{\"description\":\"SecretRef provides the secret reference needed to access the Registry source\",\"type\":\"string\"},\"url\":{\"description\":\"URL is the url of the registry source (starting with the scheme: docker, oci-archive)\",\"type\":\"string\"}},\"type\":\"object\"},\"s3\":{\"description\":\"DataVolumeSourceS3 provides the parameters to create a Data Volume from an S3 source\",\"properties\":{\"certConfigMap\":{\"description\":\"CertConfigMap is a configmap reference, containing a Certificate Authority(CA) public key, and a base64 encoded pem certificate\",\"type\":\"string\"},\"secretRef\":{\"description\":\"SecretRef provides the secret reference needed to access the S3 source\",\"type\":\"string\"},\"url\":{\"description\":\"URL is the url of the S3 source\",\"type\":\"string\"}},\"required\":[\"url\"],\"type\":\"object\"},\"snapshot\":{\"description\":\"DataVolumeSourceSnapshot provides the parameters to create a Data Volume from an existing VolumeSnapshot\",\"properties\":{\"name\":{\"description\":\"The name of the source VolumeSnapshot\",\"type\":\"string\"},\"namespace\":{\"description\":\"The namespace of the source VolumeSnapshot\",\"type\":\"string\"}},\"required\":[\"name\",\"namespace\"],\"type\":\"object\"},\"upload\":{\"description\":\"DataVolumeSourceUpload provides the parameters to create a Data Volume by uploading the source\",\"type\":\"object\"},\"vddk\":{\"description\":\"DataVolumeSourceVDDK provides the parameters to create a Data Volume from a Vmware source\",\"properties\":{\"backingFile\":{\"description\":\"BackingFile is the path to the virtual hard disk to migrate from vCenter/ESXi\",\"type\":\"string\"},\"extraArgs\":{\"description\":\"ExtraArgs is a reference to a ConfigMap containing extra arguments to pass directly to the VDDK library\",\"type\":\"string\"},\"initImageURL\":{\"description\":\"InitImageURL is an optional URL to an image containing an extracted VDDK library, overrides v2v-vmware config map\",\"type\":\"string\"},\"secretRef\":{\"description\":\"SecretRef provides a reference to a secret containing the username and password needed to access the vCenter or ESXi host\",\"type\":\"string\"},\"thumbprint\":{\"description\":\"Thumbprint is the certificate thumbprint of the vCenter or ESXi host\",\"type\":\"string\"},\"url\":{\"description\":\"URL is the URL of the vCenter or ESXi host with the VM to migrate\",\"type\":\"string\"},\"uuid\":{\"description\":\"UUID is the UUID of the virtual machine that the backing file is attached to in vCenter/ESXi\",\"type\":\"string\"}},\"type\":\"object\"}},\"type\":\"object\"},\"sourceRef\":{\"description\":\"SourceRef is an indirect reference to the source of data for the requested DataVolume\",\"properties\":{\"kind\":{\"description\":\"The kind of the source reference, currently only \\\"DataSource\\\" is supported\",\"type\":\"string\"},\"name\":{\"description\":\"The name of the source reference\",\"type\":\"string\"},\"namespace\":{\"description\":\"The namespace of the source reference, defaults to the DataVolume namespace\",\"type\":\"string\"}},\"required\":[\"kind\",\"name\"],\"type\":\"object\"},\"storage\":{\"description\":\"Storage is the requested storage specification\",\"properties\":{\"accessModes\":{\"description\":\"AccessModes contains the desired access modes the volume should have.\\nMore info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1\",\"items\":{\"type\":\"string\"},\"type\":\"array\"},\"dataSource\":{\"description\":\"This field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) * An existing custom resource that implements data population (Alpha) In order to use custom resource types that implement data population, the AnyVolumeDataSource feature gate must be enabled. If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source.\\nIf the AnyVolumeDataSource feature gate is enabled, this field will always have the same contents as the DataSourceRef field.\",\"properties\":{\"apiGroup\":{\"description\":\"APIGroup is the group for the resource being referenced.\\nIf APIGroup is not specified, the specified Kind must be in the core API group.\\nFor any other third-party types, APIGroup is required.\",\"type\":\"string\"},\"kind\":{\"description\":\"Kind is the type of resource being referenced\",\"type\":\"string\"},\"name\":{\"description\":\"Name is the name of resource being referenced\",\"type\":\"string\"}},\"required\":[\"kind\",\"name\"],\"type\":\"object\",\"x-kubernetes-map-type\":\"atomic\"},\"dataSourceRef\":{\"description\":\"Specifies the object from which to populate the volume with data, if a non-empty volume is desired. This may be any local object from a non-empty API group (non core object) or a PersistentVolumeClaim object. When this field is specified, volume binding will only succeed if the type of the specified object matches some installed volume populator or dynamic provisioner.\\nThis field will replace the functionality of the DataSource field and as such if both fields are non-empty, they must have the same value. For backwards compatibility, both fields (DataSource and DataSourceRef) will be set to the same value automatically if one of them is empty and the other is non-empty.\\nThere are two important differences between DataSource and DataSourceRef:\\n* While DataSource only allows two specific types of objects, DataSourceRef allows any non-core object, as well as PersistentVolumeClaim objects.\\n* While DataSource ignores disallowed values (dropping them), DataSourceRef preserves all values, and generates an error if a disallowed value is specified.\\n(Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled.\",\"properties\":{\"apiGroup\":{\"description\":\"APIGroup is the group for the resource being referenced.\\nIf APIGroup is not specified, the specified Kind must be in the core API group.\\nFor any other third-party types, APIGroup is required.\",\"type\":\"string\"},\"kind\":{\"description\":\"Kind is the type of resource being referenced\",\"type\":\"string\"},\"name\":{\"description\":\"Name is the name of resource being referenced\",\"type\":\"string\"},\"namespace\":{\"description\":\"Namespace is the namespace of resource being referenced\\nNote that when a namespace is specified, a gateway.networking.k8s.io/ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details.\\n(Alpha) This field requires the CrossNamespaceVolumeDataSource feature gate to be enabled.\",\"type\":\"string\"}},\"required\":[\"kind\",\"name\"],\"type\":\"object\"},\"resources\":{\"description\":\"Resources represents the minimum resources the volume should have.\\nMore info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources\",\"properties\":{\"limits\":{\"additionalProperties\":{\"anyOf\":[{\"type\":\"integer\"},{\"type\":\"string\"}],\"pattern\":\"^(\\\\+|-)?(([0-9]+(\\\\.[0-9]*)?)|(\\\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\\\+|-)?(([0-9]+(\\\\.[0-9]*)?)|(\\\\.[0-9]+))))?$\",\"x-kubernetes-int-or-string\":true},\"description\":\"Limits describes the maximum amount of compute resources allowed.\\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/\",\"type\":\"object\"},\"requests\":{\"additionalProperties\":{\"anyOf\":[{\"type\":\"integer\"},{\"type\":\"string\"}],\"pattern\":\"^(\\\\+|-)?(([0-9]+(\\\\.[0-9]*)?)|(\\\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\\\+|-)?(([0-9]+(\\\\.[0-9]*)?)|(\\\\.[0-9]+))))?$\",\"x-kubernetes-int-or-string\":true},\"description\":\"Requests describes the minimum amount of compute resources required.\\nIf Requests is omitted for a container, it defaults to Limits if that is explicitly specified,\\notherwise to an implementation-defined value. Requests cannot exceed Limits.\\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/\",\"type\":\"object\"}},\"type\":\"object\"},\"selector\":{\"description\":\"A label query over volumes to consider for binding.\",\"properties\":{\"matchExpressions\":{\"description\":\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\",\"items\":{\"description\":\"A label selector requirement is a selector that contains values, a key, and an operator that\\nrelates the key and values.\",\"properties\":{\"key\":{\"description\":\"key is the label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"operator represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists and DoesNotExist.\",\"type\":\"string\"},\"values\":{\"description\":\"values is an array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. This array is replaced during a strategic\\nmerge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"matchLabels\":{\"additionalProperties\":{\"type\":\"string\"},\"description\":\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\\nmap is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the\\noperator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\",\"type\":\"object\"}},\"type\":\"object\",\"x-kubernetes-map-type\":\"atomic\"},\"storageClassName\":{\"description\":\"Name of the StorageClass required by the claim.\\nMore info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1\",\"type\":\"string\"},\"volumeMode\":{\"description\":\"volumeMode defines what type of volume is required by the claim.\\nValue of Filesystem is implied when not included in claim spec.\",\"type\":\"string\"},\"volumeName\":{\"description\":\"VolumeName is the binding reference to the PersistentVolume backing this claim.\",\"type\":\"string\"}},\"type\":\"object\"}},\"type\":\"object\"},\"status\":{\"description\":\"DataVolumeStatus contains the current status of the DataVolume\",\"properties\":{\"claimName\":{\"description\":\"ClaimName is the name of the underlying PVC used by the DataVolume.\",\"type\":\"string\"},\"conditions\":{\"items\":{\"description\":\"DataVolumeCondition represents the state of a data volume condition.\",\"properties\":{\"lastHeartbeatTime\":{\"format\":\"date-time\",\"type\":\"string\"},\"lastTransitionTime\":{\"format\":\"date-time\",\"type\":\"string\"},\"message\":{\"type\":\"string\"},\"reason\":{\"type\":\"string\"},\"status\":{\"type\":\"string\"},\"type\":{\"description\":\"DataVolumeConditionType is the string representation of known condition types\",\"type\":\"string\"}},\"required\":[\"status\",\"type\"],\"type\":\"object\"},\"type\":\"array\"},\"phase\":{\"description\":\"Phase is the current phase of the data volume\",\"type\":\"string\"},\"progress\":{\"description\":\"DataVolumeProgress is the current progress of the DataVolume transfer operation. Value between 0 and 100 inclusive, N/A if not available\",\"type\":\"string\"},\"restartCount\":{\"description\":\"RestartCount is the number of times the pod populating the DataVolume has restarted\",\"format\":\"int32\",\"type\":\"integer\"}},\"type\":\"object\"}},\"required\":[\"spec\"],\"type\":\"object\"}},\"required\":[\"managedDataSource\",\"schedule\",\"template\"],\"type\":\"object\"},\"status\":{\"description\":\"DataImportCronStatus is the status field of the DIC template\",\"properties\":{\"commonTemplate\":{\"description\":\"CommonTemplate indicates whether this is a common template (true), or a custom one (false)\",\"type\":\"boolean\"},\"conditions\":{\"description\":\"Conditions is a list of conditions that describe the state of the DataImportCronTemplate.\",\"items\":{\"description\":\"Condition contains details for one aspect of the current state of this API Resource.\",\"properties\":{\"lastTransitionTime\":{\"description\":\"lastTransitionTime is the last time the condition transitioned from one status to another.\\nThis should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.\",\"format\":\"date-time\",\"type\":\"string\"},\"message\":{\"description\":\"message is a human readable message indicating details about the transition.\\nThis may be an empty string.\",\"maxLength\":32768,\"type\":\"string\"},\"observedGeneration\":{\"description\":\"observedGeneration represents the .metadata.generation that the condition was set based upon.\\nFor instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date\\nwith respect to the current state of the instance.\",\"format\":\"int64\",\"minimum\":0,\"type\":\"integer\"},\"reason\":{\"description\":\"reason contains a programmatic identifier indicating the reason for the condition's last transition.\\nProducers of specific condition types may define expected values and meanings for this field,\\nand whether the values are considered a guaranteed API.\\nThe value should be a CamelCase string.\\nThis field may not be empty.\",\"maxLength\":1024,\"minLength\":1,\"pattern\":\"^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$\",\"type\":\"string\"},\"status\":{\"description\":\"status of the condition, one of True, False, Unknown.\",\"enum\":[\"True\",\"False\",\"Unknown\"],\"type\":\"string\"},\"type\":{\"description\":\"type of condition in CamelCase or in foo.example.com/CamelCase.\",\"maxLength\":316,\"pattern\":\"^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$\",\"type\":\"string\"}},\"required\":[\"lastTransitionTime\",\"message\",\"reason\",\"status\",\"type\"],\"type\":\"object\"},\"type\":\"array\"},\"modified\":{\"description\":\"Modified indicates if a common template was customized. Always false for custom templates.\",\"type\":\"boolean\"},\"originalSupportedArchitectures\":{\"description\":\"OriginalSupportedArchitectures is a comma-separated list of CPU architectures that the original\\ntemplate supports.\",\"type\":\"string\"}},\"type\":\"object\"}},\"type\":\"object\"},\"type\":\"array\"},\"dataImportSchedule\":{\"description\":\"DataImportSchedule is the cron expression that is used in for the hard-coded data import cron templates. HCO\\ngenerates the value of this field once and stored in the status field, so will survive restart.\",\"type\":\"string\"},\"infrastructureHighlyAvailable\":{\"description\":\"InfrastructureHighlyAvailable describes whether the cluster has only one worker node\\n(false) or more (true).\",\"type\":\"boolean\"},\"nodeInfo\":{\"description\":\"NodeInfo holds information about the cluster nodes\",\"properties\":{\"controlPlaneArchitectures\":{\"description\":\"ControlPlaneArchitectures is a distinct list of the CPU architecture of the control-plane nodes.\",\"items\":{\"type\":\"string\"},\"type\":\"array\"},\"workloadsArchitectures\":{\"description\":\"WorkloadsArchitectures is a distinct list of the CPU architectures of the workloads nodes in the cluster.\",\"items\":{\"type\":\"string\"},\"type\":\"array\"}},\"type\":\"object\"},\"observedGeneration\":{\"description\":\"ObservedGeneration reflects the HyperConverged resource generation. If the ObservedGeneration is less than the\\nresource generation in metadata, the status is out of date\",\"format\":\"int64\",\"type\":\"integer\"},\"relatedObjects\":{\"description\":\"RelatedObjects is a list of objects created and maintained by this\\noperator. Object references will be added to this list after they have\\nbeen created AND found in the cluster.\",\"items\":{\"description\":\"ObjectReference contains enough information to let you inspect or modify the referred object.\",\"properties\":{\"apiVersion\":{\"description\":\"API version of the referent.\",\"type\":\"string\"},\"fieldPath\":{\"description\":\"If referring to a piece of an object instead of an entire object, this string\\nshould contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2].\\nFor example, if the object reference is to a container within a pod, this would take on a value like:\\n\\\"spec.containers{name}\\\" (where \\\"name\\\" refers to the name of the container that triggered\\nthe event) or if no container name is specified \\\"spec.containers[2]\\\" (container with\\nindex 2 in this pod). This syntax is chosen only to have some well-defined way of\\nreferencing a part of an object.\",\"type\":\"string\"},\"kind\":{\"description\":\"Kind of the referent.\\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\",\"type\":\"string\"},\"name\":{\"description\":\"Name of the referent.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\",\"type\":\"string\"},\"namespace\":{\"description\":\"Namespace of the referent.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/\",\"type\":\"string\"},\"resourceVersion\":{\"description\":\"Specific resourceVersion to which this reference is made, if any.\\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency\",\"type\":\"string\"},\"uid\":{\"description\":\"UID of the referent.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids\",\"type\":\"string\"}},\"type\":\"object\",\"x-kubernetes-map-type\":\"atomic\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"systemHealthStatus\":{\"description\":\"SystemHealthStatus reflects the health of HCO and its secondary resources, based on the aggregated conditions.\",\"type\":\"string\"},\"versions\":{\"description\":\"Versions is a list of HCO component versions, as name/version pairs. The version with a name of \\\"operator\\\"\\nis the HCO version itself, as described here:\\nhttps://github.com/openshift/cluster-version-operator/blob/master/docs/dev/clusteroperator.md#version\",\"items\":{\"properties\":{\"name\":{\"type\":\"string\"},\"version\":{\"type\":\"string\"}},\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"type\":\"object\"}},\"type\":\"object\"}},\"served\":true,\"storage\":true,\"subresources\":{\"status\":{}}}]}}\n"
      },
      "served_versions": [
        "v1beta1"
      ],
      "stored_version": "v1beta1",
      "categories": [
        "all"
      ],
      "short_names": [
        "hco",
        "hcos"
      ],
      "description": null,
      "instance_count": 0
    },
    {
      "name": "igniteversions.catalog.kubedb.com",
      "group": "catalog.kubedb.com",
      "version": "v1alpha1",
      "kind": "IgniteVersion",
      "plural": "igniteversions",
      "singular": "igniteversion",
      "scope": "Cluster",
      "creation_timestamp": "2025-09-06T13:33:51+00:00",
      "labels": {
        "app.kubernetes.io/name": "kubedb"
      },
      "annotations": {},
      "served_versions": [
        "v1alpha1"
      ],
      "stored_version": "v1alpha1",
      "categories": [
        "catalog",
        "kubedb",
        "appscode"
      ],
      "short_names": [
        "igversion"
      ],
      "description": null,
      "instance_count": 0
    },
    {
      "name": "imagecatalogs.postgresql.cnpg.io",
      "group": "postgresql.cnpg.io",
      "version": "v1",
      "kind": "ImageCatalog",
      "plural": "imagecatalogs",
      "singular": "imagecatalog",
      "scope": "Namespaced",
      "creation_timestamp": "2025-09-07T09:12:54+00:00",
      "labels": {
        "olm.managed": "true",
        "operators.coreos.com/cloudnative-pg.operators": ""
      },
      "annotations": {
        "controller-gen.kubebuilder.io/version": "v0.18.0",
        "operatorframework.io/installed-alongside-26b2108901275579": "operators/cloudnative-pg.v1.27.0"
      },
      "served_versions": [
        "v1"
      ],
      "stored_version": "v1",
      "categories": [],
      "short_names": [],
      "description": null,
      "instance_count": 0
    },
    {
      "name": "ingressroutes.traefik.io",
      "group": "traefik.io",
      "version": "v1alpha1",
      "kind": "IngressRoute",
      "plural": "ingressroutes",
      "singular": "ingressroute",
      "scope": "Namespaced",
      "creation_timestamp": "2025-06-26T15:37:15+00:00",
      "labels": {},
      "annotations": {
        "controller-gen.kubebuilder.io/version": "v0.16.1"
      },
      "served_versions": [
        "v1alpha1"
      ],
      "stored_version": "v1alpha1",
      "categories": [],
      "short_names": [],
      "description": null,
      "instance_count": 0
    },
    {
      "name": "ingressroutetcps.traefik.io",
      "group": "traefik.io",
      "version": "v1alpha1",
      "kind": "IngressRouteTCP",
      "plural": "ingressroutetcps",
      "singular": "ingressroutetcp",
      "scope": "Namespaced",
      "creation_timestamp": "2025-06-26T15:37:15+00:00",
      "labels": {},
      "annotations": {
        "controller-gen.kubebuilder.io/version": "v0.16.1"
      },
      "served_versions": [
        "v1alpha1"
      ],
      "stored_version": "v1alpha1",
      "categories": [],
      "short_names": [],
      "description": null,
      "instance_count": 0
    },
    {
      "name": "ingressrouteudps.traefik.io",
      "group": "traefik.io",
      "version": "v1alpha1",
      "kind": "IngressRouteUDP",
      "plural": "ingressrouteudps",
      "singular": "ingressrouteudp",
      "scope": "Namespaced",
      "creation_timestamp": "2025-06-26T15:37:15+00:00",
      "labels": {},
      "annotations": {
        "controller-gen.kubebuilder.io/version": "v0.16.1"
      },
      "served_versions": [
        "v1alpha1"
      ],
      "stored_version": "v1alpha1",
      "categories": [],
      "short_names": [],
      "description": null,
      "instance_count": 0
    },
    {
      "name": "installplans.operators.coreos.com",
      "group": "operators.coreos.com",
      "version": "v1alpha1",
      "kind": "InstallPlan",
      "plural": "installplans",
      "singular": "installplan",
      "scope": "Namespaced",
      "creation_timestamp": "2025-09-06T12:34:53+00:00",
      "labels": {},
      "annotations": {
        "controller-gen.kubebuilder.io/version": "v0.14.0"
      },
      "served_versions": [
        "v1alpha1"
      ],
      "stored_version": "v1alpha1",
      "categories": [
        "olm"
      ],
      "short_names": [
        "ip"
      ],
      "description": null,
      "instance_count": 0
    },
    {
      "name": "ipamclaims.k8s.cni.cncf.io",
      "group": "k8s.cni.cncf.io",
      "version": "v1alpha1",
      "kind": "IPAMClaim",
      "plural": "ipamclaims",
      "singular": "ipamclaim",
      "scope": "Namespaced",
      "creation_timestamp": "2025-09-06T12:59:46+00:00",
      "labels": {
        "app.kubernetes.io/component": "network",
        "app.kubernetes.io/managed-by": "cnao-operator",
        "app.kubernetes.io/part-of": "hyperconverged-cluster",
        "app.kubernetes.io/version": "1.17.0",
        "networkaddonsoperator.network.kubevirt.io/version": "v0.100.2",
        "prometheus.cnao.io": "true"
      },
      "annotations": {
        "controller-gen.kubebuilder.io/version": "v0.13.0"
      },
      "served_versions": [
        "v1alpha1"
      ],
      "stored_version": "v1alpha1",
      "categories": [],
      "short_names": [],
      "description": null,
      "instance_count": 0
    },
    {
      "name": "issuers.cert-manager.io",
      "group": "cert-manager.io",
      "version": "v1",
      "kind": "Issuer",
      "plural": "issuers",
      "singular": "issuer",
      "scope": "Namespaced",
      "creation_timestamp": "2025-09-06T12:52:41+00:00",
      "labels": {
        "app": "cert-manager",
        "app.kubernetes.io/component": "crds",
        "app.kubernetes.io/instance": "cert-manager",
        "app.kubernetes.io/name": "cert-manager",
        "app.kubernetes.io/version": "v1.15.3"
      },
      "annotations": {
        "helm.sh/resource-policy": "keep",
        "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"apiextensions.k8s.io/v1\",\"kind\":\"CustomResourceDefinition\",\"metadata\":{\"annotations\":{\"helm.sh/resource-policy\":\"keep\"},\"labels\":{\"app\":\"cert-manager\",\"app.kubernetes.io/component\":\"crds\",\"app.kubernetes.io/instance\":\"cert-manager\",\"app.kubernetes.io/name\":\"cert-manager\",\"app.kubernetes.io/version\":\"v1.15.3\"},\"name\":\"issuers.cert-manager.io\"},\"spec\":{\"group\":\"cert-manager.io\",\"names\":{\"categories\":[\"cert-manager\"],\"kind\":\"Issuer\",\"listKind\":\"IssuerList\",\"plural\":\"issuers\",\"singular\":\"issuer\"},\"scope\":\"Namespaced\",\"versions\":[{\"additionalPrinterColumns\":[{\"jsonPath\":\".status.conditions[?(@.type==\\\"Ready\\\")].status\",\"name\":\"Ready\",\"type\":\"string\"},{\"jsonPath\":\".status.conditions[?(@.type==\\\"Ready\\\")].message\",\"name\":\"Status\",\"priority\":1,\"type\":\"string\"},{\"description\":\"CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC.\",\"jsonPath\":\".metadata.creationTimestamp\",\"name\":\"Age\",\"type\":\"date\"}],\"name\":\"v1\",\"schema\":{\"openAPIV3Schema\":{\"description\":\"An Issuer represents a certificate issuing authority which can be\\nreferenced as part of `issuerRef` fields.\\nIt is scoped to a single namespace and can therefore only be referenced by\\nresources within the same namespace.\",\"properties\":{\"apiVersion\":{\"description\":\"APIVersion defines the versioned schema of this representation of an object.\\nServers should convert recognized schemas to the latest internal value, and\\nmay reject unrecognized values.\\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources\",\"type\":\"string\"},\"kind\":{\"description\":\"Kind is a string value representing the REST resource this object represents.\\nServers may infer this from the endpoint the client submits requests to.\\nCannot be updated.\\nIn CamelCase.\\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\",\"type\":\"string\"},\"metadata\":{\"type\":\"object\"},\"spec\":{\"description\":\"Desired state of the Issuer resource.\",\"properties\":{\"acme\":{\"description\":\"ACME configures this issuer to communicate with a RFC8555 (ACME) server\\nto obtain signed x509 certificates.\",\"properties\":{\"caBundle\":{\"description\":\"Base64-encoded bundle of PEM CAs which can be used to validate the certificate\\nchain presented by the ACME server.\\nMutually exclusive with SkipTLSVerify; prefer using CABundle to prevent various\\nkinds of security vulnerabilities.\\nIf CABundle and SkipTLSVerify are unset, the system certificate bundle inside\\nthe container is used to validate the TLS connection.\",\"format\":\"byte\",\"type\":\"string\"},\"disableAccountKeyGeneration\":{\"description\":\"Enables or disables generating a new ACME account key.\\nIf true, the Issuer resource will *not* request a new account but will expect\\nthe account key to be supplied via an existing secret.\\nIf false, the cert-manager system will generate a new ACME account key\\nfor the Issuer.\\nDefaults to false.\",\"type\":\"boolean\"},\"email\":{\"description\":\"Email is the email address to be associated with the ACME account.\\nThis field is optional, but it is strongly recommended to be set.\\nIt will be used to contact you in case of issues with your account or\\ncertificates, including expiry notification emails.\\nThis field may be updated after the account is initially registered.\",\"type\":\"string\"},\"enableDurationFeature\":{\"description\":\"Enables requesting a Not After date on certificates that matches the\\nduration of the certificate. This is not supported by all ACME servers\\nlike Let's Encrypt. If set to true when the ACME server does not support\\nit, it will create an error on the Order.\\nDefaults to false.\",\"type\":\"boolean\"},\"externalAccountBinding\":{\"description\":\"ExternalAccountBinding is a reference to a CA external account of the ACME\\nserver.\\nIf set, upon registration cert-manager will attempt to associate the given\\nexternal account credentials with the registered ACME account.\",\"properties\":{\"keyAlgorithm\":{\"description\":\"Deprecated: keyAlgorithm field exists for historical compatibility\\nreasons and should not be used. The algorithm is now hardcoded to HS256\\nin golang/x/crypto/acme.\",\"enum\":[\"HS256\",\"HS384\",\"HS512\"],\"type\":\"string\"},\"keyID\":{\"description\":\"keyID is the ID of the CA key that the External Account is bound to.\",\"type\":\"string\"},\"keySecretRef\":{\"description\":\"keySecretRef is a Secret Key Selector referencing a data item in a Kubernetes\\nSecret which holds the symmetric MAC key of the External Account Binding.\\nThe `key` is the index string that is paired with the key data in the\\nSecret and should not be confused with the key data itself, or indeed with\\nthe External Account Binding keyID above.\\nThe secret key stored in the Secret **must** be un-padded, base64 URL\\nencoded data.\",\"properties\":{\"key\":{\"description\":\"The key of the entry in the Secret resource's `data` field to be used.\\nSome instances of this field may be defaulted, in others it may be\\nrequired.\",\"type\":\"string\"},\"name\":{\"description\":\"Name of the resource being referred to.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\",\"type\":\"string\"}},\"required\":[\"name\"],\"type\":\"object\"}},\"required\":[\"keyID\",\"keySecretRef\"],\"type\":\"object\"},\"preferredChain\":{\"description\":\"PreferredChain is the chain to use if the ACME server outputs multiple.\\nPreferredChain is no guarantee that this one gets delivered by the ACME\\nendpoint.\\nFor example, for Let's Encrypt's DST crosssign you would use:\\n\\\"DST Root CA X3\\\" or \\\"ISRG Root X1\\\" for the newer Let's Encrypt root CA.\\nThis value picks the first certificate bundle in the combined set of\\nACME default and alternative chains that has a root-most certificate with\\nthis value as its issuer's commonname.\",\"maxLength\":64,\"type\":\"string\"},\"privateKeySecretRef\":{\"description\":\"PrivateKey is the name of a Kubernetes Secret resource that will be used to\\nstore the automatically generated ACME account private key.\\nOptionally, a `key` may be specified to select a specific entry within\\nthe named Secret resource.\\nIf `key` is not specified, a default of `tls.key` will be used.\",\"properties\":{\"key\":{\"description\":\"The key of the entry in the Secret resource's `data` field to be used.\\nSome instances of this field may be defaulted, in others it may be\\nrequired.\",\"type\":\"string\"},\"name\":{\"description\":\"Name of the resource being referred to.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\",\"type\":\"string\"}},\"required\":[\"name\"],\"type\":\"object\"},\"server\":{\"description\":\"Server is the URL used to access the ACME server's 'directory' endpoint.\\nFor example, for Let's Encrypt's staging endpoint, you would use:\\n\\\"https://acme-staging-v02.api.letsencrypt.org/directory\\\".\\nOnly ACME v2 endpoints (i.e. RFC 8555) are supported.\",\"type\":\"string\"},\"skipTLSVerify\":{\"description\":\"INSECURE: Enables or disables validation of the ACME server TLS certificate.\\nIf true, requests to the ACME server will not have the TLS certificate chain\\nvalidated.\\nMutually exclusive with CABundle; prefer using CABundle to prevent various\\nkinds of security vulnerabilities.\\nOnly enable this option in development environments.\\nIf CABundle and SkipTLSVerify are unset, the system certificate bundle inside\\nthe container is used to validate the TLS connection.\\nDefaults to false.\",\"type\":\"boolean\"},\"solvers\":{\"description\":\"Solvers is a list of challenge solvers that will be used to solve\\nACME challenges for the matching domains.\\nSolver configurations must be provided in order to obtain certificates\\nfrom an ACME server.\\nFor more information, see: https://cert-manager.io/docs/configuration/acme/\",\"items\":{\"description\":\"An ACMEChallengeSolver describes how to solve ACME challenges for the issuer it is part of.\\nA selector may be provided to use different solving strategies for different DNS names.\\nOnly one of HTTP01 or DNS01 must be provided.\",\"properties\":{\"dns01\":{\"description\":\"Configures cert-manager to attempt to complete authorizations by\\nperforming the DNS01 challenge flow.\",\"properties\":{\"acmeDNS\":{\"description\":\"Use the 'ACME DNS' (https://github.com/joohoi/acme-dns) API to manage\\nDNS01 challenge records.\",\"properties\":{\"accountSecretRef\":{\"description\":\"A reference to a specific 'key' within a Secret resource.\\nIn some instances, `key` is a required field.\",\"properties\":{\"key\":{\"description\":\"The key of the entry in the Secret resource's `data` field to be used.\\nSome instances of this field may be defaulted, in others it may be\\nrequired.\",\"type\":\"string\"},\"name\":{\"description\":\"Name of the resource being referred to.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\",\"type\":\"string\"}},\"required\":[\"name\"],\"type\":\"object\"},\"host\":{\"type\":\"string\"}},\"required\":[\"accountSecretRef\",\"host\"],\"type\":\"object\"},\"akamai\":{\"description\":\"Use the Akamai DNS zone management API to manage DNS01 challenge records.\",\"properties\":{\"accessTokenSecretRef\":{\"description\":\"A reference to a specific 'key' within a Secret resource.\\nIn some instances, `key` is a required field.\",\"properties\":{\"key\":{\"description\":\"The key of the entry in the Secret resource's `data` field to be used.\\nSome instances of this field may be defaulted, in others it may be\\nrequired.\",\"type\":\"string\"},\"name\":{\"description\":\"Name of the resource being referred to.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\",\"type\":\"string\"}},\"required\":[\"name\"],\"type\":\"object\"},\"clientSecretSecretRef\":{\"description\":\"A reference to a specific 'key' within a Secret resource.\\nIn some instances, `key` is a required field.\",\"properties\":{\"key\":{\"description\":\"The key of the entry in the Secret resource's `data` field to be used.\\nSome instances of this field may be defaulted, in others it may be\\nrequired.\",\"type\":\"string\"},\"name\":{\"description\":\"Name of the resource being referred to.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\",\"type\":\"string\"}},\"required\":[\"name\"],\"type\":\"object\"},\"clientTokenSecretRef\":{\"description\":\"A reference to a specific 'key' within a Secret resource.\\nIn some instances, `key` is a required field.\",\"properties\":{\"key\":{\"description\":\"The key of the entry in the Secret resource's `data` field to be used.\\nSome instances of this field may be defaulted, in others it may be\\nrequired.\",\"type\":\"string\"},\"name\":{\"description\":\"Name of the resource being referred to.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\",\"type\":\"string\"}},\"required\":[\"name\"],\"type\":\"object\"},\"serviceConsumerDomain\":{\"type\":\"string\"}},\"required\":[\"accessTokenSecretRef\",\"clientSecretSecretRef\",\"clientTokenSecretRef\",\"serviceConsumerDomain\"],\"type\":\"object\"},\"azureDNS\":{\"description\":\"Use the Microsoft Azure DNS API to manage DNS01 challenge records.\",\"properties\":{\"clientID\":{\"description\":\"Auth: Azure Service Principal:\\nThe ClientID of the Azure Service Principal used to authenticate with Azure DNS.\\nIf set, ClientSecret and TenantID must also be set.\",\"type\":\"string\"},\"clientSecretSecretRef\":{\"description\":\"Auth: Azure Service Principal:\\nA reference to a Secret containing the password associated with the Service Principal.\\nIf set, ClientID and TenantID must also be set.\",\"properties\":{\"key\":{\"description\":\"The key of the entry in the Secret resource's `data` field to be used.\\nSome instances of this field may be defaulted, in others it may be\\nrequired.\",\"type\":\"string\"},\"name\":{\"description\":\"Name of the resource being referred to.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\",\"type\":\"string\"}},\"required\":[\"name\"],\"type\":\"object\"},\"environment\":{\"description\":\"name of the Azure environment (default AzurePublicCloud)\",\"enum\":[\"AzurePublicCloud\",\"AzureChinaCloud\",\"AzureGermanCloud\",\"AzureUSGovernmentCloud\"],\"type\":\"string\"},\"hostedZoneName\":{\"description\":\"name of the DNS zone that should be used\",\"type\":\"string\"},\"managedIdentity\":{\"description\":\"Auth: Azure Workload Identity or Azure Managed Service Identity:\\nSettings to enable Azure Workload Identity or Azure Managed Service Identity\\nIf set, ClientID, ClientSecret and TenantID must not be set.\",\"properties\":{\"clientID\":{\"description\":\"client ID of the managed identity, can not be used at the same time as resourceID\",\"type\":\"string\"},\"resourceID\":{\"description\":\"resource ID of the managed identity, can not be used at the same time as clientID\\nCannot be used for Azure Managed Service Identity\",\"type\":\"string\"}},\"type\":\"object\"},\"resourceGroupName\":{\"description\":\"resource group the DNS zone is located in\",\"type\":\"string\"},\"subscriptionID\":{\"description\":\"ID of the Azure subscription\",\"type\":\"string\"},\"tenantID\":{\"description\":\"Auth: Azure Service Principal:\\nThe TenantID of the Azure Service Principal used to authenticate with Azure DNS.\\nIf set, ClientID and ClientSecret must also be set.\",\"type\":\"string\"}},\"required\":[\"resourceGroupName\",\"subscriptionID\"],\"type\":\"object\"},\"cloudDNS\":{\"description\":\"Use the Google Cloud DNS API to manage DNS01 challenge records.\",\"properties\":{\"hostedZoneName\":{\"description\":\"HostedZoneName is an optional field that tells cert-manager in which\\nCloud DNS zone the challenge record has to be created.\\nIf left empty cert-manager will automatically choose a zone.\",\"type\":\"string\"},\"project\":{\"type\":\"string\"},\"serviceAccountSecretRef\":{\"description\":\"A reference to a specific 'key' within a Secret resource.\\nIn some instances, `key` is a required field.\",\"properties\":{\"key\":{\"description\":\"The key of the entry in the Secret resource's `data` field to be used.\\nSome instances of this field may be defaulted, in others it may be\\nrequired.\",\"type\":\"string\"},\"name\":{\"description\":\"Name of the resource being referred to.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\",\"type\":\"string\"}},\"required\":[\"name\"],\"type\":\"object\"}},\"required\":[\"project\"],\"type\":\"object\"},\"cloudflare\":{\"description\":\"Use the Cloudflare API to manage DNS01 challenge records.\",\"properties\":{\"apiKeySecretRef\":{\"description\":\"API key to use to authenticate with Cloudflare.\\nNote: using an API token to authenticate is now the recommended method\\nas it allows greater control of permissions.\",\"properties\":{\"key\":{\"description\":\"The key of the entry in the Secret resource's `data` field to be used.\\nSome instances of this field may be defaulted, in others it may be\\nrequired.\",\"type\":\"string\"},\"name\":{\"description\":\"Name of the resource being referred to.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\",\"type\":\"string\"}},\"required\":[\"name\"],\"type\":\"object\"},\"apiTokenSecretRef\":{\"description\":\"API token used to authenticate with Cloudflare.\",\"properties\":{\"key\":{\"description\":\"The key of the entry in the Secret resource's `data` field to be used.\\nSome instances of this field may be defaulted, in others it may be\\nrequired.\",\"type\":\"string\"},\"name\":{\"description\":\"Name of the resource being referred to.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\",\"type\":\"string\"}},\"required\":[\"name\"],\"type\":\"object\"},\"email\":{\"description\":\"Email of the account, only required when using API key based authentication.\",\"type\":\"string\"}},\"type\":\"object\"},\"cnameStrategy\":{\"description\":\"CNAMEStrategy configures how the DNS01 provider should handle CNAME\\nrecords when found in DNS zones.\",\"enum\":[\"None\",\"Follow\"],\"type\":\"string\"},\"digitalocean\":{\"description\":\"Use the DigitalOcean DNS API to manage DNS01 challenge records.\",\"properties\":{\"tokenSecretRef\":{\"description\":\"A reference to a specific 'key' within a Secret resource.\\nIn some instances, `key` is a required field.\",\"properties\":{\"key\":{\"description\":\"The key of the entry in the Secret resource's `data` field to be used.\\nSome instances of this field may be defaulted, in others it may be\\nrequired.\",\"type\":\"string\"},\"name\":{\"description\":\"Name of the resource being referred to.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\",\"type\":\"string\"}},\"required\":[\"name\"],\"type\":\"object\"}},\"required\":[\"tokenSecretRef\"],\"type\":\"object\"},\"rfc2136\":{\"description\":\"Use RFC2136 (\\\"Dynamic Updates in the Domain Name System\\\") (https://datatracker.ietf.org/doc/rfc2136/)\\nto manage DNS01 challenge records.\",\"properties\":{\"nameserver\":{\"description\":\"The IP address or hostname of an authoritative DNS server supporting\\nRFC2136 in the form host:port. If the host is an IPv6 address it must be\\nenclosed in square brackets (e.g [2001:db8::1])\u00a0; port is optional.\\nThis field is required.\",\"type\":\"string\"},\"tsigAlgorithm\":{\"description\":\"The TSIG Algorithm configured in the DNS supporting RFC2136. Used only\\nwhen ``tsigSecretSecretRef`` and ``tsigKeyName`` are defined.\\nSupported values are (case-insensitive): ``HMACMD5`` (default),\\n``HMACSHA1``, ``HMACSHA256`` or ``HMACSHA512``.\",\"type\":\"string\"},\"tsigKeyName\":{\"description\":\"The TSIG Key name configured in the DNS.\\nIf ``tsigSecretSecretRef`` is defined, this field is required.\",\"type\":\"string\"},\"tsigSecretSecretRef\":{\"description\":\"The name of the secret containing the TSIG value.\\nIf ``tsigKeyName`` is defined, this field is required.\",\"properties\":{\"key\":{\"description\":\"The key of the entry in the Secret resource's `data` field to be used.\\nSome instances of this field may be defaulted, in others it may be\\nrequired.\",\"type\":\"string\"},\"name\":{\"description\":\"Name of the resource being referred to.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\",\"type\":\"string\"}},\"required\":[\"name\"],\"type\":\"object\"}},\"required\":[\"nameserver\"],\"type\":\"object\"},\"route53\":{\"description\":\"Use the AWS Route53 API to manage DNS01 challenge records.\",\"properties\":{\"accessKeyID\":{\"description\":\"The AccessKeyID is used for authentication.\\nCannot be set when SecretAccessKeyID is set.\\nIf neither the Access Key nor Key ID are set, we fall-back to using env\\nvars, shared credentials file or AWS Instance metadata,\\nsee: https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials\",\"type\":\"string\"},\"accessKeyIDSecretRef\":{\"description\":\"The SecretAccessKey is used for authentication. If set, pull the AWS\\naccess key ID from a key within a Kubernetes Secret.\\nCannot be set when AccessKeyID is set.\\nIf neither the Access Key nor Key ID are set, we fall-back to using env\\nvars, shared credentials file or AWS Instance metadata,\\nsee: https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials\",\"properties\":{\"key\":{\"description\":\"The key of the entry in the Secret resource's `data` field to be used.\\nSome instances of this field may be defaulted, in others it may be\\nrequired.\",\"type\":\"string\"},\"name\":{\"description\":\"Name of the resource being referred to.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\",\"type\":\"string\"}},\"required\":[\"name\"],\"type\":\"object\"},\"auth\":{\"description\":\"Auth configures how cert-manager authenticates.\",\"properties\":{\"kubernetes\":{\"description\":\"Kubernetes authenticates with Route53 using AssumeRoleWithWebIdentity\\nby passing a bound ServiceAccount token.\",\"properties\":{\"serviceAccountRef\":{\"description\":\"A reference to a service account that will be used to request a bound\\ntoken (also known as \\\"projected token\\\"). To use this field, you must\\nconfigure an RBAC rule to let cert-manager request a token.\",\"properties\":{\"audiences\":{\"description\":\"TokenAudiences is an optional list of audiences to include in the\\ntoken passed to AWS. The default token consisting of the issuer's namespace\\nand name is always included.\\nIf unset the audience defaults to `sts.amazonaws.com`.\",\"items\":{\"type\":\"string\"},\"type\":\"array\"},\"name\":{\"description\":\"Name of the ServiceAccount used to request a token.\",\"type\":\"string\"}},\"required\":[\"name\"],\"type\":\"object\"}},\"required\":[\"serviceAccountRef\"],\"type\":\"object\"}},\"required\":[\"kubernetes\"],\"type\":\"object\"},\"hostedZoneID\":{\"description\":\"If set, the provider will manage only this zone in Route53 and will not do an lookup using the route53:ListHostedZonesByName api call.\",\"type\":\"string\"},\"region\":{\"description\":\"Always set the region when using AccessKeyID and SecretAccessKey\",\"type\":\"string\"},\"role\":{\"description\":\"Role is a Role ARN which the Route53 provider will assume using either the explicit credentials AccessKeyID/SecretAccessKey\\nor the inferred credentials from environment variables, shared credentials file or AWS Instance metadata\",\"type\":\"string\"},\"secretAccessKeySecretRef\":{\"description\":\"The SecretAccessKey is used for authentication.\\nIf neither the Access Key nor Key ID are set, we fall-back to using env\\nvars, shared credentials file or AWS Instance metadata,\\nsee: https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials\",\"properties\":{\"key\":{\"description\":\"The key of the entry in the Secret resource's `data` field to be used.\\nSome instances of this field may be defaulted, in others it may be\\nrequired.\",\"type\":\"string\"},\"name\":{\"description\":\"Name of the resource being referred to.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\",\"type\":\"string\"}},\"required\":[\"name\"],\"type\":\"object\"}},\"required\":[\"region\"],\"type\":\"object\"},\"webhook\":{\"description\":\"Configure an external webhook based DNS01 challenge solver to manage\\nDNS01 challenge records.\",\"properties\":{\"config\":{\"description\":\"Additional configuration that should be passed to the webhook apiserver\\nwhen challenges are processed.\\nThis can contain arbitrary JSON data.\\nSecret values should not be specified in this stanza.\\nIf secret values are needed (e.g. credentials for a DNS service), you\\nshould use a SecretKeySelector to reference a Secret resource.\\nFor details on the schema of this field, consult the webhook provider\\nimplementation's documentation.\",\"x-kubernetes-preserve-unknown-fields\":true},\"groupName\":{\"description\":\"The API group name that should be used when POSTing ChallengePayload\\nresources to the webhook apiserver.\\nThis should be the same as the GroupName specified in the webhook\\nprovider implementation.\",\"type\":\"string\"},\"solverName\":{\"description\":\"The name of the solver to use, as defined in the webhook provider\\nimplementation.\\nThis will typically be the name of the provider, e.g. 'cloudflare'.\",\"type\":\"string\"}},\"required\":[\"groupName\",\"solverName\"],\"type\":\"object\"}},\"type\":\"object\"},\"http01\":{\"description\":\"Configures cert-manager to attempt to complete authorizations by\\nperforming the HTTP01 challenge flow.\\nIt is not possible to obtain certificates for wildcard domain names\\n(e.g. `*.example.com`) using the HTTP01 challenge mechanism.\",\"properties\":{\"gatewayHTTPRoute\":{\"description\":\"The Gateway API is a sig-network community API that models service networking\\nin Kubernetes (https://gateway-api.sigs.k8s.io/). The Gateway solver will\\ncreate HTTPRoutes with the specified labels in the same namespace as the challenge.\\nThis solver is experimental, and fields / behaviour may change in the future.\",\"properties\":{\"labels\":{\"additionalProperties\":{\"type\":\"string\"},\"description\":\"Custom labels that will be applied to HTTPRoutes created by cert-manager\\nwhile solving HTTP-01 challenges.\",\"type\":\"object\"},\"parentRefs\":{\"description\":\"When solving an HTTP-01 challenge, cert-manager creates an HTTPRoute.\\ncert-manager needs to know which parentRefs should be used when creating\\nthe HTTPRoute. Usually, the parentRef references a Gateway. See:\\nhttps://gateway-api.sigs.k8s.io/api-types/httproute/#attaching-to-gateways\",\"items\":{\"description\":\"ParentReference identifies an API object (usually a Gateway) that can be considered\\na parent of this resource (usually a route). There are two kinds of parent resources\\nwith \\\"Core\\\" support:\\n\\n\\n* Gateway (Gateway conformance profile)\\n* Service (Mesh conformance profile, ClusterIP Services only)\\n\\n\\nThis API may be extended in the future to support additional kinds of parent\\nresources.\\n\\n\\nThe API object must be valid in the cluster; the Group and Kind must\\nbe registered in the cluster for this reference to be valid.\",\"properties\":{\"group\":{\"default\":\"gateway.networking.k8s.io\",\"description\":\"Group is the group of the referent.\\nWhen unspecified, \\\"gateway.networking.k8s.io\\\" is inferred.\\nTo set the core API group (such as for a \\\"Service\\\" kind referent),\\nGroup must be explicitly set to \\\"\\\" (empty string).\\n\\n\\nSupport: Core\",\"maxLength\":253,\"pattern\":\"^$|^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$\",\"type\":\"string\"},\"kind\":{\"default\":\"Gateway\",\"description\":\"Kind is kind of the referent.\\n\\n\\nThere are two kinds of parent resources with \\\"Core\\\" support:\\n\\n\\n* Gateway (Gateway conformance profile)\\n* Service (Mesh conformance profile, ClusterIP Services only)\\n\\n\\nSupport for other resources is Implementation-Specific.\",\"maxLength\":63,\"minLength\":1,\"pattern\":\"^[a-zA-Z]([-a-zA-Z0-9]*[a-zA-Z0-9])?$\",\"type\":\"string\"},\"name\":{\"description\":\"Name is the name of the referent.\\n\\n\\nSupport: Core\",\"maxLength\":253,\"minLength\":1,\"type\":\"string\"},\"namespace\":{\"description\":\"Namespace is the namespace of the referent. When unspecified, this refers\\nto the local namespace of the Route.\\n\\n\\nNote that there are specific rules for ParentRefs which cross namespace\\nboundaries. Cross-namespace references are only valid if they are explicitly\\nallowed by something in the namespace they are referring to. For example:\\nGateway has the AllowedRoutes field, and ReferenceGrant provides a\\ngeneric way to enable any other kind of cross-namespace reference.\\n\\n\\n\\u003cgateway:experimental:description\\u003e\\nParentRefs from a Route to a Service in the same namespace are \\\"producer\\\"\\nroutes, which apply default routing rules to inbound connections from\\nany namespace to the Service.\\n\\n\\nParentRefs from a Route to a Service in a different namespace are\\n\\\"consumer\\\" routes, and these routing rules are only applied to outbound\\nconnections originating from the same namespace as the Route, for which\\nthe intended destination of the connections are a Service targeted as a\\nParentRef of the Route.\\n\\u003c/gateway:experimental:description\\u003e\\n\\n\\nSupport: Core\",\"maxLength\":63,\"minLength\":1,\"pattern\":\"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\",\"type\":\"string\"},\"port\":{\"description\":\"Port is the network port this Route targets. It can be interpreted\\ndifferently based on the type of parent resource.\\n\\n\\nWhen the parent resource is a Gateway, this targets all listeners\\nlistening on the specified port that also support this kind of Route(and\\nselect this Route). It's not recommended to set `Port` unless the\\nnetworking behaviors specified in a Route must apply to a specific port\\nas opposed to a listener(s) whose port(s) may be changed. When both Port\\nand SectionName are specified, the name and port of the selected listener\\nmust match both specified values.\\n\\n\\n\\u003cgateway:experimental:description\\u003e\\nWhen the parent resource is a Service, this targets a specific port in the\\nService spec. When both Port (experimental) and SectionName are specified,\\nthe name and port of the selected port must match both specified values.\\n\\u003c/gateway:experimental:description\\u003e\\n\\n\\nImplementations MAY choose to support other parent resources.\\nImplementations supporting other types of parent resources MUST clearly\\ndocument how/if Port is interpreted.\\n\\n\\nFor the purpose of status, an attachment is considered successful as\\nlong as the parent resource accepts it partially. For example, Gateway\\nlisteners can restrict which Routes can attach to them by Route kind,\\nnamespace, or hostname. If 1 of 2 Gateway listeners accept attachment\\nfrom the referencing Route, the Route MUST be considered successfully\\nattached. If no Gateway listeners accept attachment from this Route,\\nthe Route MUST be considered detached from the Gateway.\\n\\n\\nSupport: Extended\",\"format\":\"int32\",\"maximum\":65535,\"minimum\":1,\"type\":\"integer\"},\"sectionName\":{\"description\":\"SectionName is the name of a section within the target resource. In the\\nfollowing resources, SectionName is interpreted as the following:\\n\\n\\n* Gateway: Listener name. When both Port (experimental) and SectionName\\nare specified, the name and port of the selected listener must match\\nboth specified values.\\n* Service: Port name. When both Port (experimental) and SectionName\\nare specified, the name and port of the selected listener must match\\nboth specified values.\\n\\n\\nImplementations MAY choose to support attaching Routes to other resources.\\nIf that is the case, they MUST clearly document how SectionName is\\ninterpreted.\\n\\n\\nWhen unspecified (empty string), this will reference the entire resource.\\nFor the purpose of status, an attachment is considered successful if at\\nleast one section in the parent resource accepts it. For example, Gateway\\nlisteners can restrict which Routes can attach to them by Route kind,\\nnamespace, or hostname. If 1 of 2 Gateway listeners accept attachment from\\nthe referencing Route, the Route MUST be considered successfully\\nattached. If no Gateway listeners accept attachment from this Route, the\\nRoute MUST be considered detached from the Gateway.\\n\\n\\nSupport: Core\",\"maxLength\":253,\"minLength\":1,\"pattern\":\"^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$\",\"type\":\"string\"}},\"required\":[\"name\"],\"type\":\"object\"},\"type\":\"array\"},\"serviceType\":{\"description\":\"Optional service type for Kubernetes solver service. Supported values\\nare NodePort or ClusterIP. If unset, defaults to NodePort.\",\"type\":\"string\"}},\"type\":\"object\"},\"ingress\":{\"description\":\"The ingress based HTTP01 challenge solver will solve challenges by\\ncreating or modifying Ingress resources in order to route requests for\\n'/.well-known/acme-challenge/XYZ' to 'challenge solver' pods that are\\nprovisioned by cert-manager for each Challenge to be completed.\",\"properties\":{\"class\":{\"description\":\"This field configures the annotation `kubernetes.io/ingress.class` when\\ncreating Ingress resources to solve ACME challenges that use this\\nchallenge solver. Only one of `class`, `name` or `ingressClassName` may\\nbe specified.\",\"type\":\"string\"},\"ingressClassName\":{\"description\":\"This field configures the field `ingressClassName` on the created Ingress\\nresources used to solve ACME challenges that use this challenge solver.\\nThis is the recommended way of configuring the ingress class. Only one of\\n`class`, `name` or `ingressClassName` may be specified.\",\"type\":\"string\"},\"ingressTemplate\":{\"description\":\"Optional ingress template used to configure the ACME challenge solver\\ningress used for HTTP01 challenges.\",\"properties\":{\"metadata\":{\"description\":\"ObjectMeta overrides for the ingress used to solve HTTP01 challenges.\\nOnly the 'labels' and 'annotations' fields may be set.\\nIf labels or annotations overlap with in-built values, the values here\\nwill override the in-built values.\",\"properties\":{\"annotations\":{\"additionalProperties\":{\"type\":\"string\"},\"description\":\"Annotations that should be added to the created ACME HTTP01 solver ingress.\",\"type\":\"object\"},\"labels\":{\"additionalProperties\":{\"type\":\"string\"},\"description\":\"Labels that should be added to the created ACME HTTP01 solver ingress.\",\"type\":\"object\"}},\"type\":\"object\"}},\"type\":\"object\"},\"name\":{\"description\":\"The name of the ingress resource that should have ACME challenge solving\\nroutes inserted into it in order to solve HTTP01 challenges.\\nThis is typically used in conjunction with ingress controllers like\\ningress-gce, which maintains a 1:1 mapping between external IPs and\\ningress resources. Only one of `class`, `name` or `ingressClassName` may\\nbe specified.\",\"type\":\"string\"},\"podTemplate\":{\"description\":\"Optional pod template used to configure the ACME challenge solver pods\\nused for HTTP01 challenges.\",\"properties\":{\"metadata\":{\"description\":\"ObjectMeta overrides for the pod used to solve HTTP01 challenges.\\nOnly the 'labels' and 'annotations' fields may be set.\\nIf labels or annotations overlap with in-built values, the values here\\nwill override the in-built values.\",\"properties\":{\"annotations\":{\"additionalProperties\":{\"type\":\"string\"},\"description\":\"Annotations that should be added to the create ACME HTTP01 solver pods.\",\"type\":\"object\"},\"labels\":{\"additionalProperties\":{\"type\":\"string\"},\"description\":\"Labels that should be added to the created ACME HTTP01 solver pods.\",\"type\":\"object\"}},\"type\":\"object\"},\"spec\":{\"description\":\"PodSpec defines overrides for the HTTP01 challenge solver pod.\\nCheck ACMEChallengeSolverHTTP01IngressPodSpec to find out currently supported fields.\\nAll other fields will be ignored.\",\"properties\":{\"affinity\":{\"description\":\"If specified, the pod's scheduling constraints\",\"properties\":{\"nodeAffinity\":{\"description\":\"Describes node affinity scheduling rules for the pod.\",\"properties\":{\"preferredDuringSchedulingIgnoredDuringExecution\":{\"description\":\"The scheduler will prefer to schedule pods to nodes that satisfy\\nthe affinity expressions specified by this field, but it may choose\\na node that violates one or more of the expressions. The node that is\\nmost preferred is the one with the greatest sum of weights, i.e.\\nfor each node that meets all of the scheduling requirements (resource\\nrequest, requiredDuringScheduling affinity expressions, etc.),\\ncompute a sum by iterating through the elements of this field and adding\\n\\\"weight\\\" to the sum if the node matches the corresponding matchExpressions; the\\nnode(s) with the highest sum are the most preferred.\",\"items\":{\"description\":\"An empty preferred scheduling term matches all objects with implicit weight 0\\n(i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).\",\"properties\":{\"preference\":{\"description\":\"A node selector term, associated with the corresponding weight.\",\"properties\":{\"matchExpressions\":{\"description\":\"A list of node selector requirements by node's labels.\",\"items\":{\"description\":\"A node selector requirement is a selector that contains values, a key, and an operator\\nthat relates the key and values.\",\"properties\":{\"key\":{\"description\":\"The label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"Represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.\",\"type\":\"string\"},\"values\":{\"description\":\"An array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. If the operator is Gt or Lt, the values\\narray must have a single element, which will be interpreted as an integer.\\nThis array is replaced during a strategic merge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"matchFields\":{\"description\":\"A list of node selector requirements by node's fields.\",\"items\":{\"description\":\"A node selector requirement is a selector that contains values, a key, and an operator\\nthat relates the key and values.\",\"properties\":{\"key\":{\"description\":\"The label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"Represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.\",\"type\":\"string\"},\"values\":{\"description\":\"An array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. If the operator is Gt or Lt, the values\\narray must have a single element, which will be interpreted as an integer.\\nThis array is replaced during a strategic merge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"type\":\"object\",\"x-kubernetes-map-type\":\"atomic\"},\"weight\":{\"description\":\"Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.\",\"format\":\"int32\",\"type\":\"integer\"}},\"required\":[\"preference\",\"weight\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"requiredDuringSchedulingIgnoredDuringExecution\":{\"description\":\"If the affinity requirements specified by this field are not met at\\nscheduling time, the pod will not be scheduled onto the node.\\nIf the affinity requirements specified by this field cease to be met\\nat some point during pod execution (e.g. due to an update), the system\\nmay or may not try to eventually evict the pod from its node.\",\"properties\":{\"nodeSelectorTerms\":{\"description\":\"Required. A list of node selector terms. The terms are ORed.\",\"items\":{\"description\":\"A null or empty node selector term matches no objects. The requirements of\\nthem are ANDed.\\nThe TopologySelectorTerm type implements a subset of the NodeSelectorTerm.\",\"properties\":{\"matchExpressions\":{\"description\":\"A list of node selector requirements by node's labels.\",\"items\":{\"description\":\"A node selector requirement is a selector that contains values, a key, and an operator\\nthat relates the key and values.\",\"properties\":{\"key\":{\"description\":\"The label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"Represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.\",\"type\":\"string\"},\"values\":{\"description\":\"An array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. If the operator is Gt or Lt, the values\\narray must have a single element, which will be interpreted as an integer.\\nThis array is replaced during a strategic merge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"matchFields\":{\"description\":\"A list of node selector requirements by node's fields.\",\"items\":{\"description\":\"A node selector requirement is a selector that contains values, a key, and an operator\\nthat relates the key and values.\",\"properties\":{\"key\":{\"description\":\"The label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"Represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.\",\"type\":\"string\"},\"values\":{\"description\":\"An array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. If the operator is Gt or Lt, the values\\narray must have a single element, which will be interpreted as an integer.\\nThis array is replaced during a strategic merge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"type\":\"object\",\"x-kubernetes-map-type\":\"atomic\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"nodeSelectorTerms\"],\"type\":\"object\",\"x-kubernetes-map-type\":\"atomic\"}},\"type\":\"object\"},\"podAffinity\":{\"description\":\"Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).\",\"properties\":{\"preferredDuringSchedulingIgnoredDuringExecution\":{\"description\":\"The scheduler will prefer to schedule pods to nodes that satisfy\\nthe affinity expressions specified by this field, but it may choose\\na node that violates one or more of the expressions. The node that is\\nmost preferred is the one with the greatest sum of weights, i.e.\\nfor each node that meets all of the scheduling requirements (resource\\nrequest, requiredDuringScheduling affinity expressions, etc.),\\ncompute a sum by iterating through the elements of this field and adding\\n\\\"weight\\\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the\\nnode(s) with the highest sum are the most preferred.\",\"items\":{\"description\":\"The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)\",\"properties\":{\"podAffinityTerm\":{\"description\":\"Required. A pod affinity term, associated with the corresponding weight.\",\"properties\":{\"labelSelector\":{\"description\":\"A label query over a set of resources, in this case pods.\\nIf it's null, this PodAffinityTerm matches with no Pods.\",\"properties\":{\"matchExpressions\":{\"description\":\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\",\"items\":{\"description\":\"A label selector requirement is a selector that contains values, a key, and an operator that\\nrelates the key and values.\",\"properties\":{\"key\":{\"description\":\"key is the label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"operator represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists and DoesNotExist.\",\"type\":\"string\"},\"values\":{\"description\":\"values is an array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. This array is replaced during a strategic\\nmerge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"matchLabels\":{\"additionalProperties\":{\"type\":\"string\"},\"description\":\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\\nmap is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the\\noperator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\",\"type\":\"object\"}},\"type\":\"object\",\"x-kubernetes-map-type\":\"atomic\"},\"matchLabelKeys\":{\"description\":\"MatchLabelKeys is a set of pod label keys to select which pods will\\nbe taken into consideration. The keys are used to lookup values from the\\nincoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`\\nto select the group of existing pods which pods will be taken into consideration\\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\\npod labels will be ignored. The default value is empty.\\nThe same key is forbidden to exist in both matchLabelKeys and labelSelector.\\nAlso, matchLabelKeys cannot be set when labelSelector isn't set.\\nThis is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"mismatchLabelKeys\":{\"description\":\"MismatchLabelKeys is a set of pod label keys to select which pods will\\nbe taken into consideration. The keys are used to lookup values from the\\nincoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`\\nto select the group of existing pods which pods will be taken into consideration\\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\\npod labels will be ignored. The default value is empty.\\nThe same key is forbidden to exist in both mismatchLabelKeys and labelSelector.\\nAlso, mismatchLabelKeys cannot be set when labelSelector isn't set.\\nThis is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"namespaceSelector\":{\"description\":\"A label query over the set of namespaces that the term applies to.\\nThe term is applied to the union of the namespaces selected by this field\\nand the ones listed in the namespaces field.\\nnull selector and null or empty namespaces list means \\\"this pod's namespace\\\".\\nAn empty selector ({}) matches all namespaces.\",\"properties\":{\"matchExpressions\":{\"description\":\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\",\"items\":{\"description\":\"A label selector requirement is a selector that contains values, a key, and an operator that\\nrelates the key and values.\",\"properties\":{\"key\":{\"description\":\"key is the label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"operator represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists and DoesNotExist.\",\"type\":\"string\"},\"values\":{\"description\":\"values is an array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. This array is replaced during a strategic\\nmerge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"matchLabels\":{\"additionalProperties\":{\"type\":\"string\"},\"description\":\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\\nmap is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the\\noperator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\",\"type\":\"object\"}},\"type\":\"object\",\"x-kubernetes-map-type\":\"atomic\"},\"namespaces\":{\"description\":\"namespaces specifies a static list of namespace names that the term applies to.\\nThe term is applied to the union of the namespaces listed in this field\\nand the ones selected by namespaceSelector.\\nnull or empty namespaces list and null namespaceSelector means \\\"this pod's namespace\\\".\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"topologyKey\":{\"description\":\"This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching\\nthe labelSelector in the specified namespaces, where co-located is defined as running on a node\\nwhose value of the label with key topologyKey matches that of any node on which any of the\\nselected pods is running.\\nEmpty topologyKey is not allowed.\",\"type\":\"string\"}},\"required\":[\"topologyKey\"],\"type\":\"object\"},\"weight\":{\"description\":\"weight associated with matching the corresponding podAffinityTerm,\\nin the range 1-100.\",\"format\":\"int32\",\"type\":\"integer\"}},\"required\":[\"podAffinityTerm\",\"weight\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"requiredDuringSchedulingIgnoredDuringExecution\":{\"description\":\"If the affinity requirements specified by this field are not met at\\nscheduling time, the pod will not be scheduled onto the node.\\nIf the affinity requirements specified by this field cease to be met\\nat some point during pod execution (e.g. due to a pod label update), the\\nsystem may or may not try to eventually evict the pod from its node.\\nWhen there are multiple elements, the lists of nodes corresponding to each\\npodAffinityTerm are intersected, i.e. all terms must be satisfied.\",\"items\":{\"description\":\"Defines a set of pods (namely those matching the labelSelector\\nrelative to the given namespace(s)) that this pod should be\\nco-located (affinity) or not co-located (anti-affinity) with,\\nwhere co-located is defined as running on a node whose value of\\nthe label with key \\u003ctopologyKey\\u003e matches that of any node on which\\na pod of the set of pods is running\",\"properties\":{\"labelSelector\":{\"description\":\"A label query over a set of resources, in this case pods.\\nIf it's null, this PodAffinityTerm matches with no Pods.\",\"properties\":{\"matchExpressions\":{\"description\":\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\",\"items\":{\"description\":\"A label selector requirement is a selector that contains values, a key, and an operator that\\nrelates the key and values.\",\"properties\":{\"key\":{\"description\":\"key is the label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"operator represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists and DoesNotExist.\",\"type\":\"string\"},\"values\":{\"description\":\"values is an array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. This array is replaced during a strategic\\nmerge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"matchLabels\":{\"additionalProperties\":{\"type\":\"string\"},\"description\":\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\\nmap is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the\\noperator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\",\"type\":\"object\"}},\"type\":\"object\",\"x-kubernetes-map-type\":\"atomic\"},\"matchLabelKeys\":{\"description\":\"MatchLabelKeys is a set of pod label keys to select which pods will\\nbe taken into consideration. The keys are used to lookup values from the\\nincoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`\\nto select the group of existing pods which pods will be taken into consideration\\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\\npod labels will be ignored. The default value is empty.\\nThe same key is forbidden to exist in both matchLabelKeys and labelSelector.\\nAlso, matchLabelKeys cannot be set when labelSelector isn't set.\\nThis is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"mismatchLabelKeys\":{\"description\":\"MismatchLabelKeys is a set of pod label keys to select which pods will\\nbe taken into consideration. The keys are used to lookup values from the\\nincoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`\\nto select the group of existing pods which pods will be taken into consideration\\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\\npod labels will be ignored. The default value is empty.\\nThe same key is forbidden to exist in both mismatchLabelKeys and labelSelector.\\nAlso, mismatchLabelKeys cannot be set when labelSelector isn't set.\\nThis is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"namespaceSelector\":{\"description\":\"A label query over the set of namespaces that the term applies to.\\nThe term is applied to the union of the namespaces selected by this field\\nand the ones listed in the namespaces field.\\nnull selector and null or empty namespaces list means \\\"this pod's namespace\\\".\\nAn empty selector ({}) matches all namespaces.\",\"properties\":{\"matchExpressions\":{\"description\":\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\",\"items\":{\"description\":\"A label selector requirement is a selector that contains values, a key, and an operator that\\nrelates the key and values.\",\"properties\":{\"key\":{\"description\":\"key is the label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"operator represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists and DoesNotExist.\",\"type\":\"string\"},\"values\":{\"description\":\"values is an array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. This array is replaced during a strategic\\nmerge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"matchLabels\":{\"additionalProperties\":{\"type\":\"string\"},\"description\":\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\\nmap is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the\\noperator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\",\"type\":\"object\"}},\"type\":\"object\",\"x-kubernetes-map-type\":\"atomic\"},\"namespaces\":{\"description\":\"namespaces specifies a static list of namespace names that the term applies to.\\nThe term is applied to the union of the namespaces listed in this field\\nand the ones selected by namespaceSelector.\\nnull or empty namespaces list and null namespaceSelector means \\\"this pod's namespace\\\".\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"topologyKey\":{\"description\":\"This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching\\nthe labelSelector in the specified namespaces, where co-located is defined as running on a node\\nwhose value of the label with key topologyKey matches that of any node on which any of the\\nselected pods is running.\\nEmpty topologyKey is not allowed.\",\"type\":\"string\"}},\"required\":[\"topologyKey\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"type\":\"object\"},\"podAntiAffinity\":{\"description\":\"Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).\",\"properties\":{\"preferredDuringSchedulingIgnoredDuringExecution\":{\"description\":\"The scheduler will prefer to schedule pods to nodes that satisfy\\nthe anti-affinity expressions specified by this field, but it may choose\\na node that violates one or more of the expressions. The node that is\\nmost preferred is the one with the greatest sum of weights, i.e.\\nfor each node that meets all of the scheduling requirements (resource\\nrequest, requiredDuringScheduling anti-affinity expressions, etc.),\\ncompute a sum by iterating through the elements of this field and adding\\n\\\"weight\\\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the\\nnode(s) with the highest sum are the most preferred.\",\"items\":{\"description\":\"The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)\",\"properties\":{\"podAffinityTerm\":{\"description\":\"Required. A pod affinity term, associated with the corresponding weight.\",\"properties\":{\"labelSelector\":{\"description\":\"A label query over a set of resources, in this case pods.\\nIf it's null, this PodAffinityTerm matches with no Pods.\",\"properties\":{\"matchExpressions\":{\"description\":\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\",\"items\":{\"description\":\"A label selector requirement is a selector that contains values, a key, and an operator that\\nrelates the key and values.\",\"properties\":{\"key\":{\"description\":\"key is the label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"operator represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists and DoesNotExist.\",\"type\":\"string\"},\"values\":{\"description\":\"values is an array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. This array is replaced during a strategic\\nmerge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"matchLabels\":{\"additionalProperties\":{\"type\":\"string\"},\"description\":\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\\nmap is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the\\noperator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\",\"type\":\"object\"}},\"type\":\"object\",\"x-kubernetes-map-type\":\"atomic\"},\"matchLabelKeys\":{\"description\":\"MatchLabelKeys is a set of pod label keys to select which pods will\\nbe taken into consideration. The keys are used to lookup values from the\\nincoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`\\nto select the group of existing pods which pods will be taken into consideration\\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\\npod labels will be ignored. The default value is empty.\\nThe same key is forbidden to exist in both matchLabelKeys and labelSelector.\\nAlso, matchLabelKeys cannot be set when labelSelector isn't set.\\nThis is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"mismatchLabelKeys\":{\"description\":\"MismatchLabelKeys is a set of pod label keys to select which pods will\\nbe taken into consideration. The keys are used to lookup values from the\\nincoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`\\nto select the group of existing pods which pods will be taken into consideration\\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\\npod labels will be ignored. The default value is empty.\\nThe same key is forbidden to exist in both mismatchLabelKeys and labelSelector.\\nAlso, mismatchLabelKeys cannot be set when labelSelector isn't set.\\nThis is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"namespaceSelector\":{\"description\":\"A label query over the set of namespaces that the term applies to.\\nThe term is applied to the union of the namespaces selected by this field\\nand the ones listed in the namespaces field.\\nnull selector and null or empty namespaces list means \\\"this pod's namespace\\\".\\nAn empty selector ({}) matches all namespaces.\",\"properties\":{\"matchExpressions\":{\"description\":\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\",\"items\":{\"description\":\"A label selector requirement is a selector that contains values, a key, and an operator that\\nrelates the key and values.\",\"properties\":{\"key\":{\"description\":\"key is the label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"operator represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists and DoesNotExist.\",\"type\":\"string\"},\"values\":{\"description\":\"values is an array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. This array is replaced during a strategic\\nmerge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"matchLabels\":{\"additionalProperties\":{\"type\":\"string\"},\"description\":\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\\nmap is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the\\noperator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\",\"type\":\"object\"}},\"type\":\"object\",\"x-kubernetes-map-type\":\"atomic\"},\"namespaces\":{\"description\":\"namespaces specifies a static list of namespace names that the term applies to.\\nThe term is applied to the union of the namespaces listed in this field\\nand the ones selected by namespaceSelector.\\nnull or empty namespaces list and null namespaceSelector means \\\"this pod's namespace\\\".\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"topologyKey\":{\"description\":\"This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching\\nthe labelSelector in the specified namespaces, where co-located is defined as running on a node\\nwhose value of the label with key topologyKey matches that of any node on which any of the\\nselected pods is running.\\nEmpty topologyKey is not allowed.\",\"type\":\"string\"}},\"required\":[\"topologyKey\"],\"type\":\"object\"},\"weight\":{\"description\":\"weight associated with matching the corresponding podAffinityTerm,\\nin the range 1-100.\",\"format\":\"int32\",\"type\":\"integer\"}},\"required\":[\"podAffinityTerm\",\"weight\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"requiredDuringSchedulingIgnoredDuringExecution\":{\"description\":\"If the anti-affinity requirements specified by this field are not met at\\nscheduling time, the pod will not be scheduled onto the node.\\nIf the anti-affinity requirements specified by this field cease to be met\\nat some point during pod execution (e.g. due to a pod label update), the\\nsystem may or may not try to eventually evict the pod from its node.\\nWhen there are multiple elements, the lists of nodes corresponding to each\\npodAffinityTerm are intersected, i.e. all terms must be satisfied.\",\"items\":{\"description\":\"Defines a set of pods (namely those matching the labelSelector\\nrelative to the given namespace(s)) that this pod should be\\nco-located (affinity) or not co-located (anti-affinity) with,\\nwhere co-located is defined as running on a node whose value of\\nthe label with key \\u003ctopologyKey\\u003e matches that of any node on which\\na pod of the set of pods is running\",\"properties\":{\"labelSelector\":{\"description\":\"A label query over a set of resources, in this case pods.\\nIf it's null, this PodAffinityTerm matches with no Pods.\",\"properties\":{\"matchExpressions\":{\"description\":\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\",\"items\":{\"description\":\"A label selector requirement is a selector that contains values, a key, and an operator that\\nrelates the key and values.\",\"properties\":{\"key\":{\"description\":\"key is the label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"operator represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists and DoesNotExist.\",\"type\":\"string\"},\"values\":{\"description\":\"values is an array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. This array is replaced during a strategic\\nmerge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"matchLabels\":{\"additionalProperties\":{\"type\":\"string\"},\"description\":\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\\nmap is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the\\noperator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\",\"type\":\"object\"}},\"type\":\"object\",\"x-kubernetes-map-type\":\"atomic\"},\"matchLabelKeys\":{\"description\":\"MatchLabelKeys is a set of pod label keys to select which pods will\\nbe taken into consideration. The keys are used to lookup values from the\\nincoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`\\nto select the group of existing pods which pods will be taken into consideration\\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\\npod labels will be ignored. The default value is empty.\\nThe same key is forbidden to exist in both matchLabelKeys and labelSelector.\\nAlso, matchLabelKeys cannot be set when labelSelector isn't set.\\nThis is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"mismatchLabelKeys\":{\"description\":\"MismatchLabelKeys is a set of pod label keys to select which pods will\\nbe taken into consideration. The keys are used to lookup values from the\\nincoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`\\nto select the group of existing pods which pods will be taken into consideration\\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\\npod labels will be ignored. The default value is empty.\\nThe same key is forbidden to exist in both mismatchLabelKeys and labelSelector.\\nAlso, mismatchLabelKeys cannot be set when labelSelector isn't set.\\nThis is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"namespaceSelector\":{\"description\":\"A label query over the set of namespaces that the term applies to.\\nThe term is applied to the union of the namespaces selected by this field\\nand the ones listed in the namespaces field.\\nnull selector and null or empty namespaces list means \\\"this pod's namespace\\\".\\nAn empty selector ({}) matches all namespaces.\",\"properties\":{\"matchExpressions\":{\"description\":\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\",\"items\":{\"description\":\"A label selector requirement is a selector that contains values, a key, and an operator that\\nrelates the key and values.\",\"properties\":{\"key\":{\"description\":\"key is the label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"operator represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists and DoesNotExist.\",\"type\":\"string\"},\"values\":{\"description\":\"values is an array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. This array is replaced during a strategic\\nmerge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"matchLabels\":{\"additionalProperties\":{\"type\":\"string\"},\"description\":\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\\nmap is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the\\noperator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\",\"type\":\"object\"}},\"type\":\"object\",\"x-kubernetes-map-type\":\"atomic\"},\"namespaces\":{\"description\":\"namespaces specifies a static list of namespace names that the term applies to.\\nThe term is applied to the union of the namespaces listed in this field\\nand the ones selected by namespaceSelector.\\nnull or empty namespaces list and null namespaceSelector means \\\"this pod's namespace\\\".\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"topologyKey\":{\"description\":\"This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching\\nthe labelSelector in the specified namespaces, where co-located is defined as running on a node\\nwhose value of the label with key topologyKey matches that of any node on which any of the\\nselected pods is running.\\nEmpty topologyKey is not allowed.\",\"type\":\"string\"}},\"required\":[\"topologyKey\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"type\":\"object\"}},\"type\":\"object\"},\"imagePullSecrets\":{\"description\":\"If specified, the pod's imagePullSecrets\",\"items\":{\"description\":\"LocalObjectReference contains enough information to let you locate the\\nreferenced object inside the same namespace.\",\"properties\":{\"name\":{\"default\":\"\",\"description\":\"Name of the referent.\\nThis field is effectively required, but due to backwards compatibility is\\nallowed to be empty. Instances of this type with an empty value here are\\nalmost certainly wrong.\\nTODO: Add other useful fields. apiVersion, kind, uid?\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\\nTODO: Drop `kubebuilder:default` when controller-gen doesn't need it https://github.com/kubernetes-sigs/kubebuilder/issues/3896.\",\"type\":\"string\"}},\"type\":\"object\",\"x-kubernetes-map-type\":\"atomic\"},\"type\":\"array\"},\"nodeSelector\":{\"additionalProperties\":{\"type\":\"string\"},\"description\":\"NodeSelector is a selector which must be true for the pod to fit on a node.\\nSelector which must match a node's labels for the pod to be scheduled on that node.\\nMore info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/\",\"type\":\"object\"},\"priorityClassName\":{\"description\":\"If specified, the pod's priorityClassName.\",\"type\":\"string\"},\"serviceAccountName\":{\"description\":\"If specified, the pod's service account\",\"type\":\"string\"},\"tolerations\":{\"description\":\"If specified, the pod's tolerations.\",\"items\":{\"description\":\"The pod this Toleration is attached to tolerates any taint that matches\\nthe triple \\u003ckey,value,effect\\u003e using the matching operator \\u003coperator\\u003e.\",\"properties\":{\"effect\":{\"description\":\"Effect indicates the taint effect to match. Empty means match all taint effects.\\nWhen specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.\",\"type\":\"string\"},\"key\":{\"description\":\"Key is the taint key that the toleration applies to. Empty means match all taint keys.\\nIf the key is empty, operator must be Exists; this combination means to match all values and all keys.\",\"type\":\"string\"},\"operator\":{\"description\":\"Operator represents a key's relationship to the value.\\nValid operators are Exists and Equal. Defaults to Equal.\\nExists is equivalent to wildcard for value, so that a pod can\\ntolerate all taints of a particular category.\",\"type\":\"string\"},\"tolerationSeconds\":{\"description\":\"TolerationSeconds represents the period of time the toleration (which must be\\nof effect NoExecute, otherwise this field is ignored) tolerates the taint. By default,\\nit is not set, which means tolerate the taint forever (do not evict). Zero and\\nnegative values will be treated as 0 (evict immediately) by the system.\",\"format\":\"int64\",\"type\":\"integer\"},\"value\":{\"description\":\"Value is the taint value the toleration matches to.\\nIf the operator is Exists, the value should be empty, otherwise just a regular string.\",\"type\":\"string\"}},\"type\":\"object\"},\"type\":\"array\"}},\"type\":\"object\"}},\"type\":\"object\"},\"serviceType\":{\"description\":\"Optional service type for Kubernetes solver service. Supported values\\nare NodePort or ClusterIP. If unset, defaults to NodePort.\",\"type\":\"string\"}},\"type\":\"object\"}},\"type\":\"object\"},\"selector\":{\"description\":\"Selector selects a set of DNSNames on the Certificate resource that\\nshould be solved using this challenge solver.\\nIf not specified, the solver will be treated as the 'default' solver\\nwith the lowest priority, i.e. if any other solver has a more specific\\nmatch, it will be used instead.\",\"properties\":{\"dnsNames\":{\"description\":\"List of DNSNames that this solver will be used to solve.\\nIf specified and a match is found, a dnsNames selector will take\\nprecedence over a dnsZones selector.\\nIf multiple solvers match with the same dnsNames value, the solver\\nwith the most matching labels in matchLabels will be selected.\\nIf neither has more matches, the solver defined earlier in the list\\nwill be selected.\",\"items\":{\"type\":\"string\"},\"type\":\"array\"},\"dnsZones\":{\"description\":\"List of DNSZones that this solver will be used to solve.\\nThe most specific DNS zone match specified here will take precedence\\nover other DNS zone matches, so a solver specifying sys.example.com\\nwill be selected over one specifying example.com for the domain\\nwww.sys.example.com.\\nIf multiple solvers match with the same dnsZones value, the solver\\nwith the most matching labels in matchLabels will be selected.\\nIf neither has more matches, the solver defined earlier in the list\\nwill be selected.\",\"items\":{\"type\":\"string\"},\"type\":\"array\"},\"matchLabels\":{\"additionalProperties\":{\"type\":\"string\"},\"description\":\"A label selector that is used to refine the set of certificate's that\\nthis challenge solver will apply to.\",\"type\":\"object\"}},\"type\":\"object\"}},\"type\":\"object\"},\"type\":\"array\"}},\"required\":[\"privateKeySecretRef\",\"server\"],\"type\":\"object\"},\"ca\":{\"description\":\"CA configures this issuer to sign certificates using a signing CA keypair\\nstored in a Secret resource.\\nThis is used to build internal PKIs that are managed by cert-manager.\",\"properties\":{\"crlDistributionPoints\":{\"description\":\"The CRL distribution points is an X.509 v3 certificate extension which identifies\\nthe location of the CRL from which the revocation of this certificate can be checked.\\nIf not set, certificates will be issued without distribution points set.\",\"items\":{\"type\":\"string\"},\"type\":\"array\"},\"issuingCertificateURLs\":{\"description\":\"IssuingCertificateURLs is a list of URLs which this issuer should embed into certificates\\nit creates. See https://www.rfc-editor.org/rfc/rfc5280#section-4.2.2.1 for more details.\\nAs an example, such a URL might be \\\"http://ca.domain.com/ca.crt\\\".\",\"items\":{\"type\":\"string\"},\"type\":\"array\"},\"ocspServers\":{\"description\":\"The OCSP server list is an X.509 v3 extension that defines a list of\\nURLs of OCSP responders. The OCSP responders can be queried for the\\nrevocation status of an issued certificate. If not set, the\\ncertificate will be issued with no OCSP servers set. For example, an\\nOCSP server URL could be \\\"http://ocsp.int-x3.letsencrypt.org\\\".\",\"items\":{\"type\":\"string\"},\"type\":\"array\"},\"secretName\":{\"description\":\"SecretName is the name of the secret used to sign Certificates issued\\nby this Issuer.\",\"type\":\"string\"}},\"required\":[\"secretName\"],\"type\":\"object\"},\"selfSigned\":{\"description\":\"SelfSigned configures this issuer to 'self sign' certificates using the\\nprivate key used to create the CertificateRequest object.\",\"properties\":{\"crlDistributionPoints\":{\"description\":\"The CRL distribution points is an X.509 v3 certificate extension which identifies\\nthe location of the CRL from which the revocation of this certificate can be checked.\\nIf not set certificate will be issued without CDP. Values are strings.\",\"items\":{\"type\":\"string\"},\"type\":\"array\"}},\"type\":\"object\"},\"vault\":{\"description\":\"Vault configures this issuer to sign certificates using a HashiCorp Vault\\nPKI backend.\",\"properties\":{\"auth\":{\"description\":\"Auth configures how cert-manager authenticates with the Vault server.\",\"properties\":{\"appRole\":{\"description\":\"AppRole authenticates with Vault using the App Role auth mechanism,\\nwith the role and secret stored in a Kubernetes Secret resource.\",\"properties\":{\"path\":{\"description\":\"Path where the App Role authentication backend is mounted in Vault, e.g:\\n\\\"approle\\\"\",\"type\":\"string\"},\"roleId\":{\"description\":\"RoleID configured in the App Role authentication backend when setting\\nup the authentication backend in Vault.\",\"type\":\"string\"},\"secretRef\":{\"description\":\"Reference to a key in a Secret that contains the App Role secret used\\nto authenticate with Vault.\\nThe `key` field must be specified and denotes which entry within the Secret\\nresource is used as the app role secret.\",\"properties\":{\"key\":{\"description\":\"The key of the entry in the Secret resource's `data` field to be used.\\nSome instances of this field may be defaulted, in others it may be\\nrequired.\",\"type\":\"string\"},\"name\":{\"description\":\"Name of the resource being referred to.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\",\"type\":\"string\"}},\"required\":[\"name\"],\"type\":\"object\"}},\"required\":[\"path\",\"roleId\",\"secretRef\"],\"type\":\"object\"},\"kubernetes\":{\"description\":\"Kubernetes authenticates with Vault by passing the ServiceAccount\\ntoken stored in the named Secret resource to the Vault server.\",\"properties\":{\"mountPath\":{\"description\":\"The Vault mountPath here is the mount path to use when authenticating with\\nVault. For example, setting a value to `/v1/auth/foo`, will use the path\\n`/v1/auth/foo/login` to authenticate with Vault. If unspecified, the\\ndefault value \\\"/v1/auth/kubernetes\\\" will be used.\",\"type\":\"string\"},\"role\":{\"description\":\"A required field containing the Vault Role to assume. A Role binds a\\nKubernetes ServiceAccount with a set of Vault policies.\",\"type\":\"string\"},\"secretRef\":{\"description\":\"The required Secret field containing a Kubernetes ServiceAccount JWT used\\nfor authenticating with Vault. Use of 'ambient credentials' is not\\nsupported.\",\"properties\":{\"key\":{\"description\":\"The key of the entry in the Secret resource's `data` field to be used.\\nSome instances of this field may be defaulted, in others it may be\\nrequired.\",\"type\":\"string\"},\"name\":{\"description\":\"Name of the resource being referred to.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\",\"type\":\"string\"}},\"required\":[\"name\"],\"type\":\"object\"},\"serviceAccountRef\":{\"description\":\"A reference to a service account that will be used to request a bound\\ntoken (also known as \\\"projected token\\\"). Compared to using \\\"secretRef\\\",\\nusing this field means that you don't rely on statically bound tokens. To\\nuse this field, you must configure an RBAC rule to let cert-manager\\nrequest a token.\",\"properties\":{\"audiences\":{\"description\":\"TokenAudiences is an optional list of extra audiences to include in the token passed to Vault. The default token\\nconsisting of the issuer's namespace and name is always included.\",\"items\":{\"type\":\"string\"},\"type\":\"array\"},\"name\":{\"description\":\"Name of the ServiceAccount used to request a token.\",\"type\":\"string\"}},\"required\":[\"name\"],\"type\":\"object\"}},\"required\":[\"role\"],\"type\":\"object\"},\"tokenSecretRef\":{\"description\":\"TokenSecretRef authenticates with Vault by presenting a token.\",\"properties\":{\"key\":{\"description\":\"The key of the entry in the Secret resource's `data` field to be used.\\nSome instances of this field may be defaulted, in others it may be\\nrequired.\",\"type\":\"string\"},\"name\":{\"description\":\"Name of the resource being referred to.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\",\"type\":\"string\"}},\"required\":[\"name\"],\"type\":\"object\"}},\"type\":\"object\"},\"caBundle\":{\"description\":\"Base64-encoded bundle of PEM CAs which will be used to validate the certificate\\nchain presented by Vault. Only used if using HTTPS to connect to Vault and\\nignored for HTTP connections.\\nMutually exclusive with CABundleSecretRef.\\nIf neither CABundle nor CABundleSecretRef are defined, the certificate bundle in\\nthe cert-manager controller container is used to validate the TLS connection.\",\"format\":\"byte\",\"type\":\"string\"},\"caBundleSecretRef\":{\"description\":\"Reference to a Secret containing a bundle of PEM-encoded CAs to use when\\nverifying the certificate chain presented by Vault when using HTTPS.\\nMutually exclusive with CABundle.\\nIf neither CABundle nor CABundleSecretRef are defined, the certificate bundle in\\nthe cert-manager controller container is used to validate the TLS connection.\\nIf no key for the Secret is specified, cert-manager will default to 'ca.crt'.\",\"properties\":{\"key\":{\"description\":\"The key of the entry in the Secret resource's `data` field to be used.\\nSome instances of this field may be defaulted, in others it may be\\nrequired.\",\"type\":\"string\"},\"name\":{\"description\":\"Name of the resource being referred to.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\",\"type\":\"string\"}},\"required\":[\"name\"],\"type\":\"object\"},\"clientCertSecretRef\":{\"description\":\"Reference to a Secret containing a PEM-encoded Client Certificate to use when the\\nVault server requires mTLS.\",\"properties\":{\"key\":{\"description\":\"The key of the entry in the Secret resource's `data` field to be used.\\nSome instances of this field may be defaulted, in others it may be\\nrequired.\",\"type\":\"string\"},\"name\":{\"description\":\"Name of the resource being referred to.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\",\"type\":\"string\"}},\"required\":[\"name\"],\"type\":\"object\"},\"clientKeySecretRef\":{\"description\":\"Reference to a Secret containing a PEM-encoded Client Private Key to use when the\\nVault server requires mTLS.\",\"properties\":{\"key\":{\"description\":\"The key of the entry in the Secret resource's `data` field to be used.\\nSome instances of this field may be defaulted, in others it may be\\nrequired.\",\"type\":\"string\"},\"name\":{\"description\":\"Name of the resource being referred to.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\",\"type\":\"string\"}},\"required\":[\"name\"],\"type\":\"object\"},\"namespace\":{\"description\":\"Name of the vault namespace. Namespaces is a set of features within Vault Enterprise that allows Vault environments to support Secure Multi-tenancy. e.g: \\\"ns1\\\"\\nMore about namespaces can be found here https://www.vaultproject.io/docs/enterprise/namespaces\",\"type\":\"string\"},\"path\":{\"description\":\"Path is the mount path of the Vault PKI backend's `sign` endpoint, e.g:\\n\\\"my_pki_mount/sign/my-role-name\\\".\",\"type\":\"string\"},\"server\":{\"description\":\"Server is the connection address for the Vault server, e.g: \\\"https://vault.example.com:8200\\\".\",\"type\":\"string\"}},\"required\":[\"auth\",\"path\",\"server\"],\"type\":\"object\"},\"venafi\":{\"description\":\"Venafi configures this issuer to sign certificates using a Venafi TPP\\nor Venafi Cloud policy zone.\",\"properties\":{\"cloud\":{\"description\":\"Cloud specifies the Venafi cloud configuration settings.\\nOnly one of TPP or Cloud may be specified.\",\"properties\":{\"apiTokenSecretRef\":{\"description\":\"APITokenSecretRef is a secret key selector for the Venafi Cloud API token.\",\"properties\":{\"key\":{\"description\":\"The key of the entry in the Secret resource's `data` field to be used.\\nSome instances of this field may be defaulted, in others it may be\\nrequired.\",\"type\":\"string\"},\"name\":{\"description\":\"Name of the resource being referred to.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\",\"type\":\"string\"}},\"required\":[\"name\"],\"type\":\"object\"},\"url\":{\"description\":\"URL is the base URL for Venafi Cloud.\\nDefaults to \\\"https://api.venafi.cloud/v1\\\".\",\"type\":\"string\"}},\"required\":[\"apiTokenSecretRef\"],\"type\":\"object\"},\"tpp\":{\"description\":\"TPP specifies Trust Protection Platform configuration settings.\\nOnly one of TPP or Cloud may be specified.\",\"properties\":{\"caBundle\":{\"description\":\"Base64-encoded bundle of PEM CAs which will be used to validate the certificate\\nchain presented by the TPP server. Only used if using HTTPS; ignored for HTTP.\\nIf undefined, the certificate bundle in the cert-manager controller container\\nis used to validate the chain.\",\"format\":\"byte\",\"type\":\"string\"},\"credentialsRef\":{\"description\":\"CredentialsRef is a reference to a Secret containing the username and\\npassword for the TPP server.\\nThe secret must contain two keys, 'username' and 'password'.\",\"properties\":{\"name\":{\"description\":\"Name of the resource being referred to.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\",\"type\":\"string\"}},\"required\":[\"name\"],\"type\":\"object\"},\"url\":{\"description\":\"URL is the base URL for the vedsdk endpoint of the Venafi TPP instance,\\nfor example: \\\"https://tpp.example.com/vedsdk\\\".\",\"type\":\"string\"}},\"required\":[\"credentialsRef\",\"url\"],\"type\":\"object\"},\"zone\":{\"description\":\"Zone is the Venafi Policy Zone to use for this issuer.\\nAll requests made to the Venafi platform will be restricted by the named\\nzone policy.\\nThis field is required.\",\"type\":\"string\"}},\"required\":[\"zone\"],\"type\":\"object\"}},\"type\":\"object\"},\"status\":{\"description\":\"Status of the Issuer. This is set and managed automatically.\",\"properties\":{\"acme\":{\"description\":\"ACME specific status options.\\nThis field should only be set if the Issuer is configured to use an ACME\\nserver to issue certificates.\",\"properties\":{\"lastPrivateKeyHash\":{\"description\":\"LastPrivateKeyHash is a hash of the private key associated with the latest\\nregistered ACME account, in order to track changes made to registered account\\nassociated with the Issuer\",\"type\":\"string\"},\"lastRegisteredEmail\":{\"description\":\"LastRegisteredEmail is the email associated with the latest registered\\nACME account, in order to track changes made to registered account\\nassociated with the  Issuer\",\"type\":\"string\"},\"uri\":{\"description\":\"URI is the unique account identifier, which can also be used to retrieve\\naccount details from the CA\",\"type\":\"string\"}},\"type\":\"object\"},\"conditions\":{\"description\":\"List of status conditions to indicate the status of a CertificateRequest.\\nKnown condition types are `Ready`.\",\"items\":{\"description\":\"IssuerCondition contains condition information for an Issuer.\",\"properties\":{\"lastTransitionTime\":{\"description\":\"LastTransitionTime is the timestamp corresponding to the last status\\nchange of this condition.\",\"format\":\"date-time\",\"type\":\"string\"},\"message\":{\"description\":\"Message is a human readable description of the details of the last\\ntransition, complementing reason.\",\"type\":\"string\"},\"observedGeneration\":{\"description\":\"If set, this represents the .metadata.generation that the condition was\\nset based upon.\\nFor instance, if .metadata.generation is currently 12, but the\\n.status.condition[x].observedGeneration is 9, the condition is out of date\\nwith respect to the current state of the Issuer.\",\"format\":\"int64\",\"type\":\"integer\"},\"reason\":{\"description\":\"Reason is a brief machine readable explanation for the condition's last\\ntransition.\",\"type\":\"string\"},\"status\":{\"description\":\"Status of the condition, one of (`True`, `False`, `Unknown`).\",\"enum\":[\"True\",\"False\",\"Unknown\"],\"type\":\"string\"},\"type\":{\"description\":\"Type of the condition, known values are (`Ready`).\",\"type\":\"string\"}},\"required\":[\"status\",\"type\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-map-keys\":[\"type\"],\"x-kubernetes-list-type\":\"map\"}},\"type\":\"object\"}},\"required\":[\"spec\"],\"type\":\"object\"}},\"served\":true,\"storage\":true,\"subresources\":{\"status\":{}}}]}}\n"
      },
      "served_versions": [
        "v1"
      ],
      "stored_version": "v1",
      "categories": [
        "cert-manager"
      ],
      "short_names": [],
      "description": null,
      "instance_count": 4
    },
    {
      "name": "kafkaautoscalers.autoscaling.kubedb.com",
      "group": "autoscaling.kubedb.com",
      "version": "v1alpha1",
      "kind": "KafkaAutoscaler",
      "plural": "kafkaautoscalers",
      "singular": "kafkaautoscaler",
      "scope": "Namespaced",
      "creation_timestamp": "2025-09-06T13:34:32+00:00",
      "labels": {
        "app.kubernetes.io/name": "kubedb"
      },
      "annotations": {},
      "served_versions": [
        "v1alpha1"
      ],
      "stored_version": "v1alpha1",
      "categories": [
        "autoscaler",
        "kubedb",
        "appscode"
      ],
      "short_names": [
        "kfscaler"
      ],
      "description": null,
      "instance_count": 0
    },
    {
      "name": "kafkabindings.catalog.appscode.com",
      "group": "catalog.appscode.com",
      "version": "v1alpha1",
      "kind": "KafkaBinding",
      "plural": "kafkabindings",
      "singular": "kafkabinding",
      "scope": "Namespaced",
      "creation_timestamp": "2025-09-06T13:34:32+00:00",
      "labels": {
        "app.kubernetes.io/name": "ace",
        "kube-bind.appscode.com/exported": "true"
      },
      "annotations": {},
      "served_versions": [
        "v1alpha1"
      ],
      "stored_version": "v1alpha1",
      "categories": [
        "binding",
        "kubedb",
        "appscode"
      ],
      "short_names": [
        "kfbinding"
      ],
      "description": null,
      "instance_count": 0
    },
    {
      "name": "kafkaconnectorversions.catalog.kubedb.com",
      "group": "catalog.kubedb.com",
      "version": "v1alpha1",
      "kind": "KafkaConnectorVersion",
      "plural": "kafkaconnectorversions",
      "singular": "kafkaconnectorversion",
      "scope": "Cluster",
      "creation_timestamp": "2025-09-06T13:33:51+00:00",
      "labels": {
        "app.kubernetes.io/name": "kubedb"
      },
      "annotations": {},
      "served_versions": [
        "v1alpha1"
      ],
      "stored_version": "v1alpha1",
      "categories": [
        "catalog",
        "kubedb",
        "appscode"
      ],
      "short_names": [
        "kcversion"
      ],
      "description": null,
      "instance_count": 0
    },
    {
      "name": "kafkaopsrequests.ops.kubedb.com",
      "group": "ops.kubedb.com",
      "version": "v1alpha1",
      "kind": "KafkaOpsRequest",
      "plural": "kafkaopsrequests",
      "singular": "kafkaopsrequest",
      "scope": "Namespaced",
      "creation_timestamp": "2025-09-06T13:34:32+00:00",
      "labels": {
        "app.kubernetes.io/name": "kubedb"
      },
      "annotations": {},
      "served_versions": [
        "v1alpha1"
      ],
      "stored_version": "v1alpha1",
      "categories": [
        "ops",
        "kubedb",
        "appscode"
      ],
      "short_names": [
        "kfops"
      ],
      "description": null,
      "instance_count": 0
    },
    {
      "name": "kafkas.kubedb.com",
      "group": "kubedb.com",
      "version": "v1",
      "kind": "Kafka",
      "plural": "kafkas",
      "singular": "kafka",
      "scope": "Namespaced",
      "creation_timestamp": "2025-09-06T13:34:32+00:00",
      "labels": {
        "app.kubernetes.io/name": "kubedb"
      },
      "annotations": {},
      "served_versions": [
        "v1",
        "v1alpha2"
      ],
      "stored_version": "v1",
      "categories": [
        "datastore",
        "kubedb",
        "appscode",
        "all"
      ],
      "short_names": [
        "kf"
      ],
      "description": null,
      "instance_count": 0
    },
    {
      "name": "kafkaversions.catalog.kubedb.com",
      "group": "catalog.kubedb.com",
      "version": "v1alpha1",
      "kind": "KafkaVersion",
      "plural": "kafkaversions",
      "singular": "kafkaversion",
      "scope": "Cluster",
      "creation_timestamp": "2025-09-06T13:33:51+00:00",
      "labels": {
        "app.kubernetes.io/name": "kubedb"
      },
      "annotations": {},
      "served_versions": [
        "v1alpha1"
      ],
      "stored_version": "v1alpha1",
      "categories": [
        "catalog",
        "kubedb",
        "appscode"
      ],
      "short_names": [
        "kfversion"
      ],
      "description": null,
      "instance_count": 0
    },
    {
      "name": "krateoplatformops.krateo.io",
      "group": "krateo.io",
      "version": "v1alpha1",
      "kind": "KrateoPlatformOps",
      "plural": "krateoplatformops",
      "singular": "krateoplatformops",
      "scope": "Namespaced",
      "creation_timestamp": "2025-09-06T09:44:25+00:00",
      "labels": {},
      "annotations": {
        "controller-gen.kubebuilder.io/version": "v0.17.1"
      },
      "served_versions": [
        "v1alpha1"
      ],
      "stored_version": "v1alpha1",
      "categories": [
        "krateo"
      ],
      "short_names": [],
      "description": null,
      "instance_count": 0
    },
    {
      "name": "kubevirts.kubevirt.io",
      "group": "kubevirt.io",
      "version": "v1",
      "kind": "KubeVirt",
      "plural": "kubevirts",
      "singular": "kubevirt",
      "scope": "Namespaced",
      "creation_timestamp": "2025-09-06T12:58:07+00:00",
      "labels": {
        "operator.kubevirt.io": ""
      },
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"apiextensions.k8s.io/v1\",\"kind\":\"CustomResourceDefinition\",\"metadata\":{\"annotations\":{},\"labels\":{\"operator.kubevirt.io\":\"\"},\"name\":\"kubevirts.kubevirt.io\"},\"spec\":{\"group\":\"kubevirt.io\",\"names\":{\"categories\":[\"all\"],\"kind\":\"KubeVirt\",\"plural\":\"kubevirts\",\"shortNames\":[\"kv\",\"kvs\"],\"singular\":\"kubevirt\"},\"scope\":\"Namespaced\",\"versions\":[{\"additionalPrinterColumns\":[{\"jsonPath\":\".metadata.creationTimestamp\",\"name\":\"Age\",\"type\":\"date\"},{\"jsonPath\":\".status.phase\",\"name\":\"Phase\",\"type\":\"string\"}],\"name\":\"v1\",\"schema\":{\"openAPIV3Schema\":{\"description\":\"KubeVirt represents the object deploying all KubeVirt resources\",\"properties\":{\"apiVersion\":{\"description\":\"APIVersion defines the versioned schema of this representation of an object.\\nServers should convert recognized schemas to the latest internal value, and\\nmay reject unrecognized values.\\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources\",\"type\":\"string\"},\"kind\":{\"description\":\"Kind is a string value representing the REST resource this object represents.\\nServers may infer this from the endpoint the client submits requests to.\\nCannot be updated.\\nIn CamelCase.\\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\",\"type\":\"string\"},\"metadata\":{\"type\":\"object\"},\"spec\":{\"properties\":{\"certificateRotateStrategy\":{\"properties\":{\"selfSigned\":{\"properties\":{\"ca\":{\"description\":\"CA configuration\\nCA certs are kept in the CA bundle as long as they are valid\",\"properties\":{\"duration\":{\"description\":\"The requested 'duration' (i.e. lifetime) of the Certificate.\",\"type\":\"string\"},\"renewBefore\":{\"description\":\"The amount of time before the currently issued certificate's \\\"notAfter\\\"\\ntime that we will begin to attempt to renew the certificate.\",\"type\":\"string\"}},\"type\":\"object\"},\"caOverlapInterval\":{\"description\":\"Deprecated. Use CA.Duration and CA.RenewBefore instead\",\"type\":\"string\"},\"caRotateInterval\":{\"description\":\"Deprecated. Use CA.Duration instead\",\"type\":\"string\"},\"certRotateInterval\":{\"description\":\"Deprecated. Use Server.Duration instead\",\"type\":\"string\"},\"server\":{\"description\":\"Server configuration\\nCerts are rotated and discarded\",\"properties\":{\"duration\":{\"description\":\"The requested 'duration' (i.e. lifetime) of the Certificate.\",\"type\":\"string\"},\"renewBefore\":{\"description\":\"The amount of time before the currently issued certificate's \\\"notAfter\\\"\\ntime that we will begin to attempt to renew the certificate.\",\"type\":\"string\"}},\"type\":\"object\"}},\"type\":\"object\"}},\"type\":\"object\"},\"configuration\":{\"description\":\"holds kubevirt configurations.\\nsame as the virt-configMap\",\"properties\":{\"additionalGuestMemoryOverheadRatio\":{\"description\":\"AdditionalGuestMemoryOverheadRatio can be used to increase the virtualization infrastructure\\noverhead. This is useful, since the calculation of this overhead is not accurate and cannot\\nbe entirely known in advance. The ratio that is being set determines by which factor to increase\\nthe overhead calculated by Kubevirt. A higher ratio means that the VMs would be less compromised\\nby node pressures, but would mean that fewer VMs could be scheduled to a node.\\nIf not set, the default is 1.\",\"type\":\"string\"},\"apiConfiguration\":{\"description\":\"ReloadableComponentConfiguration holds all generic k8s configuration options which can\\nbe reloaded by components without requiring a restart.\",\"properties\":{\"restClient\":{\"description\":\"RestClient can be used to tune certain aspects of the k8s client in use.\",\"properties\":{\"rateLimiter\":{\"description\":\"RateLimiter allows selecting and configuring different rate limiters for the k8s client.\",\"properties\":{\"tokenBucketRateLimiter\":{\"properties\":{\"burst\":{\"description\":\"Maximum burst for throttle.\\nIf it's zero, the component default will be used\",\"type\":\"integer\"},\"qps\":{\"description\":\"QPS indicates the maximum QPS to the apiserver from this client.\\nIf it's zero, the component default will be used\",\"type\":\"number\"}},\"required\":[\"burst\",\"qps\"],\"type\":\"object\"}},\"type\":\"object\"}},\"type\":\"object\"}},\"type\":\"object\"},\"architectureConfiguration\":{\"properties\":{\"amd64\":{\"properties\":{\"emulatedMachines\":{\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"machineType\":{\"type\":\"string\"},\"ovmfPath\":{\"type\":\"string\"}},\"type\":\"object\"},\"arm64\":{\"properties\":{\"emulatedMachines\":{\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"machineType\":{\"type\":\"string\"},\"ovmfPath\":{\"type\":\"string\"}},\"type\":\"object\"},\"defaultArchitecture\":{\"type\":\"string\"},\"ppc64le\":{\"properties\":{\"emulatedMachines\":{\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"machineType\":{\"type\":\"string\"},\"ovmfPath\":{\"type\":\"string\"}},\"type\":\"object\"}},\"type\":\"object\"},\"autoCPULimitNamespaceLabelSelector\":{\"description\":\"When set, AutoCPULimitNamespaceLabelSelector will set a CPU limit on virt-launcher for VMIs running inside\\nnamespaces that match the label selector.\\nThe CPU limit will equal the number of requested vCPUs.\\nThis setting does not apply to VMIs with dedicated CPUs.\",\"properties\":{\"matchExpressions\":{\"description\":\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\",\"items\":{\"description\":\"A label selector requirement is a selector that contains values, a key, and an operator that\\nrelates the key and values.\",\"properties\":{\"key\":{\"description\":\"key is the label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"operator represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists and DoesNotExist.\",\"type\":\"string\"},\"values\":{\"description\":\"values is an array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. This array is replaced during a strategic\\nmerge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"matchLabels\":{\"additionalProperties\":{\"type\":\"string\"},\"description\":\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\\nmap is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the\\noperator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\",\"type\":\"object\"}},\"type\":\"object\",\"x-kubernetes-map-type\":\"atomic\"},\"commonInstancetypesDeployment\":{\"description\":\"CommonInstancetypesDeployment controls the deployment of common-instancetypes resources\",\"nullable\":true,\"properties\":{\"enabled\":{\"description\":\"Enabled controls the deployment of common-instancetypes resources, defaults to True.\",\"nullable\":true,\"type\":\"boolean\"}},\"type\":\"object\"},\"controllerConfiguration\":{\"description\":\"ReloadableComponentConfiguration holds all generic k8s configuration options which can\\nbe reloaded by components without requiring a restart.\",\"properties\":{\"restClient\":{\"description\":\"RestClient can be used to tune certain aspects of the k8s client in use.\",\"properties\":{\"rateLimiter\":{\"description\":\"RateLimiter allows selecting and configuring different rate limiters for the k8s client.\",\"properties\":{\"tokenBucketRateLimiter\":{\"properties\":{\"burst\":{\"description\":\"Maximum burst for throttle.\\nIf it's zero, the component default will be used\",\"type\":\"integer\"},\"qps\":{\"description\":\"QPS indicates the maximum QPS to the apiserver from this client.\\nIf it's zero, the component default will be used\",\"type\":\"number\"}},\"required\":[\"burst\",\"qps\"],\"type\":\"object\"}},\"type\":\"object\"}},\"type\":\"object\"}},\"type\":\"object\"},\"cpuModel\":{\"type\":\"string\"},\"cpuRequest\":{\"anyOf\":[{\"type\":\"integer\"},{\"type\":\"string\"}],\"pattern\":\"^(\\\\+|-)?(([0-9]+(\\\\.[0-9]*)?)|(\\\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\\\+|-)?(([0-9]+(\\\\.[0-9]*)?)|(\\\\.[0-9]+))))?$\",\"x-kubernetes-int-or-string\":true},\"defaultRuntimeClass\":{\"type\":\"string\"},\"developerConfiguration\":{\"description\":\"DeveloperConfiguration holds developer options\",\"properties\":{\"clusterProfiler\":{\"description\":\"Enable the ability to pprof profile KubeVirt control plane\",\"type\":\"boolean\"},\"cpuAllocationRatio\":{\"description\":\"For each requested virtual CPU, CPUAllocationRatio defines how much physical CPU to request per VMI\\nfrom the hosting node. The value is in fraction of a CPU thread (or core on non-hyperthreaded nodes).\\nFor example, a value of 1 means 1 physical CPU thread per VMI CPU thread.\\nA value of 100 would be 1% of a physical thread allocated for each requested VMI thread.\\nThis option has no effect on VMIs that request dedicated CPUs. More information at:\\nhttps://kubevirt.io/user-guide/operations/node_overcommit/#node-cpu-allocation-ratio\\nDefaults to 10\",\"type\":\"integer\"},\"diskVerification\":{\"description\":\"DiskVerification holds container disks verification limits\",\"properties\":{\"memoryLimit\":{\"anyOf\":[{\"type\":\"integer\"},{\"type\":\"string\"}],\"pattern\":\"^(\\\\+|-)?(([0-9]+(\\\\.[0-9]*)?)|(\\\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\\\+|-)?(([0-9]+(\\\\.[0-9]*)?)|(\\\\.[0-9]+))))?$\",\"x-kubernetes-int-or-string\":true}},\"required\":[\"memoryLimit\"],\"type\":\"object\"},\"featureGates\":{\"description\":\"FeatureGates is the list of experimental features to enable. Defaults to none\",\"items\":{\"type\":\"string\"},\"type\":\"array\"},\"logVerbosity\":{\"description\":\"LogVerbosity sets log verbosity level of  various components\",\"properties\":{\"nodeVerbosity\":{\"additionalProperties\":{\"type\":\"integer\"},\"description\":\"NodeVerbosity represents a map of nodes with a specific verbosity level\",\"type\":\"object\"},\"virtAPI\":{\"type\":\"integer\"},\"virtController\":{\"type\":\"integer\"},\"virtHandler\":{\"type\":\"integer\"},\"virtLauncher\":{\"type\":\"integer\"},\"virtOperator\":{\"type\":\"integer\"},\"virtSynchronizationController\":{\"type\":\"integer\"}},\"type\":\"object\"},\"memoryOvercommit\":{\"description\":\"MemoryOvercommit is the percentage of memory we want to give VMIs compared to the amount\\ngiven to its parent pod (virt-launcher). For example, a value of 102 means the VMI will\\n\\\"see\\\" 2% more memory than its parent pod. Values under 100 are effectively \\\"undercommits\\\".\\nOvercommits can lead to memory exhaustion, which in turn can lead to crashes. Use carefully.\\nDefaults to 100\",\"type\":\"integer\"},\"minimumClusterTSCFrequency\":{\"description\":\"Allow overriding the automatically determined minimum TSC frequency of the cluster\\nand fixate the minimum to this frequency.\",\"format\":\"int64\",\"type\":\"integer\"},\"minimumReservePVCBytes\":{\"description\":\"MinimumReservePVCBytes is the amount of space, in bytes, to leave unused on disks.\\nDefaults to 131072 (128KiB)\",\"format\":\"int64\",\"type\":\"integer\"},\"nodeSelectors\":{\"additionalProperties\":{\"type\":\"string\"},\"description\":\"NodeSelectors allows restricting VMI creation to nodes that match a set of labels.\\nDefaults to none\",\"type\":\"object\"},\"pvcTolerateLessSpaceUpToPercent\":{\"description\":\"LessPVCSpaceToleration determines how much smaller, in percentage, disk PVCs are\\nallowed to be compared to the requested size (to account for various overheads).\\nDefaults to 10\",\"type\":\"integer\"},\"useEmulation\":{\"description\":\"UseEmulation can be set to true to allow fallback to software emulation\\nin case hardware-assisted emulation is not available. Defaults to false\",\"type\":\"boolean\"}},\"type\":\"object\"},\"emulatedMachines\":{\"description\":\"Deprecated. Use architectureConfiguration instead.\",\"items\":{\"type\":\"string\"},\"type\":\"array\"},\"evictionStrategy\":{\"description\":\"EvictionStrategy defines at the cluster level if the VirtualMachineInstance should be\\nmigrated instead of shut-off in case of a node drain. If the VirtualMachineInstance specific\\nfield is set it overrides the cluster level one.\",\"type\":\"string\"},\"handlerConfiguration\":{\"description\":\"ReloadableComponentConfiguration holds all generic k8s configuration options which can\\nbe reloaded by components without requiring a restart.\",\"properties\":{\"restClient\":{\"description\":\"RestClient can be used to tune certain aspects of the k8s client in use.\",\"properties\":{\"rateLimiter\":{\"description\":\"RateLimiter allows selecting and configuring different rate limiters for the k8s client.\",\"properties\":{\"tokenBucketRateLimiter\":{\"properties\":{\"burst\":{\"description\":\"Maximum burst for throttle.\\nIf it's zero, the component default will be used\",\"type\":\"integer\"},\"qps\":{\"description\":\"QPS indicates the maximum QPS to the apiserver from this client.\\nIf it's zero, the component default will be used\",\"type\":\"number\"}},\"required\":[\"burst\",\"qps\"],\"type\":\"object\"}},\"type\":\"object\"}},\"type\":\"object\"}},\"type\":\"object\"},\"imagePullPolicy\":{\"description\":\"PullPolicy describes a policy for if/when to pull a container image\",\"type\":\"string\"},\"instancetype\":{\"description\":\"Instancetype configuration\",\"nullable\":true,\"properties\":{\"referencePolicy\":{\"description\":\"ReferencePolicy defines how an instance type or preference should be referenced by the VM after submission, supported values are:\\nreference (default) - Where a copy of the original object is stashed in a ControllerRevision and referenced by the VM.\\nexpand - Where the instance type or preference are expanded into the VM if no revisionNames have been populated.\\nexpandAll - Where the instance type or preference are expanded into the VM regardless of revisionNames previously being populated.\",\"enum\":[\"reference\",\"expand\",\"expandAll\"],\"nullable\":true,\"type\":\"string\"}},\"type\":\"object\"},\"ksmConfiguration\":{\"description\":\"KSMConfiguration holds the information regarding the enabling the KSM in the nodes (if available).\",\"properties\":{\"nodeLabelSelector\":{\"description\":\"NodeLabelSelector is a selector that filters in which nodes the KSM will be enabled.\\nEmpty NodeLabelSelector will enable ksm for every node.\",\"properties\":{\"matchExpressions\":{\"description\":\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\",\"items\":{\"description\":\"A label selector requirement is a selector that contains values, a key, and an operator that\\nrelates the key and values.\",\"properties\":{\"key\":{\"description\":\"key is the label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"operator represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists and DoesNotExist.\",\"type\":\"string\"},\"values\":{\"description\":\"values is an array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. This array is replaced during a strategic\\nmerge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"matchLabels\":{\"additionalProperties\":{\"type\":\"string\"},\"description\":\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\\nmap is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the\\noperator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\",\"type\":\"object\"}},\"type\":\"object\",\"x-kubernetes-map-type\":\"atomic\"}},\"type\":\"object\"},\"liveUpdateConfiguration\":{\"description\":\"LiveUpdateConfiguration holds defaults for live update features\",\"properties\":{\"maxCpuSockets\":{\"description\":\"MaxCpuSockets provides a MaxSockets value for VMs that do not provide their own.\\nFor VMs with more sockets than maximum the MaxSockets will be set to equal number of sockets.\",\"format\":\"int32\",\"type\":\"integer\"},\"maxGuest\":{\"anyOf\":[{\"type\":\"integer\"},{\"type\":\"string\"}],\"description\":\"MaxGuest defines the maximum amount memory that can be allocated\\nto the guest using hotplug.\",\"pattern\":\"^(\\\\+|-)?(([0-9]+(\\\\.[0-9]*)?)|(\\\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\\\+|-)?(([0-9]+(\\\\.[0-9]*)?)|(\\\\.[0-9]+))))?$\",\"x-kubernetes-int-or-string\":true},\"maxHotplugRatio\":{\"description\":\"MaxHotplugRatio is the ratio used to define the max amount\\nof a hotplug resource that can be made available to a VM\\nwhen the specific Max* setting is not defined (MaxCpuSockets, MaxGuest)\\nExample: VM is configured with 512Mi of guest memory, if MaxGuest is not\\ndefined and MaxHotplugRatio is 2 then MaxGuest = 1Gi\\ndefaults to 4\",\"format\":\"int32\",\"type\":\"integer\"}},\"type\":\"object\"},\"machineType\":{\"description\":\"Deprecated. Use architectureConfiguration instead.\",\"type\":\"string\"},\"mediatedDevicesConfiguration\":{\"description\":\"MediatedDevicesConfiguration holds information about MDEV types to be defined, if available\",\"properties\":{\"mediatedDeviceTypes\":{\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"mediatedDevicesTypes\":{\"description\":\"Deprecated. Use mediatedDeviceTypes instead.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"nodeMediatedDeviceTypes\":{\"items\":{\"description\":\"NodeMediatedDeviceTypesConfig holds information about MDEV types to be defined in a specific node that matches the NodeSelector field.\",\"properties\":{\"mediatedDeviceTypes\":{\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"mediatedDevicesTypes\":{\"description\":\"Deprecated. Use mediatedDeviceTypes instead.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"nodeSelector\":{\"additionalProperties\":{\"type\":\"string\"},\"description\":\"NodeSelector is a selector which must be true for the vmi to fit on a node.\\nSelector which must match a node's labels for the vmi to be scheduled on that node.\\nMore info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/\",\"type\":\"object\"}},\"required\":[\"nodeSelector\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"type\":\"object\"},\"memBalloonStatsPeriod\":{\"format\":\"int32\",\"type\":\"integer\"},\"migrations\":{\"description\":\"MigrationConfiguration holds migration options.\\nCan be overridden for specific groups of VMs though migration policies.\\nVisit https://kubevirt.io/user-guide/operations/migration_policies/ for more information.\",\"properties\":{\"allowAutoConverge\":{\"description\":\"AllowAutoConverge allows the platform to compromise performance/availability of VMIs to\\nguarantee successful VMI live migrations. Defaults to false\",\"type\":\"boolean\"},\"allowPostCopy\":{\"description\":\"AllowPostCopy enables post-copy live migrations. Such migrations allow even the busiest VMIs\\nto successfully live-migrate. However, events like a network failure can cause a VMI crash.\\nIf set to true, migrations will still start in pre-copy, but switch to post-copy when\\nCompletionTimeoutPerGiB triggers. Defaults to false\",\"type\":\"boolean\"},\"allowWorkloadDisruption\":{\"description\":\"AllowWorkloadDisruption indicates that the migration shouldn't be\\ncanceled after acceptableCompletionTime is exceeded. Instead, if\\npermitted, migration will be switched to post-copy or the VMI will be\\npaused to allow the migration to complete\",\"type\":\"boolean\"},\"bandwidthPerMigration\":{\"anyOf\":[{\"type\":\"integer\"},{\"type\":\"string\"}],\"description\":\"BandwidthPerMigration limits the amount of network bandwidth live migrations are allowed to use.\\nThe value is in quantity per second. Defaults to 0 (no limit)\",\"pattern\":\"^(\\\\+|-)?(([0-9]+(\\\\.[0-9]*)?)|(\\\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\\\+|-)?(([0-9]+(\\\\.[0-9]*)?)|(\\\\.[0-9]+))))?$\",\"x-kubernetes-int-or-string\":true},\"completionTimeoutPerGiB\":{\"description\":\"CompletionTimeoutPerGiB is the maximum number of seconds per GiB a migration is allowed to take.\\nIf the timeout is reached, the migration will be either paused, switched\\nto post-copy or cancelled depending on other settings. Defaults to 150\",\"format\":\"int64\",\"type\":\"integer\"},\"disableTLS\":{\"description\":\"When set to true, DisableTLS will disable the additional layer of live migration encryption\\nprovided by KubeVirt. This is usually a bad idea. Defaults to false\",\"type\":\"boolean\"},\"matchSELinuxLevelOnMigration\":{\"description\":\"By default, the SELinux level of target virt-launcher pods is forced to the level of the source virt-launcher.\\nWhen set to true, MatchSELinuxLevelOnMigration lets the CRI auto-assign a random level to the target.\\nThat will ensure the target virt-launcher doesn't share categories with another pod on the node.\\nHowever, migrations will fail when using RWX volumes that don't automatically deal with SELinux levels.\",\"type\":\"boolean\"},\"network\":{\"description\":\"Network is the name of the CNI network to use for live migrations. By default, migrations go\\nthrough the pod network.\",\"type\":\"string\"},\"nodeDrainTaintKey\":{\"description\":\"NodeDrainTaintKey defines the taint key that indicates a node should be drained.\\nNote: this option relies on the deprecated node taint feature. Default: kubevirt.io/drain\",\"type\":\"string\"},\"parallelMigrationsPerCluster\":{\"description\":\"ParallelMigrationsPerCluster is the total number of concurrent live migrations\\nallowed cluster-wide. Defaults to 5\",\"format\":\"int32\",\"type\":\"integer\"},\"parallelOutboundMigrationsPerNode\":{\"description\":\"ParallelOutboundMigrationsPerNode is the maximum number of concurrent outgoing live migrations\\nallowed per node. Defaults to 2\",\"format\":\"int32\",\"type\":\"integer\"},\"progressTimeout\":{\"description\":\"ProgressTimeout is the maximum number of seconds a live migration is allowed to make no progress.\\nHitting this timeout means a migration transferred 0 data for that many seconds. The migration is\\nthen considered stuck and therefore cancelled. Defaults to 150\",\"format\":\"int64\",\"type\":\"integer\"},\"unsafeMigrationOverride\":{\"description\":\"UnsafeMigrationOverride allows live migrations to occur even if the compatibility check\\nindicates the migration will be unsafe to the guest. Defaults to false\",\"type\":\"boolean\"}},\"type\":\"object\"},\"minCPUModel\":{\"type\":\"string\"},\"network\":{\"description\":\"NetworkConfiguration holds network options\",\"properties\":{\"binding\":{\"additionalProperties\":{\"properties\":{\"computeResourceOverhead\":{\"description\":\"ComputeResourceOverhead specifies the resource overhead that should be added to the compute container when using the binding.\\nversion: v1alphav1\",\"properties\":{\"limits\":{\"additionalProperties\":{\"anyOf\":[{\"type\":\"integer\"},{\"type\":\"string\"}],\"pattern\":\"^(\\\\+|-)?(([0-9]+(\\\\.[0-9]*)?)|(\\\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\\\+|-)?(([0-9]+(\\\\.[0-9]*)?)|(\\\\.[0-9]+))))?$\",\"x-kubernetes-int-or-string\":true},\"description\":\"Limits describes the maximum amount of compute resources allowed.\\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/\",\"type\":\"object\"},\"requests\":{\"additionalProperties\":{\"anyOf\":[{\"type\":\"integer\"},{\"type\":\"string\"}],\"pattern\":\"^(\\\\+|-)?(([0-9]+(\\\\.[0-9]*)?)|(\\\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\\\+|-)?(([0-9]+(\\\\.[0-9]*)?)|(\\\\.[0-9]+))))?$\",\"x-kubernetes-int-or-string\":true},\"description\":\"Requests describes the minimum amount of compute resources required.\\nIf Requests is omitted for a container, it defaults to Limits if that is explicitly specified,\\notherwise to an implementation-defined value. Requests cannot exceed Limits.\\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/\",\"type\":\"object\"}},\"type\":\"object\"},\"domainAttachmentType\":{\"description\":\"DomainAttachmentType is a standard domain network attachment method kubevirt supports.\\nSupported values: \\\"tap\\\", \\\"managedTap\\\" (since v1.4).\\nThe standard domain attachment can be used instead or in addition to the sidecarImage.\\nversion: 1alphav1\",\"type\":\"string\"},\"downwardAPI\":{\"description\":\"DownwardAPI specifies what kind of data should be exposed to the binding plugin sidecar.\\nSupported values: \\\"device-info\\\"\\nversion: v1alphav1\",\"type\":\"string\"},\"migration\":{\"description\":\"Migration means the VM using the plugin can be safely migrated\\nversion: 1alphav1\",\"properties\":{\"method\":{\"description\":\"Method defines a pre-defined migration methodology\\nversion: 1alphav1\",\"type\":\"string\"}},\"type\":\"object\"},\"networkAttachmentDefinition\":{\"description\":\"NetworkAttachmentDefinition references to a NetworkAttachmentDefinition CR object.\\nFormat: \\u003cname\\u003e, \\u003cnamespace\\u003e/\\u003cname\\u003e.\\nIf namespace is not specified, VMI namespace is assumed.\\nversion: 1alphav1\",\"type\":\"string\"},\"sidecarImage\":{\"description\":\"SidecarImage references a container image that runs in the virt-launcher pod.\\nThe sidecar handles (libvirt) domain configuration and optional services.\\nversion: 1alphav1\",\"type\":\"string\"}},\"type\":\"object\"},\"type\":\"object\"},\"defaultNetworkInterface\":{\"type\":\"string\"},\"permitBridgeInterfaceOnPodNetwork\":{\"type\":\"boolean\"},\"permitSlirpInterface\":{\"description\":\"DeprecatedPermitSlirpInterface is an alias for the deprecated PermitSlirpInterface.\\nDeprecated: Removed in v1.3.\",\"type\":\"boolean\"}},\"type\":\"object\"},\"obsoleteCPUModels\":{\"additionalProperties\":{\"type\":\"boolean\"},\"type\":\"object\"},\"ovmfPath\":{\"description\":\"Deprecated. Use architectureConfiguration instead.\",\"type\":\"string\"},\"permittedHostDevices\":{\"description\":\"PermittedHostDevices holds information about devices allowed for passthrough\",\"properties\":{\"mediatedDevices\":{\"items\":{\"description\":\"MediatedHostDevice represents a host mediated device allowed for passthrough\",\"properties\":{\"externalResourceProvider\":{\"type\":\"boolean\"},\"mdevNameSelector\":{\"type\":\"string\"},\"resourceName\":{\"type\":\"string\"}},\"required\":[\"mdevNameSelector\",\"resourceName\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"pciHostDevices\":{\"items\":{\"description\":\"PciHostDevice represents a host PCI device allowed for passthrough\",\"properties\":{\"externalResourceProvider\":{\"description\":\"If true, KubeVirt will leave the allocation and monitoring to an\\nexternal device plugin\",\"type\":\"boolean\"},\"pciVendorSelector\":{\"description\":\"The vendor_id:product_id tuple of the PCI device\",\"type\":\"string\"},\"resourceName\":{\"description\":\"The name of the resource that is representing the device. Exposed by\\na device plugin and requested by VMs. Typically of the form\\nvendor.com/product_name\",\"type\":\"string\"}},\"required\":[\"pciVendorSelector\",\"resourceName\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"usb\":{\"items\":{\"properties\":{\"externalResourceProvider\":{\"description\":\"If true, KubeVirt will leave the allocation and monitoring to an\\nexternal device plugin\",\"type\":\"boolean\"},\"resourceName\":{\"description\":\"Identifies the list of USB host devices.\\ne.g: kubevirt.io/storage, kubevirt.io/bootable-usb, etc\",\"type\":\"string\"},\"selectors\":{\"items\":{\"properties\":{\"product\":{\"type\":\"string\"},\"vendor\":{\"type\":\"string\"}},\"required\":[\"product\",\"vendor\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"resourceName\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"type\":\"object\"},\"seccompConfiguration\":{\"description\":\"SeccompConfiguration holds Seccomp configuration for Kubevirt components\",\"properties\":{\"virtualMachineInstanceProfile\":{\"description\":\"VirtualMachineInstanceProfile defines what profile should be used with virt-launcher. Defaults to none\",\"properties\":{\"customProfile\":{\"description\":\"CustomProfile allows to request arbitrary profile for virt-launcher\",\"properties\":{\"localhostProfile\":{\"type\":\"string\"},\"runtimeDefaultProfile\":{\"type\":\"boolean\"}},\"type\":\"object\"}},\"type\":\"object\"}},\"type\":\"object\"},\"selinuxLauncherType\":{\"type\":\"string\"},\"smbios\":{\"properties\":{\"family\":{\"type\":\"string\"},\"manufacturer\":{\"type\":\"string\"},\"product\":{\"type\":\"string\"},\"sku\":{\"type\":\"string\"},\"version\":{\"type\":\"string\"}},\"type\":\"object\"},\"supportContainerResources\":{\"description\":\"SupportContainerResources specifies the resource requirements for various types of supporting containers such as container disks/virtiofs/sidecars and hotplug attachment pods. If omitted a sensible default will be supplied.\",\"items\":{\"description\":\"SupportContainerResources are used to specify the cpu/memory request and limits for the containers that support various features of Virtual Machines. These containers are usually idle and don't require a lot of memory or cpu.\",\"properties\":{\"resources\":{\"description\":\"ResourceRequirementsWithoutClaims describes the compute resource requirements.\\nThis struct was taken from the k8s.ResourceRequirements and cleaned up the 'Claims' field.\",\"properties\":{\"limits\":{\"additionalProperties\":{\"anyOf\":[{\"type\":\"integer\"},{\"type\":\"string\"}],\"pattern\":\"^(\\\\+|-)?(([0-9]+(\\\\.[0-9]*)?)|(\\\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\\\+|-)?(([0-9]+(\\\\.[0-9]*)?)|(\\\\.[0-9]+))))?$\",\"x-kubernetes-int-or-string\":true},\"description\":\"Limits describes the maximum amount of compute resources allowed.\\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/\",\"type\":\"object\"},\"requests\":{\"additionalProperties\":{\"anyOf\":[{\"type\":\"integer\"},{\"type\":\"string\"}],\"pattern\":\"^(\\\\+|-)?(([0-9]+(\\\\.[0-9]*)?)|(\\\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\\\+|-)?(([0-9]+(\\\\.[0-9]*)?)|(\\\\.[0-9]+))))?$\",\"x-kubernetes-int-or-string\":true},\"description\":\"Requests describes the minimum amount of compute resources required.\\nIf Requests is omitted for a container, it defaults to Limits if that is explicitly specified,\\notherwise to an implementation-defined value. Requests cannot exceed Limits.\\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/\",\"type\":\"object\"}},\"type\":\"object\"},\"type\":{\"type\":\"string\"}},\"required\":[\"resources\",\"type\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-map-keys\":[\"type\"],\"x-kubernetes-list-type\":\"map\"},\"supportedGuestAgentVersions\":{\"description\":\"deprecated\",\"items\":{\"type\":\"string\"},\"type\":\"array\"},\"tlsConfiguration\":{\"description\":\"TLSConfiguration holds TLS options\",\"properties\":{\"ciphers\":{\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"set\"},\"minTLSVersion\":{\"description\":\"MinTLSVersion is a way to specify the minimum protocol version that is acceptable for TLS connections.\\nProtocol versions are based on the following most common TLS configurations:\\n\\n  https://ssl-config.mozilla.org/\\n\\nNote that SSLv3.0 is not a supported protocol version due to well known\\nvulnerabilities such as POODLE: https://en.wikipedia.org/wiki/POODLE\",\"enum\":[\"VersionTLS10\",\"VersionTLS11\",\"VersionTLS12\",\"VersionTLS13\"],\"type\":\"string\"}},\"type\":\"object\"},\"virtualMachineInstancesPerNode\":{\"type\":\"integer\"},\"virtualMachineOptions\":{\"description\":\"VirtualMachineOptions holds the cluster level information regarding the virtual machine.\",\"properties\":{\"disableFreePageReporting\":{\"description\":\"DisableFreePageReporting disable the free page reporting of\\nmemory balloon device https://libvirt.org/formatdomain.html#memory-balloon-device.\\nThis will have effect only if AutoattachMemBalloon is not false and the vmi is not\\nrequesting any high performance feature (dedicatedCPU/realtime/hugePages), in which free page reporting is always disabled.\",\"type\":\"object\"},\"disableSerialConsoleLog\":{\"description\":\"DisableSerialConsoleLog disables logging the auto-attached default serial console.\\nIf not set, serial console logs will be written to a file and then streamed from a container named 'guest-console-log'.\\nThe value can be individually overridden for each VM, not relevant if AutoattachSerialConsole is disabled.\",\"type\":\"object\"}},\"type\":\"object\"},\"vmRolloutStrategy\":{\"description\":\"VMRolloutStrategy defines how live-updatable fields, like CPU sockets, memory,\\ntolerations, and affinity, are propagated from a VM to its VMI.\",\"enum\":[\"Stage\",\"LiveUpdate\"],\"nullable\":true,\"type\":\"string\"},\"vmStateStorageClass\":{\"description\":\"VMStateStorageClass is the name of the storage class to use for the PVCs created to preserve VM state, like TPM.\",\"type\":\"string\"},\"webhookConfiguration\":{\"description\":\"ReloadableComponentConfiguration holds all generic k8s configuration options which can\\nbe reloaded by components without requiring a restart.\",\"properties\":{\"restClient\":{\"description\":\"RestClient can be used to tune certain aspects of the k8s client in use.\",\"properties\":{\"rateLimiter\":{\"description\":\"RateLimiter allows selecting and configuring different rate limiters for the k8s client.\",\"properties\":{\"tokenBucketRateLimiter\":{\"properties\":{\"burst\":{\"description\":\"Maximum burst for throttle.\\nIf it's zero, the component default will be used\",\"type\":\"integer\"},\"qps\":{\"description\":\"QPS indicates the maximum QPS to the apiserver from this client.\\nIf it's zero, the component default will be used\",\"type\":\"number\"}},\"required\":[\"burst\",\"qps\"],\"type\":\"object\"}},\"type\":\"object\"}},\"type\":\"object\"}},\"type\":\"object\"}},\"type\":\"object\"},\"customizeComponents\":{\"properties\":{\"flags\":{\"description\":\"Configure the value used for deployment and daemonset resources\",\"properties\":{\"api\":{\"additionalProperties\":{\"type\":\"string\"},\"type\":\"object\"},\"controller\":{\"additionalProperties\":{\"type\":\"string\"},\"type\":\"object\"},\"handler\":{\"additionalProperties\":{\"type\":\"string\"},\"type\":\"object\"}},\"type\":\"object\"},\"patches\":{\"items\":{\"properties\":{\"patch\":{\"type\":\"string\"},\"resourceName\":{\"minLength\":1,\"type\":\"string\"},\"resourceType\":{\"minLength\":1,\"type\":\"string\"},\"type\":{\"type\":\"string\"}},\"required\":[\"patch\",\"resourceName\",\"resourceType\",\"type\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"type\":\"object\"},\"imagePullPolicy\":{\"description\":\"The ImagePullPolicy to use.\",\"type\":\"string\"},\"imagePullSecrets\":{\"description\":\"The imagePullSecrets to pull the container images from\\nDefaults to none\",\"items\":{\"description\":\"LocalObjectReference contains enough information to let you locate the\\nreferenced object inside the same namespace.\",\"properties\":{\"name\":{\"default\":\"\",\"description\":\"Name of the referent.\\nThis field is effectively required, but due to backwards compatibility is\\nallowed to be empty. Instances of this type with an empty value here are\\nalmost certainly wrong.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\",\"type\":\"string\"}},\"type\":\"object\",\"x-kubernetes-map-type\":\"atomic\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"imageRegistry\":{\"description\":\"The image registry to pull the container images from\\nDefaults to the same registry the operator's container image is pulled from.\",\"type\":\"string\"},\"imageTag\":{\"description\":\"The image tag to use for the continer images installed.\\nDefaults to the same tag as the operator's container image.\",\"type\":\"string\"},\"infra\":{\"description\":\"selectors and tolerations that should apply to KubeVirt infrastructure components\",\"properties\":{\"nodePlacement\":{\"description\":\"nodePlacement describes scheduling configuration for specific\\nKubeVirt components\",\"properties\":{\"affinity\":{\"description\":\"affinity enables pod affinity/anti-affinity placement expanding the types of constraints\\nthat can be expressed with nodeSelector.\\naffinity is going to be applied to the relevant kind of pods in parallel with nodeSelector\\nSee https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#affinity-and-anti-affinity\",\"properties\":{\"nodeAffinity\":{\"description\":\"Describes node affinity scheduling rules for the pod.\",\"properties\":{\"preferredDuringSchedulingIgnoredDuringExecution\":{\"description\":\"The scheduler will prefer to schedule pods to nodes that satisfy\\nthe affinity expressions specified by this field, but it may choose\\na node that violates one or more of the expressions. The node that is\\nmost preferred is the one with the greatest sum of weights, i.e.\\nfor each node that meets all of the scheduling requirements (resource\\nrequest, requiredDuringScheduling affinity expressions, etc.),\\ncompute a sum by iterating through the elements of this field and adding\\n\\\"weight\\\" to the sum if the node matches the corresponding matchExpressions; the\\nnode(s) with the highest sum are the most preferred.\",\"items\":{\"description\":\"An empty preferred scheduling term matches all objects with implicit weight 0\\n(i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).\",\"properties\":{\"preference\":{\"description\":\"A node selector term, associated with the corresponding weight.\",\"properties\":{\"matchExpressions\":{\"description\":\"A list of node selector requirements by node's labels.\",\"items\":{\"description\":\"A node selector requirement is a selector that contains values, a key, and an operator\\nthat relates the key and values.\",\"properties\":{\"key\":{\"description\":\"The label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"Represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.\",\"type\":\"string\"},\"values\":{\"description\":\"An array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. If the operator is Gt or Lt, the values\\narray must have a single element, which will be interpreted as an integer.\\nThis array is replaced during a strategic merge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"matchFields\":{\"description\":\"A list of node selector requirements by node's fields.\",\"items\":{\"description\":\"A node selector requirement is a selector that contains values, a key, and an operator\\nthat relates the key and values.\",\"properties\":{\"key\":{\"description\":\"The label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"Represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.\",\"type\":\"string\"},\"values\":{\"description\":\"An array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. If the operator is Gt or Lt, the values\\narray must have a single element, which will be interpreted as an integer.\\nThis array is replaced during a strategic merge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"type\":\"object\",\"x-kubernetes-map-type\":\"atomic\"},\"weight\":{\"description\":\"Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.\",\"format\":\"int32\",\"type\":\"integer\"}},\"required\":[\"preference\",\"weight\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"requiredDuringSchedulingIgnoredDuringExecution\":{\"description\":\"If the affinity requirements specified by this field are not met at\\nscheduling time, the pod will not be scheduled onto the node.\\nIf the affinity requirements specified by this field cease to be met\\nat some point during pod execution (e.g. due to an update), the system\\nmay or may not try to eventually evict the pod from its node.\",\"properties\":{\"nodeSelectorTerms\":{\"description\":\"Required. A list of node selector terms. The terms are ORed.\",\"items\":{\"description\":\"A null or empty node selector term matches no objects. The requirements of\\nthem are ANDed.\\nThe TopologySelectorTerm type implements a subset of the NodeSelectorTerm.\",\"properties\":{\"matchExpressions\":{\"description\":\"A list of node selector requirements by node's labels.\",\"items\":{\"description\":\"A node selector requirement is a selector that contains values, a key, and an operator\\nthat relates the key and values.\",\"properties\":{\"key\":{\"description\":\"The label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"Represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.\",\"type\":\"string\"},\"values\":{\"description\":\"An array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. If the operator is Gt or Lt, the values\\narray must have a single element, which will be interpreted as an integer.\\nThis array is replaced during a strategic merge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"matchFields\":{\"description\":\"A list of node selector requirements by node's fields.\",\"items\":{\"description\":\"A node selector requirement is a selector that contains values, a key, and an operator\\nthat relates the key and values.\",\"properties\":{\"key\":{\"description\":\"The label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"Represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.\",\"type\":\"string\"},\"values\":{\"description\":\"An array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. If the operator is Gt or Lt, the values\\narray must have a single element, which will be interpreted as an integer.\\nThis array is replaced during a strategic merge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"type\":\"object\",\"x-kubernetes-map-type\":\"atomic\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"nodeSelectorTerms\"],\"type\":\"object\",\"x-kubernetes-map-type\":\"atomic\"}},\"type\":\"object\"},\"podAffinity\":{\"description\":\"Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).\",\"properties\":{\"preferredDuringSchedulingIgnoredDuringExecution\":{\"description\":\"The scheduler will prefer to schedule pods to nodes that satisfy\\nthe affinity expressions specified by this field, but it may choose\\na node that violates one or more of the expressions. The node that is\\nmost preferred is the one with the greatest sum of weights, i.e.\\nfor each node that meets all of the scheduling requirements (resource\\nrequest, requiredDuringScheduling affinity expressions, etc.),\\ncompute a sum by iterating through the elements of this field and adding\\n\\\"weight\\\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the\\nnode(s) with the highest sum are the most preferred.\",\"items\":{\"description\":\"The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)\",\"properties\":{\"podAffinityTerm\":{\"description\":\"Required. A pod affinity term, associated with the corresponding weight.\",\"properties\":{\"labelSelector\":{\"description\":\"A label query over a set of resources, in this case pods.\\nIf it's null, this PodAffinityTerm matches with no Pods.\",\"properties\":{\"matchExpressions\":{\"description\":\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\",\"items\":{\"description\":\"A label selector requirement is a selector that contains values, a key, and an operator that\\nrelates the key and values.\",\"properties\":{\"key\":{\"description\":\"key is the label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"operator represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists and DoesNotExist.\",\"type\":\"string\"},\"values\":{\"description\":\"values is an array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. This array is replaced during a strategic\\nmerge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"matchLabels\":{\"additionalProperties\":{\"type\":\"string\"},\"description\":\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\\nmap is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the\\noperator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\",\"type\":\"object\"}},\"type\":\"object\",\"x-kubernetes-map-type\":\"atomic\"},\"matchLabelKeys\":{\"description\":\"MatchLabelKeys is a set of pod label keys to select which pods will\\nbe taken into consideration. The keys are used to lookup values from the\\nincoming pod labels, those key-value labels are merged with 'labelSelector' as 'key in (value)'\\nto select the group of existing pods which pods will be taken into consideration\\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\\npod labels will be ignored. The default value is empty.\\nThe same key is forbidden to exist in both matchLabelKeys and labelSelector.\\nAlso, matchLabelKeys cannot be set when labelSelector isn't set.\\nThis is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"mismatchLabelKeys\":{\"description\":\"MismatchLabelKeys is a set of pod label keys to select which pods will\\nbe taken into consideration. The keys are used to lookup values from the\\nincoming pod labels, those key-value labels are merged with 'labelSelector' as 'key notin (value)'\\nto select the group of existing pods which pods will be taken into consideration\\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\\npod labels will be ignored. The default value is empty.\\nThe same key is forbidden to exist in both mismatchLabelKeys and labelSelector.\\nAlso, mismatchLabelKeys cannot be set when labelSelector isn't set.\\nThis is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"namespaceSelector\":{\"description\":\"A label query over the set of namespaces that the term applies to.\\nThe term is applied to the union of the namespaces selected by this field\\nand the ones listed in the namespaces field.\\nnull selector and null or empty namespaces list means \\\"this pod's namespace\\\".\\nAn empty selector ({}) matches all namespaces.\",\"properties\":{\"matchExpressions\":{\"description\":\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\",\"items\":{\"description\":\"A label selector requirement is a selector that contains values, a key, and an operator that\\nrelates the key and values.\",\"properties\":{\"key\":{\"description\":\"key is the label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"operator represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists and DoesNotExist.\",\"type\":\"string\"},\"values\":{\"description\":\"values is an array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. This array is replaced during a strategic\\nmerge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"matchLabels\":{\"additionalProperties\":{\"type\":\"string\"},\"description\":\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\\nmap is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the\\noperator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\",\"type\":\"object\"}},\"type\":\"object\",\"x-kubernetes-map-type\":\"atomic\"},\"namespaces\":{\"description\":\"namespaces specifies a static list of namespace names that the term applies to.\\nThe term is applied to the union of the namespaces listed in this field\\nand the ones selected by namespaceSelector.\\nnull or empty namespaces list and null namespaceSelector means \\\"this pod's namespace\\\".\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"topologyKey\":{\"description\":\"This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching\\nthe labelSelector in the specified namespaces, where co-located is defined as running on a node\\nwhose value of the label with key topologyKey matches that of any node on which any of the\\nselected pods is running.\\nEmpty topologyKey is not allowed.\",\"type\":\"string\"}},\"required\":[\"topologyKey\"],\"type\":\"object\"},\"weight\":{\"description\":\"weight associated with matching the corresponding podAffinityTerm,\\nin the range 1-100.\",\"format\":\"int32\",\"type\":\"integer\"}},\"required\":[\"podAffinityTerm\",\"weight\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"requiredDuringSchedulingIgnoredDuringExecution\":{\"description\":\"If the affinity requirements specified by this field are not met at\\nscheduling time, the pod will not be scheduled onto the node.\\nIf the affinity requirements specified by this field cease to be met\\nat some point during pod execution (e.g. due to a pod label update), the\\nsystem may or may not try to eventually evict the pod from its node.\\nWhen there are multiple elements, the lists of nodes corresponding to each\\npodAffinityTerm are intersected, i.e. all terms must be satisfied.\",\"items\":{\"description\":\"Defines a set of pods (namely those matching the labelSelector\\nrelative to the given namespace(s)) that this pod should be\\nco-located (affinity) or not co-located (anti-affinity) with,\\nwhere co-located is defined as running on a node whose value of\\nthe label with key \\u003ctopologyKey\\u003e matches that of any node on which\\na pod of the set of pods is running\",\"properties\":{\"labelSelector\":{\"description\":\"A label query over a set of resources, in this case pods.\\nIf it's null, this PodAffinityTerm matches with no Pods.\",\"properties\":{\"matchExpressions\":{\"description\":\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\",\"items\":{\"description\":\"A label selector requirement is a selector that contains values, a key, and an operator that\\nrelates the key and values.\",\"properties\":{\"key\":{\"description\":\"key is the label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"operator represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists and DoesNotExist.\",\"type\":\"string\"},\"values\":{\"description\":\"values is an array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. This array is replaced during a strategic\\nmerge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"matchLabels\":{\"additionalProperties\":{\"type\":\"string\"},\"description\":\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\\nmap is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the\\noperator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\",\"type\":\"object\"}},\"type\":\"object\",\"x-kubernetes-map-type\":\"atomic\"},\"matchLabelKeys\":{\"description\":\"MatchLabelKeys is a set of pod label keys to select which pods will\\nbe taken into consideration. The keys are used to lookup values from the\\nincoming pod labels, those key-value labels are merged with 'labelSelector' as 'key in (value)'\\nto select the group of existing pods which pods will be taken into consideration\\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\\npod labels will be ignored. The default value is empty.\\nThe same key is forbidden to exist in both matchLabelKeys and labelSelector.\\nAlso, matchLabelKeys cannot be set when labelSelector isn't set.\\nThis is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"mismatchLabelKeys\":{\"description\":\"MismatchLabelKeys is a set of pod label keys to select which pods will\\nbe taken into consideration. The keys are used to lookup values from the\\nincoming pod labels, those key-value labels are merged with 'labelSelector' as 'key notin (value)'\\nto select the group of existing pods which pods will be taken into consideration\\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\\npod labels will be ignored. The default value is empty.\\nThe same key is forbidden to exist in both mismatchLabelKeys and labelSelector.\\nAlso, mismatchLabelKeys cannot be set when labelSelector isn't set.\\nThis is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"namespaceSelector\":{\"description\":\"A label query over the set of namespaces that the term applies to.\\nThe term is applied to the union of the namespaces selected by this field\\nand the ones listed in the namespaces field.\\nnull selector and null or empty namespaces list means \\\"this pod's namespace\\\".\\nAn empty selector ({}) matches all namespaces.\",\"properties\":{\"matchExpressions\":{\"description\":\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\",\"items\":{\"description\":\"A label selector requirement is a selector that contains values, a key, and an operator that\\nrelates the key and values.\",\"properties\":{\"key\":{\"description\":\"key is the label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"operator represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists and DoesNotExist.\",\"type\":\"string\"},\"values\":{\"description\":\"values is an array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. This array is replaced during a strategic\\nmerge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"matchLabels\":{\"additionalProperties\":{\"type\":\"string\"},\"description\":\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\\nmap is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the\\noperator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\",\"type\":\"object\"}},\"type\":\"object\",\"x-kubernetes-map-type\":\"atomic\"},\"namespaces\":{\"description\":\"namespaces specifies a static list of namespace names that the term applies to.\\nThe term is applied to the union of the namespaces listed in this field\\nand the ones selected by namespaceSelector.\\nnull or empty namespaces list and null namespaceSelector means \\\"this pod's namespace\\\".\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"topologyKey\":{\"description\":\"This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching\\nthe labelSelector in the specified namespaces, where co-located is defined as running on a node\\nwhose value of the label with key topologyKey matches that of any node on which any of the\\nselected pods is running.\\nEmpty topologyKey is not allowed.\",\"type\":\"string\"}},\"required\":[\"topologyKey\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"type\":\"object\"},\"podAntiAffinity\":{\"description\":\"Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).\",\"properties\":{\"preferredDuringSchedulingIgnoredDuringExecution\":{\"description\":\"The scheduler will prefer to schedule pods to nodes that satisfy\\nthe anti-affinity expressions specified by this field, but it may choose\\na node that violates one or more of the expressions. The node that is\\nmost preferred is the one with the greatest sum of weights, i.e.\\nfor each node that meets all of the scheduling requirements (resource\\nrequest, requiredDuringScheduling anti-affinity expressions, etc.),\\ncompute a sum by iterating through the elements of this field and adding\\n\\\"weight\\\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the\\nnode(s) with the highest sum are the most preferred.\",\"items\":{\"description\":\"The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)\",\"properties\":{\"podAffinityTerm\":{\"description\":\"Required. A pod affinity term, associated with the corresponding weight.\",\"properties\":{\"labelSelector\":{\"description\":\"A label query over a set of resources, in this case pods.\\nIf it's null, this PodAffinityTerm matches with no Pods.\",\"properties\":{\"matchExpressions\":{\"description\":\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\",\"items\":{\"description\":\"A label selector requirement is a selector that contains values, a key, and an operator that\\nrelates the key and values.\",\"properties\":{\"key\":{\"description\":\"key is the label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"operator represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists and DoesNotExist.\",\"type\":\"string\"},\"values\":{\"description\":\"values is an array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. This array is replaced during a strategic\\nmerge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"matchLabels\":{\"additionalProperties\":{\"type\":\"string\"},\"description\":\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\\nmap is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the\\noperator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\",\"type\":\"object\"}},\"type\":\"object\",\"x-kubernetes-map-type\":\"atomic\"},\"matchLabelKeys\":{\"description\":\"MatchLabelKeys is a set of pod label keys to select which pods will\\nbe taken into consideration. The keys are used to lookup values from the\\nincoming pod labels, those key-value labels are merged with 'labelSelector' as 'key in (value)'\\nto select the group of existing pods which pods will be taken into consideration\\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\\npod labels will be ignored. The default value is empty.\\nThe same key is forbidden to exist in both matchLabelKeys and labelSelector.\\nAlso, matchLabelKeys cannot be set when labelSelector isn't set.\\nThis is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"mismatchLabelKeys\":{\"description\":\"MismatchLabelKeys is a set of pod label keys to select which pods will\\nbe taken into consideration. The keys are used to lookup values from the\\nincoming pod labels, those key-value labels are merged with 'labelSelector' as 'key notin (value)'\\nto select the group of existing pods which pods will be taken into consideration\\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\\npod labels will be ignored. The default value is empty.\\nThe same key is forbidden to exist in both mismatchLabelKeys and labelSelector.\\nAlso, mismatchLabelKeys cannot be set when labelSelector isn't set.\\nThis is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"namespaceSelector\":{\"description\":\"A label query over the set of namespaces that the term applies to.\\nThe term is applied to the union of the namespaces selected by this field\\nand the ones listed in the namespaces field.\\nnull selector and null or empty namespaces list means \\\"this pod's namespace\\\".\\nAn empty selector ({}) matches all namespaces.\",\"properties\":{\"matchExpressions\":{\"description\":\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\",\"items\":{\"description\":\"A label selector requirement is a selector that contains values, a key, and an operator that\\nrelates the key and values.\",\"properties\":{\"key\":{\"description\":\"key is the label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"operator represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists and DoesNotExist.\",\"type\":\"string\"},\"values\":{\"description\":\"values is an array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. This array is replaced during a strategic\\nmerge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"matchLabels\":{\"additionalProperties\":{\"type\":\"string\"},\"description\":\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\\nmap is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the\\noperator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\",\"type\":\"object\"}},\"type\":\"object\",\"x-kubernetes-map-type\":\"atomic\"},\"namespaces\":{\"description\":\"namespaces specifies a static list of namespace names that the term applies to.\\nThe term is applied to the union of the namespaces listed in this field\\nand the ones selected by namespaceSelector.\\nnull or empty namespaces list and null namespaceSelector means \\\"this pod's namespace\\\".\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"topologyKey\":{\"description\":\"This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching\\nthe labelSelector in the specified namespaces, where co-located is defined as running on a node\\nwhose value of the label with key topologyKey matches that of any node on which any of the\\nselected pods is running.\\nEmpty topologyKey is not allowed.\",\"type\":\"string\"}},\"required\":[\"topologyKey\"],\"type\":\"object\"},\"weight\":{\"description\":\"weight associated with matching the corresponding podAffinityTerm,\\nin the range 1-100.\",\"format\":\"int32\",\"type\":\"integer\"}},\"required\":[\"podAffinityTerm\",\"weight\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"requiredDuringSchedulingIgnoredDuringExecution\":{\"description\":\"If the anti-affinity requirements specified by this field are not met at\\nscheduling time, the pod will not be scheduled onto the node.\\nIf the anti-affinity requirements specified by this field cease to be met\\nat some point during pod execution (e.g. due to a pod label update), the\\nsystem may or may not try to eventually evict the pod from its node.\\nWhen there are multiple elements, the lists of nodes corresponding to each\\npodAffinityTerm are intersected, i.e. all terms must be satisfied.\",\"items\":{\"description\":\"Defines a set of pods (namely those matching the labelSelector\\nrelative to the given namespace(s)) that this pod should be\\nco-located (affinity) or not co-located (anti-affinity) with,\\nwhere co-located is defined as running on a node whose value of\\nthe label with key \\u003ctopologyKey\\u003e matches that of any node on which\\na pod of the set of pods is running\",\"properties\":{\"labelSelector\":{\"description\":\"A label query over a set of resources, in this case pods.\\nIf it's null, this PodAffinityTerm matches with no Pods.\",\"properties\":{\"matchExpressions\":{\"description\":\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\",\"items\":{\"description\":\"A label selector requirement is a selector that contains values, a key, and an operator that\\nrelates the key and values.\",\"properties\":{\"key\":{\"description\":\"key is the label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"operator represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists and DoesNotExist.\",\"type\":\"string\"},\"values\":{\"description\":\"values is an array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. This array is replaced during a strategic\\nmerge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"matchLabels\":{\"additionalProperties\":{\"type\":\"string\"},\"description\":\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\\nmap is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the\\noperator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\",\"type\":\"object\"}},\"type\":\"object\",\"x-kubernetes-map-type\":\"atomic\"},\"matchLabelKeys\":{\"description\":\"MatchLabelKeys is a set of pod label keys to select which pods will\\nbe taken into consideration. The keys are used to lookup values from the\\nincoming pod labels, those key-value labels are merged with 'labelSelector' as 'key in (value)'\\nto select the group of existing pods which pods will be taken into consideration\\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\\npod labels will be ignored. The default value is empty.\\nThe same key is forbidden to exist in both matchLabelKeys and labelSelector.\\nAlso, matchLabelKeys cannot be set when labelSelector isn't set.\\nThis is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"mismatchLabelKeys\":{\"description\":\"MismatchLabelKeys is a set of pod label keys to select which pods will\\nbe taken into consideration. The keys are used to lookup values from the\\nincoming pod labels, those key-value labels are merged with 'labelSelector' as 'key notin (value)'\\nto select the group of existing pods which pods will be taken into consideration\\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\\npod labels will be ignored. The default value is empty.\\nThe same key is forbidden to exist in both mismatchLabelKeys and labelSelector.\\nAlso, mismatchLabelKeys cannot be set when labelSelector isn't set.\\nThis is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"namespaceSelector\":{\"description\":\"A label query over the set of namespaces that the term applies to.\\nThe term is applied to the union of the namespaces selected by this field\\nand the ones listed in the namespaces field.\\nnull selector and null or empty namespaces list means \\\"this pod's namespace\\\".\\nAn empty selector ({}) matches all namespaces.\",\"properties\":{\"matchExpressions\":{\"description\":\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\",\"items\":{\"description\":\"A label selector requirement is a selector that contains values, a key, and an operator that\\nrelates the key and values.\",\"properties\":{\"key\":{\"description\":\"key is the label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"operator represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists and DoesNotExist.\",\"type\":\"string\"},\"values\":{\"description\":\"values is an array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. This array is replaced during a strategic\\nmerge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"matchLabels\":{\"additionalProperties\":{\"type\":\"string\"},\"description\":\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\\nmap is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the\\noperator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\",\"type\":\"object\"}},\"type\":\"object\",\"x-kubernetes-map-type\":\"atomic\"},\"namespaces\":{\"description\":\"namespaces specifies a static list of namespace names that the term applies to.\\nThe term is applied to the union of the namespaces listed in this field\\nand the ones selected by namespaceSelector.\\nnull or empty namespaces list and null namespaceSelector means \\\"this pod's namespace\\\".\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"topologyKey\":{\"description\":\"This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching\\nthe labelSelector in the specified namespaces, where co-located is defined as running on a node\\nwhose value of the label with key topologyKey matches that of any node on which any of the\\nselected pods is running.\\nEmpty topologyKey is not allowed.\",\"type\":\"string\"}},\"required\":[\"topologyKey\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"type\":\"object\"}},\"type\":\"object\"},\"nodeSelector\":{\"additionalProperties\":{\"type\":\"string\"},\"description\":\"nodeSelector is the node selector applied to the relevant kind of pods\\nIt specifies a map of key-value pairs: for the pod to be eligible to run on a node,\\nthe node must have each of the indicated key-value pairs as labels\\n(it can have additional labels as well).\\nSee https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#nodeselector\",\"type\":\"object\"},\"tolerations\":{\"description\":\"tolerations is a list of tolerations applied to the relevant kind of pods\\nSee https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/ for more info.\\nThese are additional tolerations other than default ones.\",\"items\":{\"description\":\"The pod this Toleration is attached to tolerates any taint that matches\\nthe triple \\u003ckey,value,effect\\u003e using the matching operator \\u003coperator\\u003e.\",\"properties\":{\"effect\":{\"description\":\"Effect indicates the taint effect to match. Empty means match all taint effects.\\nWhen specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.\",\"type\":\"string\"},\"key\":{\"description\":\"Key is the taint key that the toleration applies to. Empty means match all taint keys.\\nIf the key is empty, operator must be Exists; this combination means to match all values and all keys.\",\"type\":\"string\"},\"operator\":{\"description\":\"Operator represents a key's relationship to the value.\\nValid operators are Exists and Equal. Defaults to Equal.\\nExists is equivalent to wildcard for value, so that a pod can\\ntolerate all taints of a particular category.\",\"type\":\"string\"},\"tolerationSeconds\":{\"description\":\"TolerationSeconds represents the period of time the toleration (which must be\\nof effect NoExecute, otherwise this field is ignored) tolerates the taint. By default,\\nit is not set, which means tolerate the taint forever (do not evict). Zero and\\nnegative values will be treated as 0 (evict immediately) by the system.\",\"format\":\"int64\",\"type\":\"integer\"},\"value\":{\"description\":\"Value is the taint value the toleration matches to.\\nIf the operator is Exists, the value should be empty, otherwise just a regular string.\",\"type\":\"string\"}},\"type\":\"object\"},\"type\":\"array\"}},\"type\":\"object\"},\"replicas\":{\"description\":\"replicas indicates how many replicas should be created for each KubeVirt infrastructure\\ncomponent (like virt-api or virt-controller). Defaults to 2.\\nWARNING: this is an advanced feature that prevents auto-scaling for core kubevirt components. Please use with caution!\",\"type\":\"integer\"}},\"type\":\"object\"},\"monitorAccount\":{\"description\":\"The name of the Prometheus service account that needs read-access to KubeVirt endpoints\\nDefaults to prometheus-k8s\",\"type\":\"string\"},\"monitorNamespace\":{\"description\":\"The namespace Prometheus is deployed in\\nDefaults to openshift-monitor\",\"type\":\"string\"},\"productComponent\":{\"description\":\"Designate the apps.kubevirt.io/component label for KubeVirt components.\\nUseful if KubeVirt is included as part of a product.\\nIf ProductComponent is not specified, the component label default value is kubevirt.\",\"type\":\"string\"},\"productName\":{\"description\":\"Designate the apps.kubevirt.io/part-of label for KubeVirt components.\\nUseful if KubeVirt is included as part of a product.\\nIf ProductName is not specified, the part-of label will be omitted.\",\"type\":\"string\"},\"productVersion\":{\"description\":\"Designate the apps.kubevirt.io/version label for KubeVirt components.\\nUseful if KubeVirt is included as part of a product.\\nIf ProductVersion is not specified, KubeVirt's version will be used.\",\"type\":\"string\"},\"serviceMonitorNamespace\":{\"description\":\"The namespace the service monitor will be deployed\\n When ServiceMonitorNamespace is set, then we'll install the service monitor object in that namespace\\notherwise we will use the monitoring namespace.\",\"type\":\"string\"},\"synchronizationPort\":{\"description\":\"Specify the port to listen on for VMI status synchronization traffic. Default is 9185\",\"type\":\"string\"},\"uninstallStrategy\":{\"description\":\"Specifies if kubevirt can be deleted if workloads are still present.\\nThis is mainly a precaution to avoid accidental data loss\",\"type\":\"string\"},\"workloadUpdateStrategy\":{\"description\":\"WorkloadUpdateStrategy defines at the cluster level how to handle\\nautomated workload updates\",\"properties\":{\"batchEvictionInterval\":{\"description\":\"BatchEvictionInterval Represents the interval to wait before issuing the next\\nbatch of shutdowns\\n\\nDefaults to 1 minute\",\"type\":\"string\"},\"batchEvictionSize\":{\"description\":\"BatchEvictionSize Represents the number of VMIs that can be forced updated per\\nthe BatchShutdownInteral interval\\n\\nDefaults to 10\",\"type\":\"integer\"},\"workloadUpdateMethods\":{\"description\":\"WorkloadUpdateMethods defines the methods that can be used to disrupt workloads\\nduring automated workload updates.\\nWhen multiple methods are present, the least disruptive method takes\\nprecedence over more disruptive methods. For example if both LiveMigrate and Shutdown\\nmethods are listed, only VMs which are not live migratable will be restarted/shutdown\\n\\nAn empty list defaults to no automated workload updating\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"type\":\"object\"},\"workloads\":{\"description\":\"selectors and tolerations that should apply to KubeVirt workloads\",\"properties\":{\"nodePlacement\":{\"description\":\"nodePlacement describes scheduling configuration for specific\\nKubeVirt components\",\"properties\":{\"affinity\":{\"description\":\"affinity enables pod affinity/anti-affinity placement expanding the types of constraints\\nthat can be expressed with nodeSelector.\\naffinity is going to be applied to the relevant kind of pods in parallel with nodeSelector\\nSee https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#affinity-and-anti-affinity\",\"properties\":{\"nodeAffinity\":{\"description\":\"Describes node affinity scheduling rules for the pod.\",\"properties\":{\"preferredDuringSchedulingIgnoredDuringExecution\":{\"description\":\"The scheduler will prefer to schedule pods to nodes that satisfy\\nthe affinity expressions specified by this field, but it may choose\\na node that violates one or more of the expressions. The node that is\\nmost preferred is the one with the greatest sum of weights, i.e.\\nfor each node that meets all of the scheduling requirements (resource\\nrequest, requiredDuringScheduling affinity expressions, etc.),\\ncompute a sum by iterating through the elements of this field and adding\\n\\\"weight\\\" to the sum if the node matches the corresponding matchExpressions; the\\nnode(s) with the highest sum are the most preferred.\",\"items\":{\"description\":\"An empty preferred scheduling term matches all objects with implicit weight 0\\n(i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).\",\"properties\":{\"preference\":{\"description\":\"A node selector term, associated with the corresponding weight.\",\"properties\":{\"matchExpressions\":{\"description\":\"A list of node selector requirements by node's labels.\",\"items\":{\"description\":\"A node selector requirement is a selector that contains values, a key, and an operator\\nthat relates the key and values.\",\"properties\":{\"key\":{\"description\":\"The label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"Represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.\",\"type\":\"string\"},\"values\":{\"description\":\"An array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. If the operator is Gt or Lt, the values\\narray must have a single element, which will be interpreted as an integer.\\nThis array is replaced during a strategic merge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"matchFields\":{\"description\":\"A list of node selector requirements by node's fields.\",\"items\":{\"description\":\"A node selector requirement is a selector that contains values, a key, and an operator\\nthat relates the key and values.\",\"properties\":{\"key\":{\"description\":\"The label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"Represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.\",\"type\":\"string\"},\"values\":{\"description\":\"An array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. If the operator is Gt or Lt, the values\\narray must have a single element, which will be interpreted as an integer.\\nThis array is replaced during a strategic merge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"type\":\"object\",\"x-kubernetes-map-type\":\"atomic\"},\"weight\":{\"description\":\"Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.\",\"format\":\"int32\",\"type\":\"integer\"}},\"required\":[\"preference\",\"weight\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"requiredDuringSchedulingIgnoredDuringExecution\":{\"description\":\"If the affinity requirements specified by this field are not met at\\nscheduling time, the pod will not be scheduled onto the node.\\nIf the affinity requirements specified by this field cease to be met\\nat some point during pod execution (e.g. due to an update), the system\\nmay or may not try to eventually evict the pod from its node.\",\"properties\":{\"nodeSelectorTerms\":{\"description\":\"Required. A list of node selector terms. The terms are ORed.\",\"items\":{\"description\":\"A null or empty node selector term matches no objects. The requirements of\\nthem are ANDed.\\nThe TopologySelectorTerm type implements a subset of the NodeSelectorTerm.\",\"properties\":{\"matchExpressions\":{\"description\":\"A list of node selector requirements by node's labels.\",\"items\":{\"description\":\"A node selector requirement is a selector that contains values, a key, and an operator\\nthat relates the key and values.\",\"properties\":{\"key\":{\"description\":\"The label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"Represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.\",\"type\":\"string\"},\"values\":{\"description\":\"An array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. If the operator is Gt or Lt, the values\\narray must have a single element, which will be interpreted as an integer.\\nThis array is replaced during a strategic merge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"matchFields\":{\"description\":\"A list of node selector requirements by node's fields.\",\"items\":{\"description\":\"A node selector requirement is a selector that contains values, a key, and an operator\\nthat relates the key and values.\",\"properties\":{\"key\":{\"description\":\"The label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"Represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.\",\"type\":\"string\"},\"values\":{\"description\":\"An array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. If the operator is Gt or Lt, the values\\narray must have a single element, which will be interpreted as an integer.\\nThis array is replaced during a strategic merge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"type\":\"object\",\"x-kubernetes-map-type\":\"atomic\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"nodeSelectorTerms\"],\"type\":\"object\",\"x-kubernetes-map-type\":\"atomic\"}},\"type\":\"object\"},\"podAffinity\":{\"description\":\"Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).\",\"properties\":{\"preferredDuringSchedulingIgnoredDuringExecution\":{\"description\":\"The scheduler will prefer to schedule pods to nodes that satisfy\\nthe affinity expressions specified by this field, but it may choose\\na node that violates one or more of the expressions. The node that is\\nmost preferred is the one with the greatest sum of weights, i.e.\\nfor each node that meets all of the scheduling requirements (resource\\nrequest, requiredDuringScheduling affinity expressions, etc.),\\ncompute a sum by iterating through the elements of this field and adding\\n\\\"weight\\\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the\\nnode(s) with the highest sum are the most preferred.\",\"items\":{\"description\":\"The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)\",\"properties\":{\"podAffinityTerm\":{\"description\":\"Required. A pod affinity term, associated with the corresponding weight.\",\"properties\":{\"labelSelector\":{\"description\":\"A label query over a set of resources, in this case pods.\\nIf it's null, this PodAffinityTerm matches with no Pods.\",\"properties\":{\"matchExpressions\":{\"description\":\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\",\"items\":{\"description\":\"A label selector requirement is a selector that contains values, a key, and an operator that\\nrelates the key and values.\",\"properties\":{\"key\":{\"description\":\"key is the label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"operator represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists and DoesNotExist.\",\"type\":\"string\"},\"values\":{\"description\":\"values is an array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. This array is replaced during a strategic\\nmerge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"matchLabels\":{\"additionalProperties\":{\"type\":\"string\"},\"description\":\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\\nmap is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the\\noperator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\",\"type\":\"object\"}},\"type\":\"object\",\"x-kubernetes-map-type\":\"atomic\"},\"matchLabelKeys\":{\"description\":\"MatchLabelKeys is a set of pod label keys to select which pods will\\nbe taken into consideration. The keys are used to lookup values from the\\nincoming pod labels, those key-value labels are merged with 'labelSelector' as 'key in (value)'\\nto select the group of existing pods which pods will be taken into consideration\\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\\npod labels will be ignored. The default value is empty.\\nThe same key is forbidden to exist in both matchLabelKeys and labelSelector.\\nAlso, matchLabelKeys cannot be set when labelSelector isn't set.\\nThis is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"mismatchLabelKeys\":{\"description\":\"MismatchLabelKeys is a set of pod label keys to select which pods will\\nbe taken into consideration. The keys are used to lookup values from the\\nincoming pod labels, those key-value labels are merged with 'labelSelector' as 'key notin (value)'\\nto select the group of existing pods which pods will be taken into consideration\\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\\npod labels will be ignored. The default value is empty.\\nThe same key is forbidden to exist in both mismatchLabelKeys and labelSelector.\\nAlso, mismatchLabelKeys cannot be set when labelSelector isn't set.\\nThis is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"namespaceSelector\":{\"description\":\"A label query over the set of namespaces that the term applies to.\\nThe term is applied to the union of the namespaces selected by this field\\nand the ones listed in the namespaces field.\\nnull selector and null or empty namespaces list means \\\"this pod's namespace\\\".\\nAn empty selector ({}) matches all namespaces.\",\"properties\":{\"matchExpressions\":{\"description\":\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\",\"items\":{\"description\":\"A label selector requirement is a selector that contains values, a key, and an operator that\\nrelates the key and values.\",\"properties\":{\"key\":{\"description\":\"key is the label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"operator represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists and DoesNotExist.\",\"type\":\"string\"},\"values\":{\"description\":\"values is an array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. This array is replaced during a strategic\\nmerge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"matchLabels\":{\"additionalProperties\":{\"type\":\"string\"},\"description\":\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\\nmap is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the\\noperator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\",\"type\":\"object\"}},\"type\":\"object\",\"x-kubernetes-map-type\":\"atomic\"},\"namespaces\":{\"description\":\"namespaces specifies a static list of namespace names that the term applies to.\\nThe term is applied to the union of the namespaces listed in this field\\nand the ones selected by namespaceSelector.\\nnull or empty namespaces list and null namespaceSelector means \\\"this pod's namespace\\\".\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"topologyKey\":{\"description\":\"This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching\\nthe labelSelector in the specified namespaces, where co-located is defined as running on a node\\nwhose value of the label with key topologyKey matches that of any node on which any of the\\nselected pods is running.\\nEmpty topologyKey is not allowed.\",\"type\":\"string\"}},\"required\":[\"topologyKey\"],\"type\":\"object\"},\"weight\":{\"description\":\"weight associated with matching the corresponding podAffinityTerm,\\nin the range 1-100.\",\"format\":\"int32\",\"type\":\"integer\"}},\"required\":[\"podAffinityTerm\",\"weight\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"requiredDuringSchedulingIgnoredDuringExecution\":{\"description\":\"If the affinity requirements specified by this field are not met at\\nscheduling time, the pod will not be scheduled onto the node.\\nIf the affinity requirements specified by this field cease to be met\\nat some point during pod execution (e.g. due to a pod label update), the\\nsystem may or may not try to eventually evict the pod from its node.\\nWhen there are multiple elements, the lists of nodes corresponding to each\\npodAffinityTerm are intersected, i.e. all terms must be satisfied.\",\"items\":{\"description\":\"Defines a set of pods (namely those matching the labelSelector\\nrelative to the given namespace(s)) that this pod should be\\nco-located (affinity) or not co-located (anti-affinity) with,\\nwhere co-located is defined as running on a node whose value of\\nthe label with key \\u003ctopologyKey\\u003e matches that of any node on which\\na pod of the set of pods is running\",\"properties\":{\"labelSelector\":{\"description\":\"A label query over a set of resources, in this case pods.\\nIf it's null, this PodAffinityTerm matches with no Pods.\",\"properties\":{\"matchExpressions\":{\"description\":\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\",\"items\":{\"description\":\"A label selector requirement is a selector that contains values, a key, and an operator that\\nrelates the key and values.\",\"properties\":{\"key\":{\"description\":\"key is the label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"operator represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists and DoesNotExist.\",\"type\":\"string\"},\"values\":{\"description\":\"values is an array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. This array is replaced during a strategic\\nmerge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"matchLabels\":{\"additionalProperties\":{\"type\":\"string\"},\"description\":\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\\nmap is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the\\noperator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\",\"type\":\"object\"}},\"type\":\"object\",\"x-kubernetes-map-type\":\"atomic\"},\"matchLabelKeys\":{\"description\":\"MatchLabelKeys is a set of pod label keys to select which pods will\\nbe taken into consideration. The keys are used to lookup values from the\\nincoming pod labels, those key-value labels are merged with 'labelSelector' as 'key in (value)'\\nto select the group of existing pods which pods will be taken into consideration\\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\\npod labels will be ignored. The default value is empty.\\nThe same key is forbidden to exist in both matchLabelKeys and labelSelector.\\nAlso, matchLabelKeys cannot be set when labelSelector isn't set.\\nThis is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"mismatchLabelKeys\":{\"description\":\"MismatchLabelKeys is a set of pod label keys to select which pods will\\nbe taken into consideration. The keys are used to lookup values from the\\nincoming pod labels, those key-value labels are merged with 'labelSelector' as 'key notin (value)'\\nto select the group of existing pods which pods will be taken into consideration\\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\\npod labels will be ignored. The default value is empty.\\nThe same key is forbidden to exist in both mismatchLabelKeys and labelSelector.\\nAlso, mismatchLabelKeys cannot be set when labelSelector isn't set.\\nThis is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"namespaceSelector\":{\"description\":\"A label query over the set of namespaces that the term applies to.\\nThe term is applied to the union of the namespaces selected by this field\\nand the ones listed in the namespaces field.\\nnull selector and null or empty namespaces list means \\\"this pod's namespace\\\".\\nAn empty selector ({}) matches all namespaces.\",\"properties\":{\"matchExpressions\":{\"description\":\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\",\"items\":{\"description\":\"A label selector requirement is a selector that contains values, a key, and an operator that\\nrelates the key and values.\",\"properties\":{\"key\":{\"description\":\"key is the label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"operator represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists and DoesNotExist.\",\"type\":\"string\"},\"values\":{\"description\":\"values is an array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. This array is replaced during a strategic\\nmerge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"matchLabels\":{\"additionalProperties\":{\"type\":\"string\"},\"description\":\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\\nmap is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the\\noperator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\",\"type\":\"object\"}},\"type\":\"object\",\"x-kubernetes-map-type\":\"atomic\"},\"namespaces\":{\"description\":\"namespaces specifies a static list of namespace names that the term applies to.\\nThe term is applied to the union of the namespaces listed in this field\\nand the ones selected by namespaceSelector.\\nnull or empty namespaces list and null namespaceSelector means \\\"this pod's namespace\\\".\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"topologyKey\":{\"description\":\"This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching\\nthe labelSelector in the specified namespaces, where co-located is defined as running on a node\\nwhose value of the label with key topologyKey matches that of any node on which any of the\\nselected pods is running.\\nEmpty topologyKey is not allowed.\",\"type\":\"string\"}},\"required\":[\"topologyKey\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"type\":\"object\"},\"podAntiAffinity\":{\"description\":\"Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).\",\"properties\":{\"preferredDuringSchedulingIgnoredDuringExecution\":{\"description\":\"The scheduler will prefer to schedule pods to nodes that satisfy\\nthe anti-affinity expressions specified by this field, but it may choose\\na node that violates one or more of the expressions. The node that is\\nmost preferred is the one with the greatest sum of weights, i.e.\\nfor each node that meets all of the scheduling requirements (resource\\nrequest, requiredDuringScheduling anti-affinity expressions, etc.),\\ncompute a sum by iterating through the elements of this field and adding\\n\\\"weight\\\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the\\nnode(s) with the highest sum are the most preferred.\",\"items\":{\"description\":\"The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)\",\"properties\":{\"podAffinityTerm\":{\"description\":\"Required. A pod affinity term, associated with the corresponding weight.\",\"properties\":{\"labelSelector\":{\"description\":\"A label query over a set of resources, in this case pods.\\nIf it's null, this PodAffinityTerm matches with no Pods.\",\"properties\":{\"matchExpressions\":{\"description\":\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\",\"items\":{\"description\":\"A label selector requirement is a selector that contains values, a key, and an operator that\\nrelates the key and values.\",\"properties\":{\"key\":{\"description\":\"key is the label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"operator represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists and DoesNotExist.\",\"type\":\"string\"},\"values\":{\"description\":\"values is an array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. This array is replaced during a strategic\\nmerge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"matchLabels\":{\"additionalProperties\":{\"type\":\"string\"},\"description\":\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\\nmap is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the\\noperator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\",\"type\":\"object\"}},\"type\":\"object\",\"x-kubernetes-map-type\":\"atomic\"},\"matchLabelKeys\":{\"description\":\"MatchLabelKeys is a set of pod label keys to select which pods will\\nbe taken into consideration. The keys are used to lookup values from the\\nincoming pod labels, those key-value labels are merged with 'labelSelector' as 'key in (value)'\\nto select the group of existing pods which pods will be taken into consideration\\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\\npod labels will be ignored. The default value is empty.\\nThe same key is forbidden to exist in both matchLabelKeys and labelSelector.\\nAlso, matchLabelKeys cannot be set when labelSelector isn't set.\\nThis is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"mismatchLabelKeys\":{\"description\":\"MismatchLabelKeys is a set of pod label keys to select which pods will\\nbe taken into consideration. The keys are used to lookup values from the\\nincoming pod labels, those key-value labels are merged with 'labelSelector' as 'key notin (value)'\\nto select the group of existing pods which pods will be taken into consideration\\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\\npod labels will be ignored. The default value is empty.\\nThe same key is forbidden to exist in both mismatchLabelKeys and labelSelector.\\nAlso, mismatchLabelKeys cannot be set when labelSelector isn't set.\\nThis is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"namespaceSelector\":{\"description\":\"A label query over the set of namespaces that the term applies to.\\nThe term is applied to the union of the namespaces selected by this field\\nand the ones listed in the namespaces field.\\nnull selector and null or empty namespaces list means \\\"this pod's namespace\\\".\\nAn empty selector ({}) matches all namespaces.\",\"properties\":{\"matchExpressions\":{\"description\":\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\",\"items\":{\"description\":\"A label selector requirement is a selector that contains values, a key, and an operator that\\nrelates the key and values.\",\"properties\":{\"key\":{\"description\":\"key is the label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"operator represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists and DoesNotExist.\",\"type\":\"string\"},\"values\":{\"description\":\"values is an array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. This array is replaced during a strategic\\nmerge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"matchLabels\":{\"additionalProperties\":{\"type\":\"string\"},\"description\":\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\\nmap is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the\\noperator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\",\"type\":\"object\"}},\"type\":\"object\",\"x-kubernetes-map-type\":\"atomic\"},\"namespaces\":{\"description\":\"namespaces specifies a static list of namespace names that the term applies to.\\nThe term is applied to the union of the namespaces listed in this field\\nand the ones selected by namespaceSelector.\\nnull or empty namespaces list and null namespaceSelector means \\\"this pod's namespace\\\".\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"topologyKey\":{\"description\":\"This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching\\nthe labelSelector in the specified namespaces, where co-located is defined as running on a node\\nwhose value of the label with key topologyKey matches that of any node on which any of the\\nselected pods is running.\\nEmpty topologyKey is not allowed.\",\"type\":\"string\"}},\"required\":[\"topologyKey\"],\"type\":\"object\"},\"weight\":{\"description\":\"weight associated with matching the corresponding podAffinityTerm,\\nin the range 1-100.\",\"format\":\"int32\",\"type\":\"integer\"}},\"required\":[\"podAffinityTerm\",\"weight\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"requiredDuringSchedulingIgnoredDuringExecution\":{\"description\":\"If the anti-affinity requirements specified by this field are not met at\\nscheduling time, the pod will not be scheduled onto the node.\\nIf the anti-affinity requirements specified by this field cease to be met\\nat some point during pod execution (e.g. due to a pod label update), the\\nsystem may or may not try to eventually evict the pod from its node.\\nWhen there are multiple elements, the lists of nodes corresponding to each\\npodAffinityTerm are intersected, i.e. all terms must be satisfied.\",\"items\":{\"description\":\"Defines a set of pods (namely those matching the labelSelector\\nrelative to the given namespace(s)) that this pod should be\\nco-located (affinity) or not co-located (anti-affinity) with,\\nwhere co-located is defined as running on a node whose value of\\nthe label with key \\u003ctopologyKey\\u003e matches that of any node on which\\na pod of the set of pods is running\",\"properties\":{\"labelSelector\":{\"description\":\"A label query over a set of resources, in this case pods.\\nIf it's null, this PodAffinityTerm matches with no Pods.\",\"properties\":{\"matchExpressions\":{\"description\":\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\",\"items\":{\"description\":\"A label selector requirement is a selector that contains values, a key, and an operator that\\nrelates the key and values.\",\"properties\":{\"key\":{\"description\":\"key is the label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"operator represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists and DoesNotExist.\",\"type\":\"string\"},\"values\":{\"description\":\"values is an array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. This array is replaced during a strategic\\nmerge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"matchLabels\":{\"additionalProperties\":{\"type\":\"string\"},\"description\":\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\\nmap is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the\\noperator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\",\"type\":\"object\"}},\"type\":\"object\",\"x-kubernetes-map-type\":\"atomic\"},\"matchLabelKeys\":{\"description\":\"MatchLabelKeys is a set of pod label keys to select which pods will\\nbe taken into consideration. The keys are used to lookup values from the\\nincoming pod labels, those key-value labels are merged with 'labelSelector' as 'key in (value)'\\nto select the group of existing pods which pods will be taken into consideration\\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\\npod labels will be ignored. The default value is empty.\\nThe same key is forbidden to exist in both matchLabelKeys and labelSelector.\\nAlso, matchLabelKeys cannot be set when labelSelector isn't set.\\nThis is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"mismatchLabelKeys\":{\"description\":\"MismatchLabelKeys is a set of pod label keys to select which pods will\\nbe taken into consideration. The keys are used to lookup values from the\\nincoming pod labels, those key-value labels are merged with 'labelSelector' as 'key notin (value)'\\nto select the group of existing pods which pods will be taken into consideration\\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\\npod labels will be ignored. The default value is empty.\\nThe same key is forbidden to exist in both mismatchLabelKeys and labelSelector.\\nAlso, mismatchLabelKeys cannot be set when labelSelector isn't set.\\nThis is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"namespaceSelector\":{\"description\":\"A label query over the set of namespaces that the term applies to.\\nThe term is applied to the union of the namespaces selected by this field\\nand the ones listed in the namespaces field.\\nnull selector and null or empty namespaces list means \\\"this pod's namespace\\\".\\nAn empty selector ({}) matches all namespaces.\",\"properties\":{\"matchExpressions\":{\"description\":\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\",\"items\":{\"description\":\"A label selector requirement is a selector that contains values, a key, and an operator that\\nrelates the key and values.\",\"properties\":{\"key\":{\"description\":\"key is the label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"operator represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists and DoesNotExist.\",\"type\":\"string\"},\"values\":{\"description\":\"values is an array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. This array is replaced during a strategic\\nmerge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"matchLabels\":{\"additionalProperties\":{\"type\":\"string\"},\"description\":\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\\nmap is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the\\noperator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\",\"type\":\"object\"}},\"type\":\"object\",\"x-kubernetes-map-type\":\"atomic\"},\"namespaces\":{\"description\":\"namespaces specifies a static list of namespace names that the term applies to.\\nThe term is applied to the union of the namespaces listed in this field\\nand the ones selected by namespaceSelector.\\nnull or empty namespaces list and null namespaceSelector means \\\"this pod's namespace\\\".\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"topologyKey\":{\"description\":\"This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching\\nthe labelSelector in the specified namespaces, where co-located is defined as running on a node\\nwhose value of the label with key topologyKey matches that of any node on which any of the\\nselected pods is running.\\nEmpty topologyKey is not allowed.\",\"type\":\"string\"}},\"required\":[\"topologyKey\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"type\":\"object\"}},\"type\":\"object\"},\"nodeSelector\":{\"additionalProperties\":{\"type\":\"string\"},\"description\":\"nodeSelector is the node selector applied to the relevant kind of pods\\nIt specifies a map of key-value pairs: for the pod to be eligible to run on a node,\\nthe node must have each of the indicated key-value pairs as labels\\n(it can have additional labels as well).\\nSee https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#nodeselector\",\"type\":\"object\"},\"tolerations\":{\"description\":\"tolerations is a list of tolerations applied to the relevant kind of pods\\nSee https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/ for more info.\\nThese are additional tolerations other than default ones.\",\"items\":{\"description\":\"The pod this Toleration is attached to tolerates any taint that matches\\nthe triple \\u003ckey,value,effect\\u003e using the matching operator \\u003coperator\\u003e.\",\"properties\":{\"effect\":{\"description\":\"Effect indicates the taint effect to match. Empty means match all taint effects.\\nWhen specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.\",\"type\":\"string\"},\"key\":{\"description\":\"Key is the taint key that the toleration applies to. Empty means match all taint keys.\\nIf the key is empty, operator must be Exists; this combination means to match all values and all keys.\",\"type\":\"string\"},\"operator\":{\"description\":\"Operator represents a key's relationship to the value.\\nValid operators are Exists and Equal. Defaults to Equal.\\nExists is equivalent to wildcard for value, so that a pod can\\ntolerate all taints of a particular category.\",\"type\":\"string\"},\"tolerationSeconds\":{\"description\":\"TolerationSeconds represents the period of time the toleration (which must be\\nof effect NoExecute, otherwise this field is ignored) tolerates the taint. By default,\\nit is not set, which means tolerate the taint forever (do not evict). Zero and\\nnegative values will be treated as 0 (evict immediately) by the system.\",\"format\":\"int64\",\"type\":\"integer\"},\"value\":{\"description\":\"Value is the taint value the toleration matches to.\\nIf the operator is Exists, the value should be empty, otherwise just a regular string.\",\"type\":\"string\"}},\"type\":\"object\"},\"type\":\"array\"}},\"type\":\"object\"},\"replicas\":{\"description\":\"replicas indicates how many replicas should be created for each KubeVirt infrastructure\\ncomponent (like virt-api or virt-controller). Defaults to 2.\\nWARNING: this is an advanced feature that prevents auto-scaling for core kubevirt components. Please use with caution!\",\"type\":\"integer\"}},\"type\":\"object\"}},\"type\":\"object\"},\"status\":{\"description\":\"KubeVirtStatus represents information pertaining to a KubeVirt deployment.\",\"properties\":{\"conditions\":{\"items\":{\"description\":\"KubeVirtCondition represents a condition of a KubeVirt deployment\",\"properties\":{\"lastProbeTime\":{\"format\":\"date-time\",\"nullable\":true,\"type\":\"string\"},\"lastTransitionTime\":{\"format\":\"date-time\",\"nullable\":true,\"type\":\"string\"},\"message\":{\"type\":\"string\"},\"reason\":{\"type\":\"string\"},\"status\":{\"type\":\"string\"},\"type\":{\"type\":\"string\"}},\"required\":[\"status\",\"type\"],\"type\":\"object\"},\"type\":\"array\"},\"defaultArchitecture\":{\"type\":\"string\"},\"generations\":{\"items\":{\"description\":\"GenerationStatus keeps track of the generation for a given resource so that decisions about forced updates can be made.\",\"properties\":{\"group\":{\"description\":\"group is the group of the thing you're tracking\",\"type\":\"string\"},\"hash\":{\"description\":\"hash is an optional field set for resources without generation that are content sensitive like secrets and configmaps\",\"type\":\"string\"},\"lastGeneration\":{\"description\":\"lastGeneration is the last generation of the workload controller involved\",\"format\":\"int64\",\"type\":\"integer\"},\"name\":{\"description\":\"name is the name of the thing you're tracking\",\"type\":\"string\"},\"namespace\":{\"description\":\"namespace is where the thing you're tracking is\",\"type\":\"string\"},\"resource\":{\"description\":\"resource is the resource type of the thing you're tracking\",\"type\":\"string\"}},\"required\":[\"group\",\"lastGeneration\",\"name\",\"resource\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"observedDeploymentConfig\":{\"type\":\"string\"},\"observedDeploymentID\":{\"type\":\"string\"},\"observedGeneration\":{\"format\":\"int64\",\"type\":\"integer\"},\"observedKubeVirtRegistry\":{\"type\":\"string\"},\"observedKubeVirtVersion\":{\"type\":\"string\"},\"operatorVersion\":{\"type\":\"string\"},\"outdatedVirtualMachineInstanceWorkloads\":{\"type\":\"integer\"},\"phase\":{\"description\":\"KubeVirtPhase is a label for the phase of a KubeVirt deployment at the current time.\",\"type\":\"string\"},\"synchronizationAddresses\":{\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"targetDeploymentConfig\":{\"type\":\"string\"},\"targetDeploymentID\":{\"type\":\"string\"},\"targetKubeVirtRegistry\":{\"type\":\"string\"},\"targetKubeVirtVersion\":{\"type\":\"string\"}},\"type\":\"object\"}},\"required\":[\"spec\"],\"type\":\"object\"}},\"served\":true,\"storage\":true,\"subresources\":{\"status\":{}}},{\"additionalPrinterColumns\":[{\"jsonPath\":\".metadata.creationTimestamp\",\"name\":\"Age\",\"type\":\"date\"},{\"jsonPath\":\".status.phase\",\"name\":\"Phase\",\"type\":\"string\"}],\"deprecated\":true,\"deprecationWarning\":\"kubevirt.io/v1alpha3 is now deprecated and will be removed in a future release.\",\"name\":\"v1alpha3\",\"schema\":{\"openAPIV3Schema\":{\"description\":\"KubeVirt represents the object deploying all KubeVirt resources\",\"properties\":{\"apiVersion\":{\"description\":\"APIVersion defines the versioned schema of this representation of an object.\\nServers should convert recognized schemas to the latest internal value, and\\nmay reject unrecognized values.\\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources\",\"type\":\"string\"},\"kind\":{\"description\":\"Kind is a string value representing the REST resource this object represents.\\nServers may infer this from the endpoint the client submits requests to.\\nCannot be updated.\\nIn CamelCase.\\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\",\"type\":\"string\"},\"metadata\":{\"type\":\"object\"},\"spec\":{\"properties\":{\"certificateRotateStrategy\":{\"properties\":{\"selfSigned\":{\"properties\":{\"ca\":{\"description\":\"CA configuration\\nCA certs are kept in the CA bundle as long as they are valid\",\"properties\":{\"duration\":{\"description\":\"The requested 'duration' (i.e. lifetime) of the Certificate.\",\"type\":\"string\"},\"renewBefore\":{\"description\":\"The amount of time before the currently issued certificate's \\\"notAfter\\\"\\ntime that we will begin to attempt to renew the certificate.\",\"type\":\"string\"}},\"type\":\"object\"},\"caOverlapInterval\":{\"description\":\"Deprecated. Use CA.Duration and CA.RenewBefore instead\",\"type\":\"string\"},\"caRotateInterval\":{\"description\":\"Deprecated. Use CA.Duration instead\",\"type\":\"string\"},\"certRotateInterval\":{\"description\":\"Deprecated. Use Server.Duration instead\",\"type\":\"string\"},\"server\":{\"description\":\"Server configuration\\nCerts are rotated and discarded\",\"properties\":{\"duration\":{\"description\":\"The requested 'duration' (i.e. lifetime) of the Certificate.\",\"type\":\"string\"},\"renewBefore\":{\"description\":\"The amount of time before the currently issued certificate's \\\"notAfter\\\"\\ntime that we will begin to attempt to renew the certificate.\",\"type\":\"string\"}},\"type\":\"object\"}},\"type\":\"object\"}},\"type\":\"object\"},\"configuration\":{\"description\":\"holds kubevirt configurations.\\nsame as the virt-configMap\",\"properties\":{\"additionalGuestMemoryOverheadRatio\":{\"description\":\"AdditionalGuestMemoryOverheadRatio can be used to increase the virtualization infrastructure\\noverhead. This is useful, since the calculation of this overhead is not accurate and cannot\\nbe entirely known in advance. The ratio that is being set determines by which factor to increase\\nthe overhead calculated by Kubevirt. A higher ratio means that the VMs would be less compromised\\nby node pressures, but would mean that fewer VMs could be scheduled to a node.\\nIf not set, the default is 1.\",\"type\":\"string\"},\"apiConfiguration\":{\"description\":\"ReloadableComponentConfiguration holds all generic k8s configuration options which can\\nbe reloaded by components without requiring a restart.\",\"properties\":{\"restClient\":{\"description\":\"RestClient can be used to tune certain aspects of the k8s client in use.\",\"properties\":{\"rateLimiter\":{\"description\":\"RateLimiter allows selecting and configuring different rate limiters for the k8s client.\",\"properties\":{\"tokenBucketRateLimiter\":{\"properties\":{\"burst\":{\"description\":\"Maximum burst for throttle.\\nIf it's zero, the component default will be used\",\"type\":\"integer\"},\"qps\":{\"description\":\"QPS indicates the maximum QPS to the apiserver from this client.\\nIf it's zero, the component default will be used\",\"type\":\"number\"}},\"required\":[\"burst\",\"qps\"],\"type\":\"object\"}},\"type\":\"object\"}},\"type\":\"object\"}},\"type\":\"object\"},\"architectureConfiguration\":{\"properties\":{\"amd64\":{\"properties\":{\"emulatedMachines\":{\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"machineType\":{\"type\":\"string\"},\"ovmfPath\":{\"type\":\"string\"}},\"type\":\"object\"},\"arm64\":{\"properties\":{\"emulatedMachines\":{\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"machineType\":{\"type\":\"string\"},\"ovmfPath\":{\"type\":\"string\"}},\"type\":\"object\"},\"defaultArchitecture\":{\"type\":\"string\"},\"ppc64le\":{\"properties\":{\"emulatedMachines\":{\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"machineType\":{\"type\":\"string\"},\"ovmfPath\":{\"type\":\"string\"}},\"type\":\"object\"}},\"type\":\"object\"},\"autoCPULimitNamespaceLabelSelector\":{\"description\":\"When set, AutoCPULimitNamespaceLabelSelector will set a CPU limit on virt-launcher for VMIs running inside\\nnamespaces that match the label selector.\\nThe CPU limit will equal the number of requested vCPUs.\\nThis setting does not apply to VMIs with dedicated CPUs.\",\"properties\":{\"matchExpressions\":{\"description\":\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\",\"items\":{\"description\":\"A label selector requirement is a selector that contains values, a key, and an operator that\\nrelates the key and values.\",\"properties\":{\"key\":{\"description\":\"key is the label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"operator represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists and DoesNotExist.\",\"type\":\"string\"},\"values\":{\"description\":\"values is an array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. This array is replaced during a strategic\\nmerge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"matchLabels\":{\"additionalProperties\":{\"type\":\"string\"},\"description\":\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\\nmap is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the\\noperator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\",\"type\":\"object\"}},\"type\":\"object\",\"x-kubernetes-map-type\":\"atomic\"},\"commonInstancetypesDeployment\":{\"description\":\"CommonInstancetypesDeployment controls the deployment of common-instancetypes resources\",\"nullable\":true,\"properties\":{\"enabled\":{\"description\":\"Enabled controls the deployment of common-instancetypes resources, defaults to True.\",\"nullable\":true,\"type\":\"boolean\"}},\"type\":\"object\"},\"controllerConfiguration\":{\"description\":\"ReloadableComponentConfiguration holds all generic k8s configuration options which can\\nbe reloaded by components without requiring a restart.\",\"properties\":{\"restClient\":{\"description\":\"RestClient can be used to tune certain aspects of the k8s client in use.\",\"properties\":{\"rateLimiter\":{\"description\":\"RateLimiter allows selecting and configuring different rate limiters for the k8s client.\",\"properties\":{\"tokenBucketRateLimiter\":{\"properties\":{\"burst\":{\"description\":\"Maximum burst for throttle.\\nIf it's zero, the component default will be used\",\"type\":\"integer\"},\"qps\":{\"description\":\"QPS indicates the maximum QPS to the apiserver from this client.\\nIf it's zero, the component default will be used\",\"type\":\"number\"}},\"required\":[\"burst\",\"qps\"],\"type\":\"object\"}},\"type\":\"object\"}},\"type\":\"object\"}},\"type\":\"object\"},\"cpuModel\":{\"type\":\"string\"},\"cpuRequest\":{\"anyOf\":[{\"type\":\"integer\"},{\"type\":\"string\"}],\"pattern\":\"^(\\\\+|-)?(([0-9]+(\\\\.[0-9]*)?)|(\\\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\\\+|-)?(([0-9]+(\\\\.[0-9]*)?)|(\\\\.[0-9]+))))?$\",\"x-kubernetes-int-or-string\":true},\"defaultRuntimeClass\":{\"type\":\"string\"},\"developerConfiguration\":{\"description\":\"DeveloperConfiguration holds developer options\",\"properties\":{\"clusterProfiler\":{\"description\":\"Enable the ability to pprof profile KubeVirt control plane\",\"type\":\"boolean\"},\"cpuAllocationRatio\":{\"description\":\"For each requested virtual CPU, CPUAllocationRatio defines how much physical CPU to request per VMI\\nfrom the hosting node. The value is in fraction of a CPU thread (or core on non-hyperthreaded nodes).\\nFor example, a value of 1 means 1 physical CPU thread per VMI CPU thread.\\nA value of 100 would be 1% of a physical thread allocated for each requested VMI thread.\\nThis option has no effect on VMIs that request dedicated CPUs. More information at:\\nhttps://kubevirt.io/user-guide/operations/node_overcommit/#node-cpu-allocation-ratio\\nDefaults to 10\",\"type\":\"integer\"},\"diskVerification\":{\"description\":\"DiskVerification holds container disks verification limits\",\"properties\":{\"memoryLimit\":{\"anyOf\":[{\"type\":\"integer\"},{\"type\":\"string\"}],\"pattern\":\"^(\\\\+|-)?(([0-9]+(\\\\.[0-9]*)?)|(\\\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\\\+|-)?(([0-9]+(\\\\.[0-9]*)?)|(\\\\.[0-9]+))))?$\",\"x-kubernetes-int-or-string\":true}},\"required\":[\"memoryLimit\"],\"type\":\"object\"},\"featureGates\":{\"description\":\"FeatureGates is the list of experimental features to enable. Defaults to none\",\"items\":{\"type\":\"string\"},\"type\":\"array\"},\"logVerbosity\":{\"description\":\"LogVerbosity sets log verbosity level of  various components\",\"properties\":{\"nodeVerbosity\":{\"additionalProperties\":{\"type\":\"integer\"},\"description\":\"NodeVerbosity represents a map of nodes with a specific verbosity level\",\"type\":\"object\"},\"virtAPI\":{\"type\":\"integer\"},\"virtController\":{\"type\":\"integer\"},\"virtHandler\":{\"type\":\"integer\"},\"virtLauncher\":{\"type\":\"integer\"},\"virtOperator\":{\"type\":\"integer\"},\"virtSynchronizationController\":{\"type\":\"integer\"}},\"type\":\"object\"},\"memoryOvercommit\":{\"description\":\"MemoryOvercommit is the percentage of memory we want to give VMIs compared to the amount\\ngiven to its parent pod (virt-launcher). For example, a value of 102 means the VMI will\\n\\\"see\\\" 2% more memory than its parent pod. Values under 100 are effectively \\\"undercommits\\\".\\nOvercommits can lead to memory exhaustion, which in turn can lead to crashes. Use carefully.\\nDefaults to 100\",\"type\":\"integer\"},\"minimumClusterTSCFrequency\":{\"description\":\"Allow overriding the automatically determined minimum TSC frequency of the cluster\\nand fixate the minimum to this frequency.\",\"format\":\"int64\",\"type\":\"integer\"},\"minimumReservePVCBytes\":{\"description\":\"MinimumReservePVCBytes is the amount of space, in bytes, to leave unused on disks.\\nDefaults to 131072 (128KiB)\",\"format\":\"int64\",\"type\":\"integer\"},\"nodeSelectors\":{\"additionalProperties\":{\"type\":\"string\"},\"description\":\"NodeSelectors allows restricting VMI creation to nodes that match a set of labels.\\nDefaults to none\",\"type\":\"object\"},\"pvcTolerateLessSpaceUpToPercent\":{\"description\":\"LessPVCSpaceToleration determines how much smaller, in percentage, disk PVCs are\\nallowed to be compared to the requested size (to account for various overheads).\\nDefaults to 10\",\"type\":\"integer\"},\"useEmulation\":{\"description\":\"UseEmulation can be set to true to allow fallback to software emulation\\nin case hardware-assisted emulation is not available. Defaults to false\",\"type\":\"boolean\"}},\"type\":\"object\"},\"emulatedMachines\":{\"description\":\"Deprecated. Use architectureConfiguration instead.\",\"items\":{\"type\":\"string\"},\"type\":\"array\"},\"evictionStrategy\":{\"description\":\"EvictionStrategy defines at the cluster level if the VirtualMachineInstance should be\\nmigrated instead of shut-off in case of a node drain. If the VirtualMachineInstance specific\\nfield is set it overrides the cluster level one.\",\"type\":\"string\"},\"handlerConfiguration\":{\"description\":\"ReloadableComponentConfiguration holds all generic k8s configuration options which can\\nbe reloaded by components without requiring a restart.\",\"properties\":{\"restClient\":{\"description\":\"RestClient can be used to tune certain aspects of the k8s client in use.\",\"properties\":{\"rateLimiter\":{\"description\":\"RateLimiter allows selecting and configuring different rate limiters for the k8s client.\",\"properties\":{\"tokenBucketRateLimiter\":{\"properties\":{\"burst\":{\"description\":\"Maximum burst for throttle.\\nIf it's zero, the component default will be used\",\"type\":\"integer\"},\"qps\":{\"description\":\"QPS indicates the maximum QPS to the apiserver from this client.\\nIf it's zero, the component default will be used\",\"type\":\"number\"}},\"required\":[\"burst\",\"qps\"],\"type\":\"object\"}},\"type\":\"object\"}},\"type\":\"object\"}},\"type\":\"object\"},\"imagePullPolicy\":{\"description\":\"PullPolicy describes a policy for if/when to pull a container image\",\"type\":\"string\"},\"instancetype\":{\"description\":\"Instancetype configuration\",\"nullable\":true,\"properties\":{\"referencePolicy\":{\"description\":\"ReferencePolicy defines how an instance type or preference should be referenced by the VM after submission, supported values are:\\nreference (default) - Where a copy of the original object is stashed in a ControllerRevision and referenced by the VM.\\nexpand - Where the instance type or preference are expanded into the VM if no revisionNames have been populated.\\nexpandAll - Where the instance type or preference are expanded into the VM regardless of revisionNames previously being populated.\",\"enum\":[\"reference\",\"expand\",\"expandAll\"],\"nullable\":true,\"type\":\"string\"}},\"type\":\"object\"},\"ksmConfiguration\":{\"description\":\"KSMConfiguration holds the information regarding the enabling the KSM in the nodes (if available).\",\"properties\":{\"nodeLabelSelector\":{\"description\":\"NodeLabelSelector is a selector that filters in which nodes the KSM will be enabled.\\nEmpty NodeLabelSelector will enable ksm for every node.\",\"properties\":{\"matchExpressions\":{\"description\":\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\",\"items\":{\"description\":\"A label selector requirement is a selector that contains values, a key, and an operator that\\nrelates the key and values.\",\"properties\":{\"key\":{\"description\":\"key is the label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"operator represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists and DoesNotExist.\",\"type\":\"string\"},\"values\":{\"description\":\"values is an array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. This array is replaced during a strategic\\nmerge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"matchLabels\":{\"additionalProperties\":{\"type\":\"string\"},\"description\":\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\\nmap is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the\\noperator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\",\"type\":\"object\"}},\"type\":\"object\",\"x-kubernetes-map-type\":\"atomic\"}},\"type\":\"object\"},\"liveUpdateConfiguration\":{\"description\":\"LiveUpdateConfiguration holds defaults for live update features\",\"properties\":{\"maxCpuSockets\":{\"description\":\"MaxCpuSockets provides a MaxSockets value for VMs that do not provide their own.\\nFor VMs with more sockets than maximum the MaxSockets will be set to equal number of sockets.\",\"format\":\"int32\",\"type\":\"integer\"},\"maxGuest\":{\"anyOf\":[{\"type\":\"integer\"},{\"type\":\"string\"}],\"description\":\"MaxGuest defines the maximum amount memory that can be allocated\\nto the guest using hotplug.\",\"pattern\":\"^(\\\\+|-)?(([0-9]+(\\\\.[0-9]*)?)|(\\\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\\\+|-)?(([0-9]+(\\\\.[0-9]*)?)|(\\\\.[0-9]+))))?$\",\"x-kubernetes-int-or-string\":true},\"maxHotplugRatio\":{\"description\":\"MaxHotplugRatio is the ratio used to define the max amount\\nof a hotplug resource that can be made available to a VM\\nwhen the specific Max* setting is not defined (MaxCpuSockets, MaxGuest)\\nExample: VM is configured with 512Mi of guest memory, if MaxGuest is not\\ndefined and MaxHotplugRatio is 2 then MaxGuest = 1Gi\\ndefaults to 4\",\"format\":\"int32\",\"type\":\"integer\"}},\"type\":\"object\"},\"machineType\":{\"description\":\"Deprecated. Use architectureConfiguration instead.\",\"type\":\"string\"},\"mediatedDevicesConfiguration\":{\"description\":\"MediatedDevicesConfiguration holds information about MDEV types to be defined, if available\",\"properties\":{\"mediatedDeviceTypes\":{\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"mediatedDevicesTypes\":{\"description\":\"Deprecated. Use mediatedDeviceTypes instead.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"nodeMediatedDeviceTypes\":{\"items\":{\"description\":\"NodeMediatedDeviceTypesConfig holds information about MDEV types to be defined in a specific node that matches the NodeSelector field.\",\"properties\":{\"mediatedDeviceTypes\":{\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"mediatedDevicesTypes\":{\"description\":\"Deprecated. Use mediatedDeviceTypes instead.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"nodeSelector\":{\"additionalProperties\":{\"type\":\"string\"},\"description\":\"NodeSelector is a selector which must be true for the vmi to fit on a node.\\nSelector which must match a node's labels for the vmi to be scheduled on that node.\\nMore info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/\",\"type\":\"object\"}},\"required\":[\"nodeSelector\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"type\":\"object\"},\"memBalloonStatsPeriod\":{\"format\":\"int32\",\"type\":\"integer\"},\"migrations\":{\"description\":\"MigrationConfiguration holds migration options.\\nCan be overridden for specific groups of VMs though migration policies.\\nVisit https://kubevirt.io/user-guide/operations/migration_policies/ for more information.\",\"properties\":{\"allowAutoConverge\":{\"description\":\"AllowAutoConverge allows the platform to compromise performance/availability of VMIs to\\nguarantee successful VMI live migrations. Defaults to false\",\"type\":\"boolean\"},\"allowPostCopy\":{\"description\":\"AllowPostCopy enables post-copy live migrations. Such migrations allow even the busiest VMIs\\nto successfully live-migrate. However, events like a network failure can cause a VMI crash.\\nIf set to true, migrations will still start in pre-copy, but switch to post-copy when\\nCompletionTimeoutPerGiB triggers. Defaults to false\",\"type\":\"boolean\"},\"allowWorkloadDisruption\":{\"description\":\"AllowWorkloadDisruption indicates that the migration shouldn't be\\ncanceled after acceptableCompletionTime is exceeded. Instead, if\\npermitted, migration will be switched to post-copy or the VMI will be\\npaused to allow the migration to complete\",\"type\":\"boolean\"},\"bandwidthPerMigration\":{\"anyOf\":[{\"type\":\"integer\"},{\"type\":\"string\"}],\"description\":\"BandwidthPerMigration limits the amount of network bandwidth live migrations are allowed to use.\\nThe value is in quantity per second. Defaults to 0 (no limit)\",\"pattern\":\"^(\\\\+|-)?(([0-9]+(\\\\.[0-9]*)?)|(\\\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\\\+|-)?(([0-9]+(\\\\.[0-9]*)?)|(\\\\.[0-9]+))))?$\",\"x-kubernetes-int-or-string\":true},\"completionTimeoutPerGiB\":{\"description\":\"CompletionTimeoutPerGiB is the maximum number of seconds per GiB a migration is allowed to take.\\nIf the timeout is reached, the migration will be either paused, switched\\nto post-copy or cancelled depending on other settings. Defaults to 150\",\"format\":\"int64\",\"type\":\"integer\"},\"disableTLS\":{\"description\":\"When set to true, DisableTLS will disable the additional layer of live migration encryption\\nprovided by KubeVirt. This is usually a bad idea. Defaults to false\",\"type\":\"boolean\"},\"matchSELinuxLevelOnMigration\":{\"description\":\"By default, the SELinux level of target virt-launcher pods is forced to the level of the source virt-launcher.\\nWhen set to true, MatchSELinuxLevelOnMigration lets the CRI auto-assign a random level to the target.\\nThat will ensure the target virt-launcher doesn't share categories with another pod on the node.\\nHowever, migrations will fail when using RWX volumes that don't automatically deal with SELinux levels.\",\"type\":\"boolean\"},\"network\":{\"description\":\"Network is the name of the CNI network to use for live migrations. By default, migrations go\\nthrough the pod network.\",\"type\":\"string\"},\"nodeDrainTaintKey\":{\"description\":\"NodeDrainTaintKey defines the taint key that indicates a node should be drained.\\nNote: this option relies on the deprecated node taint feature. Default: kubevirt.io/drain\",\"type\":\"string\"},\"parallelMigrationsPerCluster\":{\"description\":\"ParallelMigrationsPerCluster is the total number of concurrent live migrations\\nallowed cluster-wide. Defaults to 5\",\"format\":\"int32\",\"type\":\"integer\"},\"parallelOutboundMigrationsPerNode\":{\"description\":\"ParallelOutboundMigrationsPerNode is the maximum number of concurrent outgoing live migrations\\nallowed per node. Defaults to 2\",\"format\":\"int32\",\"type\":\"integer\"},\"progressTimeout\":{\"description\":\"ProgressTimeout is the maximum number of seconds a live migration is allowed to make no progress.\\nHitting this timeout means a migration transferred 0 data for that many seconds. The migration is\\nthen considered stuck and therefore cancelled. Defaults to 150\",\"format\":\"int64\",\"type\":\"integer\"},\"unsafeMigrationOverride\":{\"description\":\"UnsafeMigrationOverride allows live migrations to occur even if the compatibility check\\nindicates the migration will be unsafe to the guest. Defaults to false\",\"type\":\"boolean\"}},\"type\":\"object\"},\"minCPUModel\":{\"type\":\"string\"},\"network\":{\"description\":\"NetworkConfiguration holds network options\",\"properties\":{\"binding\":{\"additionalProperties\":{\"properties\":{\"computeResourceOverhead\":{\"description\":\"ComputeResourceOverhead specifies the resource overhead that should be added to the compute container when using the binding.\\nversion: v1alphav1\",\"properties\":{\"limits\":{\"additionalProperties\":{\"anyOf\":[{\"type\":\"integer\"},{\"type\":\"string\"}],\"pattern\":\"^(\\\\+|-)?(([0-9]+(\\\\.[0-9]*)?)|(\\\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\\\+|-)?(([0-9]+(\\\\.[0-9]*)?)|(\\\\.[0-9]+))))?$\",\"x-kubernetes-int-or-string\":true},\"description\":\"Limits describes the maximum amount of compute resources allowed.\\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/\",\"type\":\"object\"},\"requests\":{\"additionalProperties\":{\"anyOf\":[{\"type\":\"integer\"},{\"type\":\"string\"}],\"pattern\":\"^(\\\\+|-)?(([0-9]+(\\\\.[0-9]*)?)|(\\\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\\\+|-)?(([0-9]+(\\\\.[0-9]*)?)|(\\\\.[0-9]+))))?$\",\"x-kubernetes-int-or-string\":true},\"description\":\"Requests describes the minimum amount of compute resources required.\\nIf Requests is omitted for a container, it defaults to Limits if that is explicitly specified,\\notherwise to an implementation-defined value. Requests cannot exceed Limits.\\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/\",\"type\":\"object\"}},\"type\":\"object\"},\"domainAttachmentType\":{\"description\":\"DomainAttachmentType is a standard domain network attachment method kubevirt supports.\\nSupported values: \\\"tap\\\", \\\"managedTap\\\" (since v1.4).\\nThe standard domain attachment can be used instead or in addition to the sidecarImage.\\nversion: 1alphav1\",\"type\":\"string\"},\"downwardAPI\":{\"description\":\"DownwardAPI specifies what kind of data should be exposed to the binding plugin sidecar.\\nSupported values: \\\"device-info\\\"\\nversion: v1alphav1\",\"type\":\"string\"},\"migration\":{\"description\":\"Migration means the VM using the plugin can be safely migrated\\nversion: 1alphav1\",\"properties\":{\"method\":{\"description\":\"Method defines a pre-defined migration methodology\\nversion: 1alphav1\",\"type\":\"string\"}},\"type\":\"object\"},\"networkAttachmentDefinition\":{\"description\":\"NetworkAttachmentDefinition references to a NetworkAttachmentDefinition CR object.\\nFormat: \\u003cname\\u003e, \\u003cnamespace\\u003e/\\u003cname\\u003e.\\nIf namespace is not specified, VMI namespace is assumed.\\nversion: 1alphav1\",\"type\":\"string\"},\"sidecarImage\":{\"description\":\"SidecarImage references a container image that runs in the virt-launcher pod.\\nThe sidecar handles (libvirt) domain configuration and optional services.\\nversion: 1alphav1\",\"type\":\"string\"}},\"type\":\"object\"},\"type\":\"object\"},\"defaultNetworkInterface\":{\"type\":\"string\"},\"permitBridgeInterfaceOnPodNetwork\":{\"type\":\"boolean\"},\"permitSlirpInterface\":{\"description\":\"DeprecatedPermitSlirpInterface is an alias for the deprecated PermitSlirpInterface.\\nDeprecated: Removed in v1.3.\",\"type\":\"boolean\"}},\"type\":\"object\"},\"obsoleteCPUModels\":{\"additionalProperties\":{\"type\":\"boolean\"},\"type\":\"object\"},\"ovmfPath\":{\"description\":\"Deprecated. Use architectureConfiguration instead.\",\"type\":\"string\"},\"permittedHostDevices\":{\"description\":\"PermittedHostDevices holds information about devices allowed for passthrough\",\"properties\":{\"mediatedDevices\":{\"items\":{\"description\":\"MediatedHostDevice represents a host mediated device allowed for passthrough\",\"properties\":{\"externalResourceProvider\":{\"type\":\"boolean\"},\"mdevNameSelector\":{\"type\":\"string\"},\"resourceName\":{\"type\":\"string\"}},\"required\":[\"mdevNameSelector\",\"resourceName\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"pciHostDevices\":{\"items\":{\"description\":\"PciHostDevice represents a host PCI device allowed for passthrough\",\"properties\":{\"externalResourceProvider\":{\"description\":\"If true, KubeVirt will leave the allocation and monitoring to an\\nexternal device plugin\",\"type\":\"boolean\"},\"pciVendorSelector\":{\"description\":\"The vendor_id:product_id tuple of the PCI device\",\"type\":\"string\"},\"resourceName\":{\"description\":\"The name of the resource that is representing the device. Exposed by\\na device plugin and requested by VMs. Typically of the form\\nvendor.com/product_name\",\"type\":\"string\"}},\"required\":[\"pciVendorSelector\",\"resourceName\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"usb\":{\"items\":{\"properties\":{\"externalResourceProvider\":{\"description\":\"If true, KubeVirt will leave the allocation and monitoring to an\\nexternal device plugin\",\"type\":\"boolean\"},\"resourceName\":{\"description\":\"Identifies the list of USB host devices.\\ne.g: kubevirt.io/storage, kubevirt.io/bootable-usb, etc\",\"type\":\"string\"},\"selectors\":{\"items\":{\"properties\":{\"product\":{\"type\":\"string\"},\"vendor\":{\"type\":\"string\"}},\"required\":[\"product\",\"vendor\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"resourceName\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"type\":\"object\"},\"seccompConfiguration\":{\"description\":\"SeccompConfiguration holds Seccomp configuration for Kubevirt components\",\"properties\":{\"virtualMachineInstanceProfile\":{\"description\":\"VirtualMachineInstanceProfile defines what profile should be used with virt-launcher. Defaults to none\",\"properties\":{\"customProfile\":{\"description\":\"CustomProfile allows to request arbitrary profile for virt-launcher\",\"properties\":{\"localhostProfile\":{\"type\":\"string\"},\"runtimeDefaultProfile\":{\"type\":\"boolean\"}},\"type\":\"object\"}},\"type\":\"object\"}},\"type\":\"object\"},\"selinuxLauncherType\":{\"type\":\"string\"},\"smbios\":{\"properties\":{\"family\":{\"type\":\"string\"},\"manufacturer\":{\"type\":\"string\"},\"product\":{\"type\":\"string\"},\"sku\":{\"type\":\"string\"},\"version\":{\"type\":\"string\"}},\"type\":\"object\"},\"supportContainerResources\":{\"description\":\"SupportContainerResources specifies the resource requirements for various types of supporting containers such as container disks/virtiofs/sidecars and hotplug attachment pods. If omitted a sensible default will be supplied.\",\"items\":{\"description\":\"SupportContainerResources are used to specify the cpu/memory request and limits for the containers that support various features of Virtual Machines. These containers are usually idle and don't require a lot of memory or cpu.\",\"properties\":{\"resources\":{\"description\":\"ResourceRequirementsWithoutClaims describes the compute resource requirements.\\nThis struct was taken from the k8s.ResourceRequirements and cleaned up the 'Claims' field.\",\"properties\":{\"limits\":{\"additionalProperties\":{\"anyOf\":[{\"type\":\"integer\"},{\"type\":\"string\"}],\"pattern\":\"^(\\\\+|-)?(([0-9]+(\\\\.[0-9]*)?)|(\\\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\\\+|-)?(([0-9]+(\\\\.[0-9]*)?)|(\\\\.[0-9]+))))?$\",\"x-kubernetes-int-or-string\":true},\"description\":\"Limits describes the maximum amount of compute resources allowed.\\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/\",\"type\":\"object\"},\"requests\":{\"additionalProperties\":{\"anyOf\":[{\"type\":\"integer\"},{\"type\":\"string\"}],\"pattern\":\"^(\\\\+|-)?(([0-9]+(\\\\.[0-9]*)?)|(\\\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\\\+|-)?(([0-9]+(\\\\.[0-9]*)?)|(\\\\.[0-9]+))))?$\",\"x-kubernetes-int-or-string\":true},\"description\":\"Requests describes the minimum amount of compute resources required.\\nIf Requests is omitted for a container, it defaults to Limits if that is explicitly specified,\\notherwise to an implementation-defined value. Requests cannot exceed Limits.\\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/\",\"type\":\"object\"}},\"type\":\"object\"},\"type\":{\"type\":\"string\"}},\"required\":[\"resources\",\"type\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-map-keys\":[\"type\"],\"x-kubernetes-list-type\":\"map\"},\"supportedGuestAgentVersions\":{\"description\":\"deprecated\",\"items\":{\"type\":\"string\"},\"type\":\"array\"},\"tlsConfiguration\":{\"description\":\"TLSConfiguration holds TLS options\",\"properties\":{\"ciphers\":{\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"set\"},\"minTLSVersion\":{\"description\":\"MinTLSVersion is a way to specify the minimum protocol version that is acceptable for TLS connections.\\nProtocol versions are based on the following most common TLS configurations:\\n\\n  https://ssl-config.mozilla.org/\\n\\nNote that SSLv3.0 is not a supported protocol version due to well known\\nvulnerabilities such as POODLE: https://en.wikipedia.org/wiki/POODLE\",\"enum\":[\"VersionTLS10\",\"VersionTLS11\",\"VersionTLS12\",\"VersionTLS13\"],\"type\":\"string\"}},\"type\":\"object\"},\"virtualMachineInstancesPerNode\":{\"type\":\"integer\"},\"virtualMachineOptions\":{\"description\":\"VirtualMachineOptions holds the cluster level information regarding the virtual machine.\",\"properties\":{\"disableFreePageReporting\":{\"description\":\"DisableFreePageReporting disable the free page reporting of\\nmemory balloon device https://libvirt.org/formatdomain.html#memory-balloon-device.\\nThis will have effect only if AutoattachMemBalloon is not false and the vmi is not\\nrequesting any high performance feature (dedicatedCPU/realtime/hugePages), in which free page reporting is always disabled.\",\"type\":\"object\"},\"disableSerialConsoleLog\":{\"description\":\"DisableSerialConsoleLog disables logging the auto-attached default serial console.\\nIf not set, serial console logs will be written to a file and then streamed from a container named 'guest-console-log'.\\nThe value can be individually overridden for each VM, not relevant if AutoattachSerialConsole is disabled.\",\"type\":\"object\"}},\"type\":\"object\"},\"vmRolloutStrategy\":{\"description\":\"VMRolloutStrategy defines how live-updatable fields, like CPU sockets, memory,\\ntolerations, and affinity, are propagated from a VM to its VMI.\",\"enum\":[\"Stage\",\"LiveUpdate\"],\"nullable\":true,\"type\":\"string\"},\"vmStateStorageClass\":{\"description\":\"VMStateStorageClass is the name of the storage class to use for the PVCs created to preserve VM state, like TPM.\",\"type\":\"string\"},\"webhookConfiguration\":{\"description\":\"ReloadableComponentConfiguration holds all generic k8s configuration options which can\\nbe reloaded by components without requiring a restart.\",\"properties\":{\"restClient\":{\"description\":\"RestClient can be used to tune certain aspects of the k8s client in use.\",\"properties\":{\"rateLimiter\":{\"description\":\"RateLimiter allows selecting and configuring different rate limiters for the k8s client.\",\"properties\":{\"tokenBucketRateLimiter\":{\"properties\":{\"burst\":{\"description\":\"Maximum burst for throttle.\\nIf it's zero, the component default will be used\",\"type\":\"integer\"},\"qps\":{\"description\":\"QPS indicates the maximum QPS to the apiserver from this client.\\nIf it's zero, the component default will be used\",\"type\":\"number\"}},\"required\":[\"burst\",\"qps\"],\"type\":\"object\"}},\"type\":\"object\"}},\"type\":\"object\"}},\"type\":\"object\"}},\"type\":\"object\"},\"customizeComponents\":{\"properties\":{\"flags\":{\"description\":\"Configure the value used for deployment and daemonset resources\",\"properties\":{\"api\":{\"additionalProperties\":{\"type\":\"string\"},\"type\":\"object\"},\"controller\":{\"additionalProperties\":{\"type\":\"string\"},\"type\":\"object\"},\"handler\":{\"additionalProperties\":{\"type\":\"string\"},\"type\":\"object\"}},\"type\":\"object\"},\"patches\":{\"items\":{\"properties\":{\"patch\":{\"type\":\"string\"},\"resourceName\":{\"minLength\":1,\"type\":\"string\"},\"resourceType\":{\"minLength\":1,\"type\":\"string\"},\"type\":{\"type\":\"string\"}},\"required\":[\"patch\",\"resourceName\",\"resourceType\",\"type\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"type\":\"object\"},\"imagePullPolicy\":{\"description\":\"The ImagePullPolicy to use.\",\"type\":\"string\"},\"imagePullSecrets\":{\"description\":\"The imagePullSecrets to pull the container images from\\nDefaults to none\",\"items\":{\"description\":\"LocalObjectReference contains enough information to let you locate the\\nreferenced object inside the same namespace.\",\"properties\":{\"name\":{\"default\":\"\",\"description\":\"Name of the referent.\\nThis field is effectively required, but due to backwards compatibility is\\nallowed to be empty. Instances of this type with an empty value here are\\nalmost certainly wrong.\\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\",\"type\":\"string\"}},\"type\":\"object\",\"x-kubernetes-map-type\":\"atomic\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"imageRegistry\":{\"description\":\"The image registry to pull the container images from\\nDefaults to the same registry the operator's container image is pulled from.\",\"type\":\"string\"},\"imageTag\":{\"description\":\"The image tag to use for the continer images installed.\\nDefaults to the same tag as the operator's container image.\",\"type\":\"string\"},\"infra\":{\"description\":\"selectors and tolerations that should apply to KubeVirt infrastructure components\",\"properties\":{\"nodePlacement\":{\"description\":\"nodePlacement describes scheduling configuration for specific\\nKubeVirt components\",\"properties\":{\"affinity\":{\"description\":\"affinity enables pod affinity/anti-affinity placement expanding the types of constraints\\nthat can be expressed with nodeSelector.\\naffinity is going to be applied to the relevant kind of pods in parallel with nodeSelector\\nSee https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#affinity-and-anti-affinity\",\"properties\":{\"nodeAffinity\":{\"description\":\"Describes node affinity scheduling rules for the pod.\",\"properties\":{\"preferredDuringSchedulingIgnoredDuringExecution\":{\"description\":\"The scheduler will prefer to schedule pods to nodes that satisfy\\nthe affinity expressions specified by this field, but it may choose\\na node that violates one or more of the expressions. The node that is\\nmost preferred is the one with the greatest sum of weights, i.e.\\nfor each node that meets all of the scheduling requirements (resource\\nrequest, requiredDuringScheduling affinity expressions, etc.),\\ncompute a sum by iterating through the elements of this field and adding\\n\\\"weight\\\" to the sum if the node matches the corresponding matchExpressions; the\\nnode(s) with the highest sum are the most preferred.\",\"items\":{\"description\":\"An empty preferred scheduling term matches all objects with implicit weight 0\\n(i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).\",\"properties\":{\"preference\":{\"description\":\"A node selector term, associated with the corresponding weight.\",\"properties\":{\"matchExpressions\":{\"description\":\"A list of node selector requirements by node's labels.\",\"items\":{\"description\":\"A node selector requirement is a selector that contains values, a key, and an operator\\nthat relates the key and values.\",\"properties\":{\"key\":{\"description\":\"The label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"Represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.\",\"type\":\"string\"},\"values\":{\"description\":\"An array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. If the operator is Gt or Lt, the values\\narray must have a single element, which will be interpreted as an integer.\\nThis array is replaced during a strategic merge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"matchFields\":{\"description\":\"A list of node selector requirements by node's fields.\",\"items\":{\"description\":\"A node selector requirement is a selector that contains values, a key, and an operator\\nthat relates the key and values.\",\"properties\":{\"key\":{\"description\":\"The label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"Represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.\",\"type\":\"string\"},\"values\":{\"description\":\"An array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. If the operator is Gt or Lt, the values\\narray must have a single element, which will be interpreted as an integer.\\nThis array is replaced during a strategic merge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"type\":\"object\",\"x-kubernetes-map-type\":\"atomic\"},\"weight\":{\"description\":\"Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.\",\"format\":\"int32\",\"type\":\"integer\"}},\"required\":[\"preference\",\"weight\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"requiredDuringSchedulingIgnoredDuringExecution\":{\"description\":\"If the affinity requirements specified by this field are not met at\\nscheduling time, the pod will not be scheduled onto the node.\\nIf the affinity requirements specified by this field cease to be met\\nat some point during pod execution (e.g. due to an update), the system\\nmay or may not try to eventually evict the pod from its node.\",\"properties\":{\"nodeSelectorTerms\":{\"description\":\"Required. A list of node selector terms. The terms are ORed.\",\"items\":{\"description\":\"A null or empty node selector term matches no objects. The requirements of\\nthem are ANDed.\\nThe TopologySelectorTerm type implements a subset of the NodeSelectorTerm.\",\"properties\":{\"matchExpressions\":{\"description\":\"A list of node selector requirements by node's labels.\",\"items\":{\"description\":\"A node selector requirement is a selector that contains values, a key, and an operator\\nthat relates the key and values.\",\"properties\":{\"key\":{\"description\":\"The label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"Represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.\",\"type\":\"string\"},\"values\":{\"description\":\"An array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. If the operator is Gt or Lt, the values\\narray must have a single element, which will be interpreted as an integer.\\nThis array is replaced during a strategic merge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"matchFields\":{\"description\":\"A list of node selector requirements by node's fields.\",\"items\":{\"description\":\"A node selector requirement is a selector that contains values, a key, and an operator\\nthat relates the key and values.\",\"properties\":{\"key\":{\"description\":\"The label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"Represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.\",\"type\":\"string\"},\"values\":{\"description\":\"An array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. If the operator is Gt or Lt, the values\\narray must have a single element, which will be interpreted as an integer.\\nThis array is replaced during a strategic merge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"type\":\"object\",\"x-kubernetes-map-type\":\"atomic\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"nodeSelectorTerms\"],\"type\":\"object\",\"x-kubernetes-map-type\":\"atomic\"}},\"type\":\"object\"},\"podAffinity\":{\"description\":\"Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).\",\"properties\":{\"preferredDuringSchedulingIgnoredDuringExecution\":{\"description\":\"The scheduler will prefer to schedule pods to nodes that satisfy\\nthe affinity expressions specified by this field, but it may choose\\na node that violates one or more of the expressions. The node that is\\nmost preferred is the one with the greatest sum of weights, i.e.\\nfor each node that meets all of the scheduling requirements (resource\\nrequest, requiredDuringScheduling affinity expressions, etc.),\\ncompute a sum by iterating through the elements of this field and adding\\n\\\"weight\\\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the\\nnode(s) with the highest sum are the most preferred.\",\"items\":{\"description\":\"The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)\",\"properties\":{\"podAffinityTerm\":{\"description\":\"Required. A pod affinity term, associated with the corresponding weight.\",\"properties\":{\"labelSelector\":{\"description\":\"A label query over a set of resources, in this case pods.\\nIf it's null, this PodAffinityTerm matches with no Pods.\",\"properties\":{\"matchExpressions\":{\"description\":\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\",\"items\":{\"description\":\"A label selector requirement is a selector that contains values, a key, and an operator that\\nrelates the key and values.\",\"properties\":{\"key\":{\"description\":\"key is the label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"operator represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists and DoesNotExist.\",\"type\":\"string\"},\"values\":{\"description\":\"values is an array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. This array is replaced during a strategic\\nmerge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"matchLabels\":{\"additionalProperties\":{\"type\":\"string\"},\"description\":\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\\nmap is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the\\noperator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\",\"type\":\"object\"}},\"type\":\"object\",\"x-kubernetes-map-type\":\"atomic\"},\"matchLabelKeys\":{\"description\":\"MatchLabelKeys is a set of pod label keys to select which pods will\\nbe taken into consideration. The keys are used to lookup values from the\\nincoming pod labels, those key-value labels are merged with 'labelSelector' as 'key in (value)'\\nto select the group of existing pods which pods will be taken into consideration\\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\\npod labels will be ignored. The default value is empty.\\nThe same key is forbidden to exist in both matchLabelKeys and labelSelector.\\nAlso, matchLabelKeys cannot be set when labelSelector isn't set.\\nThis is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"mismatchLabelKeys\":{\"description\":\"MismatchLabelKeys is a set of pod label keys to select which pods will\\nbe taken into consideration. The keys are used to lookup values from the\\nincoming pod labels, those key-value labels are merged with 'labelSelector' as 'key notin (value)'\\nto select the group of existing pods which pods will be taken into consideration\\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\\npod labels will be ignored. The default value is empty.\\nThe same key is forbidden to exist in both mismatchLabelKeys and labelSelector.\\nAlso, mismatchLabelKeys cannot be set when labelSelector isn't set.\\nThis is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"namespaceSelector\":{\"description\":\"A label query over the set of namespaces that the term applies to.\\nThe term is applied to the union of the namespaces selected by this field\\nand the ones listed in the namespaces field.\\nnull selector and null or empty namespaces list means \\\"this pod's namespace\\\".\\nAn empty selector ({}) matches all namespaces.\",\"properties\":{\"matchExpressions\":{\"description\":\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\",\"items\":{\"description\":\"A label selector requirement is a selector that contains values, a key, and an operator that\\nrelates the key and values.\",\"properties\":{\"key\":{\"description\":\"key is the label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"operator represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists and DoesNotExist.\",\"type\":\"string\"},\"values\":{\"description\":\"values is an array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. This array is replaced during a strategic\\nmerge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"matchLabels\":{\"additionalProperties\":{\"type\":\"string\"},\"description\":\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\\nmap is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the\\noperator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\",\"type\":\"object\"}},\"type\":\"object\",\"x-kubernetes-map-type\":\"atomic\"},\"namespaces\":{\"description\":\"namespaces specifies a static list of namespace names that the term applies to.\\nThe term is applied to the union of the namespaces listed in this field\\nand the ones selected by namespaceSelector.\\nnull or empty namespaces list and null namespaceSelector means \\\"this pod's namespace\\\".\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"topologyKey\":{\"description\":\"This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching\\nthe labelSelector in the specified namespaces, where co-located is defined as running on a node\\nwhose value of the label with key topologyKey matches that of any node on which any of the\\nselected pods is running.\\nEmpty topologyKey is not allowed.\",\"type\":\"string\"}},\"required\":[\"topologyKey\"],\"type\":\"object\"},\"weight\":{\"description\":\"weight associated with matching the corresponding podAffinityTerm,\\nin the range 1-100.\",\"format\":\"int32\",\"type\":\"integer\"}},\"required\":[\"podAffinityTerm\",\"weight\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"requiredDuringSchedulingIgnoredDuringExecution\":{\"description\":\"If the affinity requirements specified by this field are not met at\\nscheduling time, the pod will not be scheduled onto the node.\\nIf the affinity requirements specified by this field cease to be met\\nat some point during pod execution (e.g. due to a pod label update), the\\nsystem may or may not try to eventually evict the pod from its node.\\nWhen there are multiple elements, the lists of nodes corresponding to each\\npodAffinityTerm are intersected, i.e. all terms must be satisfied.\",\"items\":{\"description\":\"Defines a set of pods (namely those matching the labelSelector\\nrelative to the given namespace(s)) that this pod should be\\nco-located (affinity) or not co-located (anti-affinity) with,\\nwhere co-located is defined as running on a node whose value of\\nthe label with key \\u003ctopologyKey\\u003e matches that of any node on which\\na pod of the set of pods is running\",\"properties\":{\"labelSelector\":{\"description\":\"A label query over a set of resources, in this case pods.\\nIf it's null, this PodAffinityTerm matches with no Pods.\",\"properties\":{\"matchExpressions\":{\"description\":\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\",\"items\":{\"description\":\"A label selector requirement is a selector that contains values, a key, and an operator that\\nrelates the key and values.\",\"properties\":{\"key\":{\"description\":\"key is the label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"operator represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists and DoesNotExist.\",\"type\":\"string\"},\"values\":{\"description\":\"values is an array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. This array is replaced during a strategic\\nmerge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"matchLabels\":{\"additionalProperties\":{\"type\":\"string\"},\"description\":\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\\nmap is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the\\noperator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\",\"type\":\"object\"}},\"type\":\"object\",\"x-kubernetes-map-type\":\"atomic\"},\"matchLabelKeys\":{\"description\":\"MatchLabelKeys is a set of pod label keys to select which pods will\\nbe taken into consideration. The keys are used to lookup values from the\\nincoming pod labels, those key-value labels are merged with 'labelSelector' as 'key in (value)'\\nto select the group of existing pods which pods will be taken into consideration\\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\\npod labels will be ignored. The default value is empty.\\nThe same key is forbidden to exist in both matchLabelKeys and labelSelector.\\nAlso, matchLabelKeys cannot be set when labelSelector isn't set.\\nThis is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"mismatchLabelKeys\":{\"description\":\"MismatchLabelKeys is a set of pod label keys to select which pods will\\nbe taken into consideration. The keys are used to lookup values from the\\nincoming pod labels, those key-value labels are merged with 'labelSelector' as 'key notin (value)'\\nto select the group of existing pods which pods will be taken into consideration\\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\\npod labels will be ignored. The default value is empty.\\nThe same key is forbidden to exist in both mismatchLabelKeys and labelSelector.\\nAlso, mismatchLabelKeys cannot be set when labelSelector isn't set.\\nThis is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"namespaceSelector\":{\"description\":\"A label query over the set of namespaces that the term applies to.\\nThe term is applied to the union of the namespaces selected by this field\\nand the ones listed in the namespaces field.\\nnull selector and null or empty namespaces list means \\\"this pod's namespace\\\".\\nAn empty selector ({}) matches all namespaces.\",\"properties\":{\"matchExpressions\":{\"description\":\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\",\"items\":{\"description\":\"A label selector requirement is a selector that contains values, a key, and an operator that\\nrelates the key and values.\",\"properties\":{\"key\":{\"description\":\"key is the label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"operator represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists and DoesNotExist.\",\"type\":\"string\"},\"values\":{\"description\":\"values is an array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. This array is replaced during a strategic\\nmerge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"matchLabels\":{\"additionalProperties\":{\"type\":\"string\"},\"description\":\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\\nmap is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the\\noperator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\",\"type\":\"object\"}},\"type\":\"object\",\"x-kubernetes-map-type\":\"atomic\"},\"namespaces\":{\"description\":\"namespaces specifies a static list of namespace names that the term applies to.\\nThe term is applied to the union of the namespaces listed in this field\\nand the ones selected by namespaceSelector.\\nnull or empty namespaces list and null namespaceSelector means \\\"this pod's namespace\\\".\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"topologyKey\":{\"description\":\"This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching\\nthe labelSelector in the specified namespaces, where co-located is defined as running on a node\\nwhose value of the label with key topologyKey matches that of any node on which any of the\\nselected pods is running.\\nEmpty topologyKey is not allowed.\",\"type\":\"string\"}},\"required\":[\"topologyKey\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"type\":\"object\"},\"podAntiAffinity\":{\"description\":\"Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).\",\"properties\":{\"preferredDuringSchedulingIgnoredDuringExecution\":{\"description\":\"The scheduler will prefer to schedule pods to nodes that satisfy\\nthe anti-affinity expressions specified by this field, but it may choose\\na node that violates one or more of the expressions. The node that is\\nmost preferred is the one with the greatest sum of weights, i.e.\\nfor each node that meets all of the scheduling requirements (resource\\nrequest, requiredDuringScheduling anti-affinity expressions, etc.),\\ncompute a sum by iterating through the elements of this field and adding\\n\\\"weight\\\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the\\nnode(s) with the highest sum are the most preferred.\",\"items\":{\"description\":\"The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)\",\"properties\":{\"podAffinityTerm\":{\"description\":\"Required. A pod affinity term, associated with the corresponding weight.\",\"properties\":{\"labelSelector\":{\"description\":\"A label query over a set of resources, in this case pods.\\nIf it's null, this PodAffinityTerm matches with no Pods.\",\"properties\":{\"matchExpressions\":{\"description\":\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\",\"items\":{\"description\":\"A label selector requirement is a selector that contains values, a key, and an operator that\\nrelates the key and values.\",\"properties\":{\"key\":{\"description\":\"key is the label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"operator represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists and DoesNotExist.\",\"type\":\"string\"},\"values\":{\"description\":\"values is an array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. This array is replaced during a strategic\\nmerge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"matchLabels\":{\"additionalProperties\":{\"type\":\"string\"},\"description\":\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\\nmap is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the\\noperator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\",\"type\":\"object\"}},\"type\":\"object\",\"x-kubernetes-map-type\":\"atomic\"},\"matchLabelKeys\":{\"description\":\"MatchLabelKeys is a set of pod label keys to select which pods will\\nbe taken into consideration. The keys are used to lookup values from the\\nincoming pod labels, those key-value labels are merged with 'labelSelector' as 'key in (value)'\\nto select the group of existing pods which pods will be taken into consideration\\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\\npod labels will be ignored. The default value is empty.\\nThe same key is forbidden to exist in both matchLabelKeys and labelSelector.\\nAlso, matchLabelKeys cannot be set when labelSelector isn't set.\\nThis is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"mismatchLabelKeys\":{\"description\":\"MismatchLabelKeys is a set of pod label keys to select which pods will\\nbe taken into consideration. The keys are used to lookup values from the\\nincoming pod labels, those key-value labels are merged with 'labelSelector' as 'key notin (value)'\\nto select the group of existing pods which pods will be taken into consideration\\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\\npod labels will be ignored. The default value is empty.\\nThe same key is forbidden to exist in both mismatchLabelKeys and labelSelector.\\nAlso, mismatchLabelKeys cannot be set when labelSelector isn't set.\\nThis is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"namespaceSelector\":{\"description\":\"A label query over the set of namespaces that the term applies to.\\nThe term is applied to the union of the namespaces selected by this field\\nand the ones listed in the namespaces field.\\nnull selector and null or empty namespaces list means \\\"this pod's namespace\\\".\\nAn empty selector ({}) matches all namespaces.\",\"properties\":{\"matchExpressions\":{\"description\":\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\",\"items\":{\"description\":\"A label selector requirement is a selector that contains values, a key, and an operator that\\nrelates the key and values.\",\"properties\":{\"key\":{\"description\":\"key is the label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"operator represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists and DoesNotExist.\",\"type\":\"string\"},\"values\":{\"description\":\"values is an array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. This array is replaced during a strategic\\nmerge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"matchLabels\":{\"additionalProperties\":{\"type\":\"string\"},\"description\":\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\\nmap is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the\\noperator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\",\"type\":\"object\"}},\"type\":\"object\",\"x-kubernetes-map-type\":\"atomic\"},\"namespaces\":{\"description\":\"namespaces specifies a static list of namespace names that the term applies to.\\nThe term is applied to the union of the namespaces listed in this field\\nand the ones selected by namespaceSelector.\\nnull or empty namespaces list and null namespaceSelector means \\\"this pod's namespace\\\".\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"topologyKey\":{\"description\":\"This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching\\nthe labelSelector in the specified namespaces, where co-located is defined as running on a node\\nwhose value of the label with key topologyKey matches that of any node on which any of the\\nselected pods is running.\\nEmpty topologyKey is not allowed.\",\"type\":\"string\"}},\"required\":[\"topologyKey\"],\"type\":\"object\"},\"weight\":{\"description\":\"weight associated with matching the corresponding podAffinityTerm,\\nin the range 1-100.\",\"format\":\"int32\",\"type\":\"integer\"}},\"required\":[\"podAffinityTerm\",\"weight\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"requiredDuringSchedulingIgnoredDuringExecution\":{\"description\":\"If the anti-affinity requirements specified by this field are not met at\\nscheduling time, the pod will not be scheduled onto the node.\\nIf the anti-affinity requirements specified by this field cease to be met\\nat some point during pod execution (e.g. due to a pod label update), the\\nsystem may or may not try to eventually evict the pod from its node.\\nWhen there are multiple elements, the lists of nodes corresponding to each\\npodAffinityTerm are intersected, i.e. all terms must be satisfied.\",\"items\":{\"description\":\"Defines a set of pods (namely those matching the labelSelector\\nrelative to the given namespace(s)) that this pod should be\\nco-located (affinity) or not co-located (anti-affinity) with,\\nwhere co-located is defined as running on a node whose value of\\nthe label with key \\u003ctopologyKey\\u003e matches that of any node on which\\na pod of the set of pods is running\",\"properties\":{\"labelSelector\":{\"description\":\"A label query over a set of resources, in this case pods.\\nIf it's null, this PodAffinityTerm matches with no Pods.\",\"properties\":{\"matchExpressions\":{\"description\":\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\",\"items\":{\"description\":\"A label selector requirement is a selector that contains values, a key, and an operator that\\nrelates the key and values.\",\"properties\":{\"key\":{\"description\":\"key is the label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"operator represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists and DoesNotExist.\",\"type\":\"string\"},\"values\":{\"description\":\"values is an array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. This array is replaced during a strategic\\nmerge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"matchLabels\":{\"additionalProperties\":{\"type\":\"string\"},\"description\":\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\\nmap is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the\\noperator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\",\"type\":\"object\"}},\"type\":\"object\",\"x-kubernetes-map-type\":\"atomic\"},\"matchLabelKeys\":{\"description\":\"MatchLabelKeys is a set of pod label keys to select which pods will\\nbe taken into consideration. The keys are used to lookup values from the\\nincoming pod labels, those key-value labels are merged with 'labelSelector' as 'key in (value)'\\nto select the group of existing pods which pods will be taken into consideration\\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\\npod labels will be ignored. The default value is empty.\\nThe same key is forbidden to exist in both matchLabelKeys and labelSelector.\\nAlso, matchLabelKeys cannot be set when labelSelector isn't set.\\nThis is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"mismatchLabelKeys\":{\"description\":\"MismatchLabelKeys is a set of pod label keys to select which pods will\\nbe taken into consideration. The keys are used to lookup values from the\\nincoming pod labels, those key-value labels are merged with 'labelSelector' as 'key notin (value)'\\nto select the group of existing pods which pods will be taken into consideration\\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\\npod labels will be ignored. The default value is empty.\\nThe same key is forbidden to exist in both mismatchLabelKeys and labelSelector.\\nAlso, mismatchLabelKeys cannot be set when labelSelector isn't set.\\nThis is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"namespaceSelector\":{\"description\":\"A label query over the set of namespaces that the term applies to.\\nThe term is applied to the union of the namespaces selected by this field\\nand the ones listed in the namespaces field.\\nnull selector and null or empty namespaces list means \\\"this pod's namespace\\\".\\nAn empty selector ({}) matches all namespaces.\",\"properties\":{\"matchExpressions\":{\"description\":\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\",\"items\":{\"description\":\"A label selector requirement is a selector that contains values, a key, and an operator that\\nrelates the key and values.\",\"properties\":{\"key\":{\"description\":\"key is the label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"operator represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists and DoesNotExist.\",\"type\":\"string\"},\"values\":{\"description\":\"values is an array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. This array is replaced during a strategic\\nmerge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"matchLabels\":{\"additionalProperties\":{\"type\":\"string\"},\"description\":\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\\nmap is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the\\noperator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\",\"type\":\"object\"}},\"type\":\"object\",\"x-kubernetes-map-type\":\"atomic\"},\"namespaces\":{\"description\":\"namespaces specifies a static list of namespace names that the term applies to.\\nThe term is applied to the union of the namespaces listed in this field\\nand the ones selected by namespaceSelector.\\nnull or empty namespaces list and null namespaceSelector means \\\"this pod's namespace\\\".\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"topologyKey\":{\"description\":\"This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching\\nthe labelSelector in the specified namespaces, where co-located is defined as running on a node\\nwhose value of the label with key topologyKey matches that of any node on which any of the\\nselected pods is running.\\nEmpty topologyKey is not allowed.\",\"type\":\"string\"}},\"required\":[\"topologyKey\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"type\":\"object\"}},\"type\":\"object\"},\"nodeSelector\":{\"additionalProperties\":{\"type\":\"string\"},\"description\":\"nodeSelector is the node selector applied to the relevant kind of pods\\nIt specifies a map of key-value pairs: for the pod to be eligible to run on a node,\\nthe node must have each of the indicated key-value pairs as labels\\n(it can have additional labels as well).\\nSee https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#nodeselector\",\"type\":\"object\"},\"tolerations\":{\"description\":\"tolerations is a list of tolerations applied to the relevant kind of pods\\nSee https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/ for more info.\\nThese are additional tolerations other than default ones.\",\"items\":{\"description\":\"The pod this Toleration is attached to tolerates any taint that matches\\nthe triple \\u003ckey,value,effect\\u003e using the matching operator \\u003coperator\\u003e.\",\"properties\":{\"effect\":{\"description\":\"Effect indicates the taint effect to match. Empty means match all taint effects.\\nWhen specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.\",\"type\":\"string\"},\"key\":{\"description\":\"Key is the taint key that the toleration applies to. Empty means match all taint keys.\\nIf the key is empty, operator must be Exists; this combination means to match all values and all keys.\",\"type\":\"string\"},\"operator\":{\"description\":\"Operator represents a key's relationship to the value.\\nValid operators are Exists and Equal. Defaults to Equal.\\nExists is equivalent to wildcard for value, so that a pod can\\ntolerate all taints of a particular category.\",\"type\":\"string\"},\"tolerationSeconds\":{\"description\":\"TolerationSeconds represents the period of time the toleration (which must be\\nof effect NoExecute, otherwise this field is ignored) tolerates the taint. By default,\\nit is not set, which means tolerate the taint forever (do not evict). Zero and\\nnegative values will be treated as 0 (evict immediately) by the system.\",\"format\":\"int64\",\"type\":\"integer\"},\"value\":{\"description\":\"Value is the taint value the toleration matches to.\\nIf the operator is Exists, the value should be empty, otherwise just a regular string.\",\"type\":\"string\"}},\"type\":\"object\"},\"type\":\"array\"}},\"type\":\"object\"},\"replicas\":{\"description\":\"replicas indicates how many replicas should be created for each KubeVirt infrastructure\\ncomponent (like virt-api or virt-controller). Defaults to 2.\\nWARNING: this is an advanced feature that prevents auto-scaling for core kubevirt components. Please use with caution!\",\"type\":\"integer\"}},\"type\":\"object\"},\"monitorAccount\":{\"description\":\"The name of the Prometheus service account that needs read-access to KubeVirt endpoints\\nDefaults to prometheus-k8s\",\"type\":\"string\"},\"monitorNamespace\":{\"description\":\"The namespace Prometheus is deployed in\\nDefaults to openshift-monitor\",\"type\":\"string\"},\"productComponent\":{\"description\":\"Designate the apps.kubevirt.io/component label for KubeVirt components.\\nUseful if KubeVirt is included as part of a product.\\nIf ProductComponent is not specified, the component label default value is kubevirt.\",\"type\":\"string\"},\"productName\":{\"description\":\"Designate the apps.kubevirt.io/part-of label for KubeVirt components.\\nUseful if KubeVirt is included as part of a product.\\nIf ProductName is not specified, the part-of label will be omitted.\",\"type\":\"string\"},\"productVersion\":{\"description\":\"Designate the apps.kubevirt.io/version label for KubeVirt components.\\nUseful if KubeVirt is included as part of a product.\\nIf ProductVersion is not specified, KubeVirt's version will be used.\",\"type\":\"string\"},\"serviceMonitorNamespace\":{\"description\":\"The namespace the service monitor will be deployed\\n When ServiceMonitorNamespace is set, then we'll install the service monitor object in that namespace\\notherwise we will use the monitoring namespace.\",\"type\":\"string\"},\"synchronizationPort\":{\"description\":\"Specify the port to listen on for VMI status synchronization traffic. Default is 9185\",\"type\":\"string\"},\"uninstallStrategy\":{\"description\":\"Specifies if kubevirt can be deleted if workloads are still present.\\nThis is mainly a precaution to avoid accidental data loss\",\"type\":\"string\"},\"workloadUpdateStrategy\":{\"description\":\"WorkloadUpdateStrategy defines at the cluster level how to handle\\nautomated workload updates\",\"properties\":{\"batchEvictionInterval\":{\"description\":\"BatchEvictionInterval Represents the interval to wait before issuing the next\\nbatch of shutdowns\\n\\nDefaults to 1 minute\",\"type\":\"string\"},\"batchEvictionSize\":{\"description\":\"BatchEvictionSize Represents the number of VMIs that can be forced updated per\\nthe BatchShutdownInteral interval\\n\\nDefaults to 10\",\"type\":\"integer\"},\"workloadUpdateMethods\":{\"description\":\"WorkloadUpdateMethods defines the methods that can be used to disrupt workloads\\nduring automated workload updates.\\nWhen multiple methods are present, the least disruptive method takes\\nprecedence over more disruptive methods. For example if both LiveMigrate and Shutdown\\nmethods are listed, only VMs which are not live migratable will be restarted/shutdown\\n\\nAn empty list defaults to no automated workload updating\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"type\":\"object\"},\"workloads\":{\"description\":\"selectors and tolerations that should apply to KubeVirt workloads\",\"properties\":{\"nodePlacement\":{\"description\":\"nodePlacement describes scheduling configuration for specific\\nKubeVirt components\",\"properties\":{\"affinity\":{\"description\":\"affinity enables pod affinity/anti-affinity placement expanding the types of constraints\\nthat can be expressed with nodeSelector.\\naffinity is going to be applied to the relevant kind of pods in parallel with nodeSelector\\nSee https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#affinity-and-anti-affinity\",\"properties\":{\"nodeAffinity\":{\"description\":\"Describes node affinity scheduling rules for the pod.\",\"properties\":{\"preferredDuringSchedulingIgnoredDuringExecution\":{\"description\":\"The scheduler will prefer to schedule pods to nodes that satisfy\\nthe affinity expressions specified by this field, but it may choose\\na node that violates one or more of the expressions. The node that is\\nmost preferred is the one with the greatest sum of weights, i.e.\\nfor each node that meets all of the scheduling requirements (resource\\nrequest, requiredDuringScheduling affinity expressions, etc.),\\ncompute a sum by iterating through the elements of this field and adding\\n\\\"weight\\\" to the sum if the node matches the corresponding matchExpressions; the\\nnode(s) with the highest sum are the most preferred.\",\"items\":{\"description\":\"An empty preferred scheduling term matches all objects with implicit weight 0\\n(i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).\",\"properties\":{\"preference\":{\"description\":\"A node selector term, associated with the corresponding weight.\",\"properties\":{\"matchExpressions\":{\"description\":\"A list of node selector requirements by node's labels.\",\"items\":{\"description\":\"A node selector requirement is a selector that contains values, a key, and an operator\\nthat relates the key and values.\",\"properties\":{\"key\":{\"description\":\"The label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"Represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.\",\"type\":\"string\"},\"values\":{\"description\":\"An array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. If the operator is Gt or Lt, the values\\narray must have a single element, which will be interpreted as an integer.\\nThis array is replaced during a strategic merge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"matchFields\":{\"description\":\"A list of node selector requirements by node's fields.\",\"items\":{\"description\":\"A node selector requirement is a selector that contains values, a key, and an operator\\nthat relates the key and values.\",\"properties\":{\"key\":{\"description\":\"The label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"Represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.\",\"type\":\"string\"},\"values\":{\"description\":\"An array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. If the operator is Gt or Lt, the values\\narray must have a single element, which will be interpreted as an integer.\\nThis array is replaced during a strategic merge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"type\":\"object\",\"x-kubernetes-map-type\":\"atomic\"},\"weight\":{\"description\":\"Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.\",\"format\":\"int32\",\"type\":\"integer\"}},\"required\":[\"preference\",\"weight\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"requiredDuringSchedulingIgnoredDuringExecution\":{\"description\":\"If the affinity requirements specified by this field are not met at\\nscheduling time, the pod will not be scheduled onto the node.\\nIf the affinity requirements specified by this field cease to be met\\nat some point during pod execution (e.g. due to an update), the system\\nmay or may not try to eventually evict the pod from its node.\",\"properties\":{\"nodeSelectorTerms\":{\"description\":\"Required. A list of node selector terms. The terms are ORed.\",\"items\":{\"description\":\"A null or empty node selector term matches no objects. The requirements of\\nthem are ANDed.\\nThe TopologySelectorTerm type implements a subset of the NodeSelectorTerm.\",\"properties\":{\"matchExpressions\":{\"description\":\"A list of node selector requirements by node's labels.\",\"items\":{\"description\":\"A node selector requirement is a selector that contains values, a key, and an operator\\nthat relates the key and values.\",\"properties\":{\"key\":{\"description\":\"The label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"Represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.\",\"type\":\"string\"},\"values\":{\"description\":\"An array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. If the operator is Gt or Lt, the values\\narray must have a single element, which will be interpreted as an integer.\\nThis array is replaced during a strategic merge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"matchFields\":{\"description\":\"A list of node selector requirements by node's fields.\",\"items\":{\"description\":\"A node selector requirement is a selector that contains values, a key, and an operator\\nthat relates the key and values.\",\"properties\":{\"key\":{\"description\":\"The label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"Represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.\",\"type\":\"string\"},\"values\":{\"description\":\"An array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. If the operator is Gt or Lt, the values\\narray must have a single element, which will be interpreted as an integer.\\nThis array is replaced during a strategic merge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"type\":\"object\",\"x-kubernetes-map-type\":\"atomic\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"nodeSelectorTerms\"],\"type\":\"object\",\"x-kubernetes-map-type\":\"atomic\"}},\"type\":\"object\"},\"podAffinity\":{\"description\":\"Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).\",\"properties\":{\"preferredDuringSchedulingIgnoredDuringExecution\":{\"description\":\"The scheduler will prefer to schedule pods to nodes that satisfy\\nthe affinity expressions specified by this field, but it may choose\\na node that violates one or more of the expressions. The node that is\\nmost preferred is the one with the greatest sum of weights, i.e.\\nfor each node that meets all of the scheduling requirements (resource\\nrequest, requiredDuringScheduling affinity expressions, etc.),\\ncompute a sum by iterating through the elements of this field and adding\\n\\\"weight\\\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the\\nnode(s) with the highest sum are the most preferred.\",\"items\":{\"description\":\"The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)\",\"properties\":{\"podAffinityTerm\":{\"description\":\"Required. A pod affinity term, associated with the corresponding weight.\",\"properties\":{\"labelSelector\":{\"description\":\"A label query over a set of resources, in this case pods.\\nIf it's null, this PodAffinityTerm matches with no Pods.\",\"properties\":{\"matchExpressions\":{\"description\":\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\",\"items\":{\"description\":\"A label selector requirement is a selector that contains values, a key, and an operator that\\nrelates the key and values.\",\"properties\":{\"key\":{\"description\":\"key is the label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"operator represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists and DoesNotExist.\",\"type\":\"string\"},\"values\":{\"description\":\"values is an array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. This array is replaced during a strategic\\nmerge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"matchLabels\":{\"additionalProperties\":{\"type\":\"string\"},\"description\":\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\\nmap is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the\\noperator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\",\"type\":\"object\"}},\"type\":\"object\",\"x-kubernetes-map-type\":\"atomic\"},\"matchLabelKeys\":{\"description\":\"MatchLabelKeys is a set of pod label keys to select which pods will\\nbe taken into consideration. The keys are used to lookup values from the\\nincoming pod labels, those key-value labels are merged with 'labelSelector' as 'key in (value)'\\nto select the group of existing pods which pods will be taken into consideration\\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\\npod labels will be ignored. The default value is empty.\\nThe same key is forbidden to exist in both matchLabelKeys and labelSelector.\\nAlso, matchLabelKeys cannot be set when labelSelector isn't set.\\nThis is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"mismatchLabelKeys\":{\"description\":\"MismatchLabelKeys is a set of pod label keys to select which pods will\\nbe taken into consideration. The keys are used to lookup values from the\\nincoming pod labels, those key-value labels are merged with 'labelSelector' as 'key notin (value)'\\nto select the group of existing pods which pods will be taken into consideration\\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\\npod labels will be ignored. The default value is empty.\\nThe same key is forbidden to exist in both mismatchLabelKeys and labelSelector.\\nAlso, mismatchLabelKeys cannot be set when labelSelector isn't set.\\nThis is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"namespaceSelector\":{\"description\":\"A label query over the set of namespaces that the term applies to.\\nThe term is applied to the union of the namespaces selected by this field\\nand the ones listed in the namespaces field.\\nnull selector and null or empty namespaces list means \\\"this pod's namespace\\\".\\nAn empty selector ({}) matches all namespaces.\",\"properties\":{\"matchExpressions\":{\"description\":\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\",\"items\":{\"description\":\"A label selector requirement is a selector that contains values, a key, and an operator that\\nrelates the key and values.\",\"properties\":{\"key\":{\"description\":\"key is the label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"operator represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists and DoesNotExist.\",\"type\":\"string\"},\"values\":{\"description\":\"values is an array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. This array is replaced during a strategic\\nmerge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"matchLabels\":{\"additionalProperties\":{\"type\":\"string\"},\"description\":\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\\nmap is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the\\noperator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\",\"type\":\"object\"}},\"type\":\"object\",\"x-kubernetes-map-type\":\"atomic\"},\"namespaces\":{\"description\":\"namespaces specifies a static list of namespace names that the term applies to.\\nThe term is applied to the union of the namespaces listed in this field\\nand the ones selected by namespaceSelector.\\nnull or empty namespaces list and null namespaceSelector means \\\"this pod's namespace\\\".\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"topologyKey\":{\"description\":\"This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching\\nthe labelSelector in the specified namespaces, where co-located is defined as running on a node\\nwhose value of the label with key topologyKey matches that of any node on which any of the\\nselected pods is running.\\nEmpty topologyKey is not allowed.\",\"type\":\"string\"}},\"required\":[\"topologyKey\"],\"type\":\"object\"},\"weight\":{\"description\":\"weight associated with matching the corresponding podAffinityTerm,\\nin the range 1-100.\",\"format\":\"int32\",\"type\":\"integer\"}},\"required\":[\"podAffinityTerm\",\"weight\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"requiredDuringSchedulingIgnoredDuringExecution\":{\"description\":\"If the affinity requirements specified by this field are not met at\\nscheduling time, the pod will not be scheduled onto the node.\\nIf the affinity requirements specified by this field cease to be met\\nat some point during pod execution (e.g. due to a pod label update), the\\nsystem may or may not try to eventually evict the pod from its node.\\nWhen there are multiple elements, the lists of nodes corresponding to each\\npodAffinityTerm are intersected, i.e. all terms must be satisfied.\",\"items\":{\"description\":\"Defines a set of pods (namely those matching the labelSelector\\nrelative to the given namespace(s)) that this pod should be\\nco-located (affinity) or not co-located (anti-affinity) with,\\nwhere co-located is defined as running on a node whose value of\\nthe label with key \\u003ctopologyKey\\u003e matches that of any node on which\\na pod of the set of pods is running\",\"properties\":{\"labelSelector\":{\"description\":\"A label query over a set of resources, in this case pods.\\nIf it's null, this PodAffinityTerm matches with no Pods.\",\"properties\":{\"matchExpressions\":{\"description\":\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\",\"items\":{\"description\":\"A label selector requirement is a selector that contains values, a key, and an operator that\\nrelates the key and values.\",\"properties\":{\"key\":{\"description\":\"key is the label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"operator represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists and DoesNotExist.\",\"type\":\"string\"},\"values\":{\"description\":\"values is an array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. This array is replaced during a strategic\\nmerge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"matchLabels\":{\"additionalProperties\":{\"type\":\"string\"},\"description\":\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\\nmap is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the\\noperator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\",\"type\":\"object\"}},\"type\":\"object\",\"x-kubernetes-map-type\":\"atomic\"},\"matchLabelKeys\":{\"description\":\"MatchLabelKeys is a set of pod label keys to select which pods will\\nbe taken into consideration. The keys are used to lookup values from the\\nincoming pod labels, those key-value labels are merged with 'labelSelector' as 'key in (value)'\\nto select the group of existing pods which pods will be taken into consideration\\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\\npod labels will be ignored. The default value is empty.\\nThe same key is forbidden to exist in both matchLabelKeys and labelSelector.\\nAlso, matchLabelKeys cannot be set when labelSelector isn't set.\\nThis is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"mismatchLabelKeys\":{\"description\":\"MismatchLabelKeys is a set of pod label keys to select which pods will\\nbe taken into consideration. The keys are used to lookup values from the\\nincoming pod labels, those key-value labels are merged with 'labelSelector' as 'key notin (value)'\\nto select the group of existing pods which pods will be taken into consideration\\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\\npod labels will be ignored. The default value is empty.\\nThe same key is forbidden to exist in both mismatchLabelKeys and labelSelector.\\nAlso, mismatchLabelKeys cannot be set when labelSelector isn't set.\\nThis is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"namespaceSelector\":{\"description\":\"A label query over the set of namespaces that the term applies to.\\nThe term is applied to the union of the namespaces selected by this field\\nand the ones listed in the namespaces field.\\nnull selector and null or empty namespaces list means \\\"this pod's namespace\\\".\\nAn empty selector ({}) matches all namespaces.\",\"properties\":{\"matchExpressions\":{\"description\":\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\",\"items\":{\"description\":\"A label selector requirement is a selector that contains values, a key, and an operator that\\nrelates the key and values.\",\"properties\":{\"key\":{\"description\":\"key is the label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"operator represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists and DoesNotExist.\",\"type\":\"string\"},\"values\":{\"description\":\"values is an array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. This array is replaced during a strategic\\nmerge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"matchLabels\":{\"additionalProperties\":{\"type\":\"string\"},\"description\":\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\\nmap is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the\\noperator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\",\"type\":\"object\"}},\"type\":\"object\",\"x-kubernetes-map-type\":\"atomic\"},\"namespaces\":{\"description\":\"namespaces specifies a static list of namespace names that the term applies to.\\nThe term is applied to the union of the namespaces listed in this field\\nand the ones selected by namespaceSelector.\\nnull or empty namespaces list and null namespaceSelector means \\\"this pod's namespace\\\".\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"topologyKey\":{\"description\":\"This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching\\nthe labelSelector in the specified namespaces, where co-located is defined as running on a node\\nwhose value of the label with key topologyKey matches that of any node on which any of the\\nselected pods is running.\\nEmpty topologyKey is not allowed.\",\"type\":\"string\"}},\"required\":[\"topologyKey\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"type\":\"object\"},\"podAntiAffinity\":{\"description\":\"Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).\",\"properties\":{\"preferredDuringSchedulingIgnoredDuringExecution\":{\"description\":\"The scheduler will prefer to schedule pods to nodes that satisfy\\nthe anti-affinity expressions specified by this field, but it may choose\\na node that violates one or more of the expressions. The node that is\\nmost preferred is the one with the greatest sum of weights, i.e.\\nfor each node that meets all of the scheduling requirements (resource\\nrequest, requiredDuringScheduling anti-affinity expressions, etc.),\\ncompute a sum by iterating through the elements of this field and adding\\n\\\"weight\\\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the\\nnode(s) with the highest sum are the most preferred.\",\"items\":{\"description\":\"The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)\",\"properties\":{\"podAffinityTerm\":{\"description\":\"Required. A pod affinity term, associated with the corresponding weight.\",\"properties\":{\"labelSelector\":{\"description\":\"A label query over a set of resources, in this case pods.\\nIf it's null, this PodAffinityTerm matches with no Pods.\",\"properties\":{\"matchExpressions\":{\"description\":\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\",\"items\":{\"description\":\"A label selector requirement is a selector that contains values, a key, and an operator that\\nrelates the key and values.\",\"properties\":{\"key\":{\"description\":\"key is the label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"operator represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists and DoesNotExist.\",\"type\":\"string\"},\"values\":{\"description\":\"values is an array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. This array is replaced during a strategic\\nmerge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"matchLabels\":{\"additionalProperties\":{\"type\":\"string\"},\"description\":\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\\nmap is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the\\noperator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\",\"type\":\"object\"}},\"type\":\"object\",\"x-kubernetes-map-type\":\"atomic\"},\"matchLabelKeys\":{\"description\":\"MatchLabelKeys is a set of pod label keys to select which pods will\\nbe taken into consideration. The keys are used to lookup values from the\\nincoming pod labels, those key-value labels are merged with 'labelSelector' as 'key in (value)'\\nto select the group of existing pods which pods will be taken into consideration\\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\\npod labels will be ignored. The default value is empty.\\nThe same key is forbidden to exist in both matchLabelKeys and labelSelector.\\nAlso, matchLabelKeys cannot be set when labelSelector isn't set.\\nThis is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"mismatchLabelKeys\":{\"description\":\"MismatchLabelKeys is a set of pod label keys to select which pods will\\nbe taken into consideration. The keys are used to lookup values from the\\nincoming pod labels, those key-value labels are merged with 'labelSelector' as 'key notin (value)'\\nto select the group of existing pods which pods will be taken into consideration\\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\\npod labels will be ignored. The default value is empty.\\nThe same key is forbidden to exist in both mismatchLabelKeys and labelSelector.\\nAlso, mismatchLabelKeys cannot be set when labelSelector isn't set.\\nThis is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"namespaceSelector\":{\"description\":\"A label query over the set of namespaces that the term applies to.\\nThe term is applied to the union of the namespaces selected by this field\\nand the ones listed in the namespaces field.\\nnull selector and null or empty namespaces list means \\\"this pod's namespace\\\".\\nAn empty selector ({}) matches all namespaces.\",\"properties\":{\"matchExpressions\":{\"description\":\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\",\"items\":{\"description\":\"A label selector requirement is a selector that contains values, a key, and an operator that\\nrelates the key and values.\",\"properties\":{\"key\":{\"description\":\"key is the label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"operator represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists and DoesNotExist.\",\"type\":\"string\"},\"values\":{\"description\":\"values is an array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. This array is replaced during a strategic\\nmerge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"matchLabels\":{\"additionalProperties\":{\"type\":\"string\"},\"description\":\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\\nmap is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the\\noperator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\",\"type\":\"object\"}},\"type\":\"object\",\"x-kubernetes-map-type\":\"atomic\"},\"namespaces\":{\"description\":\"namespaces specifies a static list of namespace names that the term applies to.\\nThe term is applied to the union of the namespaces listed in this field\\nand the ones selected by namespaceSelector.\\nnull or empty namespaces list and null namespaceSelector means \\\"this pod's namespace\\\".\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"topologyKey\":{\"description\":\"This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching\\nthe labelSelector in the specified namespaces, where co-located is defined as running on a node\\nwhose value of the label with key topologyKey matches that of any node on which any of the\\nselected pods is running.\\nEmpty topologyKey is not allowed.\",\"type\":\"string\"}},\"required\":[\"topologyKey\"],\"type\":\"object\"},\"weight\":{\"description\":\"weight associated with matching the corresponding podAffinityTerm,\\nin the range 1-100.\",\"format\":\"int32\",\"type\":\"integer\"}},\"required\":[\"podAffinityTerm\",\"weight\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"requiredDuringSchedulingIgnoredDuringExecution\":{\"description\":\"If the anti-affinity requirements specified by this field are not met at\\nscheduling time, the pod will not be scheduled onto the node.\\nIf the anti-affinity requirements specified by this field cease to be met\\nat some point during pod execution (e.g. due to a pod label update), the\\nsystem may or may not try to eventually evict the pod from its node.\\nWhen there are multiple elements, the lists of nodes corresponding to each\\npodAffinityTerm are intersected, i.e. all terms must be satisfied.\",\"items\":{\"description\":\"Defines a set of pods (namely those matching the labelSelector\\nrelative to the given namespace(s)) that this pod should be\\nco-located (affinity) or not co-located (anti-affinity) with,\\nwhere co-located is defined as running on a node whose value of\\nthe label with key \\u003ctopologyKey\\u003e matches that of any node on which\\na pod of the set of pods is running\",\"properties\":{\"labelSelector\":{\"description\":\"A label query over a set of resources, in this case pods.\\nIf it's null, this PodAffinityTerm matches with no Pods.\",\"properties\":{\"matchExpressions\":{\"description\":\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\",\"items\":{\"description\":\"A label selector requirement is a selector that contains values, a key, and an operator that\\nrelates the key and values.\",\"properties\":{\"key\":{\"description\":\"key is the label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"operator represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists and DoesNotExist.\",\"type\":\"string\"},\"values\":{\"description\":\"values is an array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. This array is replaced during a strategic\\nmerge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"matchLabels\":{\"additionalProperties\":{\"type\":\"string\"},\"description\":\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\\nmap is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the\\noperator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\",\"type\":\"object\"}},\"type\":\"object\",\"x-kubernetes-map-type\":\"atomic\"},\"matchLabelKeys\":{\"description\":\"MatchLabelKeys is a set of pod label keys to select which pods will\\nbe taken into consideration. The keys are used to lookup values from the\\nincoming pod labels, those key-value labels are merged with 'labelSelector' as 'key in (value)'\\nto select the group of existing pods which pods will be taken into consideration\\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\\npod labels will be ignored. The default value is empty.\\nThe same key is forbidden to exist in both matchLabelKeys and labelSelector.\\nAlso, matchLabelKeys cannot be set when labelSelector isn't set.\\nThis is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"mismatchLabelKeys\":{\"description\":\"MismatchLabelKeys is a set of pod label keys to select which pods will\\nbe taken into consideration. The keys are used to lookup values from the\\nincoming pod labels, those key-value labels are merged with 'labelSelector' as 'key notin (value)'\\nto select the group of existing pods which pods will be taken into consideration\\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\\npod labels will be ignored. The default value is empty.\\nThe same key is forbidden to exist in both mismatchLabelKeys and labelSelector.\\nAlso, mismatchLabelKeys cannot be set when labelSelector isn't set.\\nThis is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"namespaceSelector\":{\"description\":\"A label query over the set of namespaces that the term applies to.\\nThe term is applied to the union of the namespaces selected by this field\\nand the ones listed in the namespaces field.\\nnull selector and null or empty namespaces list means \\\"this pod's namespace\\\".\\nAn empty selector ({}) matches all namespaces.\",\"properties\":{\"matchExpressions\":{\"description\":\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\",\"items\":{\"description\":\"A label selector requirement is a selector that contains values, a key, and an operator that\\nrelates the key and values.\",\"properties\":{\"key\":{\"description\":\"key is the label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"operator represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists and DoesNotExist.\",\"type\":\"string\"},\"values\":{\"description\":\"values is an array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. This array is replaced during a strategic\\nmerge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"matchLabels\":{\"additionalProperties\":{\"type\":\"string\"},\"description\":\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\\nmap is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the\\noperator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\",\"type\":\"object\"}},\"type\":\"object\",\"x-kubernetes-map-type\":\"atomic\"},\"namespaces\":{\"description\":\"namespaces specifies a static list of namespace names that the term applies to.\\nThe term is applied to the union of the namespaces listed in this field\\nand the ones selected by namespaceSelector.\\nnull or empty namespaces list and null namespaceSelector means \\\"this pod's namespace\\\".\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"topologyKey\":{\"description\":\"This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching\\nthe labelSelector in the specified namespaces, where co-located is defined as running on a node\\nwhose value of the label with key topologyKey matches that of any node on which any of the\\nselected pods is running.\\nEmpty topologyKey is not allowed.\",\"type\":\"string\"}},\"required\":[\"topologyKey\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"type\":\"object\"}},\"type\":\"object\"},\"nodeSelector\":{\"additionalProperties\":{\"type\":\"string\"},\"description\":\"nodeSelector is the node selector applied to the relevant kind of pods\\nIt specifies a map of key-value pairs: for the pod to be eligible to run on a node,\\nthe node must have each of the indicated key-value pairs as labels\\n(it can have additional labels as well).\\nSee https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#nodeselector\",\"type\":\"object\"},\"tolerations\":{\"description\":\"tolerations is a list of tolerations applied to the relevant kind of pods\\nSee https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/ for more info.\\nThese are additional tolerations other than default ones.\",\"items\":{\"description\":\"The pod this Toleration is attached to tolerates any taint that matches\\nthe triple \\u003ckey,value,effect\\u003e using the matching operator \\u003coperator\\u003e.\",\"properties\":{\"effect\":{\"description\":\"Effect indicates the taint effect to match. Empty means match all taint effects.\\nWhen specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.\",\"type\":\"string\"},\"key\":{\"description\":\"Key is the taint key that the toleration applies to. Empty means match all taint keys.\\nIf the key is empty, operator must be Exists; this combination means to match all values and all keys.\",\"type\":\"string\"},\"operator\":{\"description\":\"Operator represents a key's relationship to the value.\\nValid operators are Exists and Equal. Defaults to Equal.\\nExists is equivalent to wildcard for value, so that a pod can\\ntolerate all taints of a particular category.\",\"type\":\"string\"},\"tolerationSeconds\":{\"description\":\"TolerationSeconds represents the period of time the toleration (which must be\\nof effect NoExecute, otherwise this field is ignored) tolerates the taint. By default,\\nit is not set, which means tolerate the taint forever (do not evict). Zero and\\nnegative values will be treated as 0 (evict immediately) by the system.\",\"format\":\"int64\",\"type\":\"integer\"},\"value\":{\"description\":\"Value is the taint value the toleration matches to.\\nIf the operator is Exists, the value should be empty, otherwise just a regular string.\",\"type\":\"string\"}},\"type\":\"object\"},\"type\":\"array\"}},\"type\":\"object\"},\"replicas\":{\"description\":\"replicas indicates how many replicas should be created for each KubeVirt infrastructure\\ncomponent (like virt-api or virt-controller). Defaults to 2.\\nWARNING: this is an advanced feature that prevents auto-scaling for core kubevirt components. Please use with caution!\",\"type\":\"integer\"}},\"type\":\"object\"}},\"type\":\"object\"},\"status\":{\"description\":\"KubeVirtStatus represents information pertaining to a KubeVirt deployment.\",\"properties\":{\"conditions\":{\"items\":{\"description\":\"KubeVirtCondition represents a condition of a KubeVirt deployment\",\"properties\":{\"lastProbeTime\":{\"format\":\"date-time\",\"nullable\":true,\"type\":\"string\"},\"lastTransitionTime\":{\"format\":\"date-time\",\"nullable\":true,\"type\":\"string\"},\"message\":{\"type\":\"string\"},\"reason\":{\"type\":\"string\"},\"status\":{\"type\":\"string\"},\"type\":{\"type\":\"string\"}},\"required\":[\"status\",\"type\"],\"type\":\"object\"},\"type\":\"array\"},\"defaultArchitecture\":{\"type\":\"string\"},\"generations\":{\"items\":{\"description\":\"GenerationStatus keeps track of the generation for a given resource so that decisions about forced updates can be made.\",\"properties\":{\"group\":{\"description\":\"group is the group of the thing you're tracking\",\"type\":\"string\"},\"hash\":{\"description\":\"hash is an optional field set for resources without generation that are content sensitive like secrets and configmaps\",\"type\":\"string\"},\"lastGeneration\":{\"description\":\"lastGeneration is the last generation of the workload controller involved\",\"format\":\"int64\",\"type\":\"integer\"},\"name\":{\"description\":\"name is the name of the thing you're tracking\",\"type\":\"string\"},\"namespace\":{\"description\":\"namespace is where the thing you're tracking is\",\"type\":\"string\"},\"resource\":{\"description\":\"resource is the resource type of the thing you're tracking\",\"type\":\"string\"}},\"required\":[\"group\",\"lastGeneration\",\"name\",\"resource\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"observedDeploymentConfig\":{\"type\":\"string\"},\"observedDeploymentID\":{\"type\":\"string\"},\"observedGeneration\":{\"format\":\"int64\",\"type\":\"integer\"},\"observedKubeVirtRegistry\":{\"type\":\"string\"},\"observedKubeVirtVersion\":{\"type\":\"string\"},\"operatorVersion\":{\"type\":\"string\"},\"outdatedVirtualMachineInstanceWorkloads\":{\"type\":\"integer\"},\"phase\":{\"description\":\"KubeVirtPhase is a label for the phase of a KubeVirt deployment at the current time.\",\"type\":\"string\"},\"synchronizationAddresses\":{\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"targetDeploymentConfig\":{\"type\":\"string\"},\"targetDeploymentID\":{\"type\":\"string\"},\"targetKubeVirtRegistry\":{\"type\":\"string\"},\"targetKubeVirtVersion\":{\"type\":\"string\"}},\"type\":\"object\"}},\"required\":[\"spec\"],\"type\":\"object\"}},\"served\":true,\"storage\":false,\"subresources\":{\"status\":{}}}]}}\n"
      },
      "served_versions": [
        "v1",
        "v1alpha3"
      ],
      "stored_version": "v1",
      "categories": [
        "all"
      ],
      "short_names": [
        "kv",
        "kvs"
      ],
      "description": null,
      "instance_count": 1
    },
    {
      "name": "ldapconfigs.ldap.authn.krateo.io",
      "group": "ldap.authn.krateo.io",
      "version": "v1alpha1",
      "kind": "LDAPConfig",
      "plural": "ldapconfigs",
      "singular": "ldapconfig",
      "scope": "Namespaced",
      "creation_timestamp": "2025-09-06T09:44:38+00:00",
      "labels": {},
      "annotations": {
        "controller-gen.kubebuilder.io/version": "v0.16.5"
      },
      "served_versions": [
        "v1alpha1"
      ],
      "stored_version": "v1alpha1",
      "categories": [
        "krateo",
        "authn",
        "ldap"
      ],
      "short_names": [],
      "description": null,
      "instance_count": 0
    },
    {
      "name": "linecharts.widgets.templates.krateo.io",
      "group": "widgets.templates.krateo.io",
      "version": "v1beta1",
      "kind": "LineChart",
      "plural": "linecharts",
      "singular": "linechart",
      "scope": "Namespaced",
      "creation_timestamp": "2025-09-06T09:46:48+00:00",
      "labels": {},
      "annotations": {
        "controller-gen.kubebuilder.io/version": "v0.16.1"
      },
      "served_versions": [
        "v1beta1"
      ],
      "stored_version": "v1beta1",
      "categories": [
        "widgets",
        "krateo"
      ],
      "short_names": [],
      "description": null,
      "instance_count": 0
    },
    {
      "name": "lrests.database.oracle.com",
      "group": "database.oracle.com",
      "version": "v4",
      "kind": "LREST",
      "plural": "lrests",
      "singular": "lrest",
      "scope": "Namespaced",
      "creation_timestamp": "2025-09-06T17:41:22+00:00",
      "labels": {
        "olm.managed": "true",
        "operators.coreos.com/oracle-database-operator.operators": ""
      },
      "annotations": {
        "cert-manager.io/inject-ca-from": "oracle-database-operator-system/oracle-database-operator-serving-cert",
        "controller-gen.kubebuilder.io/version": "v0.16.5",
        "operatorframework.io/installed-alongside-f8529ccd93ced1d5": "operators/oracle-database-operator.v1.2.0"
      },
      "served_versions": [
        "v4"
      ],
      "stored_version": "v4",
      "categories": [],
      "short_names": [],
      "description": null,
      "instance_count": 0
    },
    {
      "name": "lrpdbs.database.oracle.com",
      "group": "database.oracle.com",
      "version": "v4",
      "kind": "LRPDB",
      "plural": "lrpdbs",
      "singular": "lrpdb",
      "scope": "Namespaced",
      "creation_timestamp": "2025-09-06T17:41:22+00:00",
      "labels": {
        "olm.managed": "true",
        "operators.coreos.com/oracle-database-operator.operators": ""
      },
      "annotations": {
        "cert-manager.io/inject-ca-from": "oracle-database-operator-system/oracle-database-operator-serving-cert",
        "controller-gen.kubebuilder.io/version": "v0.16.5",
        "operatorframework.io/installed-alongside-f8529ccd93ced1d5": "operators/oracle-database-operator.v1.2.0"
      },
      "served_versions": [
        "v4"
      ],
      "stored_version": "v4",
      "categories": [],
      "short_names": [],
      "description": null,
      "instance_count": 0
    },
    {
      "name": "managedapplications.hub.traefik.io",
      "group": "hub.traefik.io",
      "version": "v1alpha1",
      "kind": "ManagedApplication",
      "plural": "managedapplications",
      "singular": "managedapplication",
      "scope": "Namespaced",
      "creation_timestamp": "2025-06-26T15:37:15+00:00",
      "labels": {},
      "annotations": {
        "controller-gen.kubebuilder.io/version": "v0.17.1"
      },
      "served_versions": [
        "v1alpha1"
      ],
      "stored_version": "v1alpha1",
      "categories": [],
      "short_names": [],
      "description": null,
      "instance_count": 0
    },
    {
      "name": "managedsubscriptions.hub.traefik.io",
      "group": "hub.traefik.io",
      "version": "v1alpha1",
      "kind": "ManagedSubscription",
      "plural": "managedsubscriptions",
      "singular": "managedsubscription",
      "scope": "Namespaced",
      "creation_timestamp": "2025-06-26T15:37:15+00:00",
      "labels": {},
      "annotations": {
        "controller-gen.kubebuilder.io/version": "v0.17.1"
      },
      "served_versions": [
        "v1alpha1"
      ],
      "stored_version": "v1alpha1",
      "categories": [],
      "short_names": [],
      "description": null,
      "instance_count": 0
    },
    {
      "name": "mariadbarchivers.archiver.kubedb.com",
      "group": "archiver.kubedb.com",
      "version": "v1alpha1",
      "kind": "MariaDBArchiver",
      "plural": "mariadbarchivers",
      "singular": "mariadbarchiver",
      "scope": "Namespaced",
      "creation_timestamp": "2025-09-06T13:34:36+00:00",
      "labels": {
        "app.kubernetes.io/name": "kubedb"
      },
      "annotations": {},
      "served_versions": [
        "v1alpha1"
      ],
      "stored_version": "v1alpha1",
      "categories": [
        "archiver",
        "kubedb",
        "appscode"
      ],
      "short_names": [
        "mdarchiver"
      ],
      "description": null,
      "instance_count": 0
    },
    {
      "name": "mariadbautoscalers.autoscaling.kubedb.com",
      "group": "autoscaling.kubedb.com",
      "version": "v1alpha1",
      "kind": "MariaDBAutoscaler",
      "plural": "mariadbautoscalers",
      "singular": "mariadbautoscaler",
      "scope": "Namespaced",
      "creation_timestamp": "2025-09-06T13:34:36+00:00",
      "labels": {
        "app.kubernetes.io/name": "kubedb"
      },
      "annotations": {},
      "served_versions": [
        "v1alpha1"
      ],
      "stored_version": "v1alpha1",
      "categories": [
        "autoscaler",
        "kubedb",
        "appscode"
      ],
      "short_names": [
        "mdscaler"
      ],
      "description": null,
      "instance_count": 0
    },
    {
      "name": "mariadbbindings.catalog.appscode.com",
      "group": "catalog.appscode.com",
      "version": "v1alpha1",
      "kind": "MariaDBBinding",
      "plural": "mariadbbindings",
      "singular": "mariadbbinding",
      "scope": "Namespaced",
      "creation_timestamp": "2025-09-06T13:34:36+00:00",
      "labels": {
        "app.kubernetes.io/name": "ace",
        "kube-bind.appscode.com/exported": "true"
      },
      "annotations": {},
      "served_versions": [
        "v1alpha1"
      ],
      "stored_version": "v1alpha1",
      "categories": [
        "binding",
        "kubedb",
        "appscode"
      ],
      "short_names": [
        "mdbinding"
      ],
      "description": null,
      "instance_count": 0
    },
    {
      "name": "mariadbdatabases.schema.kubedb.com",
      "group": "schema.kubedb.com",
      "version": "v1alpha1",
      "kind": "MariaDBDatabase",
      "plural": "mariadbdatabases",
      "singular": "mariadbdatabase",
      "scope": "Namespaced",
      "creation_timestamp": "2025-09-06T13:34:36+00:00",
      "labels": {
        "app.kubernetes.io/name": "kubedb"
      },
      "annotations": {},
      "served_versions": [
        "v1alpha1"
      ],
      "stored_version": "v1alpha1",
      "categories": [
        "schema",
        "kubedb",
        "appscode"
      ],
      "short_names": [
        "mdschema"
      ],
      "description": null,
      "instance_count": 0
    },
    {
      "name": "mariadboperators.helm.mariadb.mmontes.io",
      "group": "helm.mariadb.mmontes.io",
      "version": "v1alpha1",
      "kind": "MariadbOperator",
      "plural": "mariadboperators",
      "singular": "mariadboperator",
      "scope": "Namespaced",
      "creation_timestamp": "2025-09-07T09:15:52+00:00",
      "labels": {
        "olm.managed": "true",
        "operators.coreos.com/mariadb-operator.operators": ""
      },
      "annotations": {
        "operatorframework.io/installed-alongside-6fd75c749733b588": "operators/mariadb-operator.v25.8.3"
      },
      "served_versions": [
        "v1alpha1"
      ],
      "stored_version": "v1alpha1",
      "categories": [],
      "short_names": [],
      "description": null,
      "instance_count": 0
    },
    {
      "name": "mariadbopsrequests.ops.kubedb.com",
      "group": "ops.kubedb.com",
      "version": "v1alpha1",
      "kind": "MariaDBOpsRequest",
      "plural": "mariadbopsrequests",
      "singular": "mariadbopsrequest",
      "scope": "Namespaced",
      "creation_timestamp": "2025-09-06T13:34:36+00:00",
      "labels": {
        "app.kubernetes.io/name": "kubedb"
      },
      "annotations": {},
      "served_versions": [
        "v1alpha1"
      ],
      "stored_version": "v1alpha1",
      "categories": [
        "ops",
        "kubedb",
        "appscode"
      ],
      "short_names": [
        "mariaops"
      ],
      "description": null,
      "instance_count": 0
    },
    {
      "name": "mariadbs.k8s.mariadb.com",
      "group": "k8s.mariadb.com",
      "version": "v1alpha1",
      "kind": "MariaDB",
      "plural": "mariadbs",
      "singular": "mariadb",
      "scope": "Namespaced",
      "creation_timestamp": "2025-09-07T09:15:52+00:00",
      "labels": {
        "olm.managed": "true",
        "operators.coreos.com/mariadb-operator.operators": ""
      },
      "annotations": {
        "controller-gen.kubebuilder.io/version": "v0.18.0",
        "operatorframework.io/installed-alongside-6fd75c749733b588": "operators/mariadb-operator.v25.8.3"
      },
      "served_versions": [
        "v1alpha1"
      ],
      "stored_version": "v1alpha1",
      "categories": [],
      "short_names": [
        "mdb"
      ],
      "description": null,
      "instance_count": 0
    },
    {
      "name": "mariadbs.kubedb.com",
      "group": "kubedb.com",
      "version": "v1",
      "kind": "MariaDB",
      "plural": "mariadbs",
      "singular": "mariadb",
      "scope": "Namespaced",
      "creation_timestamp": "2025-09-06T13:34:36+00:00",
      "labels": {
        "app.kubernetes.io/name": "kubedb"
      },
      "annotations": {},
      "served_versions": [
        "v1",
        "v1alpha2"
      ],
      "stored_version": "v1",
      "categories": [
        "datastore",
        "kubedb",
        "appscode",
        "all"
      ],
      "short_names": [
        "md"
      ],
      "description": null,
      "instance_count": 0
    },
    {
      "name": "mariadbversions.catalog.kubedb.com",
      "group": "catalog.kubedb.com",
      "version": "v1alpha1",
      "kind": "MariaDBVersion",
      "plural": "mariadbversions",
      "singular": "mariadbversion",
      "scope": "Cluster",
      "creation_timestamp": "2025-09-06T13:33:51+00:00",
      "labels": {
        "app.kubernetes.io/name": "kubedb"
      },
      "annotations": {},
      "served_versions": [
        "v1alpha1"
      ],
      "stored_version": "v1alpha1",
      "categories": [
        "catalog",
        "kubedb",
        "appscode"
      ],
      "short_names": [
        "mdversion"
      ],
      "description": null,
      "instance_count": 0
    },
    {
      "name": "maxscales.k8s.mariadb.com",
      "group": "k8s.mariadb.com",
      "version": "v1alpha1",
      "kind": "MaxScale",
      "plural": "maxscales",
      "singular": "maxscale",
      "scope": "Namespaced",
      "creation_timestamp": "2025-09-07T09:15:52+00:00",
      "labels": {
        "olm.managed": "true",
        "operators.coreos.com/mariadb-operator.operators": ""
      },
      "annotations": {
        "controller-gen.kubebuilder.io/version": "v0.18.0",
        "operatorframework.io/installed-alongside-6fd75c749733b588": "operators/mariadb-operator.v25.8.3"
      },
      "served_versions": [
        "v1alpha1"
      ],
      "stored_version": "v1alpha1",
      "categories": [],
      "short_names": [
        "mxs"
      ],
      "description": null,
      "instance_count": 0
    },
    {
      "name": "memcachedversions.catalog.kubedb.com",
      "group": "catalog.kubedb.com",
      "version": "v1alpha1",
      "kind": "MemcachedVersion",
      "plural": "memcachedversions",
      "singular": "memcachedversion",
      "scope": "Cluster",
      "creation_timestamp": "2025-09-06T13:33:51+00:00",
      "labels": {
        "app.kubernetes.io/name": "kubedb"
      },
      "annotations": {},
      "served_versions": [
        "v1alpha1"
      ],
      "stored_version": "v1alpha1",
      "categories": [
        "catalog",
        "kubedb",
        "appscode"
      ],
      "short_names": [
        "mcversion"
      ],
      "description": null,
      "instance_count": 0
    },
    {
      "name": "middlewares.traefik.io",
      "group": "traefik.io",
      "version": "v1alpha1",
      "kind": "Middleware",
      "plural": "middlewares",
      "singular": "middleware",
      "scope": "Namespaced",
      "creation_timestamp": "2025-06-26T15:37:15+00:00",
      "labels": {},
      "annotations": {
        "controller-gen.kubebuilder.io/version": "v0.16.1"
      },
      "served_versions": [
        "v1alpha1"
      ],
      "stored_version": "v1alpha1",
      "categories": [],
      "short_names": [],
      "description": null,
      "instance_count": 0
    },
    {
      "name": "middlewaretcps.traefik.io",
      "group": "traefik.io",
      "version": "v1alpha1",
      "kind": "MiddlewareTCP",
      "plural": "middlewaretcps",
      "singular": "middlewaretcp",
      "scope": "Namespaced",
      "creation_timestamp": "2025-06-26T15:37:15+00:00",
      "labels": {},
      "annotations": {
        "controller-gen.kubebuilder.io/version": "v0.16.1"
      },
      "served_versions": [
        "v1alpha1"
      ],
      "stored_version": "v1alpha1",
      "categories": [],
      "short_names": [],
      "description": null,
      "instance_count": 0
    },
    {
      "name": "migrationpolicies.migrations.kubevirt.io",
      "group": "migrations.kubevirt.io",
      "version": "v1alpha1",
      "kind": "MigrationPolicy",
      "plural": "migrationpolicies",
      "singular": "migrationpolicy",
      "scope": "Cluster",
      "creation_timestamp": "2025-09-06T13:01:05+00:00",
      "labels": {
        "app.kubernetes.io/component": "compute",
        "app.kubernetes.io/managed-by": "virt-operator",
        "app.kubernetes.io/part-of": "hyperconverged-cluster",
        "app.kubernetes.io/version": "1.17.0",
        "kubevirt.io": ""
      },
      "annotations": {
        "kubevirt.io/generation": "2",
        "kubevirt.io/install-strategy-identifier": "785522a74afe56a60c761aa46865cbdd654f9d25",
        "kubevirt.io/install-strategy-registry": "quay.io/kubevirt",
        "kubevirt.io/install-strategy-version": "v1.6.0"
      },
      "served_versions": [
        "v1alpha1"
      ],
      "stored_version": "v1alpha1",
      "categories": [],
      "short_names": [],
      "description": null,
      "instance_count": 0
    },
    {
      "name": "mongodbarchivers.archiver.kubedb.com",
      "group": "archiver.kubedb.com",
      "version": "v1alpha1",
      "kind": "MongoDBArchiver",
      "plural": "mongodbarchivers",
      "singular": "mongodbarchiver",
      "scope": "Namespaced",
      "creation_timestamp": "2025-09-06T13:34:40+00:00",
      "labels": {
        "app.kubernetes.io/name": "kubedb"
      },
      "annotations": {},
      "served_versions": [
        "v1alpha1"
      ],
      "stored_version": "v1alpha1",
      "categories": [
        "archiver",
        "kubedb",
        "appscode"
      ],
      "short_names": [
        "mgarchiver"
      ],
      "description": null,
      "instance_count": 0
    },
    {
      "name": "mongodbautoscalers.autoscaling.kubedb.com",
      "group": "autoscaling.kubedb.com",
      "version": "v1alpha1",
      "kind": "MongoDBAutoscaler",
      "plural": "mongodbautoscalers",
      "singular": "mongodbautoscaler",
      "scope": "Namespaced",
      "creation_timestamp": "2025-09-06T13:34:40+00:00",
      "labels": {
        "app.kubernetes.io/name": "kubedb"
      },
      "annotations": {},
      "served_versions": [
        "v1alpha1"
      ],
      "stored_version": "v1alpha1",
      "categories": [
        "autoscaler",
        "kubedb",
        "appscode"
      ],
      "short_names": [
        "mgscaler"
      ],
      "description": null,
      "instance_count": 0
    },
    {
      "name": "mongodbbindings.catalog.appscode.com",
      "group": "catalog.appscode.com",
      "version": "v1alpha1",
      "kind": "MongoDBBinding",
      "plural": "mongodbbindings",
      "singular": "mongodbbinding",
      "scope": "Namespaced",
      "creation_timestamp": "2025-09-06T13:34:40+00:00",
      "labels": {
        "app.kubernetes.io/name": "ace",
        "kube-bind.appscode.com/exported": "true"
      },
      "annotations": {},
      "served_versions": [
        "v1alpha1"
      ],
      "stored_version": "v1alpha1",
      "categories": [
        "binding",
        "kubedb",
        "appscode"
      ],
      "short_names": [
        "mgbinding"
      ],
      "description": null,
      "instance_count": 0
    },
    {
      "name": "mongodbdatabases.schema.kubedb.com",
      "group": "schema.kubedb.com",
      "version": "v1alpha1",
      "kind": "MongoDBDatabase",
      "plural": "mongodbdatabases",
      "singular": "mongodbdatabase",
      "scope": "Namespaced",
      "creation_timestamp": "2025-09-06T13:34:40+00:00",
      "labels": {
        "app.kubernetes.io/name": "kubedb"
      },
      "annotations": {},
      "served_versions": [
        "v1alpha1"
      ],
      "stored_version": "v1alpha1",
      "categories": [
        "schema",
        "kubedb",
        "appscode"
      ],
      "short_names": [
        "mgschema"
      ],
      "description": null,
      "instance_count": 0
    },
    {
      "name": "mongodbopsrequests.ops.kubedb.com",
      "group": "ops.kubedb.com",
      "version": "v1alpha1",
      "kind": "MongoDBOpsRequest",
      "plural": "mongodbopsrequests",
      "singular": "mongodbopsrequest",
      "scope": "Namespaced",
      "creation_timestamp": "2025-09-06T13:34:40+00:00",
      "labels": {
        "app.kubernetes.io/name": "kubedb"
      },
      "annotations": {},
      "served_versions": [
        "v1alpha1"
      ],
      "stored_version": "v1alpha1",
      "categories": [
        "ops",
        "kubedb",
        "appscode"
      ],
      "short_names": [
        "mgops"
      ],
      "description": null,
      "instance_count": 0
    },
    {
      "name": "mongodbs.kubedb.com",
      "group": "kubedb.com",
      "version": "v1",
      "kind": "MongoDB",
      "plural": "mongodbs",
      "singular": "mongodb",
      "scope": "Namespaced",
      "creation_timestamp": "2025-09-06T13:34:39+00:00",
      "labels": {
        "app.kubernetes.io/name": "kubedb"
      },
      "annotations": {},
      "served_versions": [
        "v1",
        "v1alpha2"
      ],
      "stored_version": "v1",
      "categories": [
        "datastore",
        "kubedb",
        "appscode",
        "all"
      ],
      "short_names": [
        "mg"
      ],
      "description": null,
      "instance_count": 0
    },
    {
      "name": "mongodbversions.catalog.kubedb.com",
      "group": "catalog.kubedb.com",
      "version": "v1alpha1",
      "kind": "MongoDBVersion",
      "plural": "mongodbversions",
      "singular": "mongodbversion",
      "scope": "Cluster",
      "creation_timestamp": "2025-09-06T13:33:51+00:00",
      "labels": {
        "app.kubernetes.io/name": "kubedb"
      },
      "annotations": {},
      "served_versions": [
        "v1alpha1"
      ],
      "stored_version": "v1alpha1",
      "categories": [
        "catalog",
        "kubedb",
        "appscode"
      ],
      "short_names": [
        "mgversion"
      ],
      "description": null,
      "instance_count": 0
    },
    {
      "name": "mssqlserverarchivers.archiver.kubedb.com",
      "group": "archiver.kubedb.com",
      "version": "v1alpha1",
      "kind": "MSSQLServerArchiver",
      "plural": "mssqlserverarchivers",
      "singular": "mssqlserverarchiver",
      "scope": "Namespaced",
      "creation_timestamp": "2025-09-06T13:54:14+00:00",
      "labels": {
        "app.kubernetes.io/name": "kubedb"
      },
      "annotations": {},
      "served_versions": [
        "v1alpha1"
      ],
      "stored_version": "v1alpha1",
      "categories": [
        "archiver",
        "kubedb",
        "appscode"
      ],
      "short_names": [
        "msarchiver"
      ],
      "description": null,
      "instance_count": 0
    },
    {
      "name": "mssqlserverautoscalers.autoscaling.kubedb.com",
      "group": "autoscaling.kubedb.com",
      "version": "v1alpha1",
      "kind": "MSSQLServerAutoscaler",
      "plural": "mssqlserverautoscalers",
      "singular": "mssqlserverautoscaler",
      "scope": "Namespaced",
      "creation_timestamp": "2025-09-06T13:54:14+00:00",
      "labels": {
        "app.kubernetes.io/name": "kubedb"
      },
      "annotations": {},
      "served_versions": [
        "v1alpha1"
      ],
      "stored_version": "v1alpha1",
      "categories": [
        "autoscaler",
        "kubedb",
        "appscode"
      ],
      "short_names": [
        "msscaler"
      ],
      "description": null,
      "instance_count": 0
    },
    {
      "name": "mssqlserverbindings.catalog.appscode.com",
      "group": "catalog.appscode.com",
      "version": "v1alpha1",
      "kind": "MSSQLServerBinding",
      "plural": "mssqlserverbindings",
      "singular": "mssqlserverbinding",
      "scope": "Namespaced",
      "creation_timestamp": "2025-09-06T13:54:14+00:00",
      "labels": {
        "app.kubernetes.io/name": "ace",
        "kube-bind.appscode.com/exported": "true"
      },
      "annotations": {},
      "served_versions": [
        "v1alpha1"
      ],
      "stored_version": "v1alpha1",
      "categories": [
        "binding",
        "kubedb",
        "appscode"
      ],
      "short_names": [
        "msbinding"
      ],
      "description": null,
      "instance_count": 0
    },
    {
      "name": "mssqlserveropsrequests.ops.kubedb.com",
      "group": "ops.kubedb.com",
      "version": "v1alpha1",
      "kind": "MSSQLServerOpsRequest",
      "plural": "mssqlserveropsrequests",
      "singular": "mssqlserveropsrequest",
      "scope": "Namespaced",
      "creation_timestamp": "2025-09-06T13:54:14+00:00",
      "labels": {
        "app.kubernetes.io/name": "kubedb"
      },
      "annotations": {},
      "served_versions": [
        "v1alpha1"
      ],
      "stored_version": "v1alpha1",
      "categories": [
        "ops",
        "kubedb",
        "appscode"
      ],
      "short_names": [
        "msops"
      ],
      "description": null,
      "instance_count": 0
    },
    {
      "name": "mssqlservers.kubedb.com",
      "group": "kubedb.com",
      "version": "v1alpha2",
      "kind": "MSSQLServer",
      "plural": "mssqlservers",
      "singular": "mssqlserver",
      "scope": "Namespaced",
      "creation_timestamp": "2025-09-06T13:54:14+00:00",
      "labels": {
        "app.kubernetes.io/name": "kubedb"
      },
      "annotations": {},
      "served_versions": [
        "v1alpha2"
      ],
      "stored_version": "v1alpha2",
      "categories": [
        "datastore",
        "kubedb",
        "appscode",
        "all"
      ],
      "short_names": [
        "ms"
      ],
      "description": null,
      "instance_count": 0
    },
    {
      "name": "mssqlserverversions.catalog.kubedb.com",
      "group": "catalog.kubedb.com",
      "version": "v1alpha1",
      "kind": "MSSQLServerVersion",
      "plural": "mssqlserverversions",
      "singular": "mssqlserverversion",
      "scope": "Cluster",
      "creation_timestamp": "2025-09-06T13:33:51+00:00",
      "labels": {
        "app.kubernetes.io/name": "kubedb"
      },
      "annotations": {},
      "served_versions": [
        "v1alpha1"
      ],
      "stored_version": "v1alpha1",
      "categories": [
        "catalog",
        "kubedb",
        "appscode"
      ],
      "short_names": [
        "msversion"
      ],
      "description": null,
      "instance_count": 0
    },
    {
      "name": "mysqlarchivers.archiver.kubedb.com",
      "group": "archiver.kubedb.com",
      "version": "v1alpha1",
      "kind": "MySQLArchiver",
      "plural": "mysqlarchivers",
      "singular": "mysqlarchiver",
      "scope": "Namespaced",
      "creation_timestamp": "2025-09-06T13:34:43+00:00",
      "labels": {
        "app.kubernetes.io/name": "kubedb"
      },
      "annotations": {},
      "served_versions": [
        "v1alpha1"
      ],
      "stored_version": "v1alpha1",
      "categories": [
        "archiver",
        "kubedb",
        "appscode"
      ],
      "short_names": [
        "myarchiver"
      ],
      "description": null,
      "instance_count": 0
    },
    {
      "name": "mysqlautoscalers.autoscaling.kubedb.com",
      "group": "autoscaling.kubedb.com",
      "version": "v1alpha1",
      "kind": "MySQLAutoscaler",
      "plural": "mysqlautoscalers",
      "singular": "mysqlautoscaler",
      "scope": "Namespaced",
      "creation_timestamp": "2025-09-06T13:34:43+00:00",
      "labels": {
        "app.kubernetes.io/name": "kubedb"
      },
      "annotations": {},
      "served_versions": [
        "v1alpha1"
      ],
      "stored_version": "v1alpha1",
      "categories": [
        "autoscaler",
        "kubedb",
        "appscode"
      ],
      "short_names": [
        "myscaler"
      ],
      "description": null,
      "instance_count": 0
    },
    {
      "name": "mysqlbindings.catalog.appscode.com",
      "group": "catalog.appscode.com",
      "version": "v1alpha1",
      "kind": "MySQLBinding",
      "plural": "mysqlbindings",
      "singular": "mysqlbinding",
      "scope": "Namespaced",
      "creation_timestamp": "2025-09-06T13:34:43+00:00",
      "labels": {
        "app.kubernetes.io/name": "ace",
        "kube-bind.appscode.com/exported": "true"
      },
      "annotations": {},
      "served_versions": [
        "v1alpha1"
      ],
      "stored_version": "v1alpha1",
      "categories": [
        "binding",
        "kubedb",
        "appscode"
      ],
      "short_names": [
        "mybinding"
      ],
      "description": null,
      "instance_count": 0
    },
    {
      "name": "mysqldatabases.schema.kubedb.com",
      "group": "schema.kubedb.com",
      "version": "v1alpha1",
      "kind": "MySQLDatabase",
      "plural": "mysqldatabases",
      "singular": "mysqldatabase",
      "scope": "Namespaced",
      "creation_timestamp": "2025-09-06T13:34:44+00:00",
      "labels": {
        "app.kubernetes.io/name": "kubedb"
      },
      "annotations": {},
      "served_versions": [
        "v1alpha1"
      ],
      "stored_version": "v1alpha1",
      "categories": [
        "schema",
        "kubedb",
        "appscode"
      ],
      "short_names": [
        "myschema"
      ],
      "description": null,
      "instance_count": 0
    },
    {
      "name": "mysqlopsrequests.ops.kubedb.com",
      "group": "ops.kubedb.com",
      "version": "v1alpha1",
      "kind": "MySQLOpsRequest",
      "plural": "mysqlopsrequests",
      "singular": "mysqlopsrequest",
      "scope": "Namespaced",
      "creation_timestamp": "2025-09-06T13:34:43+00:00",
      "labels": {
        "app.kubernetes.io/name": "kubedb"
      },
      "annotations": {},
      "served_versions": [
        "v1alpha1"
      ],
      "stored_version": "v1alpha1",
      "categories": [
        "ops",
        "kubedb",
        "appscode"
      ],
      "short_names": [
        "myops"
      ],
      "description": null,
      "instance_count": 0
    },
    {
      "name": "mysqls.kubedb.com",
      "group": "kubedb.com",
      "version": "v1",
      "kind": "MySQL",
      "plural": "mysqls",
      "singular": "mysql",
      "scope": "Namespaced",
      "creation_timestamp": "2025-09-06T13:34:43+00:00",
      "labels": {
        "app.kubernetes.io/name": "kubedb"
      },
      "annotations": {},
      "served_versions": [
        "v1",
        "v1alpha2"
      ],
      "stored_version": "v1",
      "categories": [
        "datastore",
        "kubedb",
        "appscode",
        "all"
      ],
      "short_names": [
        "my"
      ],
      "description": null,
      "instance_count": 0
    },
    {
      "name": "mysqlversions.catalog.kubedb.com",
      "group": "catalog.kubedb.com",
      "version": "v1alpha1",
      "kind": "MySQLVersion",
      "plural": "mysqlversions",
      "singular": "mysqlversion",
      "scope": "Cluster",
      "creation_timestamp": "2025-09-06T13:33:51+00:00",
      "labels": {
        "app.kubernetes.io/name": "kubedb"
      },
      "annotations": {},
      "served_versions": [
        "v1alpha1"
      ],
      "stored_version": "v1alpha1",
      "categories": [
        "catalog",
        "kubedb",
        "appscode"
      ],
      "short_names": [
        "myversion"
      ],
      "description": null,
      "instance_count": 0
    },
    {
      "name": "navmenuitems.widgets.templates.krateo.io",
      "group": "widgets.templates.krateo.io",
      "version": "v1beta1",
      "kind": "NavMenuItem",
      "plural": "navmenuitems",
      "singular": "navmenuitem",
      "scope": "Namespaced",
      "creation_timestamp": "2025-09-06T09:46:48+00:00",
      "labels": {},
      "annotations": {
        "controller-gen.kubebuilder.io/version": "v0.16.1"
      },
      "served_versions": [
        "v1beta1"
      ],
      "stored_version": "v1beta1",
      "categories": [
        "widgets",
        "krateo"
      ],
      "short_names": [],
      "description": null,
      "instance_count": 0
    },
    {
      "name": "navmenus.widgets.templates.krateo.io",
      "group": "widgets.templates.krateo.io",
      "version": "v1beta1",
      "kind": "NavMenu",
      "plural": "navmenus",
      "singular": "navmenu",
      "scope": "Namespaced",
      "creation_timestamp": "2025-09-06T09:46:48+00:00",
      "labels": {},
      "annotations": {
        "controller-gen.kubebuilder.io/version": "v0.16.1"
      },
      "served_versions": [
        "v1beta1"
      ],
      "stored_version": "v1beta1",
      "categories": [
        "widgets",
        "krateo"
      ],
      "short_names": [],
      "description": null,
      "instance_count": 0
    },
    {
      "name": "network-attachment-definitions.k8s.cni.cncf.io",
      "group": "k8s.cni.cncf.io",
      "version": "v1",
      "kind": "NetworkAttachmentDefinition",
      "plural": "network-attachment-definitions",
      "singular": "network-attachment-definition",
      "scope": "Namespaced",
      "creation_timestamp": "2025-09-06T12:59:45+00:00",
      "labels": {
        "app.kubernetes.io/component": "network",
        "app.kubernetes.io/managed-by": "cnao-operator",
        "app.kubernetes.io/part-of": "hyperconverged-cluster",
        "app.kubernetes.io/version": "1.17.0",
        "networkaddonsoperator.network.kubevirt.io/version": "v0.100.2",
        "prometheus.cnao.io": "true"
      },
      "annotations": {},
      "served_versions": [
        "v1"
      ],
      "stored_version": "v1",
      "categories": [],
      "short_names": [
        "net-attach-def"
      ],
      "description": null,
      "instance_count": 0
    },
    {
      "name": "networkaddonsconfigs.networkaddonsoperator.network.kubevirt.io",
      "group": "networkaddonsoperator.network.kubevirt.io",
      "version": "v1",
      "kind": "NetworkAddonsConfig",
      "plural": "networkaddonsconfigs",
      "singular": "networkaddonsconfig",
      "scope": "Cluster",
      "creation_timestamp": "2025-09-06T12:58:06+00:00",
      "labels": {},
      "annotations": {
        "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"apiextensions.k8s.io/v1\",\"kind\":\"CustomResourceDefinition\",\"metadata\":{\"annotations\":{},\"name\":\"networkaddonsconfigs.networkaddonsoperator.network.kubevirt.io\"},\"spec\":{\"group\":\"networkaddonsoperator.network.kubevirt.io\",\"names\":{\"kind\":\"NetworkAddonsConfig\",\"listKind\":\"NetworkAddonsConfigList\",\"plural\":\"networkaddonsconfigs\",\"singular\":\"networkaddonsconfig\"},\"preserveUnknownFields\":false,\"scope\":\"Cluster\",\"versions\":[{\"name\":\"v1\",\"schema\":{\"openAPIV3Schema\":{\"description\":\"NetworkAddonsConfig is the Schema for the networkaddonsconfigs API\",\"properties\":{\"apiVersion\":{\"description\":\"APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources\",\"type\":\"string\"},\"kind\":{\"description\":\"Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\",\"type\":\"string\"},\"metadata\":{\"type\":\"object\"},\"spec\":{\"description\":\"NetworkAddonsConfigSpec defines the desired state of NetworkAddonsConfig\",\"properties\":{\"imagePullPolicy\":{\"description\":\"PullPolicy describes a policy for if/when to pull a container image\",\"type\":\"string\"},\"kubeMacPool\":{\"description\":\"KubeMacPool plugin manages MAC allocation to Pods and VMs in Kubernetes\",\"properties\":{\"rangeEnd\":{\"description\":\"RangeEnd defines the first mac in range\",\"type\":\"string\"},\"rangeStart\":{\"description\":\"RangeStart defines the first mac in range\",\"type\":\"string\"}},\"type\":\"object\"},\"kubeSecondaryDNS\":{\"description\":\"KubeSecondaryDNS plugin allows to support FQDN for VMI's secondary networks\",\"properties\":{\"domain\":{\"description\":\"Domain defines the FQDN domain\",\"type\":\"string\"},\"nameServerIP\":{\"description\":\"NameServerIp defines the name server IP\",\"type\":\"string\"}},\"type\":\"object\"},\"kubevirtIpamController\":{\"description\":\"KubevirtIpamController plugin allows to support IPAM for secondary networks\",\"properties\":{\"defaultNetworkNADNamespace\":{\"description\":\"DefaultNetworkNADNamespace is the namespace of the cluster default network NetworkAttachmentDefinition exist. When a VM is attached to OVN-Kubernetes user-defined network, with persistent IPs, ipam-controller mutates the pod according to the provided default network NAD namespace.\",\"type\":\"string\"}},\"type\":\"object\"},\"linuxBridge\":{\"description\":\"LinuxBridge plugin allows users to create a bridge and add the host and the container to it\",\"type\":\"object\"},\"macvtap\":{\"description\":\"MacvtapCni plugin allows users to define Kubernetes networks on top of existing host interfaces\",\"properties\":{\"devicePluginConfig\":{\"description\":\"DevicePluginConfig allows the user to override the name of the `ConfigMap` where the device plugin configuration is held\",\"type\":\"string\"}},\"type\":\"object\"},\"multus\":{\"description\":\"Multus plugin enables attaching multiple network interfaces to Pods in Kubernetes\",\"type\":\"object\"},\"multusDynamicNetworks\":{\"description\":\"A multus extension enabling hot-plug and hot-unplug of Pod interfaces\",\"type\":\"object\"},\"ovs\":{\"description\":\"Ovs plugin allows users to define Kubernetes networks on top of Open vSwitch bridges available on nodes\",\"type\":\"object\"},\"placementConfiguration\":{\"description\":\"PlacementConfiguration defines node placement configuration\",\"properties\":{\"infra\":{\"description\":\"Infra defines placement configuration for control-plane nodes\",\"properties\":{\"affinity\":{\"description\":\"Affinity is a group of affinity scheduling rules.\",\"properties\":{\"nodeAffinity\":{\"description\":\"Describes node affinity scheduling rules for the pod.\",\"properties\":{\"preferredDuringSchedulingIgnoredDuringExecution\":{\"description\":\"The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \\\"weight\\\" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred.\",\"items\":{\"description\":\"An empty preferred scheduling term matches all objects with implicit weight 0 (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).\",\"properties\":{\"preference\":{\"description\":\"A node selector term, associated with the corresponding weight.\",\"properties\":{\"matchExpressions\":{\"description\":\"A list of node selector requirements by node's labels.\",\"items\":{\"description\":\"A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.\",\"properties\":{\"key\":{\"description\":\"The label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.\",\"type\":\"string\"},\"values\":{\"description\":\"An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\"},\"matchFields\":{\"description\":\"A list of node selector requirements by node's fields.\",\"items\":{\"description\":\"A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.\",\"properties\":{\"key\":{\"description\":\"The label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.\",\"type\":\"string\"},\"values\":{\"description\":\"An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\"}},\"type\":\"object\"},\"weight\":{\"description\":\"Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.\",\"format\":\"int32\",\"type\":\"integer\"}},\"required\":[\"preference\",\"weight\"],\"type\":\"object\"},\"type\":\"array\"},\"requiredDuringSchedulingIgnoredDuringExecution\":{\"description\":\"If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.\",\"properties\":{\"nodeSelectorTerms\":{\"description\":\"Required. A list of node selector terms. The terms are ORed.\",\"items\":{\"description\":\"A null or empty node selector term matches no objects. The requirements of them are ANDed. The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.\",\"properties\":{\"matchExpressions\":{\"description\":\"A list of node selector requirements by node's labels.\",\"items\":{\"description\":\"A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.\",\"properties\":{\"key\":{\"description\":\"The label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.\",\"type\":\"string\"},\"values\":{\"description\":\"An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\"},\"matchFields\":{\"description\":\"A list of node selector requirements by node's fields.\",\"items\":{\"description\":\"A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.\",\"properties\":{\"key\":{\"description\":\"The label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.\",\"type\":\"string\"},\"values\":{\"description\":\"An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\"}},\"type\":\"object\"},\"type\":\"array\"}},\"required\":[\"nodeSelectorTerms\"],\"type\":\"object\"}},\"type\":\"object\"},\"podAffinity\":{\"description\":\"Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).\",\"properties\":{\"preferredDuringSchedulingIgnoredDuringExecution\":{\"description\":\"The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \\\"weight\\\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.\",\"items\":{\"description\":\"The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)\",\"properties\":{\"podAffinityTerm\":{\"description\":\"Required. A pod affinity term, associated with the corresponding weight.\",\"properties\":{\"labelSelector\":{\"description\":\"A label query over a set of resources, in this case pods.\",\"properties\":{\"matchExpressions\":{\"description\":\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\",\"items\":{\"description\":\"A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.\",\"properties\":{\"key\":{\"description\":\"key is the label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\",\"type\":\"string\"},\"values\":{\"description\":\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\"},\"matchLabels\":{\"additionalProperties\":{\"type\":\"string\"},\"description\":\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\",\"type\":\"object\"}},\"type\":\"object\"},\"namespaces\":{\"description\":\"namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means \\\"this pod's namespace\\\"\",\"items\":{\"type\":\"string\"},\"type\":\"array\"},\"topologyKey\":{\"description\":\"This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.\",\"type\":\"string\"}},\"required\":[\"topologyKey\"],\"type\":\"object\"},\"weight\":{\"description\":\"weight associated with matching the corresponding podAffinityTerm, in the range 1-100.\",\"format\":\"int32\",\"type\":\"integer\"}},\"required\":[\"podAffinityTerm\",\"weight\"],\"type\":\"object\"},\"type\":\"array\"},\"requiredDuringSchedulingIgnoredDuringExecution\":{\"description\":\"If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.\",\"items\":{\"description\":\"Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key \\u003ctopologyKey\\u003e matches that of any node on which a pod of the set of pods is running\",\"properties\":{\"labelSelector\":{\"description\":\"A label query over a set of resources, in this case pods.\",\"properties\":{\"matchExpressions\":{\"description\":\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\",\"items\":{\"description\":\"A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.\",\"properties\":{\"key\":{\"description\":\"key is the label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\",\"type\":\"string\"},\"values\":{\"description\":\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\"},\"matchLabels\":{\"additionalProperties\":{\"type\":\"string\"},\"description\":\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\",\"type\":\"object\"}},\"type\":\"object\"},\"namespaces\":{\"description\":\"namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means \\\"this pod's namespace\\\"\",\"items\":{\"type\":\"string\"},\"type\":\"array\"},\"topologyKey\":{\"description\":\"This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.\",\"type\":\"string\"}},\"required\":[\"topologyKey\"],\"type\":\"object\"},\"type\":\"array\"}},\"type\":\"object\"},\"podAntiAffinity\":{\"description\":\"Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).\",\"properties\":{\"preferredDuringSchedulingIgnoredDuringExecution\":{\"description\":\"The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \\\"weight\\\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.\",\"items\":{\"description\":\"The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)\",\"properties\":{\"podAffinityTerm\":{\"description\":\"Required. A pod affinity term, associated with the corresponding weight.\",\"properties\":{\"labelSelector\":{\"description\":\"A label query over a set of resources, in this case pods.\",\"properties\":{\"matchExpressions\":{\"description\":\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\",\"items\":{\"description\":\"A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.\",\"properties\":{\"key\":{\"description\":\"key is the label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\",\"type\":\"string\"},\"values\":{\"description\":\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\"},\"matchLabels\":{\"additionalProperties\":{\"type\":\"string\"},\"description\":\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\",\"type\":\"object\"}},\"type\":\"object\"},\"namespaces\":{\"description\":\"namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means \\\"this pod's namespace\\\"\",\"items\":{\"type\":\"string\"},\"type\":\"array\"},\"topologyKey\":{\"description\":\"This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.\",\"type\":\"string\"}},\"required\":[\"topologyKey\"],\"type\":\"object\"},\"weight\":{\"description\":\"weight associated with matching the corresponding podAffinityTerm, in the range 1-100.\",\"format\":\"int32\",\"type\":\"integer\"}},\"required\":[\"podAffinityTerm\",\"weight\"],\"type\":\"object\"},\"type\":\"array\"},\"requiredDuringSchedulingIgnoredDuringExecution\":{\"description\":\"If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.\",\"items\":{\"description\":\"Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key \\u003ctopologyKey\\u003e matches that of any node on which a pod of the set of pods is running\",\"properties\":{\"labelSelector\":{\"description\":\"A label query over a set of resources, in this case pods.\",\"properties\":{\"matchExpressions\":{\"description\":\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\",\"items\":{\"description\":\"A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.\",\"properties\":{\"key\":{\"description\":\"key is the label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\",\"type\":\"string\"},\"values\":{\"description\":\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\"},\"matchLabels\":{\"additionalProperties\":{\"type\":\"string\"},\"description\":\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\",\"type\":\"object\"}},\"type\":\"object\"},\"namespaces\":{\"description\":\"namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means \\\"this pod's namespace\\\"\",\"items\":{\"type\":\"string\"},\"type\":\"array\"},\"topologyKey\":{\"description\":\"This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.\",\"type\":\"string\"}},\"required\":[\"topologyKey\"],\"type\":\"object\"},\"type\":\"array\"}},\"type\":\"object\"}},\"type\":\"object\"},\"nodeSelector\":{\"additionalProperties\":{\"type\":\"string\"},\"type\":\"object\"},\"tolerations\":{\"items\":{\"description\":\"The pod this Toleration is attached to tolerates any taint that matches the triple \\u003ckey,value,effect\\u003e using the matching operator \\u003coperator\\u003e.\",\"properties\":{\"effect\":{\"description\":\"Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.\",\"type\":\"string\"},\"key\":{\"description\":\"Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.\",\"type\":\"string\"},\"operator\":{\"description\":\"Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.\",\"type\":\"string\"},\"tolerationSeconds\":{\"description\":\"TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.\",\"format\":\"int64\",\"type\":\"integer\"},\"value\":{\"description\":\"Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.\",\"type\":\"string\"}},\"type\":\"object\"},\"type\":\"array\"}},\"type\":\"object\"},\"workloads\":{\"properties\":{\"affinity\":{\"description\":\"Affinity is a group of affinity scheduling rules.\",\"properties\":{\"nodeAffinity\":{\"description\":\"Describes node affinity scheduling rules for the pod.\",\"properties\":{\"preferredDuringSchedulingIgnoredDuringExecution\":{\"description\":\"The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \\\"weight\\\" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred.\",\"items\":{\"description\":\"An empty preferred scheduling term matches all objects with implicit weight 0 (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).\",\"properties\":{\"preference\":{\"description\":\"A node selector term, associated with the corresponding weight.\",\"properties\":{\"matchExpressions\":{\"description\":\"A list of node selector requirements by node's labels.\",\"items\":{\"description\":\"A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.\",\"properties\":{\"key\":{\"description\":\"The label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.\",\"type\":\"string\"},\"values\":{\"description\":\"An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\"},\"matchFields\":{\"description\":\"A list of node selector requirements by node's fields.\",\"items\":{\"description\":\"A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.\",\"properties\":{\"key\":{\"description\":\"The label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.\",\"type\":\"string\"},\"values\":{\"description\":\"An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\"}},\"type\":\"object\"},\"weight\":{\"description\":\"Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.\",\"format\":\"int32\",\"type\":\"integer\"}},\"required\":[\"preference\",\"weight\"],\"type\":\"object\"},\"type\":\"array\"},\"requiredDuringSchedulingIgnoredDuringExecution\":{\"description\":\"If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.\",\"properties\":{\"nodeSelectorTerms\":{\"description\":\"Required. A list of node selector terms. The terms are ORed.\",\"items\":{\"description\":\"A null or empty node selector term matches no objects. The requirements of them are ANDed. The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.\",\"properties\":{\"matchExpressions\":{\"description\":\"A list of node selector requirements by node's labels.\",\"items\":{\"description\":\"A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.\",\"properties\":{\"key\":{\"description\":\"The label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.\",\"type\":\"string\"},\"values\":{\"description\":\"An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\"},\"matchFields\":{\"description\":\"A list of node selector requirements by node's fields.\",\"items\":{\"description\":\"A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.\",\"properties\":{\"key\":{\"description\":\"The label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.\",\"type\":\"string\"},\"values\":{\"description\":\"An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\"}},\"type\":\"object\"},\"type\":\"array\"}},\"required\":[\"nodeSelectorTerms\"],\"type\":\"object\"}},\"type\":\"object\"},\"podAffinity\":{\"description\":\"Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).\",\"properties\":{\"preferredDuringSchedulingIgnoredDuringExecution\":{\"description\":\"The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \\\"weight\\\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.\",\"items\":{\"description\":\"The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)\",\"properties\":{\"podAffinityTerm\":{\"description\":\"Required. A pod affinity term, associated with the corresponding weight.\",\"properties\":{\"labelSelector\":{\"description\":\"A label query over a set of resources, in this case pods.\",\"properties\":{\"matchExpressions\":{\"description\":\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\",\"items\":{\"description\":\"A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.\",\"properties\":{\"key\":{\"description\":\"key is the label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\",\"type\":\"string\"},\"values\":{\"description\":\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\"},\"matchLabels\":{\"additionalProperties\":{\"type\":\"string\"},\"description\":\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\",\"type\":\"object\"}},\"type\":\"object\"},\"namespaces\":{\"description\":\"namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means \\\"this pod's namespace\\\"\",\"items\":{\"type\":\"string\"},\"type\":\"array\"},\"topologyKey\":{\"description\":\"This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.\",\"type\":\"string\"}},\"required\":[\"topologyKey\"],\"type\":\"object\"},\"weight\":{\"description\":\"weight associated with matching the corresponding podAffinityTerm, in the range 1-100.\",\"format\":\"int32\",\"type\":\"integer\"}},\"required\":[\"podAffinityTerm\",\"weight\"],\"type\":\"object\"},\"type\":\"array\"},\"requiredDuringSchedulingIgnoredDuringExecution\":{\"description\":\"If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.\",\"items\":{\"description\":\"Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key \\u003ctopologyKey\\u003e matches that of any node on which a pod of the set of pods is running\",\"properties\":{\"labelSelector\":{\"description\":\"A label query over a set of resources, in this case pods.\",\"properties\":{\"matchExpressions\":{\"description\":\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\",\"items\":{\"description\":\"A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.\",\"properties\":{\"key\":{\"description\":\"key is the label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\",\"type\":\"string\"},\"values\":{\"description\":\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\"},\"matchLabels\":{\"additionalProperties\":{\"type\":\"string\"},\"description\":\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\",\"type\":\"object\"}},\"type\":\"object\"},\"namespaces\":{\"description\":\"namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means \\\"this pod's namespace\\\"\",\"items\":{\"type\":\"string\"},\"type\":\"array\"},\"topologyKey\":{\"description\":\"This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.\",\"type\":\"string\"}},\"required\":[\"topologyKey\"],\"type\":\"object\"},\"type\":\"array\"}},\"type\":\"object\"},\"podAntiAffinity\":{\"description\":\"Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).\",\"properties\":{\"preferredDuringSchedulingIgnoredDuringExecution\":{\"description\":\"The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \\\"weight\\\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.\",\"items\":{\"description\":\"The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)\",\"properties\":{\"podAffinityTerm\":{\"description\":\"Required. A pod affinity term, associated with the corresponding weight.\",\"properties\":{\"labelSelector\":{\"description\":\"A label query over a set of resources, in this case pods.\",\"properties\":{\"matchExpressions\":{\"description\":\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\",\"items\":{\"description\":\"A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.\",\"properties\":{\"key\":{\"description\":\"key is the label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\",\"type\":\"string\"},\"values\":{\"description\":\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\"},\"matchLabels\":{\"additionalProperties\":{\"type\":\"string\"},\"description\":\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\",\"type\":\"object\"}},\"type\":\"object\"},\"namespaces\":{\"description\":\"namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means \\\"this pod's namespace\\\"\",\"items\":{\"type\":\"string\"},\"type\":\"array\"},\"topologyKey\":{\"description\":\"This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.\",\"type\":\"string\"}},\"required\":[\"topologyKey\"],\"type\":\"object\"},\"weight\":{\"description\":\"weight associated with matching the corresponding podAffinityTerm, in the range 1-100.\",\"format\":\"int32\",\"type\":\"integer\"}},\"required\":[\"podAffinityTerm\",\"weight\"],\"type\":\"object\"},\"type\":\"array\"},\"requiredDuringSchedulingIgnoredDuringExecution\":{\"description\":\"If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.\",\"items\":{\"description\":\"Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key \\u003ctopologyKey\\u003e matches that of any node on which a pod of the set of pods is running\",\"properties\":{\"labelSelector\":{\"description\":\"A label query over a set of resources, in this case pods.\",\"properties\":{\"matchExpressions\":{\"description\":\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\",\"items\":{\"description\":\"A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.\",\"properties\":{\"key\":{\"description\":\"key is the label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\",\"type\":\"string\"},\"values\":{\"description\":\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\"},\"matchLabels\":{\"additionalProperties\":{\"type\":\"string\"},\"description\":\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\",\"type\":\"object\"}},\"type\":\"object\"},\"namespaces\":{\"description\":\"namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means \\\"this pod's namespace\\\"\",\"items\":{\"type\":\"string\"},\"type\":\"array\"},\"topologyKey\":{\"description\":\"This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.\",\"type\":\"string\"}},\"required\":[\"topologyKey\"],\"type\":\"object\"},\"type\":\"array\"}},\"type\":\"object\"}},\"type\":\"object\"},\"nodeSelector\":{\"additionalProperties\":{\"type\":\"string\"},\"type\":\"object\"},\"tolerations\":{\"items\":{\"description\":\"The pod this Toleration is attached to tolerates any taint that matches the triple \\u003ckey,value,effect\\u003e using the matching operator \\u003coperator\\u003e.\",\"properties\":{\"effect\":{\"description\":\"Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.\",\"type\":\"string\"},\"key\":{\"description\":\"Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.\",\"type\":\"string\"},\"operator\":{\"description\":\"Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.\",\"type\":\"string\"},\"tolerationSeconds\":{\"description\":\"TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.\",\"format\":\"int64\",\"type\":\"integer\"},\"value\":{\"description\":\"Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.\",\"type\":\"string\"}},\"type\":\"object\"},\"type\":\"array\"}},\"type\":\"object\"}},\"type\":\"object\"},\"selfSignConfiguration\":{\"description\":\"SelfSignConfiguration defines self sign configuration\",\"properties\":{\"caOverlapInterval\":{\"description\":\"CAOverlapInterval defines the duration where expired CA certificate can overlap with new one, in order to allow fluent CA rotation transitioning\",\"type\":\"string\"},\"caRotateInterval\":{\"description\":\"CARotateInterval defines duration for CA expiration\",\"type\":\"string\"},\"certOverlapInterval\":{\"description\":\"CertOverlapInterval defines the duration where expired service certificate can overlap with new one, in order to allow fluent service rotation transitioning\",\"type\":\"string\"},\"certRotateInterval\":{\"description\":\"CertRotateInterval defines duration for of service certificate expiration\",\"type\":\"string\"}},\"type\":\"object\"},\"tlsSecurityProfile\":{\"description\":\"TLSSecurityProfile defines the schema for a TLS security profile. This object is used by operators to apply TLS security settings to operands.\",\"nullable\":true,\"properties\":{\"custom\":{\"description\":\"custom is a user-defined TLS security profile. Be extremely careful using a custom profile as invalid configurations can be catastrophic. An example custom profile looks like this: ciphers: ECDHE-ECDSA-CHACHA20-POLY1305,ECDHE-RSA-CHACHA20-POLY1305,ECDHE-RSA-AES128-GCM-SHA256,ECDHE-ECDSA-AES128-GCM-SHA256 minTLSVersion: TLSv1.1\",\"nullable\":true,\"properties\":{\"ciphers\":{\"description\":\"ciphers is used to specify the cipher algorithms that are negotiated during the TLS handshake.  Operators may remove entries their operands do not support.  For example, to use DES-CBC3-SHA  (yaml):\\n   ciphers:     - DES-CBC3-SHA\",\"items\":{\"enum\":[\"TLS_AES_128_GCM_SHA256\",\"TLS_AES_256_GCM_SHA384\",\"TLS_CHACHA20_POLY1305_SHA256\",\"ECDHE-ECDSA-AES128-GCM-SHA256\",\"ECDHE-RSA-AES128-GCM-SHA256\",\"ECDHE-ECDSA-AES256-GCM-SHA384\",\"ECDHE-RSA-AES256-GCM-SHA384\",\"ECDHE-ECDSA-CHACHA20-POLY1305\",\"ECDHE-RSA-CHACHA20-POLY1305\",\"DHE-RSA-AES128-GCM-SHA256\",\"DHE-RSA-AES256-GCM-SHA384\",\"DHE-RSA-CHACHA20-POLY1305\",\"ECDHE-ECDSA-AES128-SHA256\",\"ECDHE-RSA-AES128-SHA256\",\"ECDHE-ECDSA-AES128-SHA\",\"ECDHE-RSA-AES128-SHA\",\"ECDHE-ECDSA-AES256-SHA384\",\"ECDHE-RSA-AES256-SHA384\",\"ECDHE-ECDSA-AES256-SHA\",\"ECDHE-RSA-AES256-SHA\",\"DHE-RSA-AES128-SHA256\",\"DHE-RSA-AES256-SHA256\",\"AES128-GCM-SHA256\",\"AES256-GCM-SHA384\",\"AES128-SHA256\",\"AES256-SHA256\",\"AES128-SHA\",\"AES256-SHA\",\"DES-CBC3-SHA\"],\"type\":\"string\"},\"type\":\"array\"},\"minTLSVersion\":{\"description\":\"minTLSVersion is used to specify the minimal version of the TLS protocol that is negotiated during the TLS handshake. For example, to use TLS versions 1.1, 1.2 and 1.3 (yaml):\\n   minTLSVersion: TLSv1.1\\n NOTE: currently the highest minTLSVersion allowed is VersionTLS12\",\"enum\":[\"VersionTLS10\",\"VersionTLS11\",\"VersionTLS12\",\"VersionTLS13\"],\"type\":\"string\"}},\"type\":\"object\"},\"intermediate\":{\"description\":\"intermediate is a TLS security profile based on: https://wiki.mozilla.org/Security/Server_Side_TLS#Intermediate_compatibility_.28recommended.29 and looks like this (yaml):\\n   ciphers: TLS_AES_128_GCM_SHA256,TLS_AES_256_GCM_SHA384,TLS_CHACHA20_POLY1305_SHA256,ECDHE-ECDSA-AES128-GCM-SHA256     - ECDHE-RSA-AE,SHA256,ECDHE-ECDSA-AES256-GCM-SHA384,ECDHE-RSA-AE,SHA384,ECDHE-ECDSA-CHACHA20-POLY1305,ECDHE,POLY1305,DHE-RSA-AES128-GCM-SHA256,DHE-RSA-AES256-GCM-SHA384 minTLSVersion: TLSv1.2\",\"nullable\":true,\"type\":\"object\"},\"modern\":{\"description\":\"modern is a TLS security profile based on: https://wiki.mozilla.org/Security/Server_Side_TLS#Modern_compatibility and looks like this (yaml): ciphers: TLS_AES_128_GCM_SHA256,TLS_AES_256_GCM_SHA384,TLS_CHACHA20_POLY1305_SHA256 minTLSVersion: TLSv1.3 NOTE: Currently unsupported.\",\"nullable\":true,\"type\":\"object\"},\"old\":{\"description\":\"old is a TLS security profile based on: https://wiki.mozilla.org/Security/Server_Side_TLS#Old_backward_compatibility and looks like this (yaml): ciphers: TLS_AES_128_GCM_SHA256,TLS_AES_256_GCM_SHA384,TLS_CHACHA20_POLY1305_SHA256,ECDHE-ECDSA-AES128-GCM-SHA256,ECDHE-RSA-AES128-GCM-SHA256,ECDHE-ECDSA-AES256-GCM-SHA384,ECDHE-RSA-AES256-GCM-SHA384,ECDHE-ECDSA-CHACHA20-POLY1305,ECDHE-RSA-CHACHA20-POLY1305,DHE-RSA-AES128-GCM-SHA256,DHE-RSA-AES256-GCM-SHA384,DHE-RSA-CHACHA20-POLY1305,ECDHE-ECDSA-AES128-SHA256,ECDHE-RSA-AES128-SHA256,ECDHE-ECDSA-AES128-SHA,ECDHE-RSA-AES128-SHA,ECDHE-ECDSA-AES256-SHA384,ECDHE-RSA-AES256-SHA384,ECDHE-ECDSA-AES256-SHA,ECDHE-RSA-AES256-SHA,DHE-RSA-AES128-SHA256,DHE-RSA-AES256-SHA256,AES128-GCM-SHA256,AES256-GCM-SHA384,AES128-SHA256,AES256-SHA256,AES128-SHA,AES256-SHA,DES-CBC3-SHA minTLSVersion: TLSv1.0\",\"nullable\":true,\"type\":\"object\"},\"type\":{\"description\":\"type is one of Old, Intermediate, Modern or Custom. Custom provides the ability to specify individual TLS security profile parameters. Old, Intermediate and Modern are TLS security profiles based on:\\n https://wiki.mozilla.org/Security/Server_Side_TLS#Recommended_configurations The profiles are intent based, so they may change over time as new ciphers are developed and existing ciphers are found to be insecure.  Depending on precisely which ciphers are available to a process, the list may be reduced.\\n Note that the Modern profile is currently not supported because it is not yet well adopted by common software libraries.\",\"enum\":[\"Old\",\"Intermediate\",\"Modern\",\"Custom\"],\"type\":\"string\"}},\"type\":\"object\"}},\"type\":\"object\"},\"status\":{\"description\":\"NetworkAddonsConfigStatus defines the observed state of NetworkAddonsConfig\",\"properties\":{\"conditions\":{\"items\":{\"description\":\"Condition represents the state of the operator's reconciliation functionality.\",\"properties\":{\"lastHeartbeatTime\":{\"format\":\"date-time\",\"nullable\":true,\"type\":\"string\"},\"lastTransitionTime\":{\"format\":\"date-time\",\"nullable\":true,\"type\":\"string\"},\"message\":{\"type\":\"string\"},\"reason\":{\"type\":\"string\"},\"status\":{\"type\":\"string\"},\"type\":{\"description\":\"ConditionType is the state of the operator's reconciliation functionality.\",\"type\":\"string\"}},\"required\":[\"status\",\"type\"],\"type\":\"object\"},\"type\":\"array\"},\"containers\":{\"items\":{\"properties\":{\"image\":{\"type\":\"string\"},\"name\":{\"type\":\"string\"},\"parentKind\":{\"type\":\"string\"},\"parentName\":{\"type\":\"string\"}},\"required\":[\"image\",\"name\",\"parentKind\",\"parentName\"],\"type\":\"object\"},\"type\":\"array\"},\"observedVersion\":{\"type\":\"string\"},\"operatorVersion\":{\"type\":\"string\"},\"targetVersion\":{\"type\":\"string\"}},\"type\":\"object\"}},\"type\":\"object\"}},\"served\":true,\"storage\":true,\"subresources\":{\"status\":{}}},{\"name\":\"v1alpha1\",\"schema\":{\"openAPIV3Schema\":{\"description\":\"NetworkAddonsConfig is the Schema for the networkaddonsconfigs API\",\"properties\":{\"apiVersion\":{\"description\":\"APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources\",\"type\":\"string\"},\"kind\":{\"description\":\"Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\",\"type\":\"string\"},\"metadata\":{\"type\":\"object\"},\"spec\":{\"description\":\"NetworkAddonsConfigSpec defines the desired state of NetworkAddonsConfig\",\"properties\":{\"imagePullPolicy\":{\"description\":\"PullPolicy describes a policy for if/when to pull a container image\",\"type\":\"string\"},\"kubeMacPool\":{\"description\":\"KubeMacPool plugin manages MAC allocation to Pods and VMs in Kubernetes\",\"properties\":{\"rangeEnd\":{\"description\":\"RangeEnd defines the first mac in range\",\"type\":\"string\"},\"rangeStart\":{\"description\":\"RangeStart defines the first mac in range\",\"type\":\"string\"}},\"type\":\"object\"},\"kubeSecondaryDNS\":{\"description\":\"KubeSecondaryDNS plugin allows to support FQDN for VMI's secondary networks\",\"properties\":{\"domain\":{\"description\":\"Domain defines the FQDN domain\",\"type\":\"string\"},\"nameServerIP\":{\"description\":\"NameServerIp defines the name server IP\",\"type\":\"string\"}},\"type\":\"object\"},\"kubevirtIpamController\":{\"description\":\"KubevirtIpamController plugin allows to support IPAM for secondary networks\",\"properties\":{\"defaultNetworkNADNamespace\":{\"description\":\"DefaultNetworkNADNamespace is the namespace of the cluster default network NetworkAttachmentDefinition exist. When a VM is attached to OVN-Kubernetes user-defined network, with persistent IPs, ipam-controller mutates the pod according to the provided default network NAD namespace.\",\"type\":\"string\"}},\"type\":\"object\"},\"linuxBridge\":{\"description\":\"LinuxBridge plugin allows users to create a bridge and add the host and the container to it\",\"type\":\"object\"},\"macvtap\":{\"description\":\"MacvtapCni plugin allows users to define Kubernetes networks on top of existing host interfaces\",\"properties\":{\"devicePluginConfig\":{\"description\":\"DevicePluginConfig allows the user to override the name of the `ConfigMap` where the device plugin configuration is held\",\"type\":\"string\"}},\"type\":\"object\"},\"multus\":{\"description\":\"Multus plugin enables attaching multiple network interfaces to Pods in Kubernetes\",\"type\":\"object\"},\"multusDynamicNetworks\":{\"description\":\"A multus extension enabling hot-plug and hot-unplug of Pod interfaces\",\"type\":\"object\"},\"ovs\":{\"description\":\"Ovs plugin allows users to define Kubernetes networks on top of Open vSwitch bridges available on nodes\",\"type\":\"object\"},\"placementConfiguration\":{\"description\":\"PlacementConfiguration defines node placement configuration\",\"properties\":{\"infra\":{\"description\":\"Infra defines placement configuration for control-plane nodes\",\"properties\":{\"affinity\":{\"description\":\"Affinity is a group of affinity scheduling rules.\",\"properties\":{\"nodeAffinity\":{\"description\":\"Describes node affinity scheduling rules for the pod.\",\"properties\":{\"preferredDuringSchedulingIgnoredDuringExecution\":{\"description\":\"The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \\\"weight\\\" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred.\",\"items\":{\"description\":\"An empty preferred scheduling term matches all objects with implicit weight 0 (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).\",\"properties\":{\"preference\":{\"description\":\"A node selector term, associated with the corresponding weight.\",\"properties\":{\"matchExpressions\":{\"description\":\"A list of node selector requirements by node's labels.\",\"items\":{\"description\":\"A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.\",\"properties\":{\"key\":{\"description\":\"The label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.\",\"type\":\"string\"},\"values\":{\"description\":\"An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\"},\"matchFields\":{\"description\":\"A list of node selector requirements by node's fields.\",\"items\":{\"description\":\"A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.\",\"properties\":{\"key\":{\"description\":\"The label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.\",\"type\":\"string\"},\"values\":{\"description\":\"An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\"}},\"type\":\"object\"},\"weight\":{\"description\":\"Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.\",\"format\":\"int32\",\"type\":\"integer\"}},\"required\":[\"preference\",\"weight\"],\"type\":\"object\"},\"type\":\"array\"},\"requiredDuringSchedulingIgnoredDuringExecution\":{\"description\":\"If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.\",\"properties\":{\"nodeSelectorTerms\":{\"description\":\"Required. A list of node selector terms. The terms are ORed.\",\"items\":{\"description\":\"A null or empty node selector term matches no objects. The requirements of them are ANDed. The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.\",\"properties\":{\"matchExpressions\":{\"description\":\"A list of node selector requirements by node's labels.\",\"items\":{\"description\":\"A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.\",\"properties\":{\"key\":{\"description\":\"The label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.\",\"type\":\"string\"},\"values\":{\"description\":\"An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\"},\"matchFields\":{\"description\":\"A list of node selector requirements by node's fields.\",\"items\":{\"description\":\"A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.\",\"properties\":{\"key\":{\"description\":\"The label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.\",\"type\":\"string\"},\"values\":{\"description\":\"An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\"}},\"type\":\"object\"},\"type\":\"array\"}},\"required\":[\"nodeSelectorTerms\"],\"type\":\"object\"}},\"type\":\"object\"},\"podAffinity\":{\"description\":\"Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).\",\"properties\":{\"preferredDuringSchedulingIgnoredDuringExecution\":{\"description\":\"The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \\\"weight\\\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.\",\"items\":{\"description\":\"The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)\",\"properties\":{\"podAffinityTerm\":{\"description\":\"Required. A pod affinity term, associated with the corresponding weight.\",\"properties\":{\"labelSelector\":{\"description\":\"A label query over a set of resources, in this case pods.\",\"properties\":{\"matchExpressions\":{\"description\":\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\",\"items\":{\"description\":\"A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.\",\"properties\":{\"key\":{\"description\":\"key is the label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\",\"type\":\"string\"},\"values\":{\"description\":\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\"},\"matchLabels\":{\"additionalProperties\":{\"type\":\"string\"},\"description\":\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\",\"type\":\"object\"}},\"type\":\"object\"},\"namespaces\":{\"description\":\"namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means \\\"this pod's namespace\\\"\",\"items\":{\"type\":\"string\"},\"type\":\"array\"},\"topologyKey\":{\"description\":\"This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.\",\"type\":\"string\"}},\"required\":[\"topologyKey\"],\"type\":\"object\"},\"weight\":{\"description\":\"weight associated with matching the corresponding podAffinityTerm, in the range 1-100.\",\"format\":\"int32\",\"type\":\"integer\"}},\"required\":[\"podAffinityTerm\",\"weight\"],\"type\":\"object\"},\"type\":\"array\"},\"requiredDuringSchedulingIgnoredDuringExecution\":{\"description\":\"If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.\",\"items\":{\"description\":\"Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key \\u003ctopologyKey\\u003e matches that of any node on which a pod of the set of pods is running\",\"properties\":{\"labelSelector\":{\"description\":\"A label query over a set of resources, in this case pods.\",\"properties\":{\"matchExpressions\":{\"description\":\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\",\"items\":{\"description\":\"A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.\",\"properties\":{\"key\":{\"description\":\"key is the label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\",\"type\":\"string\"},\"values\":{\"description\":\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\"},\"matchLabels\":{\"additionalProperties\":{\"type\":\"string\"},\"description\":\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\",\"type\":\"object\"}},\"type\":\"object\"},\"namespaces\":{\"description\":\"namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means \\\"this pod's namespace\\\"\",\"items\":{\"type\":\"string\"},\"type\":\"array\"},\"topologyKey\":{\"description\":\"This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.\",\"type\":\"string\"}},\"required\":[\"topologyKey\"],\"type\":\"object\"},\"type\":\"array\"}},\"type\":\"object\"},\"podAntiAffinity\":{\"description\":\"Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).\",\"properties\":{\"preferredDuringSchedulingIgnoredDuringExecution\":{\"description\":\"The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \\\"weight\\\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.\",\"items\":{\"description\":\"The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)\",\"properties\":{\"podAffinityTerm\":{\"description\":\"Required. A pod affinity term, associated with the corresponding weight.\",\"properties\":{\"labelSelector\":{\"description\":\"A label query over a set of resources, in this case pods.\",\"properties\":{\"matchExpressions\":{\"description\":\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\",\"items\":{\"description\":\"A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.\",\"properties\":{\"key\":{\"description\":\"key is the label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\",\"type\":\"string\"},\"values\":{\"description\":\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\"},\"matchLabels\":{\"additionalProperties\":{\"type\":\"string\"},\"description\":\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\",\"type\":\"object\"}},\"type\":\"object\"},\"namespaces\":{\"description\":\"namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means \\\"this pod's namespace\\\"\",\"items\":{\"type\":\"string\"},\"type\":\"array\"},\"topologyKey\":{\"description\":\"This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.\",\"type\":\"string\"}},\"required\":[\"topologyKey\"],\"type\":\"object\"},\"weight\":{\"description\":\"weight associated with matching the corresponding podAffinityTerm, in the range 1-100.\",\"format\":\"int32\",\"type\":\"integer\"}},\"required\":[\"podAffinityTerm\",\"weight\"],\"type\":\"object\"},\"type\":\"array\"},\"requiredDuringSchedulingIgnoredDuringExecution\":{\"description\":\"If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.\",\"items\":{\"description\":\"Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key \\u003ctopologyKey\\u003e matches that of any node on which a pod of the set of pods is running\",\"properties\":{\"labelSelector\":{\"description\":\"A label query over a set of resources, in this case pods.\",\"properties\":{\"matchExpressions\":{\"description\":\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\",\"items\":{\"description\":\"A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.\",\"properties\":{\"key\":{\"description\":\"key is the label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\",\"type\":\"string\"},\"values\":{\"description\":\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\"},\"matchLabels\":{\"additionalProperties\":{\"type\":\"string\"},\"description\":\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\",\"type\":\"object\"}},\"type\":\"object\"},\"namespaces\":{\"description\":\"namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means \\\"this pod's namespace\\\"\",\"items\":{\"type\":\"string\"},\"type\":\"array\"},\"topologyKey\":{\"description\":\"This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.\",\"type\":\"string\"}},\"required\":[\"topologyKey\"],\"type\":\"object\"},\"type\":\"array\"}},\"type\":\"object\"}},\"type\":\"object\"},\"nodeSelector\":{\"additionalProperties\":{\"type\":\"string\"},\"type\":\"object\"},\"tolerations\":{\"items\":{\"description\":\"The pod this Toleration is attached to tolerates any taint that matches the triple \\u003ckey,value,effect\\u003e using the matching operator \\u003coperator\\u003e.\",\"properties\":{\"effect\":{\"description\":\"Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.\",\"type\":\"string\"},\"key\":{\"description\":\"Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.\",\"type\":\"string\"},\"operator\":{\"description\":\"Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.\",\"type\":\"string\"},\"tolerationSeconds\":{\"description\":\"TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.\",\"format\":\"int64\",\"type\":\"integer\"},\"value\":{\"description\":\"Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.\",\"type\":\"string\"}},\"type\":\"object\"},\"type\":\"array\"}},\"type\":\"object\"},\"workloads\":{\"properties\":{\"affinity\":{\"description\":\"Affinity is a group of affinity scheduling rules.\",\"properties\":{\"nodeAffinity\":{\"description\":\"Describes node affinity scheduling rules for the pod.\",\"properties\":{\"preferredDuringSchedulingIgnoredDuringExecution\":{\"description\":\"The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \\\"weight\\\" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred.\",\"items\":{\"description\":\"An empty preferred scheduling term matches all objects with implicit weight 0 (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).\",\"properties\":{\"preference\":{\"description\":\"A node selector term, associated with the corresponding weight.\",\"properties\":{\"matchExpressions\":{\"description\":\"A list of node selector requirements by node's labels.\",\"items\":{\"description\":\"A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.\",\"properties\":{\"key\":{\"description\":\"The label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.\",\"type\":\"string\"},\"values\":{\"description\":\"An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\"},\"matchFields\":{\"description\":\"A list of node selector requirements by node's fields.\",\"items\":{\"description\":\"A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.\",\"properties\":{\"key\":{\"description\":\"The label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.\",\"type\":\"string\"},\"values\":{\"description\":\"An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\"}},\"type\":\"object\"},\"weight\":{\"description\":\"Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.\",\"format\":\"int32\",\"type\":\"integer\"}},\"required\":[\"preference\",\"weight\"],\"type\":\"object\"},\"type\":\"array\"},\"requiredDuringSchedulingIgnoredDuringExecution\":{\"description\":\"If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.\",\"properties\":{\"nodeSelectorTerms\":{\"description\":\"Required. A list of node selector terms. The terms are ORed.\",\"items\":{\"description\":\"A null or empty node selector term matches no objects. The requirements of them are ANDed. The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.\",\"properties\":{\"matchExpressions\":{\"description\":\"A list of node selector requirements by node's labels.\",\"items\":{\"description\":\"A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.\",\"properties\":{\"key\":{\"description\":\"The label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.\",\"type\":\"string\"},\"values\":{\"description\":\"An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\"},\"matchFields\":{\"description\":\"A list of node selector requirements by node's fields.\",\"items\":{\"description\":\"A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.\",\"properties\":{\"key\":{\"description\":\"The label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.\",\"type\":\"string\"},\"values\":{\"description\":\"An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\"}},\"type\":\"object\"},\"type\":\"array\"}},\"required\":[\"nodeSelectorTerms\"],\"type\":\"object\"}},\"type\":\"object\"},\"podAffinity\":{\"description\":\"Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).\",\"properties\":{\"preferredDuringSchedulingIgnoredDuringExecution\":{\"description\":\"The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \\\"weight\\\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.\",\"items\":{\"description\":\"The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)\",\"properties\":{\"podAffinityTerm\":{\"description\":\"Required. A pod affinity term, associated with the corresponding weight.\",\"properties\":{\"labelSelector\":{\"description\":\"A label query over a set of resources, in this case pods.\",\"properties\":{\"matchExpressions\":{\"description\":\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\",\"items\":{\"description\":\"A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.\",\"properties\":{\"key\":{\"description\":\"key is the label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\",\"type\":\"string\"},\"values\":{\"description\":\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\"},\"matchLabels\":{\"additionalProperties\":{\"type\":\"string\"},\"description\":\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\",\"type\":\"object\"}},\"type\":\"object\"},\"namespaces\":{\"description\":\"namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means \\\"this pod's namespace\\\"\",\"items\":{\"type\":\"string\"},\"type\":\"array\"},\"topologyKey\":{\"description\":\"This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.\",\"type\":\"string\"}},\"required\":[\"topologyKey\"],\"type\":\"object\"},\"weight\":{\"description\":\"weight associated with matching the corresponding podAffinityTerm, in the range 1-100.\",\"format\":\"int32\",\"type\":\"integer\"}},\"required\":[\"podAffinityTerm\",\"weight\"],\"type\":\"object\"},\"type\":\"array\"},\"requiredDuringSchedulingIgnoredDuringExecution\":{\"description\":\"If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.\",\"items\":{\"description\":\"Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key \\u003ctopologyKey\\u003e matches that of any node on which a pod of the set of pods is running\",\"properties\":{\"labelSelector\":{\"description\":\"A label query over a set of resources, in this case pods.\",\"properties\":{\"matchExpressions\":{\"description\":\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\",\"items\":{\"description\":\"A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.\",\"properties\":{\"key\":{\"description\":\"key is the label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\",\"type\":\"string\"},\"values\":{\"description\":\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\"},\"matchLabels\":{\"additionalProperties\":{\"type\":\"string\"},\"description\":\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\",\"type\":\"object\"}},\"type\":\"object\"},\"namespaces\":{\"description\":\"namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means \\\"this pod's namespace\\\"\",\"items\":{\"type\":\"string\"},\"type\":\"array\"},\"topologyKey\":{\"description\":\"This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.\",\"type\":\"string\"}},\"required\":[\"topologyKey\"],\"type\":\"object\"},\"type\":\"array\"}},\"type\":\"object\"},\"podAntiAffinity\":{\"description\":\"Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).\",\"properties\":{\"preferredDuringSchedulingIgnoredDuringExecution\":{\"description\":\"The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \\\"weight\\\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.\",\"items\":{\"description\":\"The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)\",\"properties\":{\"podAffinityTerm\":{\"description\":\"Required. A pod affinity term, associated with the corresponding weight.\",\"properties\":{\"labelSelector\":{\"description\":\"A label query over a set of resources, in this case pods.\",\"properties\":{\"matchExpressions\":{\"description\":\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\",\"items\":{\"description\":\"A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.\",\"properties\":{\"key\":{\"description\":\"key is the label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\",\"type\":\"string\"},\"values\":{\"description\":\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\"},\"matchLabels\":{\"additionalProperties\":{\"type\":\"string\"},\"description\":\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\",\"type\":\"object\"}},\"type\":\"object\"},\"namespaces\":{\"description\":\"namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means \\\"this pod's namespace\\\"\",\"items\":{\"type\":\"string\"},\"type\":\"array\"},\"topologyKey\":{\"description\":\"This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.\",\"type\":\"string\"}},\"required\":[\"topologyKey\"],\"type\":\"object\"},\"weight\":{\"description\":\"weight associated with matching the corresponding podAffinityTerm, in the range 1-100.\",\"format\":\"int32\",\"type\":\"integer\"}},\"required\":[\"podAffinityTerm\",\"weight\"],\"type\":\"object\"},\"type\":\"array\"},\"requiredDuringSchedulingIgnoredDuringExecution\":{\"description\":\"If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.\",\"items\":{\"description\":\"Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key \\u003ctopologyKey\\u003e matches that of any node on which a pod of the set of pods is running\",\"properties\":{\"labelSelector\":{\"description\":\"A label query over a set of resources, in this case pods.\",\"properties\":{\"matchExpressions\":{\"description\":\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\",\"items\":{\"description\":\"A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.\",\"properties\":{\"key\":{\"description\":\"key is the label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\",\"type\":\"string\"},\"values\":{\"description\":\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\"},\"matchLabels\":{\"additionalProperties\":{\"type\":\"string\"},\"description\":\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\",\"type\":\"object\"}},\"type\":\"object\"},\"namespaces\":{\"description\":\"namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means \\\"this pod's namespace\\\"\",\"items\":{\"type\":\"string\"},\"type\":\"array\"},\"topologyKey\":{\"description\":\"This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.\",\"type\":\"string\"}},\"required\":[\"topologyKey\"],\"type\":\"object\"},\"type\":\"array\"}},\"type\":\"object\"}},\"type\":\"object\"},\"nodeSelector\":{\"additionalProperties\":{\"type\":\"string\"},\"type\":\"object\"},\"tolerations\":{\"items\":{\"description\":\"The pod this Toleration is attached to tolerates any taint that matches the triple \\u003ckey,value,effect\\u003e using the matching operator \\u003coperator\\u003e.\",\"properties\":{\"effect\":{\"description\":\"Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.\",\"type\":\"string\"},\"key\":{\"description\":\"Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.\",\"type\":\"string\"},\"operator\":{\"description\":\"Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.\",\"type\":\"string\"},\"tolerationSeconds\":{\"description\":\"TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.\",\"format\":\"int64\",\"type\":\"integer\"},\"value\":{\"description\":\"Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.\",\"type\":\"string\"}},\"type\":\"object\"},\"type\":\"array\"}},\"type\":\"object\"}},\"type\":\"object\"},\"selfSignConfiguration\":{\"description\":\"SelfSignConfiguration defines self sign configuration\",\"properties\":{\"caOverlapInterval\":{\"description\":\"CAOverlapInterval defines the duration where expired CA certificate can overlap with new one, in order to allow fluent CA rotation transitioning\",\"type\":\"string\"},\"caRotateInterval\":{\"description\":\"CARotateInterval defines duration for CA expiration\",\"type\":\"string\"},\"certOverlapInterval\":{\"description\":\"CertOverlapInterval defines the duration where expired service certificate can overlap with new one, in order to allow fluent service rotation transitioning\",\"type\":\"string\"},\"certRotateInterval\":{\"description\":\"CertRotateInterval defines duration for of service certificate expiration\",\"type\":\"string\"}},\"type\":\"object\"},\"tlsSecurityProfile\":{\"description\":\"TLSSecurityProfile defines the schema for a TLS security profile. This object is used by operators to apply TLS security settings to operands.\",\"nullable\":true,\"properties\":{\"custom\":{\"description\":\"custom is a user-defined TLS security profile. Be extremely careful using a custom profile as invalid configurations can be catastrophic. An example custom profile looks like this: ciphers: ECDHE-ECDSA-CHACHA20-POLY1305,ECDHE-RSA-CHACHA20-POLY1305,ECDHE-RSA-AES128-GCM-SHA256,ECDHE-ECDSA-AES128-GCM-SHA256 minTLSVersion: TLSv1.1\",\"nullable\":true,\"properties\":{\"ciphers\":{\"description\":\"ciphers is used to specify the cipher algorithms that are negotiated during the TLS handshake.  Operators may remove entries their operands do not support.  For example, to use DES-CBC3-SHA  (yaml):\\n   ciphers:     - DES-CBC3-SHA\",\"items\":{\"enum\":[\"TLS_AES_128_GCM_SHA256\",\"TLS_AES_256_GCM_SHA384\",\"TLS_CHACHA20_POLY1305_SHA256\",\"ECDHE-ECDSA-AES128-GCM-SHA256\",\"ECDHE-RSA-AES128-GCM-SHA256\",\"ECDHE-ECDSA-AES256-GCM-SHA384\",\"ECDHE-RSA-AES256-GCM-SHA384\",\"ECDHE-ECDSA-CHACHA20-POLY1305\",\"ECDHE-RSA-CHACHA20-POLY1305\",\"DHE-RSA-AES128-GCM-SHA256\",\"DHE-RSA-AES256-GCM-SHA384\",\"DHE-RSA-CHACHA20-POLY1305\",\"ECDHE-ECDSA-AES128-SHA256\",\"ECDHE-RSA-AES128-SHA256\",\"ECDHE-ECDSA-AES128-SHA\",\"ECDHE-RSA-AES128-SHA\",\"ECDHE-ECDSA-AES256-SHA384\",\"ECDHE-RSA-AES256-SHA384\",\"ECDHE-ECDSA-AES256-SHA\",\"ECDHE-RSA-AES256-SHA\",\"DHE-RSA-AES128-SHA256\",\"DHE-RSA-AES256-SHA256\",\"AES128-GCM-SHA256\",\"AES256-GCM-SHA384\",\"AES128-SHA256\",\"AES256-SHA256\",\"AES128-SHA\",\"AES256-SHA\",\"DES-CBC3-SHA\"],\"type\":\"string\"},\"type\":\"array\"},\"minTLSVersion\":{\"description\":\"minTLSVersion is used to specify the minimal version of the TLS protocol that is negotiated during the TLS handshake. For example, to use TLS versions 1.1, 1.2 and 1.3 (yaml):\\n   minTLSVersion: TLSv1.1\\n NOTE: currently the highest minTLSVersion allowed is VersionTLS12\",\"enum\":[\"VersionTLS10\",\"VersionTLS11\",\"VersionTLS12\",\"VersionTLS13\"],\"type\":\"string\"}},\"type\":\"object\"},\"intermediate\":{\"description\":\"intermediate is a TLS security profile based on: https://wiki.mozilla.org/Security/Server_Side_TLS#Intermediate_compatibility_.28recommended.29 and looks like this (yaml):\\n   ciphers: TLS_AES_128_GCM_SHA256,TLS_AES_256_GCM_SHA384,TLS_CHACHA20_POLY1305_SHA256,ECDHE-ECDSA-AES128-GCM-SHA256     - ECDHE-RSA-AE,SHA256,ECDHE-ECDSA-AES256-GCM-SHA384,ECDHE-RSA-AE,SHA384,ECDHE-ECDSA-CHACHA20-POLY1305,ECDHE,POLY1305,DHE-RSA-AES128-GCM-SHA256,DHE-RSA-AES256-GCM-SHA384 minTLSVersion: TLSv1.2\",\"nullable\":true,\"type\":\"object\"},\"modern\":{\"description\":\"modern is a TLS security profile based on: https://wiki.mozilla.org/Security/Server_Side_TLS#Modern_compatibility and looks like this (yaml): ciphers: TLS_AES_128_GCM_SHA256,TLS_AES_256_GCM_SHA384,TLS_CHACHA20_POLY1305_SHA256 minTLSVersion: TLSv1.3 NOTE: Currently unsupported.\",\"nullable\":true,\"type\":\"object\"},\"old\":{\"description\":\"old is a TLS security profile based on: https://wiki.mozilla.org/Security/Server_Side_TLS#Old_backward_compatibility and looks like this (yaml): ciphers: TLS_AES_128_GCM_SHA256,TLS_AES_256_GCM_SHA384,TLS_CHACHA20_POLY1305_SHA256,ECDHE-ECDSA-AES128-GCM-SHA256,ECDHE-RSA-AES128-GCM-SHA256,ECDHE-ECDSA-AES256-GCM-SHA384,ECDHE-RSA-AES256-GCM-SHA384,ECDHE-ECDSA-CHACHA20-POLY1305,ECDHE-RSA-CHACHA20-POLY1305,DHE-RSA-AES128-GCM-SHA256,DHE-RSA-AES256-GCM-SHA384,DHE-RSA-CHACHA20-POLY1305,ECDHE-ECDSA-AES128-SHA256,ECDHE-RSA-AES128-SHA256,ECDHE-ECDSA-AES128-SHA,ECDHE-RSA-AES128-SHA,ECDHE-ECDSA-AES256-SHA384,ECDHE-RSA-AES256-SHA384,ECDHE-ECDSA-AES256-SHA,ECDHE-RSA-AES256-SHA,DHE-RSA-AES128-SHA256,DHE-RSA-AES256-SHA256,AES128-GCM-SHA256,AES256-GCM-SHA384,AES128-SHA256,AES256-SHA256,AES128-SHA,AES256-SHA,DES-CBC3-SHA minTLSVersion: TLSv1.0\",\"nullable\":true,\"type\":\"object\"},\"type\":{\"description\":\"type is one of Old, Intermediate, Modern or Custom. Custom provides the ability to specify individual TLS security profile parameters. Old, Intermediate and Modern are TLS security profiles based on:\\n https://wiki.mozilla.org/Security/Server_Side_TLS#Recommended_configurations The profiles are intent based, so they may change over time as new ciphers are developed and existing ciphers are found to be insecure.  Depending on precisely which ciphers are available to a process, the list may be reduced.\\n Note that the Modern profile is currently not supported because it is not yet well adopted by common software libraries.\",\"enum\":[\"Old\",\"Intermediate\",\"Modern\",\"Custom\"],\"type\":\"string\"}},\"type\":\"object\"}},\"type\":\"object\"},\"status\":{\"description\":\"NetworkAddonsConfigStatus defines the observed state of NetworkAddonsConfig\",\"properties\":{\"conditions\":{\"items\":{\"description\":\"Condition represents the state of the operator's reconciliation functionality.\",\"properties\":{\"lastHeartbeatTime\":{\"format\":\"date-time\",\"nullable\":true,\"type\":\"string\"},\"lastTransitionTime\":{\"format\":\"date-time\",\"nullable\":true,\"type\":\"string\"},\"message\":{\"type\":\"string\"},\"reason\":{\"type\":\"string\"},\"status\":{\"type\":\"string\"},\"type\":{\"description\":\"ConditionType is the state of the operator's reconciliation functionality.\",\"type\":\"string\"}},\"required\":[\"status\",\"type\"],\"type\":\"object\"},\"type\":\"array\"},\"containers\":{\"items\":{\"properties\":{\"image\":{\"type\":\"string\"},\"name\":{\"type\":\"string\"},\"parentKind\":{\"type\":\"string\"},\"parentName\":{\"type\":\"string\"}},\"required\":[\"image\",\"name\",\"parentKind\",\"parentName\"],\"type\":\"object\"},\"type\":\"array\"},\"observedVersion\":{\"type\":\"string\"},\"operatorVersion\":{\"type\":\"string\"},\"targetVersion\":{\"type\":\"string\"}},\"type\":\"object\"}},\"type\":\"object\"}},\"served\":true,\"storage\":false,\"subresources\":{\"status\":{}}}]}}\n"
      },
      "served_versions": [
        "v1",
        "v1alpha1"
      ],
      "stored_version": "v1",
      "categories": [],
      "short_names": [],
      "description": null,
      "instance_count": 1
    },
    {
      "name": "nodetopologies.node.k8s.appscode.com",
      "group": "node.k8s.appscode.com",
      "version": "v1alpha1",
      "kind": "NodeTopology",
      "plural": "nodetopologies",
      "singular": "nodetopology",
      "scope": "Cluster",
      "creation_timestamp": "2025-09-06T13:33:51+00:00",
      "labels": {},
      "annotations": {},
      "served_versions": [
        "v1alpha1"
      ],
      "stored_version": "v1alpha1",
      "categories": [],
      "short_names": [],
      "description": null,
      "instance_count": 0
    },
    {
      "name": "oauthconfigs.oauth.authn.krateo.io",
      "group": "oauth.authn.krateo.io",
      "version": "v1alpha1",
      "kind": "OAuthConfig",
      "plural": "oauthconfigs",
      "singular": "oauthconfig",
      "scope": "Namespaced",
      "creation_timestamp": "2025-09-06T09:44:38+00:00",
      "labels": {},
      "annotations": {
        "controller-gen.kubebuilder.io/version": "v0.16.5"
      },
      "served_versions": [
        "v1alpha1"
      ],
      "stored_version": "v1alpha1",
      "categories": [
        "krateo",
        "authn",
        "oauth"
      ],
      "short_names": [],
      "description": null,
      "instance_count": 0
    },
    {
      "name": "objecttransfers.cdi.kubevirt.io",
      "group": "cdi.kubevirt.io",
      "version": "v1beta1",
      "kind": "ObjectTransfer",
      "plural": "objecttransfers",
      "singular": "objecttransfer",
      "scope": "Cluster",
      "creation_timestamp": "2025-09-06T13:01:11+00:00",
      "labels": {
        "app.kubernetes.io/part-of": "hyperconverged-cluster",
        "app.kubernetes.io/version": "1.17.0",
        "operator.cdi.kubevirt.io/createVersion": "v1.63.0"
      },
      "annotations": {
        "controller-gen.kubebuilder.io/version": "v0.14.0",
        "operator.cdi.kubevirt.io/lastAppliedConfiguration": "{\"kind\":\"CustomResourceDefinition\",\"apiVersion\":\"apiextensions.k8s.io/v1\",\"metadata\":{\"name\":\"objecttransfers.cdi.kubevirt.io\",\"creationTimestamp\":null,\"annotations\":{\"controller-gen.kubebuilder.io/version\":\"v0.14.0\"}},\"spec\":{\"group\":\"cdi.kubevirt.io\",\"names\":{\"plural\":\"objecttransfers\",\"singular\":\"objecttransfer\",\"shortNames\":[\"ot\",\"ots\"],\"kind\":\"ObjectTransfer\",\"listKind\":\"ObjectTransferList\"},\"scope\":\"Cluster\",\"versions\":[{\"name\":\"v1beta1\",\"served\":true,\"storage\":true,\"deprecated\":true,\"deprecationWarning\":\"cdi.kubevirt.io/v1beta1 is now deprecated and will be removed in v1.\",\"schema\":{\"openAPIV3Schema\":{\"description\":\"Deprecated for removal in v1.\\n\\n\\nObjectTransfer is the cluster scoped object transfer resource\",\"type\":\"object\",\"required\":[\"spec\"],\"properties\":{\"apiVersion\":{\"description\":\"APIVersion defines the versioned schema of this representation of an object.\\nServers should convert recognized schemas to the latest internal value, and\\nmay reject unrecognized values.\\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources\",\"type\":\"string\"},\"kind\":{\"description\":\"Kind is a string value representing the REST resource this object represents.\\nServers may infer this from the endpoint the client submits requests to.\\nCannot be updated.\\nIn CamelCase.\\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\",\"type\":\"string\"},\"metadata\":{\"type\":\"object\"},\"spec\":{\"description\":\"ObjectTransferSpec specifies the source/target of the transfer\",\"type\":\"object\",\"required\":[\"source\",\"target\"],\"properties\":{\"parentName\":{\"type\":\"string\"},\"source\":{\"description\":\"TransferSource is the source of a ObjectTransfer\",\"type\":\"object\",\"required\":[\"kind\",\"name\",\"namespace\"],\"properties\":{\"apiVersion\":{\"type\":\"string\"},\"kind\":{\"type\":\"string\"},\"name\":{\"type\":\"string\"},\"namespace\":{\"type\":\"string\"},\"requiredAnnotations\":{\"type\":\"object\",\"additionalProperties\":{\"type\":\"string\"}}}},\"target\":{\"description\":\"TransferTarget is the target of an ObjectTransfer\",\"type\":\"object\",\"properties\":{\"name\":{\"type\":\"string\"},\"namespace\":{\"type\":\"string\"}}}}},\"status\":{\"description\":\"ObjectTransferStatus is the status of the ObjectTransfer\",\"type\":\"object\",\"properties\":{\"conditions\":{\"type\":\"array\",\"items\":{\"description\":\"ObjectTransferCondition contains condition data\",\"type\":\"object\",\"required\":[\"status\",\"type\"],\"properties\":{\"lastHeartbeatTime\":{\"type\":\"string\",\"format\":\"date-time\"},\"lastTransitionTime\":{\"type\":\"string\",\"format\":\"date-time\"},\"message\":{\"type\":\"string\"},\"reason\":{\"type\":\"string\"},\"status\":{\"type\":\"string\"},\"type\":{\"description\":\"ObjectTransferConditionType is the type of ObjectTransferCondition\",\"type\":\"string\"}}}},\"data\":{\"description\":\"Data is a place for intermediary state.  Or anything really.\",\"type\":\"object\",\"additionalProperties\":{\"type\":\"string\"}},\"phase\":{\"description\":\"Phase is the current phase of the transfer\",\"type\":\"string\"}}}}}},\"subresources\":{\"status\":{}},\"additionalPrinterColumns\":[{\"name\":\"Age\",\"type\":\"date\",\"jsonPath\":\".metadata.creationTimestamp\"},{\"name\":\"Phase\",\"type\":\"string\",\"description\":\"The phase of the ObjectTransfer\",\"jsonPath\":\".status.phase\"}]}]},\"status\":{\"conditions\":null,\"acceptedNames\":{\"plural\":\"\",\"kind\":\"\"},\"storedVersions\":null}}"
      },
      "served_versions": [
        "v1beta1"
      ],
      "stored_version": "v1beta1",
      "categories": [],
      "short_names": [
        "ot",
        "ots"
      ],
      "description": null,
      "instance_count": 0
    },
    {
      "name": "oidcconfigs.oidc.authn.krateo.io",
      "group": "oidc.authn.krateo.io",
      "version": "v1alpha1",
      "kind": "OIDCConfig",
      "plural": "oidcconfigs",
      "singular": "oidcconfig",
      "scope": "Namespaced",
      "creation_timestamp": "2025-09-06T09:44:38+00:00",
      "labels": {},
      "annotations": {
        "controller-gen.kubebuilder.io/version": "v0.16.5"
      },
      "served_versions": [
        "v1alpha1"
      ],
      "stored_version": "v1alpha1",
      "categories": [
        "krateo",
        "authn",
        "oidc"
      ],
      "short_names": [],
      "description": null,
      "instance_count": 0
    },
    {
      "name": "olmconfigs.operators.coreos.com",
      "group": "operators.coreos.com",
      "version": "v1",
      "kind": "OLMConfig",
      "plural": "olmconfigs",
      "singular": "olmconfig",
      "scope": "Cluster",
      "creation_timestamp": "2025-09-06T12:34:54+00:00",
      "labels": {},
      "annotations": {
        "controller-gen.kubebuilder.io/version": "v0.14.0"
      },
      "served_versions": [
        "v1"
      ],
      "stored_version": "v1",
      "categories": [
        "olm"
      ],
      "short_names": [],
      "description": null,
      "instance_count": 1
    },
    {
      "name": "openstackvolumepopulators.forklift.cdi.kubevirt.io",
      "group": "forklift.cdi.kubevirt.io",
      "version": "v1beta1",
      "kind": "OpenstackVolumePopulator",
      "plural": "openstackvolumepopulators",
      "singular": "openstackvolumepopulator",
      "scope": "Namespaced",
      "creation_timestamp": "2025-09-06T13:01:11+00:00",
      "labels": {
        "app.kubernetes.io/part-of": "hyperconverged-cluster",
        "app.kubernetes.io/version": "1.17.0",
        "operator.cdi.kubevirt.io/createVersion": "v1.63.0"
      },
      "annotations": {
        "controller-gen.kubebuilder.io/version": "v0.14.0",
        "operator.cdi.kubevirt.io/lastAppliedConfiguration": "{\"kind\":\"CustomResourceDefinition\",\"apiVersion\":\"apiextensions.k8s.io/v1\",\"metadata\":{\"name\":\"openstackvolumepopulators.forklift.cdi.kubevirt.io\",\"creationTimestamp\":null,\"annotations\":{\"controller-gen.kubebuilder.io/version\":\"v0.14.0\"}},\"spec\":{\"group\":\"forklift.cdi.kubevirt.io\",\"names\":{\"plural\":\"openstackvolumepopulators\",\"singular\":\"openstackvolumepopulator\",\"shortNames\":[\"osvp\",\"osvps\"],\"kind\":\"OpenstackVolumePopulator\",\"listKind\":\"OpenstackVolumePopulatorList\"},\"scope\":\"Namespaced\",\"versions\":[{\"name\":\"v1beta1\",\"served\":true,\"storage\":true,\"schema\":{\"openAPIV3Schema\":{\"description\":\"OpenstackVolumePopulator is the CR used to populator a volume from an Openstack image\",\"type\":\"object\",\"required\":[\"spec\"],\"properties\":{\"apiVersion\":{\"description\":\"APIVersion defines the versioned schema of this representation of an object.\\nServers should convert recognized schemas to the latest internal value, and\\nmay reject unrecognized values.\\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources\",\"type\":\"string\"},\"kind\":{\"description\":\"Kind is a string value representing the REST resource this object represents.\\nServers may infer this from the endpoint the client submits requests to.\\nCannot be updated.\\nIn CamelCase.\\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\",\"type\":\"string\"},\"metadata\":{\"type\":\"object\"},\"spec\":{\"description\":\"OpenstackVolumePopulatorSpec is the spec of the OpenstackVolumePopulator CR\",\"type\":\"object\",\"required\":[\"identityUrl\",\"imageId\",\"secretRef\"],\"properties\":{\"identityUrl\":{\"type\":\"string\"},\"imageId\":{\"type\":\"string\"},\"secretRef\":{\"type\":\"string\"},\"transferNetwork\":{\"description\":\"The network attachment definition that should be used for disk transfer.\",\"type\":\"string\"}}},\"status\":{\"description\":\"OpenstackVolumePopulatorStatus is the status of the OpenstackVolumePopulator CR\",\"type\":\"object\",\"properties\":{\"progress\":{\"type\":\"string\"}}}}}}}]},\"status\":{\"conditions\":null,\"acceptedNames\":{\"plural\":\"\",\"kind\":\"\"},\"storedVersions\":null}}"
      },
      "served_versions": [
        "v1beta1"
      ],
      "stored_version": "v1beta1",
      "categories": [],
      "short_names": [
        "osvp",
        "osvps"
      ],
      "description": null,
      "instance_count": 0
    },
    {
      "name": "operatorconditions.operators.coreos.com",
      "group": "operators.coreos.com",
      "version": "v2",
      "kind": "OperatorCondition",
      "plural": "operatorconditions",
      "singular": "operatorcondition",
      "scope": "Namespaced",
      "creation_timestamp": "2025-09-06T12:34:55+00:00",
      "labels": {},
      "annotations": {
        "controller-gen.kubebuilder.io/version": "v0.14.0"
      },
      "served_versions": [
        "v1",
        "v2"
      ],
      "stored_version": "v2",
      "categories": [
        "olm"
      ],
      "short_names": [
        "condition"
      ],
      "description": null,
      "instance_count": 4
    },
    {
      "name": "operatorgroups.operators.coreos.com",
      "group": "operators.coreos.com",
      "version": "v1",
      "kind": "OperatorGroup",
      "plural": "operatorgroups",
      "singular": "operatorgroup",
      "scope": "Namespaced",
      "creation_timestamp": "2025-09-06T12:34:56+00:00",
      "labels": {},
      "annotations": {
        "controller-gen.kubebuilder.io/version": "v0.14.0"
      },
      "served_versions": [
        "v1",
        "v1alpha2"
      ],
      "stored_version": "v1",
      "categories": [
        "olm"
      ],
      "short_names": [
        "og"
      ],
      "description": null,
      "instance_count": 2
    },
    {
      "name": "operators.operators.coreos.com",
      "group": "operators.coreos.com",
      "version": "v1",
      "kind": "Operator",
      "plural": "operators",
      "singular": "operator",
      "scope": "Cluster",
      "creation_timestamp": "2025-09-06T12:34:57+00:00",
      "labels": {},
      "annotations": {
        "controller-gen.kubebuilder.io/version": "v0.14.0"
      },
      "served_versions": [
        "v1"
      ],
      "stored_version": "v1",
      "categories": [
        "olm"
      ],
      "short_names": [],
      "description": null,
      "instance_count": 3
    },
    {
      "name": "oraclerestdataservices.database.oracle.com",
      "group": "database.oracle.com",
      "version": "v4",
      "kind": "OracleRestDataService",
      "plural": "oraclerestdataservices",
      "singular": "oraclerestdataservice",
      "scope": "Namespaced",
      "creation_timestamp": "2025-09-06T17:41:22+00:00",
      "labels": {
        "olm.managed": "true",
        "operators.coreos.com/oracle-database-operator.operators": ""
      },
      "annotations": {
        "cert-manager.io/inject-ca-from": "oracle-database-operator-system/oracle-database-operator-serving-cert",
        "controller-gen.kubebuilder.io/version": "v0.16.5",
        "operatorframework.io/installed-alongside-f8529ccd93ced1d5": "operators/oracle-database-operator.v1.2.0"
      },
      "served_versions": [
        "v1alpha1",
        "v4"
      ],
      "stored_version": "v4",
      "categories": [],
      "short_names": [],
      "description": null,
      "instance_count": 0
    },
    {
      "name": "oracleversions.catalog.kubedb.com",
      "group": "catalog.kubedb.com",
      "version": "v1alpha1",
      "kind": "OracleVersion",
      "plural": "oracleversions",
      "singular": "oracleversion",
      "scope": "Cluster",
      "creation_timestamp": "2025-09-06T13:33:51+00:00",
      "labels": {
        "app.kubernetes.io/name": "kubedb"
      },
      "annotations": {},
      "served_versions": [
        "v1alpha1"
      ],
      "stored_version": "v1alpha1",
      "categories": [
        "catalog",
        "kubedb",
        "appscode"
      ],
      "short_names": [
        "oraversion"
      ],
      "description": null,
      "instance_count": 0
    },
    {
      "name": "orders.acme.cert-manager.io",
      "group": "acme.cert-manager.io",
      "version": "v1",
      "kind": "Order",
      "plural": "orders",
      "singular": "order",
      "scope": "Namespaced",
      "creation_timestamp": "2025-09-06T12:52:41+00:00",
      "labels": {
        "app": "cert-manager",
        "app.kubernetes.io/component": "crds",
        "app.kubernetes.io/instance": "cert-manager",
        "app.kubernetes.io/name": "cert-manager",
        "app.kubernetes.io/version": "v1.15.3"
      },
      "annotations": {
        "helm.sh/resource-policy": "keep",
        "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"apiextensions.k8s.io/v1\",\"kind\":\"CustomResourceDefinition\",\"metadata\":{\"annotations\":{\"helm.sh/resource-policy\":\"keep\"},\"labels\":{\"app\":\"cert-manager\",\"app.kubernetes.io/component\":\"crds\",\"app.kubernetes.io/instance\":\"cert-manager\",\"app.kubernetes.io/name\":\"cert-manager\",\"app.kubernetes.io/version\":\"v1.15.3\"},\"name\":\"orders.acme.cert-manager.io\"},\"spec\":{\"group\":\"acme.cert-manager.io\",\"names\":{\"categories\":[\"cert-manager\",\"cert-manager-acme\"],\"kind\":\"Order\",\"listKind\":\"OrderList\",\"plural\":\"orders\",\"singular\":\"order\"},\"scope\":\"Namespaced\",\"versions\":[{\"additionalPrinterColumns\":[{\"jsonPath\":\".status.state\",\"name\":\"State\",\"type\":\"string\"},{\"jsonPath\":\".spec.issuerRef.name\",\"name\":\"Issuer\",\"priority\":1,\"type\":\"string\"},{\"jsonPath\":\".status.reason\",\"name\":\"Reason\",\"priority\":1,\"type\":\"string\"},{\"description\":\"CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC.\",\"jsonPath\":\".metadata.creationTimestamp\",\"name\":\"Age\",\"type\":\"date\"}],\"name\":\"v1\",\"schema\":{\"openAPIV3Schema\":{\"description\":\"Order is a type to represent an Order with an ACME server\",\"properties\":{\"apiVersion\":{\"description\":\"APIVersion defines the versioned schema of this representation of an object.\\nServers should convert recognized schemas to the latest internal value, and\\nmay reject unrecognized values.\\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources\",\"type\":\"string\"},\"kind\":{\"description\":\"Kind is a string value representing the REST resource this object represents.\\nServers may infer this from the endpoint the client submits requests to.\\nCannot be updated.\\nIn CamelCase.\\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\",\"type\":\"string\"},\"metadata\":{\"type\":\"object\"},\"spec\":{\"properties\":{\"commonName\":{\"description\":\"CommonName is the common name as specified on the DER encoded CSR.\\nIf specified, this value must also be present in `dnsNames` or `ipAddresses`.\\nThis field must match the corresponding field on the DER encoded CSR.\",\"type\":\"string\"},\"dnsNames\":{\"description\":\"DNSNames is a list of DNS names that should be included as part of the Order\\nvalidation process.\\nThis field must match the corresponding field on the DER encoded CSR.\",\"items\":{\"type\":\"string\"},\"type\":\"array\"},\"duration\":{\"description\":\"Duration is the duration for the not after date for the requested certificate.\\nthis is set on order creation as pe the ACME spec.\",\"type\":\"string\"},\"ipAddresses\":{\"description\":\"IPAddresses is a list of IP addresses that should be included as part of the Order\\nvalidation process.\\nThis field must match the corresponding field on the DER encoded CSR.\",\"items\":{\"type\":\"string\"},\"type\":\"array\"},\"issuerRef\":{\"description\":\"IssuerRef references a properly configured ACME-type Issuer which should\\nbe used to create this Order.\\nIf the Issuer does not exist, processing will be retried.\\nIf the Issuer is not an 'ACME' Issuer, an error will be returned and the\\nOrder will be marked as failed.\",\"properties\":{\"group\":{\"description\":\"Group of the resource being referred to.\",\"type\":\"string\"},\"kind\":{\"description\":\"Kind of the resource being referred to.\",\"type\":\"string\"},\"name\":{\"description\":\"Name of the resource being referred to.\",\"type\":\"string\"}},\"required\":[\"name\"],\"type\":\"object\"},\"request\":{\"description\":\"Certificate signing request bytes in DER encoding.\\nThis will be used when finalizing the order.\\nThis field must be set on the order.\",\"format\":\"byte\",\"type\":\"string\"}},\"required\":[\"issuerRef\",\"request\"],\"type\":\"object\"},\"status\":{\"properties\":{\"authorizations\":{\"description\":\"Authorizations contains data returned from the ACME server on what\\nauthorizations must be completed in order to validate the DNS names\\nspecified on the Order.\",\"items\":{\"description\":\"ACMEAuthorization contains data returned from the ACME server on an\\nauthorization that must be completed in order validate a DNS name on an ACME\\nOrder resource.\",\"properties\":{\"challenges\":{\"description\":\"Challenges specifies the challenge types offered by the ACME server.\\nOne of these challenge types will be selected when validating the DNS\\nname and an appropriate Challenge resource will be created to perform\\nthe ACME challenge process.\",\"items\":{\"description\":\"Challenge specifies a challenge offered by the ACME server for an Order.\\nAn appropriate Challenge resource can be created to perform the ACME\\nchallenge process.\",\"properties\":{\"token\":{\"description\":\"Token is the token that must be presented for this challenge.\\nThis is used to compute the 'key' that must also be presented.\",\"type\":\"string\"},\"type\":{\"description\":\"Type is the type of challenge being offered, e.g. 'http-01', 'dns-01',\\n'tls-sni-01', etc.\\nThis is the raw value retrieved from the ACME server.\\nOnly 'http-01' and 'dns-01' are supported by cert-manager, other values\\nwill be ignored.\",\"type\":\"string\"},\"url\":{\"description\":\"URL is the URL of this challenge. It can be used to retrieve additional\\nmetadata about the Challenge from the ACME server.\",\"type\":\"string\"}},\"required\":[\"token\",\"type\",\"url\"],\"type\":\"object\"},\"type\":\"array\"},\"identifier\":{\"description\":\"Identifier is the DNS name to be validated as part of this authorization\",\"type\":\"string\"},\"initialState\":{\"description\":\"InitialState is the initial state of the ACME authorization when first\\nfetched from the ACME server.\\nIf an Authorization is already 'valid', the Order controller will not\\ncreate a Challenge resource for the authorization. This will occur when\\nworking with an ACME server that enables 'authz reuse' (such as Let's\\nEncrypt's production endpoint).\\nIf not set and 'identifier' is set, the state is assumed to be pending\\nand a Challenge will be created.\",\"enum\":[\"valid\",\"ready\",\"pending\",\"processing\",\"invalid\",\"expired\",\"errored\"],\"type\":\"string\"},\"url\":{\"description\":\"URL is the URL of the Authorization that must be completed\",\"type\":\"string\"},\"wildcard\":{\"description\":\"Wildcard will be true if this authorization is for a wildcard DNS name.\\nIf this is true, the identifier will be the *non-wildcard* version of\\nthe DNS name.\\nFor example, if '*.example.com' is the DNS name being validated, this\\nfield will be 'true' and the 'identifier' field will be 'example.com'.\",\"type\":\"boolean\"}},\"required\":[\"url\"],\"type\":\"object\"},\"type\":\"array\"},\"certificate\":{\"description\":\"Certificate is a copy of the PEM encoded certificate for this Order.\\nThis field will be populated after the order has been successfully\\nfinalized with the ACME server, and the order has transitioned to the\\n'valid' state.\",\"format\":\"byte\",\"type\":\"string\"},\"failureTime\":{\"description\":\"FailureTime stores the time that this order failed.\\nThis is used to influence garbage collection and back-off.\",\"format\":\"date-time\",\"type\":\"string\"},\"finalizeURL\":{\"description\":\"FinalizeURL of the Order.\\nThis is used to obtain certificates for this order once it has been completed.\",\"type\":\"string\"},\"reason\":{\"description\":\"Reason optionally provides more information about a why the order is in\\nthe current state.\",\"type\":\"string\"},\"state\":{\"description\":\"State contains the current state of this Order resource.\\nStates 'success' and 'expired' are 'final'\",\"enum\":[\"valid\",\"ready\",\"pending\",\"processing\",\"invalid\",\"expired\",\"errored\"],\"type\":\"string\"},\"url\":{\"description\":\"URL of the Order.\\nThis will initially be empty when the resource is first created.\\nThe Order controller will populate this field when the Order is first processed.\\nThis field will be immutable after it is initially set.\",\"type\":\"string\"}},\"type\":\"object\"}},\"required\":[\"metadata\",\"spec\"],\"type\":\"object\"}},\"served\":true,\"storage\":true,\"subresources\":{\"status\":{}}}]}}\n"
      },
      "served_versions": [
        "v1"
      ],
      "stored_version": "v1",
      "categories": [
        "cert-manager",
        "cert-manager-acme"
      ],
      "short_names": [],
      "description": null,
      "instance_count": 0
    },
    {
      "name": "ordssrvs.database.oracle.com",
      "group": "database.oracle.com",
      "version": "v4",
      "kind": "OrdsSrvs",
      "plural": "ordssrvs",
      "singular": "ordssrvs",
      "scope": "Namespaced",
      "creation_timestamp": "2025-09-06T17:41:22+00:00",
      "labels": {
        "olm.managed": "true",
        "operators.coreos.com/oracle-database-operator.operators": ""
      },
      "annotations": {
        "cert-manager.io/inject-ca-from": "oracle-database-operator-system/oracle-database-operator-serving-cert",
        "controller-gen.kubebuilder.io/version": "v0.16.5",
        "operatorframework.io/installed-alongside-f8529ccd93ced1d5": "operators/oracle-database-operator.v1.2.0"
      },
      "served_versions": [
        "v4"
      ],
      "stored_version": "v4",
      "categories": [],
      "short_names": [],
      "description": null,
      "instance_count": 0
    },
    {
      "name": "ovirtvolumepopulators.forklift.cdi.kubevirt.io",
      "group": "forklift.cdi.kubevirt.io",
      "version": "v1beta1",
      "kind": "OvirtVolumePopulator",
      "plural": "ovirtvolumepopulators",
      "singular": "ovirtvolumepopulator",
      "scope": "Namespaced",
      "creation_timestamp": "2025-09-06T13:01:11+00:00",
      "labels": {
        "app.kubernetes.io/part-of": "hyperconverged-cluster",
        "app.kubernetes.io/version": "1.17.0",
        "operator.cdi.kubevirt.io/createVersion": "v1.63.0"
      },
      "annotations": {
        "controller-gen.kubebuilder.io/version": "v0.14.0",
        "operator.cdi.kubevirt.io/lastAppliedConfiguration": "{\"kind\":\"CustomResourceDefinition\",\"apiVersion\":\"apiextensions.k8s.io/v1\",\"metadata\":{\"name\":\"ovirtvolumepopulators.forklift.cdi.kubevirt.io\",\"creationTimestamp\":null,\"annotations\":{\"controller-gen.kubebuilder.io/version\":\"v0.14.0\"}},\"spec\":{\"group\":\"forklift.cdi.kubevirt.io\",\"names\":{\"plural\":\"ovirtvolumepopulators\",\"singular\":\"ovirtvolumepopulator\",\"shortNames\":[\"ovvp\",\"ovvps\"],\"kind\":\"OvirtVolumePopulator\",\"listKind\":\"OvirtVolumePopulatorList\"},\"scope\":\"Namespaced\",\"versions\":[{\"name\":\"v1beta1\",\"served\":true,\"storage\":true,\"schema\":{\"openAPIV3Schema\":{\"description\":\"OvirtVolumePopulator is the CR used to populator a volume from an oVirt disk\",\"type\":\"object\",\"required\":[\"spec\"],\"properties\":{\"apiVersion\":{\"description\":\"APIVersion defines the versioned schema of this representation of an object.\\nServers should convert recognized schemas to the latest internal value, and\\nmay reject unrecognized values.\\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources\",\"type\":\"string\"},\"kind\":{\"description\":\"Kind is a string value representing the REST resource this object represents.\\nServers may infer this from the endpoint the client submits requests to.\\nCannot be updated.\\nIn CamelCase.\\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\",\"type\":\"string\"},\"metadata\":{\"type\":\"object\"},\"spec\":{\"description\":\"OvirtVolumePopulatorSpec is the spec of the OvirtVolumePopulator CR\",\"type\":\"object\",\"required\":[\"diskId\",\"engineUrl\",\"secretRef\"],\"properties\":{\"diskId\":{\"type\":\"string\"},\"engineUrl\":{\"type\":\"string\"},\"secretRef\":{\"type\":\"string\"},\"transferNetwork\":{\"description\":\"The network attachment definition that should be used for disk transfer.\",\"type\":\"string\"}}},\"status\":{\"description\":\"OvirtVolumePopulatorStatus is the status of the OvirtVolumePopulator CR\",\"type\":\"object\",\"properties\":{\"progress\":{\"type\":\"string\"}}}}}}}]},\"status\":{\"conditions\":null,\"acceptedNames\":{\"plural\":\"\",\"kind\":\"\"},\"storedVersions\":null}}"
      },
      "served_versions": [
        "v1beta1"
      ],
      "stored_version": "v1beta1",
      "categories": [],
      "short_names": [
        "ovvp",
        "ovvps"
      ],
      "description": null,
      "instance_count": 0
    },
    {
      "name": "pages.widgets.templates.krateo.io",
      "group": "widgets.templates.krateo.io",
      "version": "v1beta1",
      "kind": "Page",
      "plural": "pages",
      "singular": "page",
      "scope": "Namespaced",
      "creation_timestamp": "2025-09-06T09:46:48+00:00",
      "labels": {},
      "annotations": {
        "controller-gen.kubebuilder.io/version": "v0.16.1"
      },
      "served_versions": [
        "v1beta1"
      ],
      "stored_version": "v1beta1",
      "categories": [
        "widgets",
        "krateo"
      ],
      "short_names": [],
      "description": null,
      "instance_count": 0
    },
    {
      "name": "panels.widgets.templates.krateo.io",
      "group": "widgets.templates.krateo.io",
      "version": "v1beta1",
      "kind": "Panel",
      "plural": "panels",
      "singular": "panel",
      "scope": "Namespaced",
      "creation_timestamp": "2025-09-06T09:46:48+00:00",
      "labels": {},
      "annotations": {
        "controller-gen.kubebuilder.io/version": "v0.16.1"
      },
      "served_versions": [
        "v1beta1"
      ],
      "stored_version": "v1beta1",
      "categories": [
        "widgets",
        "krateo"
      ],
      "short_names": [],
      "description": null,
      "instance_count": 0
    },
    {
      "name": "paragraphs.widgets.templates.krateo.io",
      "group": "widgets.templates.krateo.io",
      "version": "v1beta1",
      "kind": "Paragraph",
      "plural": "paragraphs",
      "singular": "paragraph",
      "scope": "Namespaced",
      "creation_timestamp": "2025-09-06T09:46:48+00:00",
      "labels": {},
      "annotations": {
        "controller-gen.kubebuilder.io/version": "v0.16.1"
      },
      "served_versions": [
        "v1beta1"
      ],
      "stored_version": "v1beta1",
      "categories": [
        "widgets",
        "krateo"
      ],
      "short_names": [],
      "description": null,
      "instance_count": 0
    },
    {
      "name": "pdbs.database.oracle.com",
      "group": "database.oracle.com",
      "version": "v4",
      "kind": "PDB",
      "plural": "pdbs",
      "singular": "pdb",
      "scope": "Namespaced",
      "creation_timestamp": "2025-09-06T17:41:22+00:00",
      "labels": {
        "olm.managed": "true",
        "operators.coreos.com/oracle-database-operator.operators": ""
      },
      "annotations": {
        "cert-manager.io/inject-ca-from": "oracle-database-operator-system/oracle-database-operator-serving-cert",
        "controller-gen.kubebuilder.io/version": "v0.16.5",
        "operatorframework.io/installed-alongside-f8529ccd93ced1d5": "operators/oracle-database-operator.v1.2.0"
      },
      "served_versions": [
        "v1alpha1",
        "v4"
      ],
      "stored_version": "v4",
      "categories": [],
      "short_names": [],
      "description": null,
      "instance_count": 0
    },
    {
      "name": "perconaxtradbversions.catalog.kubedb.com",
      "group": "catalog.kubedb.com",
      "version": "v1alpha1",
      "kind": "PerconaXtraDBVersion",
      "plural": "perconaxtradbversions",
      "singular": "perconaxtradbversion",
      "scope": "Cluster",
      "creation_timestamp": "2025-09-06T13:33:51+00:00",
      "labels": {
        "app.kubernetes.io/name": "kubedb"
      },
      "annotations": {},
      "served_versions": [
        "v1alpha1"
      ],
      "stored_version": "v1alpha1",
      "categories": [
        "catalog",
        "kubedb",
        "appscode"
      ],
      "short_names": [
        "pxversion"
      ],
      "description": null,
      "instance_count": 0
    },
    {
      "name": "petsets.apps.k8s.appscode.com",
      "group": "apps.k8s.appscode.com",
      "version": "v1",
      "kind": "PetSet",
      "plural": "petsets",
      "singular": "petset",
      "scope": "Namespaced",
      "creation_timestamp": "2025-09-06T13:33:51+00:00",
      "labels": {},
      "annotations": {},
      "served_versions": [
        "v1"
      ],
      "stored_version": "v1",
      "categories": [],
      "short_names": [],
      "description": null,
      "instance_count": 0
    },
    {
      "name": "pgbouncerversions.catalog.kubedb.com",
      "group": "catalog.kubedb.com",
      "version": "v1alpha1",
      "kind": "PgBouncerVersion",
      "plural": "pgbouncerversions",
      "singular": "pgbouncerversion",
      "scope": "Cluster",
      "creation_timestamp": "2025-09-06T13:33:51+00:00",
      "labels": {
        "app.kubernetes.io/name": "kubedb"
      },
      "annotations": {},
      "served_versions": [
        "v1alpha1"
      ],
      "stored_version": "v1alpha1",
      "categories": [
        "catalog",
        "kubedb",
        "appscode"
      ],
      "short_names": [
        "pbversion"
      ],
      "description": null,
      "instance_count": 0
    },
    {
      "name": "pgpoolversions.catalog.kubedb.com",
      "group": "catalog.kubedb.com",
      "version": "v1alpha1",
      "kind": "PgpoolVersion",
      "plural": "pgpoolversions",
      "singular": "pgpoolversion",
      "scope": "Cluster",
      "creation_timestamp": "2025-09-06T13:33:51+00:00",
      "labels": {
        "app.kubernetes.io/name": "kubedb"
      },
      "annotations": {},
      "served_versions": [
        "v1alpha1"
      ],
      "stored_version": "v1alpha1",
      "categories": [
        "catalog",
        "kubedb",
        "appscode"
      ],
      "short_names": [
        "ppversion"
      ],
      "description": null,
      "instance_count": 0
    },
    {
      "name": "physicalbackups.k8s.mariadb.com",
      "group": "k8s.mariadb.com",
      "version": "v1alpha1",
      "kind": "PhysicalBackup",
      "plural": "physicalbackups",
      "singular": "physicalbackup",
      "scope": "Namespaced",
      "creation_timestamp": "2025-09-07T09:15:51+00:00",
      "labels": {
        "olm.managed": "true",
        "operators.coreos.com/mariadb-operator.operators": ""
      },
      "annotations": {
        "controller-gen.kubebuilder.io/version": "v0.18.0",
        "operatorframework.io/installed-alongside-6fd75c749733b588": "operators/mariadb-operator.v25.8.3"
      },
      "served_versions": [
        "v1alpha1"
      ],
      "stored_version": "v1alpha1",
      "categories": [],
      "short_names": [
        "pbmdb"
      ],
      "description": null,
      "instance_count": 0
    },
    {
      "name": "piecharts.widgets.templates.krateo.io",
      "group": "widgets.templates.krateo.io",
      "version": "v1beta1",
      "kind": "PieChart",
      "plural": "piecharts",
      "singular": "piechart",
      "scope": "Namespaced",
      "creation_timestamp": "2025-09-06T09:46:48+00:00",
      "labels": {},
      "annotations": {
        "controller-gen.kubebuilder.io/version": "v0.16.1"
      },
      "served_versions": [
        "v1beta1"
      ],
      "stored_version": "v1beta1",
      "categories": [
        "widgets",
        "krateo"
      ],
      "short_names": [],
      "description": null,
      "instance_count": 0
    },
    {
      "name": "placementpolicies.apps.k8s.appscode.com",
      "group": "apps.k8s.appscode.com",
      "version": "v1",
      "kind": "PlacementPolicy",
      "plural": "placementpolicies",
      "singular": "placementpolicy",
      "scope": "Cluster",
      "creation_timestamp": "2025-09-06T13:33:51+00:00",
      "labels": {},
      "annotations": {},
      "served_versions": [
        "v1"
      ],
      "stored_version": "v1",
      "categories": [],
      "short_names": [],
      "description": null,
      "instance_count": 1
    },
    {
      "name": "poolers.postgresql.cnpg.io",
      "group": "postgresql.cnpg.io",
      "version": "v1",
      "kind": "Pooler",
      "plural": "poolers",
      "singular": "pooler",
      "scope": "Namespaced",
      "creation_timestamp": "2025-09-07T09:12:53+00:00",
      "labels": {
        "olm.managed": "true",
        "operators.coreos.com/cloudnative-pg.operators": ""
      },
      "annotations": {
        "controller-gen.kubebuilder.io/version": "v0.18.0",
        "operatorframework.io/installed-alongside-26b2108901275579": "operators/cloudnative-pg.v1.27.0"
      },
      "served_versions": [
        "v1"
      ],
      "stored_version": "v1",
      "categories": [],
      "short_names": [],
      "description": null,
      "instance_count": 0
    },
    {
      "name": "postgresarchivers.archiver.kubedb.com",
      "group": "archiver.kubedb.com",
      "version": "v1alpha1",
      "kind": "PostgresArchiver",
      "plural": "postgresarchivers",
      "singular": "postgresarchiver",
      "scope": "Namespaced",
      "creation_timestamp": "2025-09-06T13:34:47+00:00",
      "labels": {
        "app.kubernetes.io/name": "kubedb"
      },
      "annotations": {},
      "served_versions": [
        "v1alpha1"
      ],
      "stored_version": "v1alpha1",
      "categories": [
        "archiver",
        "kubedb",
        "appscode"
      ],
      "short_names": [
        "pgarchiver"
      ],
      "description": null,
      "instance_count": 0
    },
    {
      "name": "postgresautoscalers.autoscaling.kubedb.com",
      "group": "autoscaling.kubedb.com",
      "version": "v1alpha1",
      "kind": "PostgresAutoscaler",
      "plural": "postgresautoscalers",
      "singular": "postgresautoscaler",
      "scope": "Namespaced",
      "creation_timestamp": "2025-09-06T13:34:47+00:00",
      "labels": {
        "app.kubernetes.io/name": "kubedb"
      },
      "annotations": {},
      "served_versions": [
        "v1alpha1"
      ],
      "stored_version": "v1alpha1",
      "categories": [
        "autoscaler",
        "kubedb",
        "appscode"
      ],
      "short_names": [
        "pgscaler"
      ],
      "description": null,
      "instance_count": 0
    },
    {
      "name": "postgresbindings.catalog.appscode.com",
      "group": "catalog.appscode.com",
      "version": "v1alpha1",
      "kind": "PostgresBinding",
      "plural": "postgresbindings",
      "singular": "postgresbinding",
      "scope": "Namespaced",
      "creation_timestamp": "2025-09-06T13:34:47+00:00",
      "labels": {
        "app.kubernetes.io/name": "ace",
        "kube-bind.appscode.com/exported": "true"
      },
      "annotations": {},
      "served_versions": [
        "v1alpha1"
      ],
      "stored_version": "v1alpha1",
      "categories": [
        "binding",
        "kubedb",
        "appscode"
      ],
      "short_names": [
        "pgbinding"
      ],
      "description": null,
      "instance_count": 0
    },
    {
      "name": "postgresdatabases.schema.kubedb.com",
      "group": "schema.kubedb.com",
      "version": "v1alpha1",
      "kind": "PostgresDatabase",
      "plural": "postgresdatabases",
      "singular": "postgresdatabase",
      "scope": "Namespaced",
      "creation_timestamp": "2025-09-06T13:34:47+00:00",
      "labels": {
        "app.kubernetes.io/name": "kubedb"
      },
      "annotations": {},
      "served_versions": [
        "v1alpha1"
      ],
      "stored_version": "v1alpha1",
      "categories": [
        "schema",
        "kubedb",
        "appscode"
      ],
      "short_names": [
        "pgschema"
      ],
      "description": null,
      "instance_count": 0
    },
    {
      "name": "postgreses.kubedb.com",
      "group": "kubedb.com",
      "version": "v1",
      "kind": "Postgres",
      "plural": "postgreses",
      "singular": "postgres",
      "scope": "Namespaced",
      "creation_timestamp": "2025-09-06T13:34:47+00:00",
      "labels": {
        "app.kubernetes.io/name": "kubedb"
      },
      "annotations": {},
      "served_versions": [
        "v1",
        "v1alpha2"
      ],
      "stored_version": "v1",
      "categories": [
        "datastore",
        "kubedb",
        "appscode",
        "all"
      ],
      "short_names": [
        "pg"
      ],
      "description": null,
      "instance_count": 0
    },
    {
      "name": "postgresopsrequests.ops.kubedb.com",
      "group": "ops.kubedb.com",
      "version": "v1alpha1",
      "kind": "PostgresOpsRequest",
      "plural": "postgresopsrequests",
      "singular": "postgresopsrequest",
      "scope": "Namespaced",
      "creation_timestamp": "2025-09-06T13:34:47+00:00",
      "labels": {
        "app.kubernetes.io/name": "kubedb"
      },
      "annotations": {},
      "served_versions": [
        "v1alpha1"
      ],
      "stored_version": "v1alpha1",
      "categories": [
        "ops",
        "kubedb",
        "appscode"
      ],
      "short_names": [
        "pgops"
      ],
      "description": null,
      "instance_count": 0
    },
    {
      "name": "postgresversions.catalog.kubedb.com",
      "group": "catalog.kubedb.com",
      "version": "v1alpha1",
      "kind": "PostgresVersion",
      "plural": "postgresversions",
      "singular": "postgresversion",
      "scope": "Cluster",
      "creation_timestamp": "2025-09-06T13:33:51+00:00",
      "labels": {
        "app.kubernetes.io/name": "kubedb"
      },
      "annotations": {},
      "served_versions": [
        "v1alpha1"
      ],
      "stored_version": "v1alpha1",
      "categories": [
        "catalog",
        "kubedb",
        "appscode"
      ],
      "short_names": [
        "pgversion"
      ],
      "description": null,
      "instance_count": 0
    },
    {
      "name": "proxysqlversions.catalog.kubedb.com",
      "group": "catalog.kubedb.com",
      "version": "v1alpha1",
      "kind": "ProxySQLVersion",
      "plural": "proxysqlversions",
      "singular": "proxysqlversion",
      "scope": "Cluster",
      "creation_timestamp": "2025-09-06T13:33:51+00:00",
      "labels": {
        "app.kubernetes.io/name": "kubedb"
      },
      "annotations": {},
      "served_versions": [
        "v1alpha1"
      ],
      "stored_version": "v1alpha1",
      "categories": [
        "catalog",
        "kubedb",
        "appscode"
      ],
      "short_names": [
        "prxversion"
      ],
      "description": null,
      "instance_count": 0
    },
    {
      "name": "publications.postgresql.cnpg.io",
      "group": "postgresql.cnpg.io",
      "version": "v1",
      "kind": "Publication",
      "plural": "publications",
      "singular": "publication",
      "scope": "Namespaced",
      "creation_timestamp": "2025-09-07T09:12:56+00:00",
      "labels": {
        "olm.managed": "true",
        "operators.coreos.com/cloudnative-pg.operators": ""
      },
      "annotations": {
        "controller-gen.kubebuilder.io/version": "v0.18.0",
        "operatorframework.io/installed-alongside-26b2108901275579": "operators/cloudnative-pg.v1.27.0"
      },
      "served_versions": [
        "v1"
      ],
      "stored_version": "v1",
      "categories": [],
      "short_names": [],
      "description": null,
      "instance_count": 0
    },
    {
      "name": "publishers.postgres.kubedb.com",
      "group": "postgres.kubedb.com",
      "version": "v1alpha1",
      "kind": "Publisher",
      "plural": "publishers",
      "singular": "publisher",
      "scope": "Namespaced",
      "creation_timestamp": "2025-09-06T13:34:47+00:00",
      "labels": {
        "app.kubernetes.io/name": "kubedb"
      },
      "annotations": {},
      "served_versions": [
        "v1alpha1"
      ],
      "stored_version": "v1alpha1",
      "categories": [
        "pgstore",
        "kubedb",
        "appscode"
      ],
      "short_names": [
        "pub"
      ],
      "description": null,
      "instance_count": 0
    },
    {
      "name": "rabbitmqversions.catalog.kubedb.com",
      "group": "catalog.kubedb.com",
      "version": "v1alpha1",
      "kind": "RabbitMQVersion",
      "plural": "rabbitmqversions",
      "singular": "rabbitmqversion",
      "scope": "Cluster",
      "creation_timestamp": "2025-09-06T13:33:51+00:00",
      "labels": {
        "app.kubernetes.io/name": "kubedb"
      },
      "annotations": {},
      "served_versions": [
        "v1alpha1"
      ],
      "stored_version": "v1alpha1",
      "categories": [
        "catalog",
        "kubedb",
        "appscode"
      ],
      "short_names": [
        "rmversion"
      ],
      "description": null,
      "instance_count": 0
    },
    {
      "name": "recommendations.supervisor.appscode.com",
      "group": "supervisor.appscode.com",
      "version": "v1alpha1",
      "kind": "Recommendation",
      "plural": "recommendations",
      "singular": "recommendation",
      "scope": "Namespaced",
      "creation_timestamp": "2025-09-06T13:33:51+00:00",
      "labels": {},
      "annotations": {},
      "served_versions": [
        "v1alpha1"
      ],
      "stored_version": "v1alpha1",
      "categories": [],
      "short_names": [],
      "description": null,
      "instance_count": 0
    },
    {
      "name": "redisautoscalers.autoscaling.kubedb.com",
      "group": "autoscaling.kubedb.com",
      "version": "v1alpha1",
      "kind": "RedisAutoscaler",
      "plural": "redisautoscalers",
      "singular": "redisautoscaler",
      "scope": "Namespaced",
      "creation_timestamp": "2025-09-06T13:34:51+00:00",
      "labels": {
        "app.kubernetes.io/name": "kubedb"
      },
      "annotations": {},
      "served_versions": [
        "v1alpha1"
      ],
      "stored_version": "v1alpha1",
      "categories": [
        "autoscaler",
        "kubedb",
        "appscode"
      ],
      "short_names": [
        "rdscaler"
      ],
      "description": null,
      "instance_count": 0
    },
    {
      "name": "redisbindings.catalog.appscode.com",
      "group": "catalog.appscode.com",
      "version": "v1alpha1",
      "kind": "RedisBinding",
      "plural": "redisbindings",
      "singular": "redisbinding",
      "scope": "Namespaced",
      "creation_timestamp": "2025-09-06T13:34:51+00:00",
      "labels": {
        "app.kubernetes.io/name": "ace",
        "kube-bind.appscode.com/exported": "true"
      },
      "annotations": {},
      "served_versions": [
        "v1alpha1"
      ],
      "stored_version": "v1alpha1",
      "categories": [
        "binding",
        "kubedb",
        "appscode"
      ],
      "short_names": [
        "rdbinding"
      ],
      "description": null,
      "instance_count": 0
    },
    {
      "name": "redises.kubedb.com",
      "group": "kubedb.com",
      "version": "v1",
      "kind": "Redis",
      "plural": "redises",
      "singular": "redis",
      "scope": "Namespaced",
      "creation_timestamp": "2025-09-06T13:34:51+00:00",
      "labels": {
        "app.kubernetes.io/name": "kubedb"
      },
      "annotations": {},
      "served_versions": [
        "v1",
        "v1alpha2"
      ],
      "stored_version": "v1",
      "categories": [
        "datastore",
        "kubedb",
        "appscode",
        "all"
      ],
      "short_names": [
        "rd"
      ],
      "description": null,
      "instance_count": 0
    },
    {
      "name": "redisopsrequests.ops.kubedb.com",
      "group": "ops.kubedb.com",
      "version": "v1alpha1",
      "kind": "RedisOpsRequest",
      "plural": "redisopsrequests",
      "singular": "redisopsrequest",
      "scope": "Namespaced",
      "creation_timestamp": "2025-09-06T13:34:51+00:00",
      "labels": {
        "app.kubernetes.io/name": "kubedb"
      },
      "annotations": {},
      "served_versions": [
        "v1alpha1"
      ],
      "stored_version": "v1alpha1",
      "categories": [
        "ops",
        "kubedb",
        "appscode"
      ],
      "short_names": [
        "rdops"
      ],
      "description": null,
      "instance_count": 0
    },
    {
      "name": "redissentinelautoscalers.autoscaling.kubedb.com",
      "group": "autoscaling.kubedb.com",
      "version": "v1alpha1",
      "kind": "RedisSentinelAutoscaler",
      "plural": "redissentinelautoscalers",
      "singular": "redissentinelautoscaler",
      "scope": "Namespaced",
      "creation_timestamp": "2025-09-06T13:34:51+00:00",
      "labels": {
        "app.kubernetes.io/name": "kubedb"
      },
      "annotations": {},
      "served_versions": [
        "v1alpha1"
      ],
      "stored_version": "v1alpha1",
      "categories": [
        "autoscaler",
        "kubedb",
        "appscode"
      ],
      "short_names": [
        "rdsscaler"
      ],
      "description": null,
      "instance_count": 0
    },
    {
      "name": "redissentinelopsrequests.ops.kubedb.com",
      "group": "ops.kubedb.com",
      "version": "v1alpha1",
      "kind": "RedisSentinelOpsRequest",
      "plural": "redissentinelopsrequests",
      "singular": "redissentinelopsrequest",
      "scope": "Namespaced",
      "creation_timestamp": "2025-09-06T13:34:51+00:00",
      "labels": {
        "app.kubernetes.io/name": "kubedb"
      },
      "annotations": {},
      "served_versions": [
        "v1alpha1"
      ],
      "stored_version": "v1alpha1",
      "categories": [
        "ops",
        "kubedb",
        "appscode"
      ],
      "short_names": [
        "rdsops"
      ],
      "description": null,
      "instance_count": 0
    },
    {
      "name": "redissentinels.kubedb.com",
      "group": "kubedb.com",
      "version": "v1",
      "kind": "RedisSentinel",
      "plural": "redissentinels",
      "singular": "redissentinel",
      "scope": "Namespaced",
      "creation_timestamp": "2025-09-06T13:34:51+00:00",
      "labels": {
        "app.kubernetes.io/name": "kubedb"
      },
      "annotations": {},
      "served_versions": [
        "v1",
        "v1alpha2"
      ],
      "stored_version": "v1",
      "categories": [
        "datastore",
        "kubedb",
        "appscode",
        "all"
      ],
      "short_names": [
        "rds"
      ],
      "description": null,
      "instance_count": 0
    },
    {
      "name": "redisversions.catalog.kubedb.com",
      "group": "catalog.kubedb.com",
      "version": "v1alpha1",
      "kind": "RedisVersion",
      "plural": "redisversions",
      "singular": "redisversion",
      "scope": "Cluster",
      "creation_timestamp": "2025-09-06T13:33:51+00:00",
      "labels": {
        "app.kubernetes.io/name": "kubedb"
      },
      "annotations": {},
      "served_versions": [
        "v1alpha1"
      ],
      "stored_version": "v1alpha1",
      "categories": [
        "catalog",
        "kubedb",
        "appscode"
      ],
      "short_names": [
        "rdversion"
      ],
      "description": null,
      "instance_count": 0
    },
    {
      "name": "referencegrants.gateway.networking.k8s.io",
      "group": "gateway.networking.k8s.io",
      "version": "v1beta1",
      "kind": "ReferenceGrant",
      "plural": "referencegrants",
      "singular": "referencegrant",
      "scope": "Namespaced",
      "creation_timestamp": "2025-06-26T15:37:15+00:00",
      "labels": {},
      "annotations": {
        "api-approved.kubernetes.io": "https://github.com/kubernetes-sigs/gateway-api/pull/3328",
        "gateway.networking.k8s.io/bundle-version": "v1.2.1",
        "gateway.networking.k8s.io/channel": "standard"
      },
      "served_versions": [
        "v1beta1"
      ],
      "stored_version": "v1beta1",
      "categories": [
        "gateway-api"
      ],
      "short_names": [
        "refgrant"
      ],
      "description": null,
      "instance_count": 0
    },
    {
      "name": "registrations.eventrouter.krateo.io",
      "group": "eventrouter.krateo.io",
      "version": "v1alpha1",
      "kind": "Registration",
      "plural": "registrations",
      "singular": "registration",
      "scope": "Cluster",
      "creation_timestamp": "2025-09-06T09:45:16+00:00",
      "labels": {},
      "annotations": {
        "controller-gen.kubebuilder.io/version": "v0.15.0"
      },
      "served_versions": [
        "v1alpha1"
      ],
      "stored_version": "v1alpha1",
      "categories": [],
      "short_names": [],
      "description": null,
      "instance_count": 0
    },
    {
      "name": "repoes.git.krateo.io",
      "group": "git.krateo.io",
      "version": "v1alpha1",
      "kind": "Repo",
      "plural": "repoes",
      "singular": "repo",
      "scope": "Namespaced",
      "creation_timestamp": "2025-09-06T10:23:14+00:00",
      "labels": {},
      "annotations": {
        "controller-gen.kubebuilder.io/version": "v0.16.1"
      },
      "served_versions": [
        "v1alpha1"
      ],
      "stored_version": "v1alpha1",
      "categories": [
        "git",
        "krateo"
      ],
      "short_names": [],
      "description": null,
      "instance_count": 0
    },
    {
      "name": "repoes.github.kog.krateo.io",
      "group": "github.kog.krateo.io",
      "version": "v1alpha1",
      "kind": "Repo",
      "plural": "repoes",
      "singular": "repo",
      "scope": "Namespaced",
      "creation_timestamp": "2025-09-06T10:23:19+00:00",
      "labels": {},
      "annotations": {
        "controller-gen.kubebuilder.io/version": "v0.16.1"
      },
      "served_versions": [
        "v1alpha1"
      ],
      "stored_version": "v1alpha1",
      "categories": [
        "repo",
        "restresources",
        "rr"
      ],
      "short_names": [],
      "description": null,
      "instance_count": 0
    },
    {
      "name": "restactions.templates.krateo.io",
      "group": "templates.krateo.io",
      "version": "v1",
      "kind": "RESTAction",
      "plural": "restactions",
      "singular": "restaction",
      "scope": "Namespaced",
      "creation_timestamp": "2025-09-06T09:45:09+00:00",
      "labels": {},
      "annotations": {
        "controller-gen.kubebuilder.io/version": "v0.17.3"
      },
      "served_versions": [
        "v1"
      ],
      "stored_version": "v1",
      "categories": [
        "krateo",
        "rest",
        "actions"
      ],
      "short_names": [
        "ra"
      ],
      "description": null,
      "instance_count": 21
    },
    {
      "name": "restdefinitions.swaggergen.krateo.io",
      "group": "swaggergen.krateo.io",
      "version": "v1alpha1",
      "kind": "RestDefinition",
      "plural": "restdefinitions",
      "singular": "restdefinition",
      "scope": "Namespaced",
      "creation_timestamp": "2025-09-06T09:47:19+00:00",
      "labels": {},
      "annotations": {
        "controller-gen.kubebuilder.io/version": "v0.16.5"
      },
      "served_versions": [
        "v1alpha1"
      ],
      "stored_version": "v1alpha1",
      "categories": [
        "krateo",
        "restdefinition",
        "core"
      ],
      "short_names": [],
      "description": null,
      "instance_count": 0
    },
    {
      "name": "restores.k8s.mariadb.com",
      "group": "k8s.mariadb.com",
      "version": "v1alpha1",
      "kind": "Restore",
      "plural": "restores",
      "singular": "restore",
      "scope": "Namespaced",
      "creation_timestamp": "2025-09-07T09:15:52+00:00",
      "labels": {
        "olm.managed": "true",
        "operators.coreos.com/mariadb-operator.operators": ""
      },
      "annotations": {
        "controller-gen.kubebuilder.io/version": "v0.18.0",
        "operatorframework.io/installed-alongside-6fd75c749733b588": "operators/mariadb-operator.v25.8.3"
      },
      "served_versions": [
        "v1alpha1"
      ],
      "stored_version": "v1alpha1",
      "categories": [],
      "short_names": [
        "rmdb"
      ],
      "description": null,
      "instance_count": 0
    },
    {
      "name": "restproxies.kafka.kubedb.com",
      "group": "kafka.kubedb.com",
      "version": "v1alpha1",
      "kind": "RestProxy",
      "plural": "restproxies",
      "singular": "restproxy",
      "scope": "Namespaced",
      "creation_timestamp": "2025-09-06T13:34:32+00:00",
      "labels": {
        "app.kubernetes.io/name": "kubedb"
      },
      "annotations": {},
      "served_versions": [
        "v1alpha1"
      ],
      "stored_version": "v1alpha1",
      "categories": [
        "kfstore",
        "kubedb",
        "appscode"
      ],
      "short_names": [
        "krp"
      ],
      "description": null,
      "instance_count": 0
    },
    {
      "name": "routes.widgets.templates.krateo.io",
      "group": "widgets.templates.krateo.io",
      "version": "v1beta1",
      "kind": "Route",
      "plural": "routes",
      "singular": "route",
      "scope": "Namespaced",
      "creation_timestamp": "2025-09-06T09:46:48+00:00",
      "labels": {},
      "annotations": {
        "controller-gen.kubebuilder.io/version": "v0.16.1"
      },
      "served_versions": [
        "v1beta1"
      ],
      "stored_version": "v1beta1",
      "categories": [
        "widgets",
        "krateo"
      ],
      "short_names": [],
      "description": null,
      "instance_count": 0
    },
    {
      "name": "routesloaders.widgets.templates.krateo.io",
      "group": "widgets.templates.krateo.io",
      "version": "v1beta1",
      "kind": "RoutesLoader",
      "plural": "routesloaders",
      "singular": "routesloader",
      "scope": "Namespaced",
      "creation_timestamp": "2025-09-06T09:46:48+00:00",
      "labels": {},
      "annotations": {
        "controller-gen.kubebuilder.io/version": "v0.16.1"
      },
      "served_versions": [
        "v1beta1"
      ],
      "stored_version": "v1beta1",
      "categories": [
        "widgets",
        "krateo"
      ],
      "short_names": [],
      "description": null,
      "instance_count": 0
    },
    {
      "name": "rows.widgets.templates.krateo.io",
      "group": "widgets.templates.krateo.io",
      "version": "v1beta1",
      "kind": "Row",
      "plural": "rows",
      "singular": "row",
      "scope": "Namespaced",
      "creation_timestamp": "2025-09-06T09:46:48+00:00",
      "labels": {},
      "annotations": {
        "controller-gen.kubebuilder.io/version": "v0.16.1"
      },
      "served_versions": [
        "v1beta1"
      ],
      "stored_version": "v1beta1",
      "categories": [
        "widgets",
        "krateo"
      ],
      "short_names": [],
      "description": null,
      "instance_count": 0
    },
    {
      "name": "runnergroups.github.kog.krateo.io",
      "group": "github.kog.krateo.io",
      "version": "v1alpha1",
      "kind": "RunnerGroup",
      "plural": "runnergroups",
      "singular": "runnergroup",
      "scope": "Namespaced",
      "creation_timestamp": "2025-09-06T10:23:16+00:00",
      "labels": {},
      "annotations": {
        "controller-gen.kubebuilder.io/version": "v0.16.1"
      },
      "served_versions": [
        "v1alpha1"
      ],
      "stored_version": "v1alpha1",
      "categories": [
        "runnergroup",
        "restresources",
        "rr"
      ],
      "short_names": [],
      "description": null,
      "instance_count": 0
    },
    {
      "name": "scheduledbackups.postgresql.cnpg.io",
      "group": "postgresql.cnpg.io",
      "version": "v1",
      "kind": "ScheduledBackup",
      "plural": "scheduledbackups",
      "singular": "scheduledbackup",
      "scope": "Namespaced",
      "creation_timestamp": "2025-09-07T09:12:55+00:00",
      "labels": {
        "olm.managed": "true",
        "operators.coreos.com/cloudnative-pg.operators": ""
      },
      "annotations": {
        "controller-gen.kubebuilder.io/version": "v0.18.0",
        "operatorframework.io/installed-alongside-26b2108901275579": "operators/cloudnative-pg.v1.27.0"
      },
      "served_versions": [
        "v1"
      ],
      "stored_version": "v1",
      "categories": [],
      "short_names": [],
      "description": null,
      "instance_count": 0
    },
    {
      "name": "schemaregistries.kafka.kubedb.com",
      "group": "kafka.kubedb.com",
      "version": "v1alpha1",
      "kind": "SchemaRegistry",
      "plural": "schemaregistries",
      "singular": "schemaregistry",
      "scope": "Namespaced",
      "creation_timestamp": "2025-09-06T13:34:32+00:00",
      "labels": {
        "app.kubernetes.io/name": "kubedb"
      },
      "annotations": {},
      "served_versions": [
        "v1alpha1"
      ],
      "stored_version": "v1alpha1",
      "categories": [
        "kfstore",
        "kubedb",
        "appscode"
      ],
      "short_names": [
        "ksr"
      ],
      "description": null,
      "instance_count": 0
    },
    {
      "name": "schemaregistryversions.catalog.kubedb.com",
      "group": "catalog.kubedb.com",
      "version": "v1alpha1",
      "kind": "SchemaRegistryVersion",
      "plural": "schemaregistryversions",
      "singular": "schemaregistryversion",
      "scope": "Cluster",
      "creation_timestamp": "2025-09-06T13:33:51+00:00",
      "labels": {
        "app.kubernetes.io/name": "kubedb"
      },
      "annotations": {},
      "served_versions": [
        "v1alpha1"
      ],
      "stored_version": "v1alpha1",
      "categories": [
        "catalog",
        "kubedb",
        "appscode"
      ],
      "short_names": [
        "ksrversion"
      ],
      "description": null,
      "instance_count": 0
    },
    {
      "name": "serverstransports.traefik.io",
      "group": "traefik.io",
      "version": "v1alpha1",
      "kind": "ServersTransport",
      "plural": "serverstransports",
      "singular": "serverstransport",
      "scope": "Namespaced",
      "creation_timestamp": "2025-06-26T15:37:15+00:00",
      "labels": {},
      "annotations": {
        "controller-gen.kubebuilder.io/version": "v0.16.1"
      },
      "served_versions": [
        "v1alpha1"
      ],
      "stored_version": "v1alpha1",
      "categories": [],
      "short_names": [],
      "description": null,
      "instance_count": 0
    },
    {
      "name": "serverstransporttcps.traefik.io",
      "group": "traefik.io",
      "version": "v1alpha1",
      "kind": "ServersTransportTCP",
      "plural": "serverstransporttcps",
      "singular": "serverstransporttcp",
      "scope": "Namespaced",
      "creation_timestamp": "2025-06-26T15:37:15+00:00",
      "labels": {},
      "annotations": {
        "controller-gen.kubebuilder.io/version": "v0.16.1"
      },
      "served_versions": [
        "v1alpha1"
      ],
      "stored_version": "v1alpha1",
      "categories": [],
      "short_names": [],
      "description": null,
      "instance_count": 0
    },
    {
      "name": "shardconfigurations.operator.k8s.appscode.com",
      "group": "operator.k8s.appscode.com",
      "version": "v1alpha1",
      "kind": "ShardConfiguration",
      "plural": "shardconfigurations",
      "singular": "shardconfiguration",
      "scope": "Cluster",
      "creation_timestamp": "2025-09-06T13:33:51+00:00",
      "labels": {},
      "annotations": {},
      "served_versions": [
        "v1alpha1"
      ],
      "stored_version": "v1alpha1",
      "categories": [],
      "short_names": [],
      "description": null,
      "instance_count": 0
    },
    {
      "name": "shardingdatabases.database.oracle.com",
      "group": "database.oracle.com",
      "version": "v4",
      "kind": "ShardingDatabase",
      "plural": "shardingdatabases",
      "singular": "shardingdatabase",
      "scope": "Namespaced",
      "creation_timestamp": "2025-09-06T17:41:22+00:00",
      "labels": {
        "olm.managed": "true",
        "operators.coreos.com/oracle-database-operator.operators": ""
      },
      "annotations": {
        "cert-manager.io/inject-ca-from": "oracle-database-operator-system/oracle-database-operator-serving-cert",
        "controller-gen.kubebuilder.io/version": "v0.16.5",
        "operatorframework.io/installed-alongside-f8529ccd93ced1d5": "operators/oracle-database-operator.v1.2.0"
      },
      "served_versions": [
        "v1alpha1",
        "v4"
      ],
      "stored_version": "v4",
      "categories": [],
      "short_names": [],
      "description": null,
      "instance_count": 0
    },
    {
      "name": "sidekicks.apps.k8s.appscode.com",
      "group": "apps.k8s.appscode.com",
      "version": "v1alpha1",
      "kind": "Sidekick",
      "plural": "sidekicks",
      "singular": "sidekick",
      "scope": "Namespaced",
      "creation_timestamp": "2025-09-06T13:33:51+00:00",
      "labels": {},
      "annotations": {},
      "served_versions": [
        "v1alpha1"
      ],
      "stored_version": "v1alpha1",
      "categories": [],
      "short_names": [],
      "description": null,
      "instance_count": 0
    },
    {
      "name": "singleinstancedatabases.database.oracle.com",
      "group": "database.oracle.com",
      "version": "v4",
      "kind": "SingleInstanceDatabase",
      "plural": "singleinstancedatabases",
      "singular": "singleinstancedatabase",
      "scope": "Namespaced",
      "creation_timestamp": "2025-09-06T17:41:22+00:00",
      "labels": {
        "olm.managed": "true",
        "operators.coreos.com/oracle-database-operator.operators": ""
      },
      "annotations": {
        "cert-manager.io/inject-ca-from": "oracle-database-operator-system/oracle-database-operator-serving-cert",
        "controller-gen.kubebuilder.io/version": "v0.16.5",
        "operatorframework.io/installed-alongside-f8529ccd93ced1d5": "operators/oracle-database-operator.v1.2.0"
      },
      "served_versions": [
        "v1alpha1",
        "v4"
      ],
      "stored_version": "v4",
      "categories": [],
      "short_names": [],
      "description": null,
      "instance_count": 0
    },
    {
      "name": "singlestoreversions.catalog.kubedb.com",
      "group": "catalog.kubedb.com",
      "version": "v1alpha1",
      "kind": "SinglestoreVersion",
      "plural": "singlestoreversions",
      "singular": "singlestoreversion",
      "scope": "Cluster",
      "creation_timestamp": "2025-09-06T13:33:51+00:00",
      "labels": {
        "app.kubernetes.io/name": "kubedb"
      },
      "annotations": {},
      "served_versions": [
        "v1alpha1"
      ],
      "stored_version": "v1alpha1",
      "categories": [
        "catalog",
        "kubedb",
        "appscode"
      ],
      "short_names": [
        "sdbv"
      ],
      "description": null,
      "instance_count": 0
    },
    {
      "name": "solrversions.catalog.kubedb.com",
      "group": "catalog.kubedb.com",
      "version": "v1alpha1",
      "kind": "SolrVersion",
      "plural": "solrversions",
      "singular": "solrversion",
      "scope": "Cluster",
      "creation_timestamp": "2025-09-06T13:33:51+00:00",
      "labels": {
        "app.kubernetes.io/name": "kubedb"
      },
      "annotations": {},
      "served_versions": [
        "v1alpha1"
      ],
      "stored_version": "v1alpha1",
      "categories": [
        "catalog",
        "kubedb",
        "appscode"
      ],
      "short_names": [
        "slversion"
      ],
      "description": null,
      "instance_count": 0
    },
    {
      "name": "sqljobs.k8s.mariadb.com",
      "group": "k8s.mariadb.com",
      "version": "v1alpha1",
      "kind": "SqlJob",
      "plural": "sqljobs",
      "singular": "sqljob",
      "scope": "Namespaced",
      "creation_timestamp": "2025-09-07T09:15:51+00:00",
      "labels": {
        "olm.managed": "true",
        "operators.coreos.com/mariadb-operator.operators": ""
      },
      "annotations": {
        "controller-gen.kubebuilder.io/version": "v0.18.0",
        "operatorframework.io/installed-alongside-6fd75c749733b588": "operators/mariadb-operator.v25.8.3"
      },
      "served_versions": [
        "v1alpha1"
      ],
      "stored_version": "v1alpha1",
      "categories": [],
      "short_names": [
        "smdb"
      ],
      "description": null,
      "instance_count": 0
    },
    {
      "name": "ssps.ssp.kubevirt.io",
      "group": "ssp.kubevirt.io",
      "version": "v1beta3",
      "kind": "SSP",
      "plural": "ssps",
      "singular": "ssp",
      "scope": "Namespaced",
      "creation_timestamp": "2025-09-06T12:58:08+00:00",
      "labels": {},
      "annotations": {
        "controller-gen.kubebuilder.io/version": "v0.17.1",
        "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"apiextensions.k8s.io/v1\",\"kind\":\"CustomResourceDefinition\",\"metadata\":{\"annotations\":{\"controller-gen.kubebuilder.io/version\":\"v0.17.1\"},\"name\":\"ssps.ssp.kubevirt.io\"},\"spec\":{\"conversion\":{\"strategy\":\"None\"},\"group\":\"ssp.kubevirt.io\",\"names\":{\"kind\":\"SSP\",\"listKind\":\"SSPList\",\"plural\":\"ssps\",\"singular\":\"ssp\"},\"scope\":\"Namespaced\",\"versions\":[{\"additionalPrinterColumns\":[{\"jsonPath\":\".status.phase\",\"name\":\"Phase\",\"type\":\"string\"}],\"deprecated\":true,\"deprecationWarning\":\"SSP v1beta2 is deprecated and will not be updated with new functionality. It will stop being served in the next version.\",\"name\":\"v1beta2\",\"schema\":{\"openAPIV3Schema\":{\"description\":\"SSP is the Schema for the ssps API\",\"properties\":{\"apiVersion\":{\"description\":\"APIVersion defines the versioned schema of this representation of an object.\\nServers should convert recognized schemas to the latest internal value, and\\nmay reject unrecognized values.\\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources\",\"type\":\"string\"},\"kind\":{\"description\":\"Kind is a string value representing the REST resource this object represents.\\nServers may infer this from the endpoint the client submits requests to.\\nCannot be updated.\\nIn CamelCase.\\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\",\"type\":\"string\"},\"metadata\":{\"type\":\"object\"},\"spec\":{\"description\":\"SSPSpec defines the desired state of SSP\",\"properties\":{\"commonInstancetypes\":{\"description\":\"CommonInstancetypes is ignored.\\nDeprecated: This field is ignored.\",\"properties\":{\"url\":{\"description\":\"URL of a remote Kustomize target from which to generate and deploy resources.\\n\\nThe following caveats apply to the provided URL:\\n\\n* Only 'https://' and 'git://' URLs are supported.\\n\\n* The URL must include '?ref=$ref' or '?version=$ref' pinning it to a specific\\n  reference. It is recommended that the reference be a specific commit or tag\\n  to ensure the generated contents does not change over time. As such it is\\n  recommended not to use branches as the ref for the time being.\\n\\n* Only VirtualMachineClusterPreference and VirtualMachineClusterInstancetype\\n  resources generated from the URL are deployed by the operand.\\n\\nSee the following Kustomize documentation for more details:\\n\\nremote targets\\nhttps://github.com/kubernetes-sigs/kustomize/blob/master/examples/remoteBuild.md\",\"type\":\"string\"}},\"type\":\"object\"},\"commonTemplates\":{\"description\":\"CommonTemplates is the configuration of the common templates operand\",\"properties\":{\"dataImportCronTemplates\":{\"description\":\"DataImportCronTemplates defines a list of DataImportCrons managed by the SSP\\nOperator. This is intended for images used by CommonTemplates.\",\"items\":{\"description\":\"DataImportCronTemplate defines the template type for DataImportCrons.\\nIt requires metadata.name to be specified while leaving namespace as optional.\",\"properties\":{\"metadata\":{\"properties\":{\"annotations\":{\"additionalProperties\":{\"type\":\"string\"},\"type\":\"object\"},\"finalizers\":{\"items\":{\"type\":\"string\"},\"type\":\"array\"},\"labels\":{\"additionalProperties\":{\"type\":\"string\"},\"type\":\"object\"},\"name\":{\"type\":\"string\"},\"namespace\":{\"type\":\"string\"}},\"type\":\"object\"},\"spec\":{\"description\":\"DataImportCronSpec defines specification for DataImportCron\",\"properties\":{\"garbageCollect\":{\"description\":\"GarbageCollect specifies whether old PVCs should be cleaned up after a new PVC is imported.\\nOptions are currently \\\"Outdated\\\" and \\\"Never\\\", defaults to \\\"Outdated\\\".\",\"type\":\"string\"},\"importsToKeep\":{\"description\":\"Number of import PVCs to keep when garbage collecting. Default is 3.\",\"format\":\"int32\",\"type\":\"integer\"},\"managedDataSource\":{\"description\":\"ManagedDataSource specifies the name of the corresponding DataSource this cron will manage.\\nDataSource has to be in the same namespace.\",\"type\":\"string\"},\"retentionPolicy\":{\"description\":\"RetentionPolicy specifies whether the created DataVolumes and DataSources are retained when their DataImportCron is deleted. Default is RatainAll.\",\"type\":\"string\"},\"schedule\":{\"description\":\"Schedule specifies in cron format when and how often to look for new imports\",\"type\":\"string\"},\"template\":{\"description\":\"Template specifies template for the DVs to be created\",\"properties\":{\"apiVersion\":{\"description\":\"APIVersion defines the versioned schema of this representation of an object.\\nServers should convert recognized schemas to the latest internal value, and\\nmay reject unrecognized values.\\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources\",\"type\":\"string\"},\"kind\":{\"description\":\"Kind is a string value representing the REST resource this object represents.\\nServers may infer this from the endpoint the client submits requests to.\\nCannot be updated.\\nIn CamelCase.\\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\",\"type\":\"string\"},\"metadata\":{\"properties\":{\"annotations\":{\"additionalProperties\":{\"type\":\"string\"},\"type\":\"object\"},\"finalizers\":{\"items\":{\"type\":\"string\"},\"type\":\"array\"},\"labels\":{\"additionalProperties\":{\"type\":\"string\"},\"type\":\"object\"},\"name\":{\"type\":\"string\"},\"namespace\":{\"type\":\"string\"}},\"type\":\"object\"},\"spec\":{\"description\":\"DataVolumeSpec defines the DataVolume type specification\",\"properties\":{\"checkpoints\":{\"description\":\"Checkpoints is a list of DataVolumeCheckpoints, representing stages in a multistage import.\",\"items\":{\"description\":\"DataVolumeCheckpoint defines a stage in a warm migration.\",\"properties\":{\"current\":{\"description\":\"Current is the identifier of the snapshot created for this checkpoint.\",\"type\":\"string\"},\"previous\":{\"description\":\"Previous is the identifier of the snapshot from the previous checkpoint.\",\"type\":\"string\"}},\"required\":[\"current\",\"previous\"],\"type\":\"object\"},\"type\":\"array\"},\"contentType\":{\"description\":\"DataVolumeContentType options: \\\"kubevirt\\\", \\\"archive\\\"\",\"enum\":[\"kubevirt\",\"archive\"],\"type\":\"string\"},\"finalCheckpoint\":{\"description\":\"FinalCheckpoint indicates whether the current DataVolumeCheckpoint is the final checkpoint.\",\"type\":\"boolean\"},\"preallocation\":{\"description\":\"Preallocation controls whether storage for DataVolumes should be allocated in advance.\",\"type\":\"boolean\"},\"priorityClassName\":{\"description\":\"PriorityClassName for Importer, Cloner and Uploader pod\",\"type\":\"string\"},\"pvc\":{\"description\":\"PVC is the PVC specification\",\"properties\":{\"accessModes\":{\"description\":\"accessModes contains the desired access modes the volume should have.\\nMore info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"dataSource\":{\"description\":\"dataSource field can be used to specify either:\\n* An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot)\\n* An existing PVC (PersistentVolumeClaim)\\nIf the provisioner or an external controller can support the specified data source,\\nit will create a new volume based on the contents of the specified data source.\\nWhen the AnyVolumeDataSource feature gate is enabled, dataSource contents will be copied to dataSourceRef,\\nand dataSourceRef contents will be copied to dataSource when dataSourceRef.namespace is not specified.\\nIf the namespace is specified, then dataSourceRef will not be copied to dataSource.\",\"properties\":{\"apiGroup\":{\"description\":\"APIGroup is the group for the resource being referenced.\\nIf APIGroup is not specified, the specified Kind must be in the core API group.\\nFor any other third-party types, APIGroup is required.\",\"type\":\"string\"},\"kind\":{\"description\":\"Kind is the type of resource being referenced\",\"type\":\"string\"},\"name\":{\"description\":\"Name is the name of resource being referenced\",\"type\":\"string\"}},\"required\":[\"kind\",\"name\"],\"type\":\"object\",\"x-kubernetes-map-type\":\"atomic\"},\"dataSourceRef\":{\"description\":\"dataSourceRef specifies the object from which to populate the volume with data, if a non-empty\\nvolume is desired. This may be any object from a non-empty API group (non\\ncore object) or a PersistentVolumeClaim object.\\nWhen this field is specified, volume binding will only succeed if the type of\\nthe specified object matches some installed volume populator or dynamic\\nprovisioner.\\nThis field will replace the functionality of the dataSource field and as such\\nif both fields are non-empty, they must have the same value. For backwards\\ncompatibility, when namespace isn't specified in dataSourceRef,\\nboth fields (dataSource and dataSourceRef) will be set to the same\\nvalue automatically if one of them is empty and the other is non-empty.\\nWhen namespace is specified in dataSourceRef,\\ndataSource isn't set to the same value and must be empty.\\nThere are three important differences between dataSource and dataSourceRef:\\n* While dataSource only allows two specific types of objects, dataSourceRef\\n  allows any non-core object, as well as PersistentVolumeClaim objects.\\n* While dataSource ignores disallowed values (dropping them), dataSourceRef\\n  preserves all values, and generates an error if a disallowed value is\\n  specified.\\n* While dataSource only allows local objects, dataSourceRef allows objects\\n  in any namespaces.\\n(Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled.\\n(Alpha) Using the namespace field of dataSourceRef requires the CrossNamespaceVolumeDataSource feature gate to be enabled.\",\"properties\":{\"apiGroup\":{\"description\":\"APIGroup is the group for the resource being referenced.\\nIf APIGroup is not specified, the specified Kind must be in the core API group.\\nFor any other third-party types, APIGroup is required.\",\"type\":\"string\"},\"kind\":{\"description\":\"Kind is the type of resource being referenced\",\"type\":\"string\"},\"name\":{\"description\":\"Name is the name of resource being referenced\",\"type\":\"string\"},\"namespace\":{\"description\":\"Namespace is the namespace of resource being referenced\\nNote that when a namespace is specified, a gateway.networking.k8s.io/ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details.\\n(Alpha) This field requires the CrossNamespaceVolumeDataSource feature gate to be enabled.\",\"type\":\"string\"}},\"required\":[\"kind\",\"name\"],\"type\":\"object\"},\"resources\":{\"description\":\"resources represents the minimum resources the volume should have.\\nIf RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements\\nthat are lower than previous value but must still be higher than capacity recorded in the\\nstatus field of the claim.\\nMore info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources\",\"properties\":{\"limits\":{\"additionalProperties\":{\"anyOf\":[{\"type\":\"integer\"},{\"type\":\"string\"}],\"pattern\":\"^(\\\\+|-)?(([0-9]+(\\\\.[0-9]*)?)|(\\\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\\\+|-)?(([0-9]+(\\\\.[0-9]*)?)|(\\\\.[0-9]+))))?$\",\"x-kubernetes-int-or-string\":true},\"description\":\"Limits describes the maximum amount of compute resources allowed.\\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/\",\"type\":\"object\"},\"requests\":{\"additionalProperties\":{\"anyOf\":[{\"type\":\"integer\"},{\"type\":\"string\"}],\"pattern\":\"^(\\\\+|-)?(([0-9]+(\\\\.[0-9]*)?)|(\\\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\\\+|-)?(([0-9]+(\\\\.[0-9]*)?)|(\\\\.[0-9]+))))?$\",\"x-kubernetes-int-or-string\":true},\"description\":\"Requests describes the minimum amount of compute resources required.\\nIf Requests is omitted for a container, it defaults to Limits if that is explicitly specified,\\notherwise to an implementation-defined value. Requests cannot exceed Limits.\\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/\",\"type\":\"object\"}},\"type\":\"object\"},\"selector\":{\"description\":\"selector is a label query over volumes to consider for binding.\",\"properties\":{\"matchExpressions\":{\"description\":\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\",\"items\":{\"description\":\"A label selector requirement is a selector that contains values, a key, and an operator that\\nrelates the key and values.\",\"properties\":{\"key\":{\"description\":\"key is the label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"operator represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists and DoesNotExist.\",\"type\":\"string\"},\"values\":{\"description\":\"values is an array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. This array is replaced during a strategic\\nmerge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"matchLabels\":{\"additionalProperties\":{\"type\":\"string\"},\"description\":\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\\nmap is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the\\noperator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\",\"type\":\"object\"}},\"type\":\"object\",\"x-kubernetes-map-type\":\"atomic\"},\"storageClassName\":{\"description\":\"storageClassName is the name of the StorageClass required by the claim.\\nMore info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1\",\"type\":\"string\"},\"volumeAttributesClassName\":{\"description\":\"volumeAttributesClassName may be used to set the VolumeAttributesClass used by this claim.\\nIf specified, the CSI driver will create or update the volume with the attributes defined\\nin the corresponding VolumeAttributesClass. This has a different purpose than storageClassName,\\nit can be changed after the claim is created. An empty string value means that no VolumeAttributesClass\\nwill be applied to the claim but it's not allowed to reset this field to empty string once it is set.\\nIf unspecified and the PersistentVolumeClaim is unbound, the default VolumeAttributesClass\\nwill be set by the persistentvolume controller if it exists.\\nIf the resource referred to by volumeAttributesClass does not exist, this PersistentVolumeClaim will be\\nset to a Pending state, as reflected by the modifyVolumeStatus field, until such as a resource\\nexists.\\nMore info: https://kubernetes.io/docs/concepts/storage/volume-attributes-classes/\\n(Beta) Using this field requires the VolumeAttributesClass feature gate to be enabled (off by default).\",\"type\":\"string\"},\"volumeMode\":{\"description\":\"volumeMode defines what type of volume is required by the claim.\\nValue of Filesystem is implied when not included in claim spec.\",\"type\":\"string\"},\"volumeName\":{\"description\":\"volumeName is the binding reference to the PersistentVolume backing this claim.\",\"type\":\"string\"}},\"type\":\"object\"},\"source\":{\"description\":\"Source is the src of the data for the requested DataVolume\",\"properties\":{\"blank\":{\"description\":\"DataVolumeBlankImage provides the parameters to create a new raw blank image for the PVC\",\"type\":\"object\"},\"gcs\":{\"description\":\"DataVolumeSourceGCS provides the parameters to create a Data Volume from an GCS source\",\"properties\":{\"secretRef\":{\"description\":\"SecretRef provides the secret reference needed to access the GCS source\",\"type\":\"string\"},\"url\":{\"description\":\"URL is the url of the GCS source\",\"type\":\"string\"}},\"required\":[\"url\"],\"type\":\"object\"},\"http\":{\"description\":\"DataVolumeSourceHTTP can be either an http or https endpoint, with an optional basic auth user name and password, and an optional configmap containing additional CAs\",\"properties\":{\"certConfigMap\":{\"description\":\"CertConfigMap is a configmap reference, containing a Certificate Authority(CA) public key, and a base64 encoded pem certificate\",\"type\":\"string\"},\"extraHeaders\":{\"description\":\"ExtraHeaders is a list of strings containing extra headers to include with HTTP transfer requests\",\"items\":{\"type\":\"string\"},\"type\":\"array\"},\"secretExtraHeaders\":{\"description\":\"SecretExtraHeaders is a list of Secret references, each containing an extra HTTP header that may include sensitive information\",\"items\":{\"type\":\"string\"},\"type\":\"array\"},\"secretRef\":{\"description\":\"SecretRef A Secret reference, the secret should contain accessKeyId (user name) base64 encoded, and secretKey (password) also base64 encoded\",\"type\":\"string\"},\"url\":{\"description\":\"URL is the URL of the http(s) endpoint\",\"type\":\"string\"}},\"required\":[\"url\"],\"type\":\"object\"},\"imageio\":{\"description\":\"DataVolumeSourceImageIO provides the parameters to create a Data Volume from an imageio source\",\"properties\":{\"certConfigMap\":{\"description\":\"CertConfigMap provides a reference to the CA cert\",\"type\":\"string\"},\"diskId\":{\"description\":\"DiskID provides id of a disk to be imported\",\"type\":\"string\"},\"secretRef\":{\"description\":\"SecretRef provides the secret reference needed to access the ovirt-engine\",\"type\":\"string\"},\"url\":{\"description\":\"URL is the URL of the ovirt-engine\",\"type\":\"string\"}},\"required\":[\"diskId\",\"url\"],\"type\":\"object\"},\"pvc\":{\"description\":\"DataVolumeSourcePVC provides the parameters to create a Data Volume from an existing PVC\",\"properties\":{\"name\":{\"description\":\"The name of the source PVC\",\"type\":\"string\"},\"namespace\":{\"description\":\"The namespace of the source PVC\",\"type\":\"string\"}},\"required\":[\"name\",\"namespace\"],\"type\":\"object\"},\"registry\":{\"description\":\"DataVolumeSourceRegistry provides the parameters to create a Data Volume from an registry source\",\"properties\":{\"certConfigMap\":{\"description\":\"CertConfigMap provides a reference to the Registry certs\",\"type\":\"string\"},\"imageStream\":{\"description\":\"ImageStream is the name of image stream for import\",\"type\":\"string\"},\"platform\":{\"description\":\"Platform describes the minimum runtime requirements of the image\",\"properties\":{\"architecture\":{\"description\":\"Architecture specifies the image target CPU architecture\",\"type\":\"string\"}},\"type\":\"object\"},\"pullMethod\":{\"description\":\"PullMethod can be either \\\"pod\\\" (default import), or \\\"node\\\" (node docker cache based import)\",\"type\":\"string\"},\"secretRef\":{\"description\":\"SecretRef provides the secret reference needed to access the Registry source\",\"type\":\"string\"},\"url\":{\"description\":\"URL is the url of the registry source (starting with the scheme: docker, oci-archive)\",\"type\":\"string\"}},\"type\":\"object\"},\"s3\":{\"description\":\"DataVolumeSourceS3 provides the parameters to create a Data Volume from an S3 source\",\"properties\":{\"certConfigMap\":{\"description\":\"CertConfigMap is a configmap reference, containing a Certificate Authority(CA) public key, and a base64 encoded pem certificate\",\"type\":\"string\"},\"secretRef\":{\"description\":\"SecretRef provides the secret reference needed to access the S3 source\",\"type\":\"string\"},\"url\":{\"description\":\"URL is the url of the S3 source\",\"type\":\"string\"}},\"required\":[\"url\"],\"type\":\"object\"},\"snapshot\":{\"description\":\"DataVolumeSourceSnapshot provides the parameters to create a Data Volume from an existing VolumeSnapshot\",\"properties\":{\"name\":{\"description\":\"The name of the source VolumeSnapshot\",\"type\":\"string\"},\"namespace\":{\"description\":\"The namespace of the source VolumeSnapshot\",\"type\":\"string\"}},\"required\":[\"name\",\"namespace\"],\"type\":\"object\"},\"upload\":{\"description\":\"DataVolumeSourceUpload provides the parameters to create a Data Volume by uploading the source\",\"type\":\"object\"},\"vddk\":{\"description\":\"DataVolumeSourceVDDK provides the parameters to create a Data Volume from a Vmware source\",\"properties\":{\"backingFile\":{\"description\":\"BackingFile is the path to the virtual hard disk to migrate from vCenter/ESXi\",\"type\":\"string\"},\"extraArgs\":{\"description\":\"ExtraArgs is a reference to a ConfigMap containing extra arguments to pass directly to the VDDK library\",\"type\":\"string\"},\"initImageURL\":{\"description\":\"InitImageURL is an optional URL to an image containing an extracted VDDK library, overrides v2v-vmware config map\",\"type\":\"string\"},\"secretRef\":{\"description\":\"SecretRef provides a reference to a secret containing the username and password needed to access the vCenter or ESXi host\",\"type\":\"string\"},\"thumbprint\":{\"description\":\"Thumbprint is the certificate thumbprint of the vCenter or ESXi host\",\"type\":\"string\"},\"url\":{\"description\":\"URL is the URL of the vCenter or ESXi host with the VM to migrate\",\"type\":\"string\"},\"uuid\":{\"description\":\"UUID is the UUID of the virtual machine that the backing file is attached to in vCenter/ESXi\",\"type\":\"string\"}},\"type\":\"object\"}},\"type\":\"object\"},\"sourceRef\":{\"description\":\"SourceRef is an indirect reference to the source of data for the requested DataVolume\",\"properties\":{\"kind\":{\"description\":\"The kind of the source reference, currently only \\\"DataSource\\\" is supported\",\"type\":\"string\"},\"name\":{\"description\":\"The name of the source reference\",\"type\":\"string\"},\"namespace\":{\"description\":\"The namespace of the source reference, defaults to the DataVolume namespace\",\"type\":\"string\"}},\"required\":[\"kind\",\"name\"],\"type\":\"object\"},\"storage\":{\"description\":\"Storage is the requested storage specification\",\"properties\":{\"accessModes\":{\"description\":\"AccessModes contains the desired access modes the volume should have.\\nMore info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1\",\"items\":{\"type\":\"string\"},\"type\":\"array\"},\"dataSource\":{\"description\":\"This field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) * An existing custom resource that implements data population (Alpha) In order to use custom resource types that implement data population, the AnyVolumeDataSource feature gate must be enabled. If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source.\\nIf the AnyVolumeDataSource feature gate is enabled, this field will always have the same contents as the DataSourceRef field.\",\"properties\":{\"apiGroup\":{\"description\":\"APIGroup is the group for the resource being referenced.\\nIf APIGroup is not specified, the specified Kind must be in the core API group.\\nFor any other third-party types, APIGroup is required.\",\"type\":\"string\"},\"kind\":{\"description\":\"Kind is the type of resource being referenced\",\"type\":\"string\"},\"name\":{\"description\":\"Name is the name of resource being referenced\",\"type\":\"string\"}},\"required\":[\"kind\",\"name\"],\"type\":\"object\",\"x-kubernetes-map-type\":\"atomic\"},\"dataSourceRef\":{\"description\":\"Specifies the object from which to populate the volume with data, if a non-empty volume is desired. This may be any local object from a non-empty API group (non core object) or a PersistentVolumeClaim object. When this field is specified, volume binding will only succeed if the type of the specified object matches some installed volume populator or dynamic provisioner.\\nThis field will replace the functionality of the DataSource field and as such if both fields are non-empty, they must have the same value. For backwards compatibility, both fields (DataSource and DataSourceRef) will be set to the same value automatically if one of them is empty and the other is non-empty.\\nThere are two important differences between DataSource and DataSourceRef:\\n* While DataSource only allows two specific types of objects, DataSourceRef allows any non-core object, as well as PersistentVolumeClaim objects.\\n* While DataSource ignores disallowed values (dropping them), DataSourceRef preserves all values, and generates an error if a disallowed value is specified.\\n(Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled.\",\"properties\":{\"apiGroup\":{\"description\":\"APIGroup is the group for the resource being referenced.\\nIf APIGroup is not specified, the specified Kind must be in the core API group.\\nFor any other third-party types, APIGroup is required.\",\"type\":\"string\"},\"kind\":{\"description\":\"Kind is the type of resource being referenced\",\"type\":\"string\"},\"name\":{\"description\":\"Name is the name of resource being referenced\",\"type\":\"string\"},\"namespace\":{\"description\":\"Namespace is the namespace of resource being referenced\\nNote that when a namespace is specified, a gateway.networking.k8s.io/ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details.\\n(Alpha) This field requires the CrossNamespaceVolumeDataSource feature gate to be enabled.\",\"type\":\"string\"}},\"required\":[\"kind\",\"name\"],\"type\":\"object\"},\"resources\":{\"description\":\"Resources represents the minimum resources the volume should have.\\nMore info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources\",\"properties\":{\"limits\":{\"additionalProperties\":{\"anyOf\":[{\"type\":\"integer\"},{\"type\":\"string\"}],\"pattern\":\"^(\\\\+|-)?(([0-9]+(\\\\.[0-9]*)?)|(\\\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\\\+|-)?(([0-9]+(\\\\.[0-9]*)?)|(\\\\.[0-9]+))))?$\",\"x-kubernetes-int-or-string\":true},\"description\":\"Limits describes the maximum amount of compute resources allowed.\\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/\",\"type\":\"object\"},\"requests\":{\"additionalProperties\":{\"anyOf\":[{\"type\":\"integer\"},{\"type\":\"string\"}],\"pattern\":\"^(\\\\+|-)?(([0-9]+(\\\\.[0-9]*)?)|(\\\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\\\+|-)?(([0-9]+(\\\\.[0-9]*)?)|(\\\\.[0-9]+))))?$\",\"x-kubernetes-int-or-string\":true},\"description\":\"Requests describes the minimum amount of compute resources required.\\nIf Requests is omitted for a container, it defaults to Limits if that is explicitly specified,\\notherwise to an implementation-defined value. Requests cannot exceed Limits.\\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/\",\"type\":\"object\"}},\"type\":\"object\"},\"selector\":{\"description\":\"A label query over volumes to consider for binding.\",\"properties\":{\"matchExpressions\":{\"description\":\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\",\"items\":{\"description\":\"A label selector requirement is a selector that contains values, a key, and an operator that\\nrelates the key and values.\",\"properties\":{\"key\":{\"description\":\"key is the label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"operator represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists and DoesNotExist.\",\"type\":\"string\"},\"values\":{\"description\":\"values is an array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. This array is replaced during a strategic\\nmerge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"matchLabels\":{\"additionalProperties\":{\"type\":\"string\"},\"description\":\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\\nmap is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the\\noperator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\",\"type\":\"object\"}},\"type\":\"object\",\"x-kubernetes-map-type\":\"atomic\"},\"storageClassName\":{\"description\":\"Name of the StorageClass required by the claim.\\nMore info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1\",\"type\":\"string\"},\"volumeMode\":{\"description\":\"volumeMode defines what type of volume is required by the claim.\\nValue of Filesystem is implied when not included in claim spec.\",\"type\":\"string\"},\"volumeName\":{\"description\":\"VolumeName is the binding reference to the PersistentVolume backing this claim.\",\"type\":\"string\"}},\"type\":\"object\"}},\"type\":\"object\"},\"status\":{\"description\":\"DataVolumeStatus contains the current status of the DataVolume\",\"properties\":{\"claimName\":{\"description\":\"ClaimName is the name of the underlying PVC used by the DataVolume.\",\"type\":\"string\"},\"conditions\":{\"items\":{\"description\":\"DataVolumeCondition represents the state of a data volume condition.\",\"properties\":{\"lastHeartbeatTime\":{\"format\":\"date-time\",\"type\":\"string\"},\"lastTransitionTime\":{\"format\":\"date-time\",\"type\":\"string\"},\"message\":{\"type\":\"string\"},\"reason\":{\"type\":\"string\"},\"status\":{\"type\":\"string\"},\"type\":{\"description\":\"DataVolumeConditionType is the string representation of known condition types\",\"type\":\"string\"}},\"required\":[\"status\",\"type\"],\"type\":\"object\"},\"type\":\"array\"},\"phase\":{\"description\":\"Phase is the current phase of the data volume\",\"type\":\"string\"},\"progress\":{\"description\":\"DataVolumeProgress is the current progress of the DataVolume transfer operation. Value between 0 and 100 inclusive, N/A if not available\",\"type\":\"string\"},\"restartCount\":{\"description\":\"RestartCount is the number of times the pod populating the DataVolume has restarted\",\"format\":\"int32\",\"type\":\"integer\"}},\"type\":\"object\"}},\"required\":[\"spec\"],\"type\":\"object\"}},\"required\":[\"managedDataSource\",\"schedule\",\"template\"],\"type\":\"object\"}},\"required\":[\"spec\"],\"type\":\"object\"},\"type\":\"array\"},\"namespace\":{\"description\":\"Namespace is the k8s namespace where CommonTemplates should be installed\",\"maxLength\":63,\"pattern\":\"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\",\"type\":\"string\"}},\"required\":[\"namespace\"],\"type\":\"object\"},\"featureGates\":{\"description\":\"FeatureGates for SSP\",\"properties\":{\"deployCommonInstancetypes\":{\"description\":\"Deprecated: This field is ignored.\",\"type\":\"boolean\"},\"deployTektonTaskResources\":{\"description\":\"Deprecated: This field is ignored.\",\"type\":\"boolean\"},\"deployVmConsoleProxy\":{\"description\":\"Deprecated: This field is ignored.\",\"type\":\"boolean\"}},\"type\":\"object\"},\"tektonPipelines\":{\"description\":\"TektonPipelines is the configuration of the tekton-pipelines operand\\nDeprecated: This field is ignored.\",\"properties\":{\"namespace\":{\"type\":\"string\"}},\"type\":\"object\"},\"tektonTasks\":{\"description\":\"TektonTasks is the configuration of the tekton-tasks operand\\nDeprecated: This field is ignored.\",\"properties\":{\"namespace\":{\"type\":\"string\"}},\"type\":\"object\"},\"templateValidator\":{\"description\":\"TemplateValidator is configuration of the template validator operand\",\"properties\":{\"placement\":{\"description\":\"Placement describes the node scheduling configuration\",\"properties\":{\"affinity\":{\"description\":\"affinity enables pod affinity/anti-affinity placement expanding the types of constraints\\nthat can be expressed with nodeSelector.\\naffinity is going to be applied to the relevant kind of pods in parallel with nodeSelector\\nSee https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#affinity-and-anti-affinity\",\"properties\":{\"nodeAffinity\":{\"description\":\"Describes node affinity scheduling rules for the pod.\",\"properties\":{\"preferredDuringSchedulingIgnoredDuringExecution\":{\"description\":\"The scheduler will prefer to schedule pods to nodes that satisfy\\nthe affinity expressions specified by this field, but it may choose\\na node that violates one or more of the expressions. The node that is\\nmost preferred is the one with the greatest sum of weights, i.e.\\nfor each node that meets all of the scheduling requirements (resource\\nrequest, requiredDuringScheduling affinity expressions, etc.),\\ncompute a sum by iterating through the elements of this field and adding\\n\\\"weight\\\" to the sum if the node matches the corresponding matchExpressions; the\\nnode(s) with the highest sum are the most preferred.\",\"items\":{\"description\":\"An empty preferred scheduling term matches all objects with implicit weight 0\\n(i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).\",\"properties\":{\"preference\":{\"description\":\"A node selector term, associated with the corresponding weight.\",\"properties\":{\"matchExpressions\":{\"description\":\"A list of node selector requirements by node's labels.\",\"items\":{\"description\":\"A node selector requirement is a selector that contains values, a key, and an operator\\nthat relates the key and values.\",\"properties\":{\"key\":{\"description\":\"The label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"Represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.\",\"type\":\"string\"},\"values\":{\"description\":\"An array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. If the operator is Gt or Lt, the values\\narray must have a single element, which will be interpreted as an integer.\\nThis array is replaced during a strategic merge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"matchFields\":{\"description\":\"A list of node selector requirements by node's fields.\",\"items\":{\"description\":\"A node selector requirement is a selector that contains values, a key, and an operator\\nthat relates the key and values.\",\"properties\":{\"key\":{\"description\":\"The label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"Represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.\",\"type\":\"string\"},\"values\":{\"description\":\"An array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. If the operator is Gt or Lt, the values\\narray must have a single element, which will be interpreted as an integer.\\nThis array is replaced during a strategic merge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"type\":\"object\",\"x-kubernetes-map-type\":\"atomic\"},\"weight\":{\"description\":\"Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.\",\"format\":\"int32\",\"type\":\"integer\"}},\"required\":[\"preference\",\"weight\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"requiredDuringSchedulingIgnoredDuringExecution\":{\"description\":\"If the affinity requirements specified by this field are not met at\\nscheduling time, the pod will not be scheduled onto the node.\\nIf the affinity requirements specified by this field cease to be met\\nat some point during pod execution (e.g. due to an update), the system\\nmay or may not try to eventually evict the pod from its node.\",\"properties\":{\"nodeSelectorTerms\":{\"description\":\"Required. A list of node selector terms. The terms are ORed.\",\"items\":{\"description\":\"A null or empty node selector term matches no objects. The requirements of\\nthem are ANDed.\\nThe TopologySelectorTerm type implements a subset of the NodeSelectorTerm.\",\"properties\":{\"matchExpressions\":{\"description\":\"A list of node selector requirements by node's labels.\",\"items\":{\"description\":\"A node selector requirement is a selector that contains values, a key, and an operator\\nthat relates the key and values.\",\"properties\":{\"key\":{\"description\":\"The label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"Represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.\",\"type\":\"string\"},\"values\":{\"description\":\"An array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. If the operator is Gt or Lt, the values\\narray must have a single element, which will be interpreted as an integer.\\nThis array is replaced during a strategic merge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"matchFields\":{\"description\":\"A list of node selector requirements by node's fields.\",\"items\":{\"description\":\"A node selector requirement is a selector that contains values, a key, and an operator\\nthat relates the key and values.\",\"properties\":{\"key\":{\"description\":\"The label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"Represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.\",\"type\":\"string\"},\"values\":{\"description\":\"An array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. If the operator is Gt or Lt, the values\\narray must have a single element, which will be interpreted as an integer.\\nThis array is replaced during a strategic merge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"type\":\"object\",\"x-kubernetes-map-type\":\"atomic\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"nodeSelectorTerms\"],\"type\":\"object\",\"x-kubernetes-map-type\":\"atomic\"}},\"type\":\"object\"},\"podAffinity\":{\"description\":\"Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).\",\"properties\":{\"preferredDuringSchedulingIgnoredDuringExecution\":{\"description\":\"The scheduler will prefer to schedule pods to nodes that satisfy\\nthe affinity expressions specified by this field, but it may choose\\na node that violates one or more of the expressions. The node that is\\nmost preferred is the one with the greatest sum of weights, i.e.\\nfor each node that meets all of the scheduling requirements (resource\\nrequest, requiredDuringScheduling affinity expressions, etc.),\\ncompute a sum by iterating through the elements of this field and adding\\n\\\"weight\\\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the\\nnode(s) with the highest sum are the most preferred.\",\"items\":{\"description\":\"The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)\",\"properties\":{\"podAffinityTerm\":{\"description\":\"Required. A pod affinity term, associated with the corresponding weight.\",\"properties\":{\"labelSelector\":{\"description\":\"A label query over a set of resources, in this case pods.\\nIf it's null, this PodAffinityTerm matches with no Pods.\",\"properties\":{\"matchExpressions\":{\"description\":\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\",\"items\":{\"description\":\"A label selector requirement is a selector that contains values, a key, and an operator that\\nrelates the key and values.\",\"properties\":{\"key\":{\"description\":\"key is the label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"operator represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists and DoesNotExist.\",\"type\":\"string\"},\"values\":{\"description\":\"values is an array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. This array is replaced during a strategic\\nmerge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"matchLabels\":{\"additionalProperties\":{\"type\":\"string\"},\"description\":\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\\nmap is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the\\noperator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\",\"type\":\"object\"}},\"type\":\"object\",\"x-kubernetes-map-type\":\"atomic\"},\"matchLabelKeys\":{\"description\":\"MatchLabelKeys is a set of pod label keys to select which pods will\\nbe taken into consideration. The keys are used to lookup values from the\\nincoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`\\nto select the group of existing pods which pods will be taken into consideration\\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\\npod labels will be ignored. The default value is empty.\\nThe same key is forbidden to exist in both matchLabelKeys and labelSelector.\\nAlso, matchLabelKeys cannot be set when labelSelector isn't set.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"mismatchLabelKeys\":{\"description\":\"MismatchLabelKeys is a set of pod label keys to select which pods will\\nbe taken into consideration. The keys are used to lookup values from the\\nincoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`\\nto select the group of existing pods which pods will be taken into consideration\\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\\npod labels will be ignored. The default value is empty.\\nThe same key is forbidden to exist in both mismatchLabelKeys and labelSelector.\\nAlso, mismatchLabelKeys cannot be set when labelSelector isn't set.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"namespaceSelector\":{\"description\":\"A label query over the set of namespaces that the term applies to.\\nThe term is applied to the union of the namespaces selected by this field\\nand the ones listed in the namespaces field.\\nnull selector and null or empty namespaces list means \\\"this pod's namespace\\\".\\nAn empty selector ({}) matches all namespaces.\",\"properties\":{\"matchExpressions\":{\"description\":\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\",\"items\":{\"description\":\"A label selector requirement is a selector that contains values, a key, and an operator that\\nrelates the key and values.\",\"properties\":{\"key\":{\"description\":\"key is the label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"operator represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists and DoesNotExist.\",\"type\":\"string\"},\"values\":{\"description\":\"values is an array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. This array is replaced during a strategic\\nmerge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"matchLabels\":{\"additionalProperties\":{\"type\":\"string\"},\"description\":\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\\nmap is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the\\noperator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\",\"type\":\"object\"}},\"type\":\"object\",\"x-kubernetes-map-type\":\"atomic\"},\"namespaces\":{\"description\":\"namespaces specifies a static list of namespace names that the term applies to.\\nThe term is applied to the union of the namespaces listed in this field\\nand the ones selected by namespaceSelector.\\nnull or empty namespaces list and null namespaceSelector means \\\"this pod's namespace\\\".\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"topologyKey\":{\"description\":\"This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching\\nthe labelSelector in the specified namespaces, where co-located is defined as running on a node\\nwhose value of the label with key topologyKey matches that of any node on which any of the\\nselected pods is running.\\nEmpty topologyKey is not allowed.\",\"type\":\"string\"}},\"required\":[\"topologyKey\"],\"type\":\"object\"},\"weight\":{\"description\":\"weight associated with matching the corresponding podAffinityTerm,\\nin the range 1-100.\",\"format\":\"int32\",\"type\":\"integer\"}},\"required\":[\"podAffinityTerm\",\"weight\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"requiredDuringSchedulingIgnoredDuringExecution\":{\"description\":\"If the affinity requirements specified by this field are not met at\\nscheduling time, the pod will not be scheduled onto the node.\\nIf the affinity requirements specified by this field cease to be met\\nat some point during pod execution (e.g. due to a pod label update), the\\nsystem may or may not try to eventually evict the pod from its node.\\nWhen there are multiple elements, the lists of nodes corresponding to each\\npodAffinityTerm are intersected, i.e. all terms must be satisfied.\",\"items\":{\"description\":\"Defines a set of pods (namely those matching the labelSelector\\nrelative to the given namespace(s)) that this pod should be\\nco-located (affinity) or not co-located (anti-affinity) with,\\nwhere co-located is defined as running on a node whose value of\\nthe label with key \\u003ctopologyKey\\u003e matches that of any node on which\\na pod of the set of pods is running\",\"properties\":{\"labelSelector\":{\"description\":\"A label query over a set of resources, in this case pods.\\nIf it's null, this PodAffinityTerm matches with no Pods.\",\"properties\":{\"matchExpressions\":{\"description\":\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\",\"items\":{\"description\":\"A label selector requirement is a selector that contains values, a key, and an operator that\\nrelates the key and values.\",\"properties\":{\"key\":{\"description\":\"key is the label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"operator represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists and DoesNotExist.\",\"type\":\"string\"},\"values\":{\"description\":\"values is an array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. This array is replaced during a strategic\\nmerge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"matchLabels\":{\"additionalProperties\":{\"type\":\"string\"},\"description\":\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\\nmap is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the\\noperator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\",\"type\":\"object\"}},\"type\":\"object\",\"x-kubernetes-map-type\":\"atomic\"},\"matchLabelKeys\":{\"description\":\"MatchLabelKeys is a set of pod label keys to select which pods will\\nbe taken into consideration. The keys are used to lookup values from the\\nincoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`\\nto select the group of existing pods which pods will be taken into consideration\\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\\npod labels will be ignored. The default value is empty.\\nThe same key is forbidden to exist in both matchLabelKeys and labelSelector.\\nAlso, matchLabelKeys cannot be set when labelSelector isn't set.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"mismatchLabelKeys\":{\"description\":\"MismatchLabelKeys is a set of pod label keys to select which pods will\\nbe taken into consideration. The keys are used to lookup values from the\\nincoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`\\nto select the group of existing pods which pods will be taken into consideration\\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\\npod labels will be ignored. The default value is empty.\\nThe same key is forbidden to exist in both mismatchLabelKeys and labelSelector.\\nAlso, mismatchLabelKeys cannot be set when labelSelector isn't set.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"namespaceSelector\":{\"description\":\"A label query over the set of namespaces that the term applies to.\\nThe term is applied to the union of the namespaces selected by this field\\nand the ones listed in the namespaces field.\\nnull selector and null or empty namespaces list means \\\"this pod's namespace\\\".\\nAn empty selector ({}) matches all namespaces.\",\"properties\":{\"matchExpressions\":{\"description\":\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\",\"items\":{\"description\":\"A label selector requirement is a selector that contains values, a key, and an operator that\\nrelates the key and values.\",\"properties\":{\"key\":{\"description\":\"key is the label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"operator represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists and DoesNotExist.\",\"type\":\"string\"},\"values\":{\"description\":\"values is an array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. This array is replaced during a strategic\\nmerge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"matchLabels\":{\"additionalProperties\":{\"type\":\"string\"},\"description\":\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\\nmap is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the\\noperator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\",\"type\":\"object\"}},\"type\":\"object\",\"x-kubernetes-map-type\":\"atomic\"},\"namespaces\":{\"description\":\"namespaces specifies a static list of namespace names that the term applies to.\\nThe term is applied to the union of the namespaces listed in this field\\nand the ones selected by namespaceSelector.\\nnull or empty namespaces list and null namespaceSelector means \\\"this pod's namespace\\\".\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"topologyKey\":{\"description\":\"This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching\\nthe labelSelector in the specified namespaces, where co-located is defined as running on a node\\nwhose value of the label with key topologyKey matches that of any node on which any of the\\nselected pods is running.\\nEmpty topologyKey is not allowed.\",\"type\":\"string\"}},\"required\":[\"topologyKey\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"type\":\"object\"},\"podAntiAffinity\":{\"description\":\"Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).\",\"properties\":{\"preferredDuringSchedulingIgnoredDuringExecution\":{\"description\":\"The scheduler will prefer to schedule pods to nodes that satisfy\\nthe anti-affinity expressions specified by this field, but it may choose\\na node that violates one or more of the expressions. The node that is\\nmost preferred is the one with the greatest sum of weights, i.e.\\nfor each node that meets all of the scheduling requirements (resource\\nrequest, requiredDuringScheduling anti-affinity expressions, etc.),\\ncompute a sum by iterating through the elements of this field and adding\\n\\\"weight\\\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the\\nnode(s) with the highest sum are the most preferred.\",\"items\":{\"description\":\"The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)\",\"properties\":{\"podAffinityTerm\":{\"description\":\"Required. A pod affinity term, associated with the corresponding weight.\",\"properties\":{\"labelSelector\":{\"description\":\"A label query over a set of resources, in this case pods.\\nIf it's null, this PodAffinityTerm matches with no Pods.\",\"properties\":{\"matchExpressions\":{\"description\":\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\",\"items\":{\"description\":\"A label selector requirement is a selector that contains values, a key, and an operator that\\nrelates the key and values.\",\"properties\":{\"key\":{\"description\":\"key is the label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"operator represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists and DoesNotExist.\",\"type\":\"string\"},\"values\":{\"description\":\"values is an array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. This array is replaced during a strategic\\nmerge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"matchLabels\":{\"additionalProperties\":{\"type\":\"string\"},\"description\":\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\\nmap is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the\\noperator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\",\"type\":\"object\"}},\"type\":\"object\",\"x-kubernetes-map-type\":\"atomic\"},\"matchLabelKeys\":{\"description\":\"MatchLabelKeys is a set of pod label keys to select which pods will\\nbe taken into consideration. The keys are used to lookup values from the\\nincoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`\\nto select the group of existing pods which pods will be taken into consideration\\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\\npod labels will be ignored. The default value is empty.\\nThe same key is forbidden to exist in both matchLabelKeys and labelSelector.\\nAlso, matchLabelKeys cannot be set when labelSelector isn't set.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"mismatchLabelKeys\":{\"description\":\"MismatchLabelKeys is a set of pod label keys to select which pods will\\nbe taken into consideration. The keys are used to lookup values from the\\nincoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`\\nto select the group of existing pods which pods will be taken into consideration\\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\\npod labels will be ignored. The default value is empty.\\nThe same key is forbidden to exist in both mismatchLabelKeys and labelSelector.\\nAlso, mismatchLabelKeys cannot be set when labelSelector isn't set.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"namespaceSelector\":{\"description\":\"A label query over the set of namespaces that the term applies to.\\nThe term is applied to the union of the namespaces selected by this field\\nand the ones listed in the namespaces field.\\nnull selector and null or empty namespaces list means \\\"this pod's namespace\\\".\\nAn empty selector ({}) matches all namespaces.\",\"properties\":{\"matchExpressions\":{\"description\":\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\",\"items\":{\"description\":\"A label selector requirement is a selector that contains values, a key, and an operator that\\nrelates the key and values.\",\"properties\":{\"key\":{\"description\":\"key is the label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"operator represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists and DoesNotExist.\",\"type\":\"string\"},\"values\":{\"description\":\"values is an array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. This array is replaced during a strategic\\nmerge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"matchLabels\":{\"additionalProperties\":{\"type\":\"string\"},\"description\":\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\\nmap is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the\\noperator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\",\"type\":\"object\"}},\"type\":\"object\",\"x-kubernetes-map-type\":\"atomic\"},\"namespaces\":{\"description\":\"namespaces specifies a static list of namespace names that the term applies to.\\nThe term is applied to the union of the namespaces listed in this field\\nand the ones selected by namespaceSelector.\\nnull or empty namespaces list and null namespaceSelector means \\\"this pod's namespace\\\".\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"topologyKey\":{\"description\":\"This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching\\nthe labelSelector in the specified namespaces, where co-located is defined as running on a node\\nwhose value of the label with key topologyKey matches that of any node on which any of the\\nselected pods is running.\\nEmpty topologyKey is not allowed.\",\"type\":\"string\"}},\"required\":[\"topologyKey\"],\"type\":\"object\"},\"weight\":{\"description\":\"weight associated with matching the corresponding podAffinityTerm,\\nin the range 1-100.\",\"format\":\"int32\",\"type\":\"integer\"}},\"required\":[\"podAffinityTerm\",\"weight\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"requiredDuringSchedulingIgnoredDuringExecution\":{\"description\":\"If the anti-affinity requirements specified by this field are not met at\\nscheduling time, the pod will not be scheduled onto the node.\\nIf the anti-affinity requirements specified by this field cease to be met\\nat some point during pod execution (e.g. due to a pod label update), the\\nsystem may or may not try to eventually evict the pod from its node.\\nWhen there are multiple elements, the lists of nodes corresponding to each\\npodAffinityTerm are intersected, i.e. all terms must be satisfied.\",\"items\":{\"description\":\"Defines a set of pods (namely those matching the labelSelector\\nrelative to the given namespace(s)) that this pod should be\\nco-located (affinity) or not co-located (anti-affinity) with,\\nwhere co-located is defined as running on a node whose value of\\nthe label with key \\u003ctopologyKey\\u003e matches that of any node on which\\na pod of the set of pods is running\",\"properties\":{\"labelSelector\":{\"description\":\"A label query over a set of resources, in this case pods.\\nIf it's null, this PodAffinityTerm matches with no Pods.\",\"properties\":{\"matchExpressions\":{\"description\":\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\",\"items\":{\"description\":\"A label selector requirement is a selector that contains values, a key, and an operator that\\nrelates the key and values.\",\"properties\":{\"key\":{\"description\":\"key is the label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"operator represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists and DoesNotExist.\",\"type\":\"string\"},\"values\":{\"description\":\"values is an array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. This array is replaced during a strategic\\nmerge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"matchLabels\":{\"additionalProperties\":{\"type\":\"string\"},\"description\":\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\\nmap is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the\\noperator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\",\"type\":\"object\"}},\"type\":\"object\",\"x-kubernetes-map-type\":\"atomic\"},\"matchLabelKeys\":{\"description\":\"MatchLabelKeys is a set of pod label keys to select which pods will\\nbe taken into consideration. The keys are used to lookup values from the\\nincoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`\\nto select the group of existing pods which pods will be taken into consideration\\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\\npod labels will be ignored. The default value is empty.\\nThe same key is forbidden to exist in both matchLabelKeys and labelSelector.\\nAlso, matchLabelKeys cannot be set when labelSelector isn't set.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"mismatchLabelKeys\":{\"description\":\"MismatchLabelKeys is a set of pod label keys to select which pods will\\nbe taken into consideration. The keys are used to lookup values from the\\nincoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`\\nto select the group of existing pods which pods will be taken into consideration\\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\\npod labels will be ignored. The default value is empty.\\nThe same key is forbidden to exist in both mismatchLabelKeys and labelSelector.\\nAlso, mismatchLabelKeys cannot be set when labelSelector isn't set.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"namespaceSelector\":{\"description\":\"A label query over the set of namespaces that the term applies to.\\nThe term is applied to the union of the namespaces selected by this field\\nand the ones listed in the namespaces field.\\nnull selector and null or empty namespaces list means \\\"this pod's namespace\\\".\\nAn empty selector ({}) matches all namespaces.\",\"properties\":{\"matchExpressions\":{\"description\":\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\",\"items\":{\"description\":\"A label selector requirement is a selector that contains values, a key, and an operator that\\nrelates the key and values.\",\"properties\":{\"key\":{\"description\":\"key is the label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"operator represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists and DoesNotExist.\",\"type\":\"string\"},\"values\":{\"description\":\"values is an array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. This array is replaced during a strategic\\nmerge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"matchLabels\":{\"additionalProperties\":{\"type\":\"string\"},\"description\":\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\\nmap is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the\\noperator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\",\"type\":\"object\"}},\"type\":\"object\",\"x-kubernetes-map-type\":\"atomic\"},\"namespaces\":{\"description\":\"namespaces specifies a static list of namespace names that the term applies to.\\nThe term is applied to the union of the namespaces listed in this field\\nand the ones selected by namespaceSelector.\\nnull or empty namespaces list and null namespaceSelector means \\\"this pod's namespace\\\".\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"topologyKey\":{\"description\":\"This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching\\nthe labelSelector in the specified namespaces, where co-located is defined as running on a node\\nwhose value of the label with key topologyKey matches that of any node on which any of the\\nselected pods is running.\\nEmpty topologyKey is not allowed.\",\"type\":\"string\"}},\"required\":[\"topologyKey\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"type\":\"object\"}},\"type\":\"object\"},\"nodeSelector\":{\"additionalProperties\":{\"type\":\"string\"},\"description\":\"nodeSelector is the node selector applied to the relevant kind of pods\\nIt specifies a map of key-value pairs: for the pod to be eligible to run on a node,\\nthe node must have each of the indicated key-value pairs as labels\\n(it can have additional labels as well).\\nSee https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#nodeselector\",\"type\":\"object\"},\"tolerations\":{\"description\":\"tolerations is a list of tolerations applied to the relevant kind of pods\\nSee https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/ for more info.\\nThese are additional tolerations other than default ones.\",\"items\":{\"description\":\"The pod this Toleration is attached to tolerates any taint that matches\\nthe triple \\u003ckey,value,effect\\u003e using the matching operator \\u003coperator\\u003e.\",\"properties\":{\"effect\":{\"description\":\"Effect indicates the taint effect to match. Empty means match all taint effects.\\nWhen specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.\",\"type\":\"string\"},\"key\":{\"description\":\"Key is the taint key that the toleration applies to. Empty means match all taint keys.\\nIf the key is empty, operator must be Exists; this combination means to match all values and all keys.\",\"type\":\"string\"},\"operator\":{\"description\":\"Operator represents a key's relationship to the value.\\nValid operators are Exists and Equal. Defaults to Equal.\\nExists is equivalent to wildcard for value, so that a pod can\\ntolerate all taints of a particular category.\",\"type\":\"string\"},\"tolerationSeconds\":{\"description\":\"TolerationSeconds represents the period of time the toleration (which must be\\nof effect NoExecute, otherwise this field is ignored) tolerates the taint. By default,\\nit is not set, which means tolerate the taint forever (do not evict). Zero and\\nnegative values will be treated as 0 (evict immediately) by the system.\",\"format\":\"int64\",\"type\":\"integer\"},\"value\":{\"description\":\"Value is the taint value the toleration matches to.\\nIf the operator is Exists, the value should be empty, otherwise just a regular string.\",\"type\":\"string\"}},\"type\":\"object\"},\"type\":\"array\"}},\"type\":\"object\"},\"replicas\":{\"default\":2,\"description\":\"Replicas is the number of replicas of the template validator pod\",\"format\":\"int32\",\"minimum\":0,\"type\":\"integer\"}},\"type\":\"object\"},\"tlsSecurityProfile\":{\"description\":\"TLSSecurityProfile is a configuration for the TLS.\",\"properties\":{\"custom\":{\"description\":\"custom is a user-defined TLS security profile. Be extremely careful using a custom\\nprofile as invalid configurations can be catastrophic. An example custom profile\\nlooks like this:\\n\\n  ciphers:\\n\\n    - ECDHE-ECDSA-CHACHA20-POLY1305\\n\\n    - ECDHE-RSA-CHACHA20-POLY1305\\n\\n    - ECDHE-RSA-AES128-GCM-SHA256\\n\\n    - ECDHE-ECDSA-AES128-GCM-SHA256\\n\\n  minTLSVersion: VersionTLS11\",\"nullable\":true,\"properties\":{\"ciphers\":{\"description\":\"ciphers is used to specify the cipher algorithms that are negotiated\\nduring the TLS handshake.  Operators may remove entries their operands\\ndo not support.  For example, to use DES-CBC3-SHA  (yaml):\\n\\n  ciphers:\\n    - DES-CBC3-SHA\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"minTLSVersion\":{\"description\":\"minTLSVersion is used to specify the minimal version of the TLS protocol\\nthat is negotiated during the TLS handshake. For example, to use TLS\\nversions 1.1, 1.2 and 1.3 (yaml):\\n\\n  minTLSVersion: VersionTLS11\\n\\nNOTE: currently the highest minTLSVersion allowed is VersionTLS12\",\"enum\":[\"VersionTLS10\",\"VersionTLS11\",\"VersionTLS12\",\"VersionTLS13\"],\"type\":\"string\"}},\"type\":\"object\"},\"intermediate\":{\"description\":\"intermediate is a TLS security profile based on:\\n\\nhttps://wiki.mozilla.org/Security/Server_Side_TLS#Intermediate_compatibility_.28recommended.29\\n\\nand looks like this (yaml):\\n\\n  ciphers:\\n\\n    - TLS_AES_128_GCM_SHA256\\n\\n    - TLS_AES_256_GCM_SHA384\\n\\n    - TLS_CHACHA20_POLY1305_SHA256\\n\\n    - ECDHE-ECDSA-AES128-GCM-SHA256\\n\\n    - ECDHE-RSA-AES128-GCM-SHA256\\n\\n    - ECDHE-ECDSA-AES256-GCM-SHA384\\n\\n    - ECDHE-RSA-AES256-GCM-SHA384\\n\\n    - ECDHE-ECDSA-CHACHA20-POLY1305\\n\\n    - ECDHE-RSA-CHACHA20-POLY1305\\n\\n    - DHE-RSA-AES128-GCM-SHA256\\n\\n    - DHE-RSA-AES256-GCM-SHA384\\n\\n  minTLSVersion: VersionTLS12\",\"nullable\":true,\"type\":\"object\"},\"modern\":{\"description\":\"modern is a TLS security profile based on:\\n\\nhttps://wiki.mozilla.org/Security/Server_Side_TLS#Modern_compatibility\\n\\nand looks like this (yaml):\\n\\n  ciphers:\\n\\n    - TLS_AES_128_GCM_SHA256\\n\\n    - TLS_AES_256_GCM_SHA384\\n\\n    - TLS_CHACHA20_POLY1305_SHA256\\n\\n  minTLSVersion: VersionTLS13\",\"nullable\":true,\"type\":\"object\"},\"old\":{\"description\":\"old is a TLS security profile based on:\\n\\nhttps://wiki.mozilla.org/Security/Server_Side_TLS#Old_backward_compatibility\\n\\nand looks like this (yaml):\\n\\n  ciphers:\\n\\n    - TLS_AES_128_GCM_SHA256\\n\\n    - TLS_AES_256_GCM_SHA384\\n\\n    - TLS_CHACHA20_POLY1305_SHA256\\n\\n    - ECDHE-ECDSA-AES128-GCM-SHA256\\n\\n    - ECDHE-RSA-AES128-GCM-SHA256\\n\\n    - ECDHE-ECDSA-AES256-GCM-SHA384\\n\\n    - ECDHE-RSA-AES256-GCM-SHA384\\n\\n    - ECDHE-ECDSA-CHACHA20-POLY1305\\n\\n    - ECDHE-RSA-CHACHA20-POLY1305\\n\\n    - DHE-RSA-AES128-GCM-SHA256\\n\\n    - DHE-RSA-AES256-GCM-SHA384\\n\\n    - DHE-RSA-CHACHA20-POLY1305\\n\\n    - ECDHE-ECDSA-AES128-SHA256\\n\\n    - ECDHE-RSA-AES128-SHA256\\n\\n    - ECDHE-ECDSA-AES128-SHA\\n\\n    - ECDHE-RSA-AES128-SHA\\n\\n    - ECDHE-ECDSA-AES256-SHA384\\n\\n    - ECDHE-RSA-AES256-SHA384\\n\\n    - ECDHE-ECDSA-AES256-SHA\\n\\n    - ECDHE-RSA-AES256-SHA\\n\\n    - DHE-RSA-AES128-SHA256\\n\\n    - DHE-RSA-AES256-SHA256\\n\\n    - AES128-GCM-SHA256\\n\\n    - AES256-GCM-SHA384\\n\\n    - AES128-SHA256\\n\\n    - AES256-SHA256\\n\\n    - AES128-SHA\\n\\n    - AES256-SHA\\n\\n    - DES-CBC3-SHA\\n\\n  minTLSVersion: VersionTLS10\",\"nullable\":true,\"type\":\"object\"},\"type\":{\"description\":\"type is one of Old, Intermediate, Modern or Custom. Custom provides\\nthe ability to specify individual TLS security profile parameters.\\nOld, Intermediate and Modern are TLS security profiles based on:\\n\\nhttps://wiki.mozilla.org/Security/Server_Side_TLS#Recommended_configurations\\n\\nThe profiles are intent based, so they may change over time as new ciphers are developed and existing ciphers\\nare found to be insecure.  Depending on precisely which ciphers are available to a process, the list may be\\nreduced.\\n\\nNote that the Modern profile is currently not supported because it is not\\nyet well adopted by common software libraries.\",\"enum\":[\"Old\",\"Intermediate\",\"Modern\",\"Custom\"],\"type\":\"string\"}},\"type\":\"object\"},\"tokenGenerationService\":{\"description\":\"TokenGenerationService configures the service for generating tokens to access VNC for a VM.\",\"properties\":{\"enabled\":{\"type\":\"boolean\"}},\"type\":\"object\"}},\"required\":[\"commonTemplates\"],\"type\":\"object\"},\"status\":{\"description\":\"SSPStatus defines the observed state of SSP\",\"properties\":{\"conditions\":{\"description\":\"A list of current conditions of the resource\",\"items\":{\"description\":\"Condition represents the state of the operator's\\nreconciliation functionality.\",\"properties\":{\"lastHeartbeatTime\":{\"format\":\"date-time\",\"type\":\"string\"},\"lastTransitionTime\":{\"format\":\"date-time\",\"type\":\"string\"},\"message\":{\"type\":\"string\"},\"reason\":{\"type\":\"string\"},\"status\":{\"type\":\"string\"},\"type\":{\"description\":\"ConditionType is the state of the operator's reconciliation functionality.\",\"type\":\"string\"}},\"required\":[\"status\",\"type\"],\"type\":\"object\"},\"type\":\"array\"},\"observedGeneration\":{\"description\":\"ObservedGeneration is the latest generation observed by the operator.\",\"format\":\"int64\",\"type\":\"integer\"},\"observedVersion\":{\"description\":\"The observed version of the resource\",\"type\":\"string\"},\"operatorVersion\":{\"description\":\"The version of the resource as defined by the operator\",\"type\":\"string\"},\"paused\":{\"description\":\"Paused is true when the operator notices paused annotation.\",\"type\":\"boolean\"},\"phase\":{\"description\":\"Phase is the current phase of the deployment\",\"type\":\"string\"},\"targetVersion\":{\"description\":\"The desired version of the resource\",\"type\":\"string\"}},\"type\":\"object\"}},\"type\":\"object\"}},\"served\":true,\"storage\":false,\"subresources\":{\"status\":{}}},{\"additionalPrinterColumns\":[{\"jsonPath\":\".status.phase\",\"name\":\"Phase\",\"type\":\"string\"}],\"name\":\"v1beta3\",\"schema\":{\"openAPIV3Schema\":{\"description\":\"SSP is the Schema for the ssps API\",\"properties\":{\"apiVersion\":{\"description\":\"APIVersion defines the versioned schema of this representation of an object.\\nServers should convert recognized schemas to the latest internal value, and\\nmay reject unrecognized values.\\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources\",\"type\":\"string\"},\"kind\":{\"description\":\"Kind is a string value representing the REST resource this object represents.\\nServers may infer this from the endpoint the client submits requests to.\\nCannot be updated.\\nIn CamelCase.\\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\",\"type\":\"string\"},\"metadata\":{\"type\":\"object\"},\"spec\":{\"description\":\"SSPSpec defines the desired state of SSP\",\"properties\":{\"cluster\":{\"description\":\"Cluster specifies what node architectures are present in the cluster.\",\"properties\":{\"controlPlaneArchitectures\":{\"description\":\"ControlPlaneArchitectures is a list of control plane architectures supported by the cluster\",\"items\":{\"type\":\"string\"},\"type\":\"array\"},\"workloadArchitectures\":{\"description\":\"WorkloadArchitectures is a list of workload architectures supported by the cluster\",\"items\":{\"type\":\"string\"},\"type\":\"array\"}},\"type\":\"object\"},\"commonTemplates\":{\"description\":\"CommonTemplates is the configuration of the common templates operand\",\"properties\":{\"dataImportCronTemplates\":{\"description\":\"DataImportCronTemplates defines a list of DataImportCrons managed by the SSP Operator.\",\"items\":{\"description\":\"DataImportCronTemplate defines the template type for DataImportCrons.\\nIt requires metadata.name to be specified while leaving namespace as optional.\",\"properties\":{\"metadata\":{\"properties\":{\"annotations\":{\"additionalProperties\":{\"type\":\"string\"},\"type\":\"object\"},\"finalizers\":{\"items\":{\"type\":\"string\"},\"type\":\"array\"},\"labels\":{\"additionalProperties\":{\"type\":\"string\"},\"type\":\"object\"},\"name\":{\"type\":\"string\"},\"namespace\":{\"type\":\"string\"}},\"type\":\"object\"},\"spec\":{\"description\":\"DataImportCronSpec defines specification for DataImportCron\",\"properties\":{\"garbageCollect\":{\"description\":\"GarbageCollect specifies whether old PVCs should be cleaned up after a new PVC is imported.\\nOptions are currently \\\"Outdated\\\" and \\\"Never\\\", defaults to \\\"Outdated\\\".\",\"type\":\"string\"},\"importsToKeep\":{\"description\":\"Number of import PVCs to keep when garbage collecting. Default is 3.\",\"format\":\"int32\",\"type\":\"integer\"},\"managedDataSource\":{\"description\":\"ManagedDataSource specifies the name of the corresponding DataSource this cron will manage.\\nDataSource has to be in the same namespace.\",\"type\":\"string\"},\"retentionPolicy\":{\"description\":\"RetentionPolicy specifies whether the created DataVolumes and DataSources are retained when their DataImportCron is deleted. Default is RatainAll.\",\"type\":\"string\"},\"schedule\":{\"description\":\"Schedule specifies in cron format when and how often to look for new imports\",\"type\":\"string\"},\"template\":{\"description\":\"Template specifies template for the DVs to be created\",\"properties\":{\"apiVersion\":{\"description\":\"APIVersion defines the versioned schema of this representation of an object.\\nServers should convert recognized schemas to the latest internal value, and\\nmay reject unrecognized values.\\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources\",\"type\":\"string\"},\"kind\":{\"description\":\"Kind is a string value representing the REST resource this object represents.\\nServers may infer this from the endpoint the client submits requests to.\\nCannot be updated.\\nIn CamelCase.\\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\",\"type\":\"string\"},\"metadata\":{\"properties\":{\"annotations\":{\"additionalProperties\":{\"type\":\"string\"},\"type\":\"object\"},\"finalizers\":{\"items\":{\"type\":\"string\"},\"type\":\"array\"},\"labels\":{\"additionalProperties\":{\"type\":\"string\"},\"type\":\"object\"},\"name\":{\"type\":\"string\"},\"namespace\":{\"type\":\"string\"}},\"type\":\"object\"},\"spec\":{\"description\":\"DataVolumeSpec defines the DataVolume type specification\",\"properties\":{\"checkpoints\":{\"description\":\"Checkpoints is a list of DataVolumeCheckpoints, representing stages in a multistage import.\",\"items\":{\"description\":\"DataVolumeCheckpoint defines a stage in a warm migration.\",\"properties\":{\"current\":{\"description\":\"Current is the identifier of the snapshot created for this checkpoint.\",\"type\":\"string\"},\"previous\":{\"description\":\"Previous is the identifier of the snapshot from the previous checkpoint.\",\"type\":\"string\"}},\"required\":[\"current\",\"previous\"],\"type\":\"object\"},\"type\":\"array\"},\"contentType\":{\"description\":\"DataVolumeContentType options: \\\"kubevirt\\\", \\\"archive\\\"\",\"enum\":[\"kubevirt\",\"archive\"],\"type\":\"string\"},\"finalCheckpoint\":{\"description\":\"FinalCheckpoint indicates whether the current DataVolumeCheckpoint is the final checkpoint.\",\"type\":\"boolean\"},\"preallocation\":{\"description\":\"Preallocation controls whether storage for DataVolumes should be allocated in advance.\",\"type\":\"boolean\"},\"priorityClassName\":{\"description\":\"PriorityClassName for Importer, Cloner and Uploader pod\",\"type\":\"string\"},\"pvc\":{\"description\":\"PVC is the PVC specification\",\"properties\":{\"accessModes\":{\"description\":\"accessModes contains the desired access modes the volume should have.\\nMore info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"dataSource\":{\"description\":\"dataSource field can be used to specify either:\\n* An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot)\\n* An existing PVC (PersistentVolumeClaim)\\nIf the provisioner or an external controller can support the specified data source,\\nit will create a new volume based on the contents of the specified data source.\\nWhen the AnyVolumeDataSource feature gate is enabled, dataSource contents will be copied to dataSourceRef,\\nand dataSourceRef contents will be copied to dataSource when dataSourceRef.namespace is not specified.\\nIf the namespace is specified, then dataSourceRef will not be copied to dataSource.\",\"properties\":{\"apiGroup\":{\"description\":\"APIGroup is the group for the resource being referenced.\\nIf APIGroup is not specified, the specified Kind must be in the core API group.\\nFor any other third-party types, APIGroup is required.\",\"type\":\"string\"},\"kind\":{\"description\":\"Kind is the type of resource being referenced\",\"type\":\"string\"},\"name\":{\"description\":\"Name is the name of resource being referenced\",\"type\":\"string\"}},\"required\":[\"kind\",\"name\"],\"type\":\"object\",\"x-kubernetes-map-type\":\"atomic\"},\"dataSourceRef\":{\"description\":\"dataSourceRef specifies the object from which to populate the volume with data, if a non-empty\\nvolume is desired. This may be any object from a non-empty API group (non\\ncore object) or a PersistentVolumeClaim object.\\nWhen this field is specified, volume binding will only succeed if the type of\\nthe specified object matches some installed volume populator or dynamic\\nprovisioner.\\nThis field will replace the functionality of the dataSource field and as such\\nif both fields are non-empty, they must have the same value. For backwards\\ncompatibility, when namespace isn't specified in dataSourceRef,\\nboth fields (dataSource and dataSourceRef) will be set to the same\\nvalue automatically if one of them is empty and the other is non-empty.\\nWhen namespace is specified in dataSourceRef,\\ndataSource isn't set to the same value and must be empty.\\nThere are three important differences between dataSource and dataSourceRef:\\n* While dataSource only allows two specific types of objects, dataSourceRef\\n  allows any non-core object, as well as PersistentVolumeClaim objects.\\n* While dataSource ignores disallowed values (dropping them), dataSourceRef\\n  preserves all values, and generates an error if a disallowed value is\\n  specified.\\n* While dataSource only allows local objects, dataSourceRef allows objects\\n  in any namespaces.\\n(Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled.\\n(Alpha) Using the namespace field of dataSourceRef requires the CrossNamespaceVolumeDataSource feature gate to be enabled.\",\"properties\":{\"apiGroup\":{\"description\":\"APIGroup is the group for the resource being referenced.\\nIf APIGroup is not specified, the specified Kind must be in the core API group.\\nFor any other third-party types, APIGroup is required.\",\"type\":\"string\"},\"kind\":{\"description\":\"Kind is the type of resource being referenced\",\"type\":\"string\"},\"name\":{\"description\":\"Name is the name of resource being referenced\",\"type\":\"string\"},\"namespace\":{\"description\":\"Namespace is the namespace of resource being referenced\\nNote that when a namespace is specified, a gateway.networking.k8s.io/ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details.\\n(Alpha) This field requires the CrossNamespaceVolumeDataSource feature gate to be enabled.\",\"type\":\"string\"}},\"required\":[\"kind\",\"name\"],\"type\":\"object\"},\"resources\":{\"description\":\"resources represents the minimum resources the volume should have.\\nIf RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements\\nthat are lower than previous value but must still be higher than capacity recorded in the\\nstatus field of the claim.\\nMore info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources\",\"properties\":{\"limits\":{\"additionalProperties\":{\"anyOf\":[{\"type\":\"integer\"},{\"type\":\"string\"}],\"pattern\":\"^(\\\\+|-)?(([0-9]+(\\\\.[0-9]*)?)|(\\\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\\\+|-)?(([0-9]+(\\\\.[0-9]*)?)|(\\\\.[0-9]+))))?$\",\"x-kubernetes-int-or-string\":true},\"description\":\"Limits describes the maximum amount of compute resources allowed.\\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/\",\"type\":\"object\"},\"requests\":{\"additionalProperties\":{\"anyOf\":[{\"type\":\"integer\"},{\"type\":\"string\"}],\"pattern\":\"^(\\\\+|-)?(([0-9]+(\\\\.[0-9]*)?)|(\\\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\\\+|-)?(([0-9]+(\\\\.[0-9]*)?)|(\\\\.[0-9]+))))?$\",\"x-kubernetes-int-or-string\":true},\"description\":\"Requests describes the minimum amount of compute resources required.\\nIf Requests is omitted for a container, it defaults to Limits if that is explicitly specified,\\notherwise to an implementation-defined value. Requests cannot exceed Limits.\\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/\",\"type\":\"object\"}},\"type\":\"object\"},\"selector\":{\"description\":\"selector is a label query over volumes to consider for binding.\",\"properties\":{\"matchExpressions\":{\"description\":\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\",\"items\":{\"description\":\"A label selector requirement is a selector that contains values, a key, and an operator that\\nrelates the key and values.\",\"properties\":{\"key\":{\"description\":\"key is the label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"operator represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists and DoesNotExist.\",\"type\":\"string\"},\"values\":{\"description\":\"values is an array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. This array is replaced during a strategic\\nmerge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"matchLabels\":{\"additionalProperties\":{\"type\":\"string\"},\"description\":\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\\nmap is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the\\noperator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\",\"type\":\"object\"}},\"type\":\"object\",\"x-kubernetes-map-type\":\"atomic\"},\"storageClassName\":{\"description\":\"storageClassName is the name of the StorageClass required by the claim.\\nMore info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1\",\"type\":\"string\"},\"volumeAttributesClassName\":{\"description\":\"volumeAttributesClassName may be used to set the VolumeAttributesClass used by this claim.\\nIf specified, the CSI driver will create or update the volume with the attributes defined\\nin the corresponding VolumeAttributesClass. This has a different purpose than storageClassName,\\nit can be changed after the claim is created. An empty string value means that no VolumeAttributesClass\\nwill be applied to the claim but it's not allowed to reset this field to empty string once it is set.\\nIf unspecified and the PersistentVolumeClaim is unbound, the default VolumeAttributesClass\\nwill be set by the persistentvolume controller if it exists.\\nIf the resource referred to by volumeAttributesClass does not exist, this PersistentVolumeClaim will be\\nset to a Pending state, as reflected by the modifyVolumeStatus field, until such as a resource\\nexists.\\nMore info: https://kubernetes.io/docs/concepts/storage/volume-attributes-classes/\\n(Beta) Using this field requires the VolumeAttributesClass feature gate to be enabled (off by default).\",\"type\":\"string\"},\"volumeMode\":{\"description\":\"volumeMode defines what type of volume is required by the claim.\\nValue of Filesystem is implied when not included in claim spec.\",\"type\":\"string\"},\"volumeName\":{\"description\":\"volumeName is the binding reference to the PersistentVolume backing this claim.\",\"type\":\"string\"}},\"type\":\"object\"},\"source\":{\"description\":\"Source is the src of the data for the requested DataVolume\",\"properties\":{\"blank\":{\"description\":\"DataVolumeBlankImage provides the parameters to create a new raw blank image for the PVC\",\"type\":\"object\"},\"gcs\":{\"description\":\"DataVolumeSourceGCS provides the parameters to create a Data Volume from an GCS source\",\"properties\":{\"secretRef\":{\"description\":\"SecretRef provides the secret reference needed to access the GCS source\",\"type\":\"string\"},\"url\":{\"description\":\"URL is the url of the GCS source\",\"type\":\"string\"}},\"required\":[\"url\"],\"type\":\"object\"},\"http\":{\"description\":\"DataVolumeSourceHTTP can be either an http or https endpoint, with an optional basic auth user name and password, and an optional configmap containing additional CAs\",\"properties\":{\"certConfigMap\":{\"description\":\"CertConfigMap is a configmap reference, containing a Certificate Authority(CA) public key, and a base64 encoded pem certificate\",\"type\":\"string\"},\"extraHeaders\":{\"description\":\"ExtraHeaders is a list of strings containing extra headers to include with HTTP transfer requests\",\"items\":{\"type\":\"string\"},\"type\":\"array\"},\"secretExtraHeaders\":{\"description\":\"SecretExtraHeaders is a list of Secret references, each containing an extra HTTP header that may include sensitive information\",\"items\":{\"type\":\"string\"},\"type\":\"array\"},\"secretRef\":{\"description\":\"SecretRef A Secret reference, the secret should contain accessKeyId (user name) base64 encoded, and secretKey (password) also base64 encoded\",\"type\":\"string\"},\"url\":{\"description\":\"URL is the URL of the http(s) endpoint\",\"type\":\"string\"}},\"required\":[\"url\"],\"type\":\"object\"},\"imageio\":{\"description\":\"DataVolumeSourceImageIO provides the parameters to create a Data Volume from an imageio source\",\"properties\":{\"certConfigMap\":{\"description\":\"CertConfigMap provides a reference to the CA cert\",\"type\":\"string\"},\"diskId\":{\"description\":\"DiskID provides id of a disk to be imported\",\"type\":\"string\"},\"secretRef\":{\"description\":\"SecretRef provides the secret reference needed to access the ovirt-engine\",\"type\":\"string\"},\"url\":{\"description\":\"URL is the URL of the ovirt-engine\",\"type\":\"string\"}},\"required\":[\"diskId\",\"url\"],\"type\":\"object\"},\"pvc\":{\"description\":\"DataVolumeSourcePVC provides the parameters to create a Data Volume from an existing PVC\",\"properties\":{\"name\":{\"description\":\"The name of the source PVC\",\"type\":\"string\"},\"namespace\":{\"description\":\"The namespace of the source PVC\",\"type\":\"string\"}},\"required\":[\"name\",\"namespace\"],\"type\":\"object\"},\"registry\":{\"description\":\"DataVolumeSourceRegistry provides the parameters to create a Data Volume from an registry source\",\"properties\":{\"certConfigMap\":{\"description\":\"CertConfigMap provides a reference to the Registry certs\",\"type\":\"string\"},\"imageStream\":{\"description\":\"ImageStream is the name of image stream for import\",\"type\":\"string\"},\"platform\":{\"description\":\"Platform describes the minimum runtime requirements of the image\",\"properties\":{\"architecture\":{\"description\":\"Architecture specifies the image target CPU architecture\",\"type\":\"string\"}},\"type\":\"object\"},\"pullMethod\":{\"description\":\"PullMethod can be either \\\"pod\\\" (default import), or \\\"node\\\" (node docker cache based import)\",\"type\":\"string\"},\"secretRef\":{\"description\":\"SecretRef provides the secret reference needed to access the Registry source\",\"type\":\"string\"},\"url\":{\"description\":\"URL is the url of the registry source (starting with the scheme: docker, oci-archive)\",\"type\":\"string\"}},\"type\":\"object\"},\"s3\":{\"description\":\"DataVolumeSourceS3 provides the parameters to create a Data Volume from an S3 source\",\"properties\":{\"certConfigMap\":{\"description\":\"CertConfigMap is a configmap reference, containing a Certificate Authority(CA) public key, and a base64 encoded pem certificate\",\"type\":\"string\"},\"secretRef\":{\"description\":\"SecretRef provides the secret reference needed to access the S3 source\",\"type\":\"string\"},\"url\":{\"description\":\"URL is the url of the S3 source\",\"type\":\"string\"}},\"required\":[\"url\"],\"type\":\"object\"},\"snapshot\":{\"description\":\"DataVolumeSourceSnapshot provides the parameters to create a Data Volume from an existing VolumeSnapshot\",\"properties\":{\"name\":{\"description\":\"The name of the source VolumeSnapshot\",\"type\":\"string\"},\"namespace\":{\"description\":\"The namespace of the source VolumeSnapshot\",\"type\":\"string\"}},\"required\":[\"name\",\"namespace\"],\"type\":\"object\"},\"upload\":{\"description\":\"DataVolumeSourceUpload provides the parameters to create a Data Volume by uploading the source\",\"type\":\"object\"},\"vddk\":{\"description\":\"DataVolumeSourceVDDK provides the parameters to create a Data Volume from a Vmware source\",\"properties\":{\"backingFile\":{\"description\":\"BackingFile is the path to the virtual hard disk to migrate from vCenter/ESXi\",\"type\":\"string\"},\"extraArgs\":{\"description\":\"ExtraArgs is a reference to a ConfigMap containing extra arguments to pass directly to the VDDK library\",\"type\":\"string\"},\"initImageURL\":{\"description\":\"InitImageURL is an optional URL to an image containing an extracted VDDK library, overrides v2v-vmware config map\",\"type\":\"string\"},\"secretRef\":{\"description\":\"SecretRef provides a reference to a secret containing the username and password needed to access the vCenter or ESXi host\",\"type\":\"string\"},\"thumbprint\":{\"description\":\"Thumbprint is the certificate thumbprint of the vCenter or ESXi host\",\"type\":\"string\"},\"url\":{\"description\":\"URL is the URL of the vCenter or ESXi host with the VM to migrate\",\"type\":\"string\"},\"uuid\":{\"description\":\"UUID is the UUID of the virtual machine that the backing file is attached to in vCenter/ESXi\",\"type\":\"string\"}},\"type\":\"object\"}},\"type\":\"object\"},\"sourceRef\":{\"description\":\"SourceRef is an indirect reference to the source of data for the requested DataVolume\",\"properties\":{\"kind\":{\"description\":\"The kind of the source reference, currently only \\\"DataSource\\\" is supported\",\"type\":\"string\"},\"name\":{\"description\":\"The name of the source reference\",\"type\":\"string\"},\"namespace\":{\"description\":\"The namespace of the source reference, defaults to the DataVolume namespace\",\"type\":\"string\"}},\"required\":[\"kind\",\"name\"],\"type\":\"object\"},\"storage\":{\"description\":\"Storage is the requested storage specification\",\"properties\":{\"accessModes\":{\"description\":\"AccessModes contains the desired access modes the volume should have.\\nMore info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1\",\"items\":{\"type\":\"string\"},\"type\":\"array\"},\"dataSource\":{\"description\":\"This field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) * An existing custom resource that implements data population (Alpha) In order to use custom resource types that implement data population, the AnyVolumeDataSource feature gate must be enabled. If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source.\\nIf the AnyVolumeDataSource feature gate is enabled, this field will always have the same contents as the DataSourceRef field.\",\"properties\":{\"apiGroup\":{\"description\":\"APIGroup is the group for the resource being referenced.\\nIf APIGroup is not specified, the specified Kind must be in the core API group.\\nFor any other third-party types, APIGroup is required.\",\"type\":\"string\"},\"kind\":{\"description\":\"Kind is the type of resource being referenced\",\"type\":\"string\"},\"name\":{\"description\":\"Name is the name of resource being referenced\",\"type\":\"string\"}},\"required\":[\"kind\",\"name\"],\"type\":\"object\",\"x-kubernetes-map-type\":\"atomic\"},\"dataSourceRef\":{\"description\":\"Specifies the object from which to populate the volume with data, if a non-empty volume is desired. This may be any local object from a non-empty API group (non core object) or a PersistentVolumeClaim object. When this field is specified, volume binding will only succeed if the type of the specified object matches some installed volume populator or dynamic provisioner.\\nThis field will replace the functionality of the DataSource field and as such if both fields are non-empty, they must have the same value. For backwards compatibility, both fields (DataSource and DataSourceRef) will be set to the same value automatically if one of them is empty and the other is non-empty.\\nThere are two important differences between DataSource and DataSourceRef:\\n* While DataSource only allows two specific types of objects, DataSourceRef allows any non-core object, as well as PersistentVolumeClaim objects.\\n* While DataSource ignores disallowed values (dropping them), DataSourceRef preserves all values, and generates an error if a disallowed value is specified.\\n(Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled.\",\"properties\":{\"apiGroup\":{\"description\":\"APIGroup is the group for the resource being referenced.\\nIf APIGroup is not specified, the specified Kind must be in the core API group.\\nFor any other third-party types, APIGroup is required.\",\"type\":\"string\"},\"kind\":{\"description\":\"Kind is the type of resource being referenced\",\"type\":\"string\"},\"name\":{\"description\":\"Name is the name of resource being referenced\",\"type\":\"string\"},\"namespace\":{\"description\":\"Namespace is the namespace of resource being referenced\\nNote that when a namespace is specified, a gateway.networking.k8s.io/ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details.\\n(Alpha) This field requires the CrossNamespaceVolumeDataSource feature gate to be enabled.\",\"type\":\"string\"}},\"required\":[\"kind\",\"name\"],\"type\":\"object\"},\"resources\":{\"description\":\"Resources represents the minimum resources the volume should have.\\nMore info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources\",\"properties\":{\"limits\":{\"additionalProperties\":{\"anyOf\":[{\"type\":\"integer\"},{\"type\":\"string\"}],\"pattern\":\"^(\\\\+|-)?(([0-9]+(\\\\.[0-9]*)?)|(\\\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\\\+|-)?(([0-9]+(\\\\.[0-9]*)?)|(\\\\.[0-9]+))))?$\",\"x-kubernetes-int-or-string\":true},\"description\":\"Limits describes the maximum amount of compute resources allowed.\\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/\",\"type\":\"object\"},\"requests\":{\"additionalProperties\":{\"anyOf\":[{\"type\":\"integer\"},{\"type\":\"string\"}],\"pattern\":\"^(\\\\+|-)?(([0-9]+(\\\\.[0-9]*)?)|(\\\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\\\+|-)?(([0-9]+(\\\\.[0-9]*)?)|(\\\\.[0-9]+))))?$\",\"x-kubernetes-int-or-string\":true},\"description\":\"Requests describes the minimum amount of compute resources required.\\nIf Requests is omitted for a container, it defaults to Limits if that is explicitly specified,\\notherwise to an implementation-defined value. Requests cannot exceed Limits.\\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/\",\"type\":\"object\"}},\"type\":\"object\"},\"selector\":{\"description\":\"A label query over volumes to consider for binding.\",\"properties\":{\"matchExpressions\":{\"description\":\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\",\"items\":{\"description\":\"A label selector requirement is a selector that contains values, a key, and an operator that\\nrelates the key and values.\",\"properties\":{\"key\":{\"description\":\"key is the label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"operator represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists and DoesNotExist.\",\"type\":\"string\"},\"values\":{\"description\":\"values is an array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. This array is replaced during a strategic\\nmerge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"matchLabels\":{\"additionalProperties\":{\"type\":\"string\"},\"description\":\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\\nmap is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the\\noperator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\",\"type\":\"object\"}},\"type\":\"object\",\"x-kubernetes-map-type\":\"atomic\"},\"storageClassName\":{\"description\":\"Name of the StorageClass required by the claim.\\nMore info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1\",\"type\":\"string\"},\"volumeMode\":{\"description\":\"volumeMode defines what type of volume is required by the claim.\\nValue of Filesystem is implied when not included in claim spec.\",\"type\":\"string\"},\"volumeName\":{\"description\":\"VolumeName is the binding reference to the PersistentVolume backing this claim.\",\"type\":\"string\"}},\"type\":\"object\"}},\"type\":\"object\"},\"status\":{\"description\":\"DataVolumeStatus contains the current status of the DataVolume\",\"properties\":{\"claimName\":{\"description\":\"ClaimName is the name of the underlying PVC used by the DataVolume.\",\"type\":\"string\"},\"conditions\":{\"items\":{\"description\":\"DataVolumeCondition represents the state of a data volume condition.\",\"properties\":{\"lastHeartbeatTime\":{\"format\":\"date-time\",\"type\":\"string\"},\"lastTransitionTime\":{\"format\":\"date-time\",\"type\":\"string\"},\"message\":{\"type\":\"string\"},\"reason\":{\"type\":\"string\"},\"status\":{\"type\":\"string\"},\"type\":{\"description\":\"DataVolumeConditionType is the string representation of known condition types\",\"type\":\"string\"}},\"required\":[\"status\",\"type\"],\"type\":\"object\"},\"type\":\"array\"},\"phase\":{\"description\":\"Phase is the current phase of the data volume\",\"type\":\"string\"},\"progress\":{\"description\":\"DataVolumeProgress is the current progress of the DataVolume transfer operation. Value between 0 and 100 inclusive, N/A if not available\",\"type\":\"string\"},\"restartCount\":{\"description\":\"RestartCount is the number of times the pod populating the DataVolume has restarted\",\"format\":\"int32\",\"type\":\"integer\"}},\"type\":\"object\"}},\"required\":[\"spec\"],\"type\":\"object\"}},\"required\":[\"managedDataSource\",\"schedule\",\"template\"],\"type\":\"object\"}},\"required\":[\"spec\"],\"type\":\"object\"},\"type\":\"array\"},\"namespace\":{\"description\":\"Namespace is the k8s namespace where CommonTemplates should be installed\",\"maxLength\":63,\"pattern\":\"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$\",\"type\":\"string\"}},\"required\":[\"namespace\"],\"type\":\"object\"},\"enableMultipleArchitectures\":{\"description\":\"EnableMultipleArchitectures enables deployment of common Templates,\\nDataSources and DataImportCrons for multiple node architectures.\",\"type\":\"boolean\"},\"templateValidator\":{\"description\":\"TemplateValidator is configuration of the template validator operand\",\"properties\":{\"placement\":{\"description\":\"Placement describes the node scheduling configuration\",\"properties\":{\"affinity\":{\"description\":\"affinity enables pod affinity/anti-affinity placement expanding the types of constraints\\nthat can be expressed with nodeSelector.\\naffinity is going to be applied to the relevant kind of pods in parallel with nodeSelector\\nSee https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#affinity-and-anti-affinity\",\"properties\":{\"nodeAffinity\":{\"description\":\"Describes node affinity scheduling rules for the pod.\",\"properties\":{\"preferredDuringSchedulingIgnoredDuringExecution\":{\"description\":\"The scheduler will prefer to schedule pods to nodes that satisfy\\nthe affinity expressions specified by this field, but it may choose\\na node that violates one or more of the expressions. The node that is\\nmost preferred is the one with the greatest sum of weights, i.e.\\nfor each node that meets all of the scheduling requirements (resource\\nrequest, requiredDuringScheduling affinity expressions, etc.),\\ncompute a sum by iterating through the elements of this field and adding\\n\\\"weight\\\" to the sum if the node matches the corresponding matchExpressions; the\\nnode(s) with the highest sum are the most preferred.\",\"items\":{\"description\":\"An empty preferred scheduling term matches all objects with implicit weight 0\\n(i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).\",\"properties\":{\"preference\":{\"description\":\"A node selector term, associated with the corresponding weight.\",\"properties\":{\"matchExpressions\":{\"description\":\"A list of node selector requirements by node's labels.\",\"items\":{\"description\":\"A node selector requirement is a selector that contains values, a key, and an operator\\nthat relates the key and values.\",\"properties\":{\"key\":{\"description\":\"The label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"Represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.\",\"type\":\"string\"},\"values\":{\"description\":\"An array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. If the operator is Gt or Lt, the values\\narray must have a single element, which will be interpreted as an integer.\\nThis array is replaced during a strategic merge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"matchFields\":{\"description\":\"A list of node selector requirements by node's fields.\",\"items\":{\"description\":\"A node selector requirement is a selector that contains values, a key, and an operator\\nthat relates the key and values.\",\"properties\":{\"key\":{\"description\":\"The label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"Represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.\",\"type\":\"string\"},\"values\":{\"description\":\"An array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. If the operator is Gt or Lt, the values\\narray must have a single element, which will be interpreted as an integer.\\nThis array is replaced during a strategic merge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"type\":\"object\",\"x-kubernetes-map-type\":\"atomic\"},\"weight\":{\"description\":\"Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.\",\"format\":\"int32\",\"type\":\"integer\"}},\"required\":[\"preference\",\"weight\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"requiredDuringSchedulingIgnoredDuringExecution\":{\"description\":\"If the affinity requirements specified by this field are not met at\\nscheduling time, the pod will not be scheduled onto the node.\\nIf the affinity requirements specified by this field cease to be met\\nat some point during pod execution (e.g. due to an update), the system\\nmay or may not try to eventually evict the pod from its node.\",\"properties\":{\"nodeSelectorTerms\":{\"description\":\"Required. A list of node selector terms. The terms are ORed.\",\"items\":{\"description\":\"A null or empty node selector term matches no objects. The requirements of\\nthem are ANDed.\\nThe TopologySelectorTerm type implements a subset of the NodeSelectorTerm.\",\"properties\":{\"matchExpressions\":{\"description\":\"A list of node selector requirements by node's labels.\",\"items\":{\"description\":\"A node selector requirement is a selector that contains values, a key, and an operator\\nthat relates the key and values.\",\"properties\":{\"key\":{\"description\":\"The label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"Represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.\",\"type\":\"string\"},\"values\":{\"description\":\"An array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. If the operator is Gt or Lt, the values\\narray must have a single element, which will be interpreted as an integer.\\nThis array is replaced during a strategic merge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"matchFields\":{\"description\":\"A list of node selector requirements by node's fields.\",\"items\":{\"description\":\"A node selector requirement is a selector that contains values, a key, and an operator\\nthat relates the key and values.\",\"properties\":{\"key\":{\"description\":\"The label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"Represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.\",\"type\":\"string\"},\"values\":{\"description\":\"An array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. If the operator is Gt or Lt, the values\\narray must have a single element, which will be interpreted as an integer.\\nThis array is replaced during a strategic merge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"type\":\"object\",\"x-kubernetes-map-type\":\"atomic\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"nodeSelectorTerms\"],\"type\":\"object\",\"x-kubernetes-map-type\":\"atomic\"}},\"type\":\"object\"},\"podAffinity\":{\"description\":\"Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).\",\"properties\":{\"preferredDuringSchedulingIgnoredDuringExecution\":{\"description\":\"The scheduler will prefer to schedule pods to nodes that satisfy\\nthe affinity expressions specified by this field, but it may choose\\na node that violates one or more of the expressions. The node that is\\nmost preferred is the one with the greatest sum of weights, i.e.\\nfor each node that meets all of the scheduling requirements (resource\\nrequest, requiredDuringScheduling affinity expressions, etc.),\\ncompute a sum by iterating through the elements of this field and adding\\n\\\"weight\\\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the\\nnode(s) with the highest sum are the most preferred.\",\"items\":{\"description\":\"The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)\",\"properties\":{\"podAffinityTerm\":{\"description\":\"Required. A pod affinity term, associated with the corresponding weight.\",\"properties\":{\"labelSelector\":{\"description\":\"A label query over a set of resources, in this case pods.\\nIf it's null, this PodAffinityTerm matches with no Pods.\",\"properties\":{\"matchExpressions\":{\"description\":\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\",\"items\":{\"description\":\"A label selector requirement is a selector that contains values, a key, and an operator that\\nrelates the key and values.\",\"properties\":{\"key\":{\"description\":\"key is the label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"operator represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists and DoesNotExist.\",\"type\":\"string\"},\"values\":{\"description\":\"values is an array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. This array is replaced during a strategic\\nmerge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"matchLabels\":{\"additionalProperties\":{\"type\":\"string\"},\"description\":\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\\nmap is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the\\noperator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\",\"type\":\"object\"}},\"type\":\"object\",\"x-kubernetes-map-type\":\"atomic\"},\"matchLabelKeys\":{\"description\":\"MatchLabelKeys is a set of pod label keys to select which pods will\\nbe taken into consideration. The keys are used to lookup values from the\\nincoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`\\nto select the group of existing pods which pods will be taken into consideration\\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\\npod labels will be ignored. The default value is empty.\\nThe same key is forbidden to exist in both matchLabelKeys and labelSelector.\\nAlso, matchLabelKeys cannot be set when labelSelector isn't set.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"mismatchLabelKeys\":{\"description\":\"MismatchLabelKeys is a set of pod label keys to select which pods will\\nbe taken into consideration. The keys are used to lookup values from the\\nincoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`\\nto select the group of existing pods which pods will be taken into consideration\\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\\npod labels will be ignored. The default value is empty.\\nThe same key is forbidden to exist in both mismatchLabelKeys and labelSelector.\\nAlso, mismatchLabelKeys cannot be set when labelSelector isn't set.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"namespaceSelector\":{\"description\":\"A label query over the set of namespaces that the term applies to.\\nThe term is applied to the union of the namespaces selected by this field\\nand the ones listed in the namespaces field.\\nnull selector and null or empty namespaces list means \\\"this pod's namespace\\\".\\nAn empty selector ({}) matches all namespaces.\",\"properties\":{\"matchExpressions\":{\"description\":\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\",\"items\":{\"description\":\"A label selector requirement is a selector that contains values, a key, and an operator that\\nrelates the key and values.\",\"properties\":{\"key\":{\"description\":\"key is the label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"operator represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists and DoesNotExist.\",\"type\":\"string\"},\"values\":{\"description\":\"values is an array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. This array is replaced during a strategic\\nmerge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"matchLabels\":{\"additionalProperties\":{\"type\":\"string\"},\"description\":\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\\nmap is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the\\noperator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\",\"type\":\"object\"}},\"type\":\"object\",\"x-kubernetes-map-type\":\"atomic\"},\"namespaces\":{\"description\":\"namespaces specifies a static list of namespace names that the term applies to.\\nThe term is applied to the union of the namespaces listed in this field\\nand the ones selected by namespaceSelector.\\nnull or empty namespaces list and null namespaceSelector means \\\"this pod's namespace\\\".\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"topologyKey\":{\"description\":\"This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching\\nthe labelSelector in the specified namespaces, where co-located is defined as running on a node\\nwhose value of the label with key topologyKey matches that of any node on which any of the\\nselected pods is running.\\nEmpty topologyKey is not allowed.\",\"type\":\"string\"}},\"required\":[\"topologyKey\"],\"type\":\"object\"},\"weight\":{\"description\":\"weight associated with matching the corresponding podAffinityTerm,\\nin the range 1-100.\",\"format\":\"int32\",\"type\":\"integer\"}},\"required\":[\"podAffinityTerm\",\"weight\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"requiredDuringSchedulingIgnoredDuringExecution\":{\"description\":\"If the affinity requirements specified by this field are not met at\\nscheduling time, the pod will not be scheduled onto the node.\\nIf the affinity requirements specified by this field cease to be met\\nat some point during pod execution (e.g. due to a pod label update), the\\nsystem may or may not try to eventually evict the pod from its node.\\nWhen there are multiple elements, the lists of nodes corresponding to each\\npodAffinityTerm are intersected, i.e. all terms must be satisfied.\",\"items\":{\"description\":\"Defines a set of pods (namely those matching the labelSelector\\nrelative to the given namespace(s)) that this pod should be\\nco-located (affinity) or not co-located (anti-affinity) with,\\nwhere co-located is defined as running on a node whose value of\\nthe label with key \\u003ctopologyKey\\u003e matches that of any node on which\\na pod of the set of pods is running\",\"properties\":{\"labelSelector\":{\"description\":\"A label query over a set of resources, in this case pods.\\nIf it's null, this PodAffinityTerm matches with no Pods.\",\"properties\":{\"matchExpressions\":{\"description\":\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\",\"items\":{\"description\":\"A label selector requirement is a selector that contains values, a key, and an operator that\\nrelates the key and values.\",\"properties\":{\"key\":{\"description\":\"key is the label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"operator represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists and DoesNotExist.\",\"type\":\"string\"},\"values\":{\"description\":\"values is an array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. This array is replaced during a strategic\\nmerge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"matchLabels\":{\"additionalProperties\":{\"type\":\"string\"},\"description\":\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\\nmap is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the\\noperator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\",\"type\":\"object\"}},\"type\":\"object\",\"x-kubernetes-map-type\":\"atomic\"},\"matchLabelKeys\":{\"description\":\"MatchLabelKeys is a set of pod label keys to select which pods will\\nbe taken into consideration. The keys are used to lookup values from the\\nincoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`\\nto select the group of existing pods which pods will be taken into consideration\\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\\npod labels will be ignored. The default value is empty.\\nThe same key is forbidden to exist in both matchLabelKeys and labelSelector.\\nAlso, matchLabelKeys cannot be set when labelSelector isn't set.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"mismatchLabelKeys\":{\"description\":\"MismatchLabelKeys is a set of pod label keys to select which pods will\\nbe taken into consideration. The keys are used to lookup values from the\\nincoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`\\nto select the group of existing pods which pods will be taken into consideration\\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\\npod labels will be ignored. The default value is empty.\\nThe same key is forbidden to exist in both mismatchLabelKeys and labelSelector.\\nAlso, mismatchLabelKeys cannot be set when labelSelector isn't set.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"namespaceSelector\":{\"description\":\"A label query over the set of namespaces that the term applies to.\\nThe term is applied to the union of the namespaces selected by this field\\nand the ones listed in the namespaces field.\\nnull selector and null or empty namespaces list means \\\"this pod's namespace\\\".\\nAn empty selector ({}) matches all namespaces.\",\"properties\":{\"matchExpressions\":{\"description\":\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\",\"items\":{\"description\":\"A label selector requirement is a selector that contains values, a key, and an operator that\\nrelates the key and values.\",\"properties\":{\"key\":{\"description\":\"key is the label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"operator represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists and DoesNotExist.\",\"type\":\"string\"},\"values\":{\"description\":\"values is an array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. This array is replaced during a strategic\\nmerge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"matchLabels\":{\"additionalProperties\":{\"type\":\"string\"},\"description\":\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\\nmap is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the\\noperator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\",\"type\":\"object\"}},\"type\":\"object\",\"x-kubernetes-map-type\":\"atomic\"},\"namespaces\":{\"description\":\"namespaces specifies a static list of namespace names that the term applies to.\\nThe term is applied to the union of the namespaces listed in this field\\nand the ones selected by namespaceSelector.\\nnull or empty namespaces list and null namespaceSelector means \\\"this pod's namespace\\\".\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"topologyKey\":{\"description\":\"This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching\\nthe labelSelector in the specified namespaces, where co-located is defined as running on a node\\nwhose value of the label with key topologyKey matches that of any node on which any of the\\nselected pods is running.\\nEmpty topologyKey is not allowed.\",\"type\":\"string\"}},\"required\":[\"topologyKey\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"type\":\"object\"},\"podAntiAffinity\":{\"description\":\"Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).\",\"properties\":{\"preferredDuringSchedulingIgnoredDuringExecution\":{\"description\":\"The scheduler will prefer to schedule pods to nodes that satisfy\\nthe anti-affinity expressions specified by this field, but it may choose\\na node that violates one or more of the expressions. The node that is\\nmost preferred is the one with the greatest sum of weights, i.e.\\nfor each node that meets all of the scheduling requirements (resource\\nrequest, requiredDuringScheduling anti-affinity expressions, etc.),\\ncompute a sum by iterating through the elements of this field and adding\\n\\\"weight\\\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the\\nnode(s) with the highest sum are the most preferred.\",\"items\":{\"description\":\"The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)\",\"properties\":{\"podAffinityTerm\":{\"description\":\"Required. A pod affinity term, associated with the corresponding weight.\",\"properties\":{\"labelSelector\":{\"description\":\"A label query over a set of resources, in this case pods.\\nIf it's null, this PodAffinityTerm matches with no Pods.\",\"properties\":{\"matchExpressions\":{\"description\":\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\",\"items\":{\"description\":\"A label selector requirement is a selector that contains values, a key, and an operator that\\nrelates the key and values.\",\"properties\":{\"key\":{\"description\":\"key is the label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"operator represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists and DoesNotExist.\",\"type\":\"string\"},\"values\":{\"description\":\"values is an array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. This array is replaced during a strategic\\nmerge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"matchLabels\":{\"additionalProperties\":{\"type\":\"string\"},\"description\":\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\\nmap is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the\\noperator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\",\"type\":\"object\"}},\"type\":\"object\",\"x-kubernetes-map-type\":\"atomic\"},\"matchLabelKeys\":{\"description\":\"MatchLabelKeys is a set of pod label keys to select which pods will\\nbe taken into consideration. The keys are used to lookup values from the\\nincoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`\\nto select the group of existing pods which pods will be taken into consideration\\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\\npod labels will be ignored. The default value is empty.\\nThe same key is forbidden to exist in both matchLabelKeys and labelSelector.\\nAlso, matchLabelKeys cannot be set when labelSelector isn't set.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"mismatchLabelKeys\":{\"description\":\"MismatchLabelKeys is a set of pod label keys to select which pods will\\nbe taken into consideration. The keys are used to lookup values from the\\nincoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`\\nto select the group of existing pods which pods will be taken into consideration\\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\\npod labels will be ignored. The default value is empty.\\nThe same key is forbidden to exist in both mismatchLabelKeys and labelSelector.\\nAlso, mismatchLabelKeys cannot be set when labelSelector isn't set.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"namespaceSelector\":{\"description\":\"A label query over the set of namespaces that the term applies to.\\nThe term is applied to the union of the namespaces selected by this field\\nand the ones listed in the namespaces field.\\nnull selector and null or empty namespaces list means \\\"this pod's namespace\\\".\\nAn empty selector ({}) matches all namespaces.\",\"properties\":{\"matchExpressions\":{\"description\":\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\",\"items\":{\"description\":\"A label selector requirement is a selector that contains values, a key, and an operator that\\nrelates the key and values.\",\"properties\":{\"key\":{\"description\":\"key is the label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"operator represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists and DoesNotExist.\",\"type\":\"string\"},\"values\":{\"description\":\"values is an array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. This array is replaced during a strategic\\nmerge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"matchLabels\":{\"additionalProperties\":{\"type\":\"string\"},\"description\":\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\\nmap is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the\\noperator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\",\"type\":\"object\"}},\"type\":\"object\",\"x-kubernetes-map-type\":\"atomic\"},\"namespaces\":{\"description\":\"namespaces specifies a static list of namespace names that the term applies to.\\nThe term is applied to the union of the namespaces listed in this field\\nand the ones selected by namespaceSelector.\\nnull or empty namespaces list and null namespaceSelector means \\\"this pod's namespace\\\".\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"topologyKey\":{\"description\":\"This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching\\nthe labelSelector in the specified namespaces, where co-located is defined as running on a node\\nwhose value of the label with key topologyKey matches that of any node on which any of the\\nselected pods is running.\\nEmpty topologyKey is not allowed.\",\"type\":\"string\"}},\"required\":[\"topologyKey\"],\"type\":\"object\"},\"weight\":{\"description\":\"weight associated with matching the corresponding podAffinityTerm,\\nin the range 1-100.\",\"format\":\"int32\",\"type\":\"integer\"}},\"required\":[\"podAffinityTerm\",\"weight\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"requiredDuringSchedulingIgnoredDuringExecution\":{\"description\":\"If the anti-affinity requirements specified by this field are not met at\\nscheduling time, the pod will not be scheduled onto the node.\\nIf the anti-affinity requirements specified by this field cease to be met\\nat some point during pod execution (e.g. due to a pod label update), the\\nsystem may or may not try to eventually evict the pod from its node.\\nWhen there are multiple elements, the lists of nodes corresponding to each\\npodAffinityTerm are intersected, i.e. all terms must be satisfied.\",\"items\":{\"description\":\"Defines a set of pods (namely those matching the labelSelector\\nrelative to the given namespace(s)) that this pod should be\\nco-located (affinity) or not co-located (anti-affinity) with,\\nwhere co-located is defined as running on a node whose value of\\nthe label with key \\u003ctopologyKey\\u003e matches that of any node on which\\na pod of the set of pods is running\",\"properties\":{\"labelSelector\":{\"description\":\"A label query over a set of resources, in this case pods.\\nIf it's null, this PodAffinityTerm matches with no Pods.\",\"properties\":{\"matchExpressions\":{\"description\":\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\",\"items\":{\"description\":\"A label selector requirement is a selector that contains values, a key, and an operator that\\nrelates the key and values.\",\"properties\":{\"key\":{\"description\":\"key is the label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"operator represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists and DoesNotExist.\",\"type\":\"string\"},\"values\":{\"description\":\"values is an array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. This array is replaced during a strategic\\nmerge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"matchLabels\":{\"additionalProperties\":{\"type\":\"string\"},\"description\":\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\\nmap is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the\\noperator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\",\"type\":\"object\"}},\"type\":\"object\",\"x-kubernetes-map-type\":\"atomic\"},\"matchLabelKeys\":{\"description\":\"MatchLabelKeys is a set of pod label keys to select which pods will\\nbe taken into consideration. The keys are used to lookup values from the\\nincoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`\\nto select the group of existing pods which pods will be taken into consideration\\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\\npod labels will be ignored. The default value is empty.\\nThe same key is forbidden to exist in both matchLabelKeys and labelSelector.\\nAlso, matchLabelKeys cannot be set when labelSelector isn't set.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"mismatchLabelKeys\":{\"description\":\"MismatchLabelKeys is a set of pod label keys to select which pods will\\nbe taken into consideration. The keys are used to lookup values from the\\nincoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`\\nto select the group of existing pods which pods will be taken into consideration\\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\\npod labels will be ignored. The default value is empty.\\nThe same key is forbidden to exist in both mismatchLabelKeys and labelSelector.\\nAlso, mismatchLabelKeys cannot be set when labelSelector isn't set.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"namespaceSelector\":{\"description\":\"A label query over the set of namespaces that the term applies to.\\nThe term is applied to the union of the namespaces selected by this field\\nand the ones listed in the namespaces field.\\nnull selector and null or empty namespaces list means \\\"this pod's namespace\\\".\\nAn empty selector ({}) matches all namespaces.\",\"properties\":{\"matchExpressions\":{\"description\":\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\",\"items\":{\"description\":\"A label selector requirement is a selector that contains values, a key, and an operator that\\nrelates the key and values.\",\"properties\":{\"key\":{\"description\":\"key is the label key that the selector applies to.\",\"type\":\"string\"},\"operator\":{\"description\":\"operator represents a key's relationship to a set of values.\\nValid operators are In, NotIn, Exists and DoesNotExist.\",\"type\":\"string\"},\"values\":{\"description\":\"values is an array of string values. If the operator is In or NotIn,\\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\\nthe values array must be empty. This array is replaced during a strategic\\nmerge patch.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"required\":[\"key\",\"operator\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"matchLabels\":{\"additionalProperties\":{\"type\":\"string\"},\"description\":\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\\nmap is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the\\noperator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\",\"type\":\"object\"}},\"type\":\"object\",\"x-kubernetes-map-type\":\"atomic\"},\"namespaces\":{\"description\":\"namespaces specifies a static list of namespace names that the term applies to.\\nThe term is applied to the union of the namespaces listed in this field\\nand the ones selected by namespaceSelector.\\nnull or empty namespaces list and null namespaceSelector means \\\"this pod's namespace\\\".\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"topologyKey\":{\"description\":\"This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching\\nthe labelSelector in the specified namespaces, where co-located is defined as running on a node\\nwhose value of the label with key topologyKey matches that of any node on which any of the\\nselected pods is running.\\nEmpty topologyKey is not allowed.\",\"type\":\"string\"}},\"required\":[\"topologyKey\"],\"type\":\"object\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"}},\"type\":\"object\"}},\"type\":\"object\"},\"nodeSelector\":{\"additionalProperties\":{\"type\":\"string\"},\"description\":\"nodeSelector is the node selector applied to the relevant kind of pods\\nIt specifies a map of key-value pairs: for the pod to be eligible to run on a node,\\nthe node must have each of the indicated key-value pairs as labels\\n(it can have additional labels as well).\\nSee https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#nodeselector\",\"type\":\"object\"},\"tolerations\":{\"description\":\"tolerations is a list of tolerations applied to the relevant kind of pods\\nSee https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/ for more info.\\nThese are additional tolerations other than default ones.\",\"items\":{\"description\":\"The pod this Toleration is attached to tolerates any taint that matches\\nthe triple \\u003ckey,value,effect\\u003e using the matching operator \\u003coperator\\u003e.\",\"properties\":{\"effect\":{\"description\":\"Effect indicates the taint effect to match. Empty means match all taint effects.\\nWhen specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.\",\"type\":\"string\"},\"key\":{\"description\":\"Key is the taint key that the toleration applies to. Empty means match all taint keys.\\nIf the key is empty, operator must be Exists; this combination means to match all values and all keys.\",\"type\":\"string\"},\"operator\":{\"description\":\"Operator represents a key's relationship to the value.\\nValid operators are Exists and Equal. Defaults to Equal.\\nExists is equivalent to wildcard for value, so that a pod can\\ntolerate all taints of a particular category.\",\"type\":\"string\"},\"tolerationSeconds\":{\"description\":\"TolerationSeconds represents the period of time the toleration (which must be\\nof effect NoExecute, otherwise this field is ignored) tolerates the taint. By default,\\nit is not set, which means tolerate the taint forever (do not evict). Zero and\\nnegative values will be treated as 0 (evict immediately) by the system.\",\"format\":\"int64\",\"type\":\"integer\"},\"value\":{\"description\":\"Value is the taint value the toleration matches to.\\nIf the operator is Exists, the value should be empty, otherwise just a regular string.\",\"type\":\"string\"}},\"type\":\"object\"},\"type\":\"array\"}},\"type\":\"object\"},\"replicas\":{\"default\":2,\"description\":\"Replicas is the number of replicas of the template validator pod\",\"format\":\"int32\",\"minimum\":0,\"type\":\"integer\"}},\"type\":\"object\"},\"tlsSecurityProfile\":{\"description\":\"TLSSecurityProfile is a configuration for the TLS.\",\"properties\":{\"custom\":{\"description\":\"custom is a user-defined TLS security profile. Be extremely careful using a custom\\nprofile as invalid configurations can be catastrophic. An example custom profile\\nlooks like this:\\n\\n  ciphers:\\n\\n    - ECDHE-ECDSA-CHACHA20-POLY1305\\n\\n    - ECDHE-RSA-CHACHA20-POLY1305\\n\\n    - ECDHE-RSA-AES128-GCM-SHA256\\n\\n    - ECDHE-ECDSA-AES128-GCM-SHA256\\n\\n  minTLSVersion: VersionTLS11\",\"nullable\":true,\"properties\":{\"ciphers\":{\"description\":\"ciphers is used to specify the cipher algorithms that are negotiated\\nduring the TLS handshake.  Operators may remove entries their operands\\ndo not support.  For example, to use DES-CBC3-SHA  (yaml):\\n\\n  ciphers:\\n    - DES-CBC3-SHA\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"minTLSVersion\":{\"description\":\"minTLSVersion is used to specify the minimal version of the TLS protocol\\nthat is negotiated during the TLS handshake. For example, to use TLS\\nversions 1.1, 1.2 and 1.3 (yaml):\\n\\n  minTLSVersion: VersionTLS11\\n\\nNOTE: currently the highest minTLSVersion allowed is VersionTLS12\",\"enum\":[\"VersionTLS10\",\"VersionTLS11\",\"VersionTLS12\",\"VersionTLS13\"],\"type\":\"string\"}},\"type\":\"object\"},\"intermediate\":{\"description\":\"intermediate is a TLS security profile based on:\\n\\nhttps://wiki.mozilla.org/Security/Server_Side_TLS#Intermediate_compatibility_.28recommended.29\\n\\nand looks like this (yaml):\\n\\n  ciphers:\\n\\n    - TLS_AES_128_GCM_SHA256\\n\\n    - TLS_AES_256_GCM_SHA384\\n\\n    - TLS_CHACHA20_POLY1305_SHA256\\n\\n    - ECDHE-ECDSA-AES128-GCM-SHA256\\n\\n    - ECDHE-RSA-AES128-GCM-SHA256\\n\\n    - ECDHE-ECDSA-AES256-GCM-SHA384\\n\\n    - ECDHE-RSA-AES256-GCM-SHA384\\n\\n    - ECDHE-ECDSA-CHACHA20-POLY1305\\n\\n    - ECDHE-RSA-CHACHA20-POLY1305\\n\\n    - DHE-RSA-AES128-GCM-SHA256\\n\\n    - DHE-RSA-AES256-GCM-SHA384\\n\\n  minTLSVersion: VersionTLS12\",\"nullable\":true,\"type\":\"object\"},\"modern\":{\"description\":\"modern is a TLS security profile based on:\\n\\nhttps://wiki.mozilla.org/Security/Server_Side_TLS#Modern_compatibility\\n\\nand looks like this (yaml):\\n\\n  ciphers:\\n\\n    - TLS_AES_128_GCM_SHA256\\n\\n    - TLS_AES_256_GCM_SHA384\\n\\n    - TLS_CHACHA20_POLY1305_SHA256\\n\\n  minTLSVersion: VersionTLS13\",\"nullable\":true,\"type\":\"object\"},\"old\":{\"description\":\"old is a TLS security profile based on:\\n\\nhttps://wiki.mozilla.org/Security/Server_Side_TLS#Old_backward_compatibility\\n\\nand looks like this (yaml):\\n\\n  ciphers:\\n\\n    - TLS_AES_128_GCM_SHA256\\n\\n    - TLS_AES_256_GCM_SHA384\\n\\n    - TLS_CHACHA20_POLY1305_SHA256\\n\\n    - ECDHE-ECDSA-AES128-GCM-SHA256\\n\\n    - ECDHE-RSA-AES128-GCM-SHA256\\n\\n    - ECDHE-ECDSA-AES256-GCM-SHA384\\n\\n    - ECDHE-RSA-AES256-GCM-SHA384\\n\\n    - ECDHE-ECDSA-CHACHA20-POLY1305\\n\\n    - ECDHE-RSA-CHACHA20-POLY1305\\n\\n    - DHE-RSA-AES128-GCM-SHA256\\n\\n    - DHE-RSA-AES256-GCM-SHA384\\n\\n    - DHE-RSA-CHACHA20-POLY1305\\n\\n    - ECDHE-ECDSA-AES128-SHA256\\n\\n    - ECDHE-RSA-AES128-SHA256\\n\\n    - ECDHE-ECDSA-AES128-SHA\\n\\n    - ECDHE-RSA-AES128-SHA\\n\\n    - ECDHE-ECDSA-AES256-SHA384\\n\\n    - ECDHE-RSA-AES256-SHA384\\n\\n    - ECDHE-ECDSA-AES256-SHA\\n\\n    - ECDHE-RSA-AES256-SHA\\n\\n    - DHE-RSA-AES128-SHA256\\n\\n    - DHE-RSA-AES256-SHA256\\n\\n    - AES128-GCM-SHA256\\n\\n    - AES256-GCM-SHA384\\n\\n    - AES128-SHA256\\n\\n    - AES256-SHA256\\n\\n    - AES128-SHA\\n\\n    - AES256-SHA\\n\\n    - DES-CBC3-SHA\\n\\n  minTLSVersion: VersionTLS10\",\"nullable\":true,\"type\":\"object\"},\"type\":{\"description\":\"type is one of Old, Intermediate, Modern or Custom. Custom provides\\nthe ability to specify individual TLS security profile parameters.\\nOld, Intermediate and Modern are TLS security profiles based on:\\n\\nhttps://wiki.mozilla.org/Security/Server_Side_TLS#Recommended_configurations\\n\\nThe profiles are intent based, so they may change over time as new ciphers are developed and existing ciphers\\nare found to be insecure.  Depending on precisely which ciphers are available to a process, the list may be\\nreduced.\\n\\nNote that the Modern profile is currently not supported because it is not\\nyet well adopted by common software libraries.\",\"enum\":[\"Old\",\"Intermediate\",\"Modern\",\"Custom\"],\"type\":\"string\"}},\"type\":\"object\"},\"tokenGenerationService\":{\"description\":\"TokenGenerationService configures the service for generating tokens to access VNC for a VM.\",\"properties\":{\"enabled\":{\"type\":\"boolean\"}},\"type\":\"object\"}},\"required\":[\"commonTemplates\"],\"type\":\"object\"},\"status\":{\"description\":\"SSPStatus defines the observed state of SSP\",\"properties\":{\"conditions\":{\"description\":\"A list of current conditions of the resource\",\"items\":{\"description\":\"Condition represents the state of the operator's\\nreconciliation functionality.\",\"properties\":{\"lastHeartbeatTime\":{\"format\":\"date-time\",\"type\":\"string\"},\"lastTransitionTime\":{\"format\":\"date-time\",\"type\":\"string\"},\"message\":{\"type\":\"string\"},\"reason\":{\"type\":\"string\"},\"status\":{\"type\":\"string\"},\"type\":{\"description\":\"ConditionType is the state of the operator's reconciliation functionality.\",\"type\":\"string\"}},\"required\":[\"status\",\"type\"],\"type\":\"object\"},\"type\":\"array\"},\"observedGeneration\":{\"description\":\"ObservedGeneration is the latest generation observed by the operator.\",\"format\":\"int64\",\"type\":\"integer\"},\"observedVersion\":{\"description\":\"The observed version of the resource\",\"type\":\"string\"},\"operatorVersion\":{\"description\":\"The version of the resource as defined by the operator\",\"type\":\"string\"},\"paused\":{\"description\":\"Paused is true when the operator notices paused annotation.\",\"type\":\"boolean\"},\"phase\":{\"description\":\"Phase is the current phase of the deployment\",\"type\":\"string\"},\"targetVersion\":{\"description\":\"The desired version of the resource\",\"type\":\"string\"}},\"type\":\"object\"}},\"type\":\"object\"}},\"served\":true,\"storage\":true,\"subresources\":{\"status\":{}}}]}}\n"
      },
      "served_versions": [
        "v1beta2",
        "v1beta3"
      ],
      "stored_version": "v1beta3",
      "categories": [],
      "short_names": [],
      "description": null,
      "instance_count": 0
    },
    {
      "name": "storageprofiles.cdi.kubevirt.io",
      "group": "cdi.kubevirt.io",
      "version": "v1beta1",
      "kind": "StorageProfile",
      "plural": "storageprofiles",
      "singular": "storageprofile",
      "scope": "Cluster",
      "creation_timestamp": "2025-09-06T13:01:11+00:00",
      "labels": {
        "app.kubernetes.io/part-of": "hyperconverged-cluster",
        "app.kubernetes.io/version": "1.17.0",
        "operator.cdi.kubevirt.io/createVersion": "v1.63.0"
      },
      "annotations": {
        "controller-gen.kubebuilder.io/version": "v0.14.0",
        "operator.cdi.kubevirt.io/lastAppliedConfiguration": "{\"kind\":\"CustomResourceDefinition\",\"apiVersion\":\"apiextensions.k8s.io/v1\",\"metadata\":{\"name\":\"storageprofiles.cdi.kubevirt.io\",\"creationTimestamp\":null,\"annotations\":{\"controller-gen.kubebuilder.io/version\":\"v0.14.0\"}},\"spec\":{\"group\":\"cdi.kubevirt.io\",\"names\":{\"plural\":\"storageprofiles\",\"singular\":\"storageprofile\",\"kind\":\"StorageProfile\",\"listKind\":\"StorageProfileList\"},\"scope\":\"Cluster\",\"versions\":[{\"name\":\"v1beta1\",\"served\":true,\"storage\":true,\"schema\":{\"openAPIV3Schema\":{\"description\":\"StorageProfile provides a CDI specific recommendation for storage parameters\",\"type\":\"object\",\"required\":[\"spec\"],\"properties\":{\"apiVersion\":{\"description\":\"APIVersion defines the versioned schema of this representation of an object.\\nServers should convert recognized schemas to the latest internal value, and\\nmay reject unrecognized values.\\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources\",\"type\":\"string\"},\"kind\":{\"description\":\"Kind is a string value representing the REST resource this object represents.\\nServers may infer this from the endpoint the client submits requests to.\\nCannot be updated.\\nIn CamelCase.\\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\",\"type\":\"string\"},\"metadata\":{\"type\":\"object\"},\"spec\":{\"description\":\"StorageProfileSpec defines specification for StorageProfile\",\"type\":\"object\",\"properties\":{\"claimPropertySets\":{\"description\":\"ClaimPropertySets is a provided set of properties applicable to PVC\",\"type\":\"array\",\"maxItems\":8,\"items\":{\"description\":\"ClaimPropertySet is a set of properties applicable to PVC\",\"type\":\"object\",\"required\":[\"accessModes\",\"volumeMode\"],\"properties\":{\"accessModes\":{\"description\":\"AccessModes contains the desired access modes the volume should have.\\nMore info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1\",\"type\":\"array\",\"maxItems\":4,\"items\":{\"type\":\"string\"},\"x-kubernetes-validations\":[{\"rule\":\"self.all(am, am in ['ReadWriteOnce', 'ReadOnlyMany', 'ReadWriteMany', 'ReadWriteOncePod'])\",\"message\":\"Illegal AccessMode\"}]},\"volumeMode\":{\"description\":\"VolumeMode defines what type of volume is required by the claim.\\nValue of Filesystem is implied when not included in claim spec.\",\"type\":\"string\",\"enum\":[\"Block\",\"Filesystem\"]}}}},\"cloneStrategy\":{\"description\":\"CloneStrategy defines the preferred method for performing a CDI clone\",\"type\":\"string\"},\"dataImportCronSourceFormat\":{\"description\":\"DataImportCronSourceFormat defines the format of the DataImportCron-created disk image sources\",\"type\":\"string\"},\"snapshotClass\":{\"description\":\"SnapshotClass is optional specific VolumeSnapshotClass for CloneStrategySnapshot. If not set, a VolumeSnapshotClass is chosen according to the provisioner.\",\"type\":\"string\"}}},\"status\":{\"description\":\"StorageProfileStatus provides the most recently observed status of the StorageProfile\",\"type\":\"object\",\"properties\":{\"claimPropertySets\":{\"description\":\"ClaimPropertySets computed from the spec and detected in the system\",\"type\":\"array\",\"maxItems\":8,\"items\":{\"description\":\"ClaimPropertySet is a set of properties applicable to PVC\",\"type\":\"object\",\"required\":[\"accessModes\",\"volumeMode\"],\"properties\":{\"accessModes\":{\"description\":\"AccessModes contains the desired access modes the volume should have.\\nMore info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1\",\"type\":\"array\",\"maxItems\":4,\"items\":{\"type\":\"string\"},\"x-kubernetes-validations\":[{\"rule\":\"self.all(am, am in ['ReadWriteOnce', 'ReadOnlyMany', 'ReadWriteMany', 'ReadWriteOncePod'])\",\"message\":\"Illegal AccessMode\"}]},\"volumeMode\":{\"description\":\"VolumeMode defines what type of volume is required by the claim.\\nValue of Filesystem is implied when not included in claim spec.\",\"type\":\"string\",\"enum\":[\"Block\",\"Filesystem\"]}}}},\"cloneStrategy\":{\"description\":\"CloneStrategy defines the preferred method for performing a CDI clone\",\"type\":\"string\"},\"dataImportCronSourceFormat\":{\"description\":\"DataImportCronSourceFormat defines the format of the DataImportCron-created disk image sources\",\"type\":\"string\"},\"provisioner\":{\"description\":\"The Storage class provisioner plugin name\",\"type\":\"string\"},\"snapshotClass\":{\"description\":\"SnapshotClass is optional specific VolumeSnapshotClass for CloneStrategySnapshot. If not set, a VolumeSnapshotClass is chosen according to the provisioner.\",\"type\":\"string\"},\"storageClass\":{\"description\":\"The StorageClass name for which capabilities are defined\",\"type\":\"string\"}}}}}}}]},\"status\":{\"conditions\":null,\"acceptedNames\":{\"plural\":\"\",\"kind\":\"\"},\"storedVersions\":null}}"
      },
      "served_versions": [
        "v1beta1"
      ],
      "stored_version": "v1beta1",
      "categories": [],
      "short_names": [],
      "description": null,
      "instance_count": 0
    },
    {
      "name": "strategies.authn.krateo.io",
      "group": "authn.krateo.io",
      "version": "v1alpha1",
      "kind": "Strategy",
      "plural": "strategies",
      "singular": "strategy",
      "scope": "Cluster",
      "creation_timestamp": "2025-09-06T18:03:46+00:00",
      "labels": {},
      "annotations": {
        "controller-gen.kubebuilder.io/version": "v0.9.2"
      },
      "served_versions": [
        "v1alpha1"
      ],
      "stored_version": "v1alpha1",
      "categories": [
        "managed",
        "krateo",
        "authn"
      ],
      "short_names": [],
      "description": null,
      "instance_count": 0
    },
    {
      "name": "subscribers.postgres.kubedb.com",
      "group": "postgres.kubedb.com",
      "version": "v1alpha1",
      "kind": "Subscriber",
      "plural": "subscribers",
      "singular": "subscriber",
      "scope": "Namespaced",
      "creation_timestamp": "2025-09-06T13:34:47+00:00",
      "labels": {
        "app.kubernetes.io/name": "kubedb"
      },
      "annotations": {},
      "served_versions": [
        "v1alpha1"
      ],
      "stored_version": "v1alpha1",
      "categories": [
        "pgstore",
        "kubedb",
        "appscode"
      ],
      "short_names": [
        "sub"
      ],
      "description": null,
      "instance_count": 0
    },
    {
      "name": "subscriptions.operators.coreos.com",
      "group": "operators.coreos.com",
      "version": "v1alpha1",
      "kind": "Subscription",
      "plural": "subscriptions",
      "singular": "subscription",
      "scope": "Namespaced",
      "creation_timestamp": "2025-09-06T12:34:58+00:00",
      "labels": {},
      "annotations": {
        "controller-gen.kubebuilder.io/version": "v0.14.0"
      },
      "served_versions": [
        "v1alpha1"
      ],
      "stored_version": "v1alpha1",
      "categories": [
        "olm"
      ],
      "short_names": [
        "sub",
        "subs"
      ],
      "description": null,
      "instance_count": 0
    },
    {
      "name": "subscriptions.postgresql.cnpg.io",
      "group": "postgresql.cnpg.io",
      "version": "v1",
      "kind": "Subscription",
      "plural": "subscriptions",
      "singular": "subscription",
      "scope": "Namespaced",
      "creation_timestamp": "2025-09-07T09:12:57+00:00",
      "labels": {
        "olm.managed": "true",
        "operators.coreos.com/cloudnative-pg.operators": ""
      },
      "annotations": {
        "controller-gen.kubebuilder.io/version": "v0.18.0",
        "operatorframework.io/installed-alongside-26b2108901275579": "operators/cloudnative-pg.v1.27.0"
      },
      "served_versions": [
        "v1"
      ],
      "stored_version": "v1",
      "categories": [],
      "short_names": [],
      "description": null,
      "instance_count": 0
    },
    {
      "name": "tables.widgets.templates.krateo.io",
      "group": "widgets.templates.krateo.io",
      "version": "v1beta1",
      "kind": "Table",
      "plural": "tables",
      "singular": "table",
      "scope": "Namespaced",
      "creation_timestamp": "2025-09-06T09:46:48+00:00",
      "labels": {},
      "annotations": {
        "controller-gen.kubebuilder.io/version": "v0.16.1"
      },
      "served_versions": [
        "v1beta1"
      ],
      "stored_version": "v1beta1",
      "categories": [
        "widgets",
        "krateo"
      ],
      "short_names": [],
      "description": null,
      "instance_count": 0
    },
    {
      "name": "tablists.widgets.templates.krateo.io",
      "group": "widgets.templates.krateo.io",
      "version": "v1beta1",
      "kind": "TabList",
      "plural": "tablists",
      "singular": "tablist",
      "scope": "Namespaced",
      "creation_timestamp": "2025-09-06T09:46:48+00:00",
      "labels": {},
      "annotations": {
        "controller-gen.kubebuilder.io/version": "v0.16.1"
      },
      "served_versions": [
        "v1beta1"
      ],
      "stored_version": "v1beta1",
      "categories": [
        "widgets",
        "krateo"
      ],
      "short_names": [],
      "description": null,
      "instance_count": 0
    },
    {
      "name": "teamrepoes.github.kog.krateo.io",
      "group": "github.kog.krateo.io",
      "version": "v1alpha1",
      "kind": "TeamRepo",
      "plural": "teamrepoes",
      "singular": "teamrepo",
      "scope": "Namespaced",
      "creation_timestamp": "2025-09-06T10:23:17+00:00",
      "labels": {},
      "annotations": {
        "controller-gen.kubebuilder.io/version": "v0.16.1"
      },
      "served_versions": [
        "v1alpha1"
      ],
      "stored_version": "v1alpha1",
      "categories": [
        "teamrepo",
        "restresources",
        "rr"
      ],
      "short_names": [],
      "description": null,
      "instance_count": 0
    },
    {
      "name": "templates.krateo.io",
      "group": "krateo.io",
      "version": "v1alpha1",
      "kind": "Template",
      "plural": "templates",
      "singular": "template",
      "scope": "Cluster",
      "creation_timestamp": "2025-09-06T18:03:46+00:00",
      "labels": {},
      "annotations": {
        "controller-gen.kubebuilder.io/version": "v0.9.2"
      },
      "served_versions": [
        "v1alpha1"
      ],
      "stored_version": "v1alpha1",
      "categories": [
        "managed",
        "krateo",
        "templates"
      ],
      "short_names": [],
      "description": null,
      "instance_count": 0
    },
    {
      "name": "tlsoptions.traefik.io",
      "group": "traefik.io",
      "version": "v1alpha1",
      "kind": "TLSOption",
      "plural": "tlsoptions",
      "singular": "tlsoption",
      "scope": "Namespaced",
      "creation_timestamp": "2025-06-26T15:37:15+00:00",
      "labels": {},
      "annotations": {
        "controller-gen.kubebuilder.io/version": "v0.16.1"
      },
      "served_versions": [
        "v1alpha1"
      ],
      "stored_version": "v1alpha1",
      "categories": [],
      "short_names": [],
      "description": null,
      "instance_count": 0
    },
    {
      "name": "tlsstores.traefik.io",
      "group": "traefik.io",
      "version": "v1alpha1",
      "kind": "TLSStore",
      "plural": "tlsstores",
      "singular": "tlsstore",
      "scope": "Namespaced",
      "creation_timestamp": "2025-06-26T15:37:15+00:00",
      "labels": {},
      "annotations": {
        "controller-gen.kubebuilder.io/version": "v0.16.1"
      },
      "served_versions": [
        "v1alpha1"
      ],
      "stored_version": "v1alpha1",
      "categories": [],
      "short_names": [],
      "description": null,
      "instance_count": 0
    },
    {
      "name": "traefikservices.traefik.io",
      "group": "traefik.io",
      "version": "v1alpha1",
      "kind": "TraefikService",
      "plural": "traefikservices",
      "singular": "traefikservice",
      "scope": "Namespaced",
      "creation_timestamp": "2025-06-26T15:37:15+00:00",
      "labels": {},
      "annotations": {
        "controller-gen.kubebuilder.io/version": "v0.16.1"
      },
      "served_versions": [
        "v1alpha1"
      ],
      "stored_version": "v1alpha1",
      "categories": [],
      "short_names": [],
      "description": null,
      "instance_count": 0
    },
    {
      "name": "users.basic.authn.krateo.io",
      "group": "basic.authn.krateo.io",
      "version": "v1alpha1",
      "kind": "User",
      "plural": "users",
      "singular": "user",
      "scope": "Namespaced",
      "creation_timestamp": "2025-09-06T09:44:38+00:00",
      "labels": {},
      "annotations": {
        "controller-gen.kubebuilder.io/version": "v0.15.0"
      },
      "served_versions": [
        "v1alpha1"
      ],
      "stored_version": "v1alpha1",
      "categories": [
        "krateo",
        "authn",
        "user"
      ],
      "short_names": [],
      "description": null,
      "instance_count": 0
    },
    {
      "name": "users.k8s.mariadb.com",
      "group": "k8s.mariadb.com",
      "version": "v1alpha1",
      "kind": "User",
      "plural": "users",
      "singular": "user",
      "scope": "Namespaced",
      "creation_timestamp": "2025-09-07T09:15:51+00:00",
      "labels": {
        "olm.managed": "true",
        "operators.coreos.com/mariadb-operator.operators": ""
      },
      "annotations": {
        "controller-gen.kubebuilder.io/version": "v0.18.0",
        "operatorframework.io/installed-alongside-6fd75c749733b588": "operators/mariadb-operator.v25.8.3"
      },
      "served_versions": [
        "v1alpha1"
      ],
      "stored_version": "v1alpha1",
      "categories": [],
      "short_names": [
        "umdb"
      ],
      "description": null,
      "instance_count": 0
    },
    {
      "name": "virtualmachineclones.clone.kubevirt.io",
      "group": "clone.kubevirt.io",
      "version": "v1beta1",
      "kind": "VirtualMachineClone",
      "plural": "virtualmachineclones",
      "singular": "virtualmachineclone",
      "scope": "Namespaced",
      "creation_timestamp": "2025-09-06T13:01:05+00:00",
      "labels": {
        "app.kubernetes.io/component": "compute",
        "app.kubernetes.io/managed-by": "virt-operator",
        "app.kubernetes.io/part-of": "hyperconverged-cluster",
        "app.kubernetes.io/version": "1.17.0",
        "kubevirt.io": ""
      },
      "annotations": {
        "kubevirt.io/generation": "2",
        "kubevirt.io/install-strategy-identifier": "785522a74afe56a60c761aa46865cbdd654f9d25",
        "kubevirt.io/install-strategy-registry": "quay.io/kubevirt",
        "kubevirt.io/install-strategy-version": "v1.6.0"
      },
      "served_versions": [
        "v1alpha1",
        "v1beta1"
      ],
      "stored_version": "v1beta1",
      "categories": [
        "all"
      ],
      "short_names": [
        "vmclone",
        "vmclones"
      ],
      "description": null,
      "instance_count": 0
    },
    {
      "name": "virtualmachineclusterinstancetypes.instancetype.kubevirt.io",
      "group": "instancetype.kubevirt.io",
      "version": "v1beta1",
      "kind": "VirtualMachineClusterInstancetype",
      "plural": "virtualmachineclusterinstancetypes",
      "singular": "virtualmachineclusterinstancetype",
      "scope": "Cluster",
      "creation_timestamp": "2025-09-06T13:01:05+00:00",
      "labels": {
        "app.kubernetes.io/component": "compute",
        "app.kubernetes.io/managed-by": "virt-operator",
        "app.kubernetes.io/part-of": "hyperconverged-cluster",
        "app.kubernetes.io/version": "1.17.0",
        "kubevirt.io": ""
      },
      "annotations": {
        "kubevirt.io/generation": "2",
        "kubevirt.io/install-strategy-identifier": "785522a74afe56a60c761aa46865cbdd654f9d25",
        "kubevirt.io/install-strategy-registry": "quay.io/kubevirt",
        "kubevirt.io/install-strategy-version": "v1.6.0"
      },
      "served_versions": [
        "v1alpha1",
        "v1alpha2",
        "v1beta1"
      ],
      "stored_version": "v1beta1",
      "categories": [],
      "short_names": [
        "vmclusterinstancetype",
        "vmclusterinstancetypes",
        "vmcf",
        "vmcfs"
      ],
      "description": null,
      "instance_count": 0
    },
    {
      "name": "virtualmachineclusterpreferences.instancetype.kubevirt.io",
      "group": "instancetype.kubevirt.io",
      "version": "v1beta1",
      "kind": "VirtualMachineClusterPreference",
      "plural": "virtualmachineclusterpreferences",
      "singular": "virtualmachineclusterpreference",
      "scope": "Cluster",
      "creation_timestamp": "2025-09-06T13:01:05+00:00",
      "labels": {
        "app.kubernetes.io/component": "compute",
        "app.kubernetes.io/managed-by": "virt-operator",
        "app.kubernetes.io/part-of": "hyperconverged-cluster",
        "app.kubernetes.io/version": "1.17.0",
        "kubevirt.io": ""
      },
      "annotations": {
        "kubevirt.io/generation": "2",
        "kubevirt.io/install-strategy-identifier": "785522a74afe56a60c761aa46865cbdd654f9d25",
        "kubevirt.io/install-strategy-registry": "quay.io/kubevirt",
        "kubevirt.io/install-strategy-version": "v1.6.0"
      },
      "served_versions": [
        "v1alpha1",
        "v1alpha2",
        "v1beta1"
      ],
      "stored_version": "v1beta1",
      "categories": [],
      "short_names": [
        "vmcp",
        "vmcps"
      ],
      "description": null,
      "instance_count": 0
    },
    {
      "name": "virtualmachineexports.export.kubevirt.io",
      "group": "export.kubevirt.io",
      "version": "v1beta1",
      "kind": "VirtualMachineExport",
      "plural": "virtualmachineexports",
      "singular": "virtualmachineexport",
      "scope": "Namespaced",
      "creation_timestamp": "2025-09-06T13:01:05+00:00",
      "labels": {
        "app.kubernetes.io/component": "compute",
        "app.kubernetes.io/managed-by": "virt-operator",
        "app.kubernetes.io/part-of": "hyperconverged-cluster",
        "app.kubernetes.io/version": "1.17.0",
        "kubevirt.io": ""
      },
      "annotations": {
        "kubevirt.io/generation": "2",
        "kubevirt.io/install-strategy-identifier": "785522a74afe56a60c761aa46865cbdd654f9d25",
        "kubevirt.io/install-strategy-registry": "quay.io/kubevirt",
        "kubevirt.io/install-strategy-version": "v1.6.0"
      },
      "served_versions": [
        "v1alpha1",
        "v1beta1"
      ],
      "stored_version": "v1beta1",
      "categories": [
        "all"
      ],
      "short_names": [
        "vmexport",
        "vmexports"
      ],
      "description": null,
      "instance_count": 0
    },
    {
      "name": "virtualmachineinstancemigrations.kubevirt.io",
      "group": "kubevirt.io",
      "version": "v1",
      "kind": "VirtualMachineInstanceMigration",
      "plural": "virtualmachineinstancemigrations",
      "singular": "virtualmachineinstancemigration",
      "scope": "Namespaced",
      "creation_timestamp": "2025-09-06T13:01:04+00:00",
      "labels": {
        "app.kubernetes.io/component": "compute",
        "app.kubernetes.io/managed-by": "virt-operator",
        "app.kubernetes.io/part-of": "hyperconverged-cluster",
        "app.kubernetes.io/version": "1.17.0",
        "kubevirt.io": ""
      },
      "annotations": {
        "kubevirt.io/generation": "2",
        "kubevirt.io/install-strategy-identifier": "785522a74afe56a60c761aa46865cbdd654f9d25",
        "kubevirt.io/install-strategy-registry": "quay.io/kubevirt",
        "kubevirt.io/install-strategy-version": "v1.6.0"
      },
      "served_versions": [
        "v1",
        "v1alpha3"
      ],
      "stored_version": "v1",
      "categories": [
        "all"
      ],
      "short_names": [
        "vmim",
        "vmims"
      ],
      "description": null,
      "instance_count": 0
    },
    {
      "name": "virtualmachineinstancepresets.kubevirt.io",
      "group": "kubevirt.io",
      "version": "v1alpha3",
      "kind": "VirtualMachineInstancePreset",
      "plural": "virtualmachineinstancepresets",
      "singular": "virtualmachineinstancepreset",
      "scope": "Namespaced",
      "creation_timestamp": "2025-09-06T13:01:04+00:00",
      "labels": {
        "app.kubernetes.io/component": "compute",
        "app.kubernetes.io/managed-by": "virt-operator",
        "app.kubernetes.io/part-of": "hyperconverged-cluster",
        "app.kubernetes.io/version": "1.17.0",
        "kubevirt.io": ""
      },
      "annotations": {
        "kubevirt.io/generation": "2",
        "kubevirt.io/install-strategy-identifier": "785522a74afe56a60c761aa46865cbdd654f9d25",
        "kubevirt.io/install-strategy-registry": "quay.io/kubevirt",
        "kubevirt.io/install-strategy-version": "v1.6.0"
      },
      "served_versions": [
        "v1",
        "v1alpha3"
      ],
      "stored_version": "v1alpha3",
      "categories": [
        "all"
      ],
      "short_names": [
        "vmipreset",
        "vmipresets"
      ],
      "description": null,
      "instance_count": 0
    },
    {
      "name": "virtualmachineinstancereplicasets.kubevirt.io",
      "group": "kubevirt.io",
      "version": "v1",
      "kind": "VirtualMachineInstanceReplicaSet",
      "plural": "virtualmachineinstancereplicasets",
      "singular": "virtualmachineinstancereplicaset",
      "scope": "Namespaced",
      "creation_timestamp": "2025-09-06T13:01:04+00:00",
      "labels": {
        "app.kubernetes.io/component": "compute",
        "app.kubernetes.io/managed-by": "virt-operator",
        "app.kubernetes.io/part-of": "hyperconverged-cluster",
        "app.kubernetes.io/version": "1.17.0",
        "kubevirt.io": ""
      },
      "annotations": {
        "kubevirt.io/generation": "2",
        "kubevirt.io/install-strategy-identifier": "785522a74afe56a60c761aa46865cbdd654f9d25",
        "kubevirt.io/install-strategy-registry": "quay.io/kubevirt",
        "kubevirt.io/install-strategy-version": "v1.6.0"
      },
      "served_versions": [
        "v1",
        "v1alpha3"
      ],
      "stored_version": "v1",
      "categories": [
        "all"
      ],
      "short_names": [
        "vmirs",
        "vmirss"
      ],
      "description": null,
      "instance_count": 0
    },
    {
      "name": "virtualmachineinstances.kubevirt.io",
      "group": "kubevirt.io",
      "version": "v1",
      "kind": "VirtualMachineInstance",
      "plural": "virtualmachineinstances",
      "singular": "virtualmachineinstance",
      "scope": "Namespaced",
      "creation_timestamp": "2025-09-06T13:01:04+00:00",
      "labels": {
        "app.kubernetes.io/component": "compute",
        "app.kubernetes.io/managed-by": "virt-operator",
        "app.kubernetes.io/part-of": "hyperconverged-cluster",
        "app.kubernetes.io/version": "1.17.0",
        "kubevirt.io": ""
      },
      "annotations": {
        "kubevirt.io/generation": "2",
        "kubevirt.io/install-strategy-identifier": "785522a74afe56a60c761aa46865cbdd654f9d25",
        "kubevirt.io/install-strategy-registry": "quay.io/kubevirt",
        "kubevirt.io/install-strategy-version": "v1.6.0"
      },
      "served_versions": [
        "v1",
        "v1alpha3"
      ],
      "stored_version": "v1",
      "categories": [
        "all"
      ],
      "short_names": [
        "vmi",
        "vmis"
      ],
      "description": null,
      "instance_count": 0
    },
    {
      "name": "virtualmachineinstancetypes.instancetype.kubevirt.io",
      "group": "instancetype.kubevirt.io",
      "version": "v1beta1",
      "kind": "VirtualMachineInstancetype",
      "plural": "virtualmachineinstancetypes",
      "singular": "virtualmachineinstancetype",
      "scope": "Namespaced",
      "creation_timestamp": "2025-09-06T13:01:05+00:00",
      "labels": {
        "app.kubernetes.io/component": "compute",
        "app.kubernetes.io/managed-by": "virt-operator",
        "app.kubernetes.io/part-of": "hyperconverged-cluster",
        "app.kubernetes.io/version": "1.17.0",
        "kubevirt.io": ""
      },
      "annotations": {
        "kubevirt.io/generation": "2",
        "kubevirt.io/install-strategy-identifier": "785522a74afe56a60c761aa46865cbdd654f9d25",
        "kubevirt.io/install-strategy-registry": "quay.io/kubevirt",
        "kubevirt.io/install-strategy-version": "v1.6.0"
      },
      "served_versions": [
        "v1alpha1",
        "v1alpha2",
        "v1beta1"
      ],
      "stored_version": "v1beta1",
      "categories": [
        "all"
      ],
      "short_names": [
        "vminstancetype",
        "vminstancetypes",
        "vmf",
        "vmfs"
      ],
      "description": null,
      "instance_count": 0
    },
    {
      "name": "virtualmachinepools.pool.kubevirt.io",
      "group": "pool.kubevirt.io",
      "version": "v1alpha1",
      "kind": "VirtualMachinePool",
      "plural": "virtualmachinepools",
      "singular": "virtualmachinepool",
      "scope": "Namespaced",
      "creation_timestamp": "2025-09-06T13:01:05+00:00",
      "labels": {
        "app.kubernetes.io/component": "compute",
        "app.kubernetes.io/managed-by": "virt-operator",
        "app.kubernetes.io/part-of": "hyperconverged-cluster",
        "app.kubernetes.io/version": "1.17.0",
        "kubevirt.io": ""
      },
      "annotations": {
        "kubevirt.io/generation": "2",
        "kubevirt.io/install-strategy-identifier": "785522a74afe56a60c761aa46865cbdd654f9d25",
        "kubevirt.io/install-strategy-registry": "quay.io/kubevirt",
        "kubevirt.io/install-strategy-version": "v1.6.0"
      },
      "served_versions": [
        "v1alpha1"
      ],
      "stored_version": "v1alpha1",
      "categories": [
        "all"
      ],
      "short_names": [
        "vmpool",
        "vmpools"
      ],
      "description": null,
      "instance_count": 0
    },
    {
      "name": "virtualmachinepreferences.instancetype.kubevirt.io",
      "group": "instancetype.kubevirt.io",
      "version": "v1beta1",
      "kind": "VirtualMachinePreference",
      "plural": "virtualmachinepreferences",
      "singular": "virtualmachinepreference",
      "scope": "Namespaced",
      "creation_timestamp": "2025-09-06T13:01:05+00:00",
      "labels": {
        "app.kubernetes.io/component": "compute",
        "app.kubernetes.io/managed-by": "virt-operator",
        "app.kubernetes.io/part-of": "hyperconverged-cluster",
        "app.kubernetes.io/version": "1.17.0",
        "kubevirt.io": ""
      },
      "annotations": {
        "kubevirt.io/generation": "2",
        "kubevirt.io/install-strategy-identifier": "785522a74afe56a60c761aa46865cbdd654f9d25",
        "kubevirt.io/install-strategy-registry": "quay.io/kubevirt",
        "kubevirt.io/install-strategy-version": "v1.6.0"
      },
      "served_versions": [
        "v1alpha1",
        "v1alpha2",
        "v1beta1"
      ],
      "stored_version": "v1beta1",
      "categories": [
        "all"
      ],
      "short_names": [
        "vmpref",
        "vmprefs",
        "vmp",
        "vmps"
      ],
      "description": null,
      "instance_count": 0
    },
    {
      "name": "virtualmachinerestores.snapshot.kubevirt.io",
      "group": "snapshot.kubevirt.io",
      "version": "v1beta1",
      "kind": "VirtualMachineRestore",
      "plural": "virtualmachinerestores",
      "singular": "virtualmachinerestore",
      "scope": "Namespaced",
      "creation_timestamp": "2025-09-06T13:01:05+00:00",
      "labels": {
        "app.kubernetes.io/component": "compute",
        "app.kubernetes.io/managed-by": "virt-operator",
        "app.kubernetes.io/part-of": "hyperconverged-cluster",
        "app.kubernetes.io/version": "1.17.0",
        "kubevirt.io": ""
      },
      "annotations": {
        "kubevirt.io/generation": "2",
        "kubevirt.io/install-strategy-identifier": "785522a74afe56a60c761aa46865cbdd654f9d25",
        "kubevirt.io/install-strategy-registry": "quay.io/kubevirt",
        "kubevirt.io/install-strategy-version": "v1.6.0"
      },
      "served_versions": [
        "v1alpha1",
        "v1beta1"
      ],
      "stored_version": "v1beta1",
      "categories": [
        "all"
      ],
      "short_names": [
        "vmrestore",
        "vmrestores"
      ],
      "description": null,
      "instance_count": 0
    },
    {
      "name": "virtualmachines.kubevirt.io",
      "group": "kubevirt.io",
      "version": "v1",
      "kind": "VirtualMachine",
      "plural": "virtualmachines",
      "singular": "virtualmachine",
      "scope": "Namespaced",
      "creation_timestamp": "2025-09-06T13:01:04+00:00",
      "labels": {
        "app.kubernetes.io/component": "compute",
        "app.kubernetes.io/managed-by": "virt-operator",
        "app.kubernetes.io/part-of": "hyperconverged-cluster",
        "app.kubernetes.io/version": "1.17.0",
        "kubevirt.io": ""
      },
      "annotations": {
        "kubevirt.io/generation": "2",
        "kubevirt.io/install-strategy-identifier": "785522a74afe56a60c761aa46865cbdd654f9d25",
        "kubevirt.io/install-strategy-registry": "quay.io/kubevirt",
        "kubevirt.io/install-strategy-version": "v1.6.0"
      },
      "served_versions": [
        "v1",
        "v1alpha3"
      ],
      "stored_version": "v1",
      "categories": [
        "all"
      ],
      "short_names": [
        "vm",
        "vms"
      ],
      "description": null,
      "instance_count": 0
    },
    {
      "name": "virtualmachinesnapshotcontents.snapshot.kubevirt.io",
      "group": "snapshot.kubevirt.io",
      "version": "v1beta1",
      "kind": "VirtualMachineSnapshotContent",
      "plural": "virtualmachinesnapshotcontents",
      "singular": "virtualmachinesnapshotcontent",
      "scope": "Namespaced",
      "creation_timestamp": "2025-09-06T13:01:04+00:00",
      "labels": {
        "app.kubernetes.io/component": "compute",
        "app.kubernetes.io/managed-by": "virt-operator",
        "app.kubernetes.io/part-of": "hyperconverged-cluster",
        "app.kubernetes.io/version": "1.17.0",
        "kubevirt.io": ""
      },
      "annotations": {
        "kubevirt.io/generation": "2",
        "kubevirt.io/install-strategy-identifier": "785522a74afe56a60c761aa46865cbdd654f9d25",
        "kubevirt.io/install-strategy-registry": "quay.io/kubevirt",
        "kubevirt.io/install-strategy-version": "v1.6.0"
      },
      "served_versions": [
        "v1alpha1",
        "v1beta1"
      ],
      "stored_version": "v1beta1",
      "categories": [
        "all"
      ],
      "short_names": [
        "vmsnapshotcontent",
        "vmsnapshotcontents"
      ],
      "description": null,
      "instance_count": 0
    },
    {
      "name": "virtualmachinesnapshots.snapshot.kubevirt.io",
      "group": "snapshot.kubevirt.io",
      "version": "v1beta1",
      "kind": "VirtualMachineSnapshot",
      "plural": "virtualmachinesnapshots",
      "singular": "virtualmachinesnapshot",
      "scope": "Namespaced",
      "creation_timestamp": "2025-09-06T13:01:04+00:00",
      "labels": {
        "app.kubernetes.io/component": "compute",
        "app.kubernetes.io/managed-by": "virt-operator",
        "app.kubernetes.io/part-of": "hyperconverged-cluster",
        "app.kubernetes.io/version": "1.17.0",
        "kubevirt.io": ""
      },
      "annotations": {
        "kubevirt.io/generation": "2",
        "kubevirt.io/install-strategy-identifier": "785522a74afe56a60c761aa46865cbdd654f9d25",
        "kubevirt.io/install-strategy-registry": "quay.io/kubevirt",
        "kubevirt.io/install-strategy-version": "v1.6.0"
      },
      "served_versions": [
        "v1alpha1",
        "v1beta1"
      ],
      "stored_version": "v1beta1",
      "categories": [
        "all"
      ],
      "short_names": [
        "vmsnapshot",
        "vmsnapshots"
      ],
      "description": null,
      "instance_count": 0
    },
    {
      "name": "volumeclonesources.cdi.kubevirt.io",
      "group": "cdi.kubevirt.io",
      "version": "v1beta1",
      "kind": "VolumeCloneSource",
      "plural": "volumeclonesources",
      "singular": "volumeclonesource",
      "scope": "Namespaced",
      "creation_timestamp": "2025-09-06T13:01:11+00:00",
      "labels": {
        "app.kubernetes.io/part-of": "hyperconverged-cluster",
        "app.kubernetes.io/version": "1.17.0",
        "operator.cdi.kubevirt.io/createVersion": "v1.63.0"
      },
      "annotations": {
        "controller-gen.kubebuilder.io/version": "v0.14.0",
        "operator.cdi.kubevirt.io/lastAppliedConfiguration": "{\"kind\":\"CustomResourceDefinition\",\"apiVersion\":\"apiextensions.k8s.io/v1\",\"metadata\":{\"name\":\"volumeclonesources.cdi.kubevirt.io\",\"creationTimestamp\":null,\"annotations\":{\"controller-gen.kubebuilder.io/version\":\"v0.14.0\"}},\"spec\":{\"group\":\"cdi.kubevirt.io\",\"names\":{\"plural\":\"volumeclonesources\",\"singular\":\"volumeclonesource\",\"kind\":\"VolumeCloneSource\",\"listKind\":\"VolumeCloneSourceList\"},\"scope\":\"Namespaced\",\"versions\":[{\"name\":\"v1beta1\",\"served\":true,\"storage\":true,\"schema\":{\"openAPIV3Schema\":{\"description\":\"VolumeCloneSource refers to a PVC/VolumeSnapshot of any storageclass/volumemode\\nto be used as the source of a new PVC\",\"type\":\"object\",\"required\":[\"spec\"],\"properties\":{\"apiVersion\":{\"description\":\"APIVersion defines the versioned schema of this representation of an object.\\nServers should convert recognized schemas to the latest internal value, and\\nmay reject unrecognized values.\\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources\",\"type\":\"string\"},\"kind\":{\"description\":\"Kind is a string value representing the REST resource this object represents.\\nServers may infer this from the endpoint the client submits requests to.\\nCannot be updated.\\nIn CamelCase.\\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\",\"type\":\"string\"},\"metadata\":{\"type\":\"object\"},\"spec\":{\"description\":\"VolumeCloneSourceSpec defines the Spec field for VolumeCloneSource\",\"type\":\"object\",\"required\":[\"source\"],\"properties\":{\"preallocation\":{\"description\":\"Preallocation controls whether storage for the target PVC should be allocated in advance.\",\"type\":\"boolean\"},\"priorityClassName\":{\"description\":\"PriorityClassName is the priorityclass for the claim\",\"type\":\"string\"},\"source\":{\"description\":\"Source is the src of the data to be cloned to the target PVC\",\"type\":\"object\",\"required\":[\"kind\",\"name\"],\"properties\":{\"apiGroup\":{\"description\":\"APIGroup is the group for the resource being referenced.\\nIf APIGroup is not specified, the specified Kind must be in the core API group.\\nFor any other third-party types, APIGroup is required.\",\"type\":\"string\"},\"kind\":{\"description\":\"Kind is the type of resource being referenced\",\"type\":\"string\"},\"name\":{\"description\":\"Name is the name of resource being referenced\",\"type\":\"string\"}},\"x-kubernetes-map-type\":\"atomic\"}}}}}}}]},\"status\":{\"conditions\":null,\"acceptedNames\":{\"plural\":\"\",\"kind\":\"\"},\"storedVersions\":null}}"
      },
      "served_versions": [
        "v1beta1"
      ],
      "stored_version": "v1beta1",
      "categories": [],
      "short_names": [],
      "description": null,
      "instance_count": 0
    },
    {
      "name": "volumeimportsources.cdi.kubevirt.io",
      "group": "cdi.kubevirt.io",
      "version": "v1beta1",
      "kind": "VolumeImportSource",
      "plural": "volumeimportsources",
      "singular": "volumeimportsource",
      "scope": "Namespaced",
      "creation_timestamp": "2025-09-06T13:01:11+00:00",
      "labels": {
        "app.kubernetes.io/part-of": "hyperconverged-cluster",
        "app.kubernetes.io/version": "1.17.0",
        "operator.cdi.kubevirt.io/createVersion": "v1.63.0"
      },
      "annotations": {
        "controller-gen.kubebuilder.io/version": "v0.14.0",
        "operator.cdi.kubevirt.io/lastAppliedConfiguration": "{\"kind\":\"CustomResourceDefinition\",\"apiVersion\":\"apiextensions.k8s.io/v1\",\"metadata\":{\"name\":\"volumeimportsources.cdi.kubevirt.io\",\"creationTimestamp\":null,\"annotations\":{\"controller-gen.kubebuilder.io/version\":\"v0.14.0\"}},\"spec\":{\"group\":\"cdi.kubevirt.io\",\"names\":{\"plural\":\"volumeimportsources\",\"singular\":\"volumeimportsource\",\"kind\":\"VolumeImportSource\",\"listKind\":\"VolumeImportSourceList\"},\"scope\":\"Namespaced\",\"versions\":[{\"name\":\"v1beta1\",\"served\":true,\"storage\":true,\"schema\":{\"openAPIV3Schema\":{\"description\":\"VolumeImportSource works as a specification to populate PersistentVolumeClaims with data\\nimported from an HTTP/S3/Registry/Blank/ImageIO/VDDK source\",\"type\":\"object\",\"required\":[\"spec\"],\"properties\":{\"apiVersion\":{\"description\":\"APIVersion defines the versioned schema of this representation of an object.\\nServers should convert recognized schemas to the latest internal value, and\\nmay reject unrecognized values.\\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources\",\"type\":\"string\"},\"kind\":{\"description\":\"Kind is a string value representing the REST resource this object represents.\\nServers may infer this from the endpoint the client submits requests to.\\nCannot be updated.\\nIn CamelCase.\\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\",\"type\":\"string\"},\"metadata\":{\"type\":\"object\"},\"spec\":{\"description\":\"VolumeImportSourceSpec defines the Spec field for VolumeImportSource\",\"type\":\"object\",\"properties\":{\"checkpoints\":{\"description\":\"Checkpoints is a list of DataVolumeCheckpoints, representing stages in a multistage import.\",\"type\":\"array\",\"items\":{\"description\":\"DataVolumeCheckpoint defines a stage in a warm migration.\",\"type\":\"object\",\"required\":[\"current\",\"previous\"],\"properties\":{\"current\":{\"description\":\"Current is the identifier of the snapshot created for this checkpoint.\",\"type\":\"string\"},\"previous\":{\"description\":\"Previous is the identifier of the snapshot from the previous checkpoint.\",\"type\":\"string\"}}}},\"contentType\":{\"description\":\"ContentType represents the type of the imported data (Kubevirt or archive)\",\"type\":\"string\"},\"finalCheckpoint\":{\"description\":\"FinalCheckpoint indicates whether the current DataVolumeCheckpoint is the final checkpoint.\",\"type\":\"boolean\"},\"preallocation\":{\"description\":\"Preallocation controls whether storage for the target PVC should be allocated in advance.\",\"type\":\"boolean\"},\"source\":{\"description\":\"Source is the src of the data to be imported in the target PVC\",\"type\":\"object\",\"properties\":{\"blank\":{\"description\":\"DataVolumeBlankImage provides the parameters to create a new raw blank image for the PVC\",\"type\":\"object\"},\"gcs\":{\"description\":\"DataVolumeSourceGCS provides the parameters to create a Data Volume from an GCS source\",\"type\":\"object\",\"required\":[\"url\"],\"properties\":{\"secretRef\":{\"description\":\"SecretRef provides the secret reference needed to access the GCS source\",\"type\":\"string\"},\"url\":{\"description\":\"URL is the url of the GCS source\",\"type\":\"string\"}}},\"http\":{\"description\":\"DataVolumeSourceHTTP can be either an http or https endpoint, with an optional basic auth user name and password, and an optional configmap containing additional CAs\",\"type\":\"object\",\"required\":[\"url\"],\"properties\":{\"certConfigMap\":{\"description\":\"CertConfigMap is a configmap reference, containing a Certificate Authority(CA) public key, and a base64 encoded pem certificate\",\"type\":\"string\"},\"extraHeaders\":{\"description\":\"ExtraHeaders is a list of strings containing extra headers to include with HTTP transfer requests\",\"type\":\"array\",\"items\":{\"type\":\"string\"}},\"secretExtraHeaders\":{\"description\":\"SecretExtraHeaders is a list of Secret references, each containing an extra HTTP header that may include sensitive information\",\"type\":\"array\",\"items\":{\"type\":\"string\"}},\"secretRef\":{\"description\":\"SecretRef A Secret reference, the secret should contain accessKeyId (user name) base64 encoded, and secretKey (password) also base64 encoded\",\"type\":\"string\"},\"url\":{\"description\":\"URL is the URL of the http(s) endpoint\",\"type\":\"string\"}}},\"imageio\":{\"description\":\"DataVolumeSourceImageIO provides the parameters to create a Data Volume from an imageio source\",\"type\":\"object\",\"required\":[\"diskId\",\"url\"],\"properties\":{\"certConfigMap\":{\"description\":\"CertConfigMap provides a reference to the CA cert\",\"type\":\"string\"},\"diskId\":{\"description\":\"DiskID provides id of a disk to be imported\",\"type\":\"string\"},\"secretRef\":{\"description\":\"SecretRef provides the secret reference needed to access the ovirt-engine\",\"type\":\"string\"},\"url\":{\"description\":\"URL is the URL of the ovirt-engine\",\"type\":\"string\"}}},\"registry\":{\"description\":\"DataVolumeSourceRegistry provides the parameters to create a Data Volume from an registry source\",\"type\":\"object\",\"properties\":{\"certConfigMap\":{\"description\":\"CertConfigMap provides a reference to the Registry certs\",\"type\":\"string\"},\"imageStream\":{\"description\":\"ImageStream is the name of image stream for import\",\"type\":\"string\"},\"platform\":{\"description\":\"Platform describes the minimum runtime requirements of the image\",\"type\":\"object\",\"properties\":{\"architecture\":{\"description\":\"Architecture specifies the image target CPU architecture\",\"type\":\"string\"}}},\"pullMethod\":{\"description\":\"PullMethod can be either \\\"pod\\\" (default import), or \\\"node\\\" (node docker cache based import)\",\"type\":\"string\"},\"secretRef\":{\"description\":\"SecretRef provides the secret reference needed to access the Registry source\",\"type\":\"string\"},\"url\":{\"description\":\"URL is the url of the registry source (starting with the scheme: docker, oci-archive)\",\"type\":\"string\"}}},\"s3\":{\"description\":\"DataVolumeSourceS3 provides the parameters to create a Data Volume from an S3 source\",\"type\":\"object\",\"required\":[\"url\"],\"properties\":{\"certConfigMap\":{\"description\":\"CertConfigMap is a configmap reference, containing a Certificate Authority(CA) public key, and a base64 encoded pem certificate\",\"type\":\"string\"},\"secretRef\":{\"description\":\"SecretRef provides the secret reference needed to access the S3 source\",\"type\":\"string\"},\"url\":{\"description\":\"URL is the url of the S3 source\",\"type\":\"string\"}}},\"vddk\":{\"description\":\"DataVolumeSourceVDDK provides the parameters to create a Data Volume from a Vmware source\",\"type\":\"object\",\"properties\":{\"backingFile\":{\"description\":\"BackingFile is the path to the virtual hard disk to migrate from vCenter/ESXi\",\"type\":\"string\"},\"extraArgs\":{\"description\":\"ExtraArgs is a reference to a ConfigMap containing extra arguments to pass directly to the VDDK library\",\"type\":\"string\"},\"initImageURL\":{\"description\":\"InitImageURL is an optional URL to an image containing an extracted VDDK library, overrides v2v-vmware config map\",\"type\":\"string\"},\"secretRef\":{\"description\":\"SecretRef provides a reference to a secret containing the username and password needed to access the vCenter or ESXi host\",\"type\":\"string\"},\"thumbprint\":{\"description\":\"Thumbprint is the certificate thumbprint of the vCenter or ESXi host\",\"type\":\"string\"},\"url\":{\"description\":\"URL is the URL of the vCenter or ESXi host with the VM to migrate\",\"type\":\"string\"},\"uuid\":{\"description\":\"UUID is the UUID of the virtual machine that the backing file is attached to in vCenter/ESXi\",\"type\":\"string\"}}}}},\"targetClaim\":{\"description\":\"TargetClaim the name of the specific claim to be populated with a multistage import.\",\"type\":\"string\"}}},\"status\":{\"description\":\"VolumeImportSourceStatus provides the most recently observed status of the VolumeImportSource\",\"type\":\"object\"}}}}}]},\"status\":{\"conditions\":null,\"acceptedNames\":{\"plural\":\"\",\"kind\":\"\"},\"storedVersions\":null}}"
      },
      "served_versions": [
        "v1beta1"
      ],
      "stored_version": "v1beta1",
      "categories": [],
      "short_names": [],
      "description": null,
      "instance_count": 0
    },
    {
      "name": "volumeuploadsources.cdi.kubevirt.io",
      "group": "cdi.kubevirt.io",
      "version": "v1beta1",
      "kind": "VolumeUploadSource",
      "plural": "volumeuploadsources",
      "singular": "volumeuploadsource",
      "scope": "Namespaced",
      "creation_timestamp": "2025-09-06T13:01:11+00:00",
      "labels": {
        "app.kubernetes.io/part-of": "hyperconverged-cluster",
        "app.kubernetes.io/version": "1.17.0",
        "operator.cdi.kubevirt.io/createVersion": "v1.63.0"
      },
      "annotations": {
        "controller-gen.kubebuilder.io/version": "v0.14.0",
        "operator.cdi.kubevirt.io/lastAppliedConfiguration": "{\"kind\":\"CustomResourceDefinition\",\"apiVersion\":\"apiextensions.k8s.io/v1\",\"metadata\":{\"name\":\"volumeuploadsources.cdi.kubevirt.io\",\"creationTimestamp\":null,\"annotations\":{\"controller-gen.kubebuilder.io/version\":\"v0.14.0\"}},\"spec\":{\"group\":\"cdi.kubevirt.io\",\"names\":{\"plural\":\"volumeuploadsources\",\"singular\":\"volumeuploadsource\",\"kind\":\"VolumeUploadSource\",\"listKind\":\"VolumeUploadSourceList\"},\"scope\":\"Namespaced\",\"versions\":[{\"name\":\"v1beta1\",\"served\":true,\"storage\":true,\"schema\":{\"openAPIV3Schema\":{\"description\":\"VolumeUploadSource is a specification to populate PersistentVolumeClaims with upload data\",\"type\":\"object\",\"required\":[\"spec\"],\"properties\":{\"apiVersion\":{\"description\":\"APIVersion defines the versioned schema of this representation of an object.\\nServers should convert recognized schemas to the latest internal value, and\\nmay reject unrecognized values.\\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources\",\"type\":\"string\"},\"kind\":{\"description\":\"Kind is a string value representing the REST resource this object represents.\\nServers may infer this from the endpoint the client submits requests to.\\nCannot be updated.\\nIn CamelCase.\\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\",\"type\":\"string\"},\"metadata\":{\"type\":\"object\"},\"spec\":{\"description\":\"VolumeUploadSourceSpec defines specification for VolumeUploadSource\",\"type\":\"object\",\"properties\":{\"contentType\":{\"description\":\"ContentType represents the type of the upload data (Kubevirt or archive)\",\"type\":\"string\"},\"preallocation\":{\"description\":\"Preallocation controls whether storage for the target PVC should be allocated in advance.\",\"type\":\"boolean\"}}},\"status\":{\"description\":\"VolumeUploadSourceStatus provides the most recently observed status of the VolumeUploadSource\",\"type\":\"object\"}}}}}]},\"status\":{\"conditions\":null,\"acceptedNames\":{\"plural\":\"\",\"kind\":\"\"},\"storedVersions\":null}}"
      },
      "served_versions": [
        "v1beta1"
      ],
      "stored_version": "v1beta1",
      "categories": [],
      "short_names": [],
      "description": null,
      "instance_count": 0
    },
    {
      "name": "workflows.github.kog.krateo.io",
      "group": "github.kog.krateo.io",
      "version": "v1alpha1",
      "kind": "Workflow",
      "plural": "workflows",
      "singular": "workflow",
      "scope": "Namespaced",
      "creation_timestamp": "2025-09-06T10:23:18+00:00",
      "labels": {},
      "annotations": {
        "controller-gen.kubebuilder.io/version": "v0.16.1"
      },
      "served_versions": [
        "v1alpha1"
      ],
      "stored_version": "v1alpha1",
      "categories": [
        "workflow",
        "restresources",
        "rr"
      ],
      "short_names": [],
      "description": null,
      "instance_count": 0
    },
    {
      "name": "yamlviewers.widgets.templates.krateo.io",
      "group": "widgets.templates.krateo.io",
      "version": "v1beta1",
      "kind": "YamlViewer",
      "plural": "yamlviewers",
      "singular": "yamlviewer",
      "scope": "Namespaced",
      "creation_timestamp": "2025-09-06T09:46:48+00:00",
      "labels": {},
      "annotations": {
        "controller-gen.kubebuilder.io/version": "v0.16.1"
      },
      "served_versions": [
        "v1beta1"
      ],
      "stored_version": "v1beta1",
      "categories": [
        "widgets",
        "krateo"
      ],
      "short_names": [],
      "description": null,
      "instance_count": 0
    },
    {
      "name": "zookeeperversions.catalog.kubedb.com",
      "group": "catalog.kubedb.com",
      "version": "v1alpha1",
      "kind": "ZooKeeperVersion",
      "plural": "zookeeperversions",
      "singular": "zookeeperversion",
      "scope": "Cluster",
      "creation_timestamp": "2025-09-06T13:33:51+00:00",
      "labels": {
        "app.kubernetes.io/name": "kubedb"
      },
      "annotations": {},
      "served_versions": [
        "v1alpha1"
      ],
      "stored_version": "v1alpha1",
      "categories": [
        "catalog",
        "kubedb",
        "appscode"
      ],
      "short_names": [
        "zkversion"
      ],
      "description": null,
      "instance_count": 0
    }
  ]
}